// This file is generated by rust-protobuf 2.10.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `epl/protobuf/query.proto`

// NOTE: THE FOLLOWING LINE WAS HAND-WRITTEN, DO NOT OMIT
use serde::{Deserialize, Serialize};
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct FloatField {
    // message fields
    pub value: f32,
    pub rel_type: FieldRelationship,
    pub start: f32,
    pub stop: f32,
    pub sort_direction: SortDirection,
    pub set: ::std::vec::Vec<f32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FloatField {
    fn default() -> &'a FloatField {
        <FloatField as ::protobuf::Message>::default_instance()
    }
}

impl FloatField {
    pub fn new() -> FloatField {
        ::std::default::Default::default()
    }

    // float value = 1;


    pub fn get_value(&self) -> f32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f32) {
        self.value = v;
    }

    // .epl.protobuf.FieldRelationship rel_type = 2;


    pub fn get_rel_type(&self) -> FieldRelationship {
        self.rel_type
    }
    pub fn clear_rel_type(&mut self) {
        self.rel_type = FieldRelationship::EQ;
    }

    // Param is passed by value, moved
    pub fn set_rel_type(&mut self, v: FieldRelationship) {
        self.rel_type = v;
    }

    // float start = 3;


    pub fn get_start(&self) -> f32 {
        self.start
    }
    pub fn clear_start(&mut self) {
        self.start = 0.;
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: f32) {
        self.start = v;
    }

    // float stop = 4;


    pub fn get_stop(&self) -> f32 {
        self.stop
    }
    pub fn clear_stop(&mut self) {
        self.stop = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: f32) {
        self.stop = v;
    }

    // .epl.protobuf.SortDirection sort_direction = 5;


    pub fn get_sort_direction(&self) -> SortDirection {
        self.sort_direction
    }
    pub fn clear_sort_direction(&mut self) {
        self.sort_direction = SortDirection::NOT_SORTED;
    }

    // Param is passed by value, moved
    pub fn set_sort_direction(&mut self, v: SortDirection) {
        self.sort_direction = v;
    }

    // repeated float set = 6;


    pub fn get_set(&self) -> &[f32] {
        &self.set
    }
    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ::std::vec::Vec<f32>) {
        self.set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.set
    }

    // Take field
    pub fn take_set(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.set, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for FloatField {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.start = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.stop = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sort_direction, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 5;
        }
        if self.rel_type != FieldRelationship::EQ {
            my_size += ::protobuf::rt::enum_size(2, self.rel_type);
        }
        if self.start != 0. {
            my_size += 5;
        }
        if self.stop != 0. {
            my_size += 5;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            my_size += ::protobuf::rt::enum_size(5, self.sort_direction);
        }
        my_size += 5 * self.set.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_float(1, self.value)?;
        }
        if self.rel_type != FieldRelationship::EQ {
            os.write_enum(2, self.rel_type.value())?;
        }
        if self.start != 0. {
            os.write_float(3, self.start)?;
        }
        if self.stop != 0. {
            os.write_float(4, self.stop)?;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            os.write_enum(5, self.sort_direction.value())?;
        }
        for v in &self.set {
            os.write_float(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FloatField {
        FloatField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "value",
                    |m: &FloatField| { &m.value },
                    |m: &mut FloatField| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldRelationship>>(
                    "rel_type",
                    |m: &FloatField| { &m.rel_type },
                    |m: &mut FloatField| { &mut m.rel_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "start",
                    |m: &FloatField| { &m.start },
                    |m: &mut FloatField| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "stop",
                    |m: &FloatField| { &m.stop },
                    |m: &mut FloatField| { &mut m.stop },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SortDirection>>(
                    "sort_direction",
                    |m: &FloatField| { &m.sort_direction },
                    |m: &mut FloatField| { &mut m.sort_direction },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "set",
                    |m: &FloatField| { &m.set },
                    |m: &mut FloatField| { &mut m.set },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FloatField>(
                    "FloatField",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FloatField {
        static mut instance: ::protobuf::lazy::Lazy<FloatField> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FloatField,
        };
        unsafe {
            instance.get(FloatField::new)
        }
    }
}

impl ::protobuf::Clear for FloatField {
    fn clear(&mut self) {
        self.value = 0.;
        self.rel_type = FieldRelationship::EQ;
        self.start = 0.;
        self.stop = 0.;
        self.sort_direction = SortDirection::NOT_SORTED;
        self.set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FloatField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FloatField {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DoubleField {
    // message fields
    pub value: f64,
    pub rel_type: FieldRelationship,
    pub start: f64,
    pub stop: f64,
    pub sort_direction: SortDirection,
    pub set: ::std::vec::Vec<f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DoubleField {
    fn default() -> &'a DoubleField {
        <DoubleField as ::protobuf::Message>::default_instance()
    }
}

impl DoubleField {
    pub fn new() -> DoubleField {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // .epl.protobuf.FieldRelationship rel_type = 2;


    pub fn get_rel_type(&self) -> FieldRelationship {
        self.rel_type
    }
    pub fn clear_rel_type(&mut self) {
        self.rel_type = FieldRelationship::EQ;
    }

    // Param is passed by value, moved
    pub fn set_rel_type(&mut self, v: FieldRelationship) {
        self.rel_type = v;
    }

    // double start = 3;


    pub fn get_start(&self) -> f64 {
        self.start
    }
    pub fn clear_start(&mut self) {
        self.start = 0.;
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: f64) {
        self.start = v;
    }

    // double stop = 4;


    pub fn get_stop(&self) -> f64 {
        self.stop
    }
    pub fn clear_stop(&mut self) {
        self.stop = 0.;
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: f64) {
        self.stop = v;
    }

    // .epl.protobuf.SortDirection sort_direction = 5;


    pub fn get_sort_direction(&self) -> SortDirection {
        self.sort_direction
    }
    pub fn clear_sort_direction(&mut self) {
        self.sort_direction = SortDirection::NOT_SORTED;
    }

    // Param is passed by value, moved
    pub fn set_sort_direction(&mut self, v: SortDirection) {
        self.sort_direction = v;
    }

    // repeated double set = 6;


    pub fn get_set(&self) -> &[f64] {
        &self.set
    }
    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ::std::vec::Vec<f64>) {
        self.set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.set
    }

    // Take field
    pub fn take_set(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.set, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DoubleField {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.start = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stop = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sort_direction, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        if self.rel_type != FieldRelationship::EQ {
            my_size += ::protobuf::rt::enum_size(2, self.rel_type);
        }
        if self.start != 0. {
            my_size += 9;
        }
        if self.stop != 0. {
            my_size += 9;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            my_size += ::protobuf::rt::enum_size(5, self.sort_direction);
        }
        my_size += 9 * self.set.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if self.rel_type != FieldRelationship::EQ {
            os.write_enum(2, self.rel_type.value())?;
        }
        if self.start != 0. {
            os.write_double(3, self.start)?;
        }
        if self.stop != 0. {
            os.write_double(4, self.stop)?;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            os.write_enum(5, self.sort_direction.value())?;
        }
        for v in &self.set {
            os.write_double(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DoubleField {
        DoubleField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "value",
                    |m: &DoubleField| { &m.value },
                    |m: &mut DoubleField| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldRelationship>>(
                    "rel_type",
                    |m: &DoubleField| { &m.rel_type },
                    |m: &mut DoubleField| { &mut m.rel_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "start",
                    |m: &DoubleField| { &m.start },
                    |m: &mut DoubleField| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "stop",
                    |m: &DoubleField| { &m.stop },
                    |m: &mut DoubleField| { &mut m.stop },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SortDirection>>(
                    "sort_direction",
                    |m: &DoubleField| { &m.sort_direction },
                    |m: &mut DoubleField| { &mut m.sort_direction },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "set",
                    |m: &DoubleField| { &m.set },
                    |m: &mut DoubleField| { &mut m.set },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DoubleField>(
                    "DoubleField",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DoubleField {
        static mut instance: ::protobuf::lazy::Lazy<DoubleField> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DoubleField,
        };
        unsafe {
            instance.get(DoubleField::new)
        }
    }
}

impl ::protobuf::Clear for DoubleField {
    fn clear(&mut self) {
        self.value = 0.;
        self.rel_type = FieldRelationship::EQ;
        self.start = 0.;
        self.stop = 0.;
        self.sort_direction = SortDirection::NOT_SORTED;
        self.set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DoubleField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoubleField {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct TimestampField {
    // message fields
    pub value: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub rel_type: FieldRelationship,
    pub start: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub stop: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub sort_direction: SortDirection,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimestampField {
    fn default() -> &'a TimestampField {
        <TimestampField as ::protobuf::Message>::default_instance()
    }
}

impl TimestampField {
    pub fn new() -> TimestampField {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp value = 1;


    pub fn get_value(&self) -> &::protobuf::well_known_types::Timestamp {
        self.value.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.value.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .epl.protobuf.FieldRelationship rel_type = 2;


    pub fn get_rel_type(&self) -> FieldRelationship {
        self.rel_type
    }
    pub fn clear_rel_type(&mut self) {
        self.rel_type = FieldRelationship::EQ;
    }

    // Param is passed by value, moved
    pub fn set_rel_type(&mut self, v: FieldRelationship) {
        self.rel_type = v;
    }

    // .google.protobuf.Timestamp start = 3;


    pub fn get_start(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp stop = 4;


    pub fn get_stop(&self) -> &::protobuf::well_known_types::Timestamp {
        self.stop.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_stop(&mut self) {
        self.stop.clear();
    }

    pub fn has_stop(&self) -> bool {
        self.stop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.stop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.stop.is_none() {
            self.stop.set_default();
        }
        self.stop.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.stop.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .epl.protobuf.SortDirection sort_direction = 5;


    pub fn get_sort_direction(&self) -> SortDirection {
        self.sort_direction
    }
    pub fn clear_sort_direction(&mut self) {
        self.sort_direction = SortDirection::NOT_SORTED;
    }

    // Param is passed by value, moved
    pub fn set_sort_direction(&mut self, v: SortDirection) {
        self.sort_direction = v;
    }
}

impl ::protobuf::Message for TimestampField {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sort_direction, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rel_type != FieldRelationship::EQ {
            my_size += ::protobuf::rt::enum_size(2, self.rel_type);
        }
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            my_size += ::protobuf::rt::enum_size(5, self.sort_direction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rel_type != FieldRelationship::EQ {
            os.write_enum(2, self.rel_type.value())?;
        }
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            os.write_enum(5, self.sort_direction.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimestampField {
        TimestampField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "value",
                    |m: &TimestampField| { &m.value },
                    |m: &mut TimestampField| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldRelationship>>(
                    "rel_type",
                    |m: &TimestampField| { &m.rel_type },
                    |m: &mut TimestampField| { &mut m.rel_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "start",
                    |m: &TimestampField| { &m.start },
                    |m: &mut TimestampField| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "stop",
                    |m: &TimestampField| { &m.stop },
                    |m: &mut TimestampField| { &mut m.stop },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SortDirection>>(
                    "sort_direction",
                    |m: &TimestampField| { &m.sort_direction },
                    |m: &mut TimestampField| { &mut m.sort_direction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimestampField>(
                    "TimestampField",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TimestampField {
        static mut instance: ::protobuf::lazy::Lazy<TimestampField> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimestampField,
        };
        unsafe {
            instance.get(TimestampField::new)
        }
    }
}

impl ::protobuf::Clear for TimestampField {
    fn clear(&mut self) {
        self.value.clear();
        self.rel_type = FieldRelationship::EQ;
        self.start.clear();
        self.stop.clear();
        self.sort_direction = SortDirection::NOT_SORTED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimestampField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampField {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct UInt32Field {
    // message fields
    pub value: u32,
    pub rel_type: FieldRelationship,
    pub start: u32,
    pub stop: u32,
    pub sort_direction: SortDirection,
    pub set: ::std::vec::Vec<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UInt32Field {
    fn default() -> &'a UInt32Field {
        <UInt32Field as ::protobuf::Message>::default_instance()
    }
}

impl UInt32Field {
    pub fn new() -> UInt32Field {
        ::std::default::Default::default()
    }

    // uint32 value = 1;


    pub fn get_value(&self) -> u32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = v;
    }

    // .epl.protobuf.FieldRelationship rel_type = 2;


    pub fn get_rel_type(&self) -> FieldRelationship {
        self.rel_type
    }
    pub fn clear_rel_type(&mut self) {
        self.rel_type = FieldRelationship::EQ;
    }

    // Param is passed by value, moved
    pub fn set_rel_type(&mut self, v: FieldRelationship) {
        self.rel_type = v;
    }

    // uint32 start = 3;


    pub fn get_start(&self) -> u32 {
        self.start
    }
    pub fn clear_start(&mut self) {
        self.start = 0;
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u32) {
        self.start = v;
    }

    // uint32 stop = 4;


    pub fn get_stop(&self) -> u32 {
        self.stop
    }
    pub fn clear_stop(&mut self) {
        self.stop = 0;
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: u32) {
        self.stop = v;
    }

    // .epl.protobuf.SortDirection sort_direction = 5;


    pub fn get_sort_direction(&self) -> SortDirection {
        self.sort_direction
    }
    pub fn clear_sort_direction(&mut self) {
        self.sort_direction = SortDirection::NOT_SORTED;
    }

    // Param is passed by value, moved
    pub fn set_sort_direction(&mut self, v: SortDirection) {
        self.sort_direction = v;
    }

    // repeated uint32 set = 6;


    pub fn get_set(&self) -> &[u32] {
        &self.set
    }
    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ::std::vec::Vec<u32>) {
        self.set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.set
    }

    // Take field
    pub fn take_set(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.set, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UInt32Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.start = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stop = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sort_direction, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(1, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rel_type != FieldRelationship::EQ {
            my_size += ::protobuf::rt::enum_size(2, self.rel_type);
        }
        if self.start != 0 {
            my_size += ::protobuf::rt::value_size(3, self.start, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.stop != 0 {
            my_size += ::protobuf::rt::value_size(4, self.stop, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            my_size += ::protobuf::rt::enum_size(5, self.sort_direction);
        }
        for value in &self.set {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0 {
            os.write_uint32(1, self.value)?;
        }
        if self.rel_type != FieldRelationship::EQ {
            os.write_enum(2, self.rel_type.value())?;
        }
        if self.start != 0 {
            os.write_uint32(3, self.start)?;
        }
        if self.stop != 0 {
            os.write_uint32(4, self.stop)?;
        }
        if self.sort_direction != SortDirection::NOT_SORTED {
            os.write_enum(5, self.sort_direction.value())?;
        }
        for v in &self.set {
            os.write_uint32(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UInt32Field {
        UInt32Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "value",
                    |m: &UInt32Field| { &m.value },
                    |m: &mut UInt32Field| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldRelationship>>(
                    "rel_type",
                    |m: &UInt32Field| { &m.rel_type },
                    |m: &mut UInt32Field| { &mut m.rel_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "start",
                    |m: &UInt32Field| { &m.start },
                    |m: &mut UInt32Field| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "stop",
                    |m: &UInt32Field| { &m.stop },
                    |m: &mut UInt32Field| { &mut m.stop },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SortDirection>>(
                    "sort_direction",
                    |m: &UInt32Field| { &m.sort_direction },
                    |m: &mut UInt32Field| { &mut m.sort_direction },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "set",
                    |m: &UInt32Field| { &m.set },
                    |m: &mut UInt32Field| { &mut m.set },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UInt32Field>(
                    "UInt32Field",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UInt32Field {
        static mut instance: ::protobuf::lazy::Lazy<UInt32Field> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UInt32Field,
        };
        unsafe {
            instance.get(UInt32Field::new)
        }
    }
}

impl ::protobuf::Clear for UInt32Field {
    fn clear(&mut self) {
        self.value = 0;
        self.rel_type = FieldRelationship::EQ;
        self.start = 0;
        self.stop = 0;
        self.sort_direction = SortDirection::NOT_SORTED;
        self.set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UInt32Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UInt32Field {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct StringField {
    // message fields
    pub value: ::std::string::String,
    pub rel_type: FieldRelationship,
    pub set: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringField {
    fn default() -> &'a StringField {
        <StringField as ::protobuf::Message>::default_instance()
    }
}

impl StringField {
    pub fn new() -> StringField {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // .epl.protobuf.FieldRelationship rel_type = 2;


    pub fn get_rel_type(&self) -> FieldRelationship {
        self.rel_type
    }
    pub fn clear_rel_type(&mut self) {
        self.rel_type = FieldRelationship::EQ;
    }

    // Param is passed by value, moved
    pub fn set_rel_type(&mut self, v: FieldRelationship) {
        self.rel_type = v;
    }

    // repeated string set = 6;


    pub fn get_set(&self) -> &[::std::string::String] {
        &self.set
    }
    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.set
    }

    // Take field
    pub fn take_set(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.set, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringField {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rel_type, 2, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if self.rel_type != FieldRelationship::EQ {
            my_size += ::protobuf::rt::enum_size(2, self.rel_type);
        }
        for value in &self.set {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if self.rel_type != FieldRelationship::EQ {
            os.write_enum(2, self.rel_type.value())?;
        }
        for v in &self.set {
            os.write_string(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringField {
        StringField::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &StringField| { &m.value },
                    |m: &mut StringField| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldRelationship>>(
                    "rel_type",
                    |m: &StringField| { &m.rel_type },
                    |m: &mut StringField| { &mut m.rel_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "set",
                    |m: &StringField| { &m.set },
                    |m: &mut StringField| { &mut m.set },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StringField>(
                    "StringField",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringField {
        static mut instance: ::protobuf::lazy::Lazy<StringField> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StringField,
        };
        unsafe {
            instance.get(StringField::new)
        }
    }
}

impl ::protobuf::Clear for StringField {
    fn clear(&mut self) {
        self.value.clear();
        self.rel_type = FieldRelationship::EQ;
        self.set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringField {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringField {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum SortDirection {
    NOT_SORTED = 0,
    DESC = 1,
    ASC = 2,
}

impl ::protobuf::ProtobufEnum for SortDirection {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SortDirection> {
        match value {
            0 => ::std::option::Option::Some(SortDirection::NOT_SORTED),
            1 => ::std::option::Option::Some(SortDirection::DESC),
            2 => ::std::option::Option::Some(SortDirection::ASC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SortDirection] = &[
            SortDirection::NOT_SORTED,
            SortDirection::DESC,
            SortDirection::ASC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SortDirection", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SortDirection {
}

impl ::std::default::Default for SortDirection {
    fn default() -> Self {
        SortDirection::NOT_SORTED
    }
}

impl ::protobuf::reflect::ProtobufValue for SortDirection {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum FieldRelationship {
    EQ = 0,
    LT_OR_EQ = 2,
    GT_OR_EQ = 4,
    LT = 8,
    GT = 16,
    BETWEEN = 32,
    NOT_BETWEEN = 64,
    NOT_EQ = 128,
    IN = 256,
    NOT_IN = 512,
    LIKE = 1024,
    NOT_LIKE = 2048,
}

impl ::protobuf::ProtobufEnum for FieldRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldRelationship> {
        match value {
            0 => ::std::option::Option::Some(FieldRelationship::EQ),
            2 => ::std::option::Option::Some(FieldRelationship::LT_OR_EQ),
            4 => ::std::option::Option::Some(FieldRelationship::GT_OR_EQ),
            8 => ::std::option::Option::Some(FieldRelationship::LT),
            16 => ::std::option::Option::Some(FieldRelationship::GT),
            32 => ::std::option::Option::Some(FieldRelationship::BETWEEN),
            64 => ::std::option::Option::Some(FieldRelationship::NOT_BETWEEN),
            128 => ::std::option::Option::Some(FieldRelationship::NOT_EQ),
            256 => ::std::option::Option::Some(FieldRelationship::IN),
            512 => ::std::option::Option::Some(FieldRelationship::NOT_IN),
            1024 => ::std::option::Option::Some(FieldRelationship::LIKE),
            2048 => ::std::option::Option::Some(FieldRelationship::NOT_LIKE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FieldRelationship] = &[
            FieldRelationship::EQ,
            FieldRelationship::LT_OR_EQ,
            FieldRelationship::GT_OR_EQ,
            FieldRelationship::LT,
            FieldRelationship::GT,
            FieldRelationship::BETWEEN,
            FieldRelationship::NOT_BETWEEN,
            FieldRelationship::NOT_EQ,
            FieldRelationship::IN,
            FieldRelationship::NOT_IN,
            FieldRelationship::LIKE,
            FieldRelationship::NOT_LIKE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FieldRelationship", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FieldRelationship {
}

impl ::std::default::Default for FieldRelationship {
    fn default() -> Self {
        FieldRelationship::EQ
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18epl/protobuf/query.proto\x12\x0cepl.protobuf\x1a\x1fgoogle/protobu\
    f/timestamp.proto\"\xde\x01\n\nFloatField\x12\x14\n\x05value\x18\x01\x20\
    \x01(\x02R\x05value\x12:\n\x08rel_type\x18\x02\x20\x01(\x0e2\x1f.epl.pro\
    tobuf.FieldRelationshipR\x07relType\x12\x14\n\x05start\x18\x03\x20\x01(\
    \x02R\x05start\x12\x12\n\x04stop\x18\x04\x20\x01(\x02R\x04stop\x12B\n\
    \x0esort_direction\x18\x05\x20\x01(\x0e2\x1b.epl.protobuf.SortDirectionR\
    \rsortDirection\x12\x10\n\x03set\x18\x06\x20\x03(\x02R\x03set\"\xdf\x01\
    \n\x0bDoubleField\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\x12:\
    \n\x08rel_type\x18\x02\x20\x01(\x0e2\x1f.epl.protobuf.FieldRelationshipR\
    \x07relType\x12\x14\n\x05start\x18\x03\x20\x01(\x01R\x05start\x12\x12\n\
    \x04stop\x18\x04\x20\x01(\x01R\x04stop\x12B\n\x0esort_direction\x18\x05\
    \x20\x01(\x0e2\x1b.epl.protobuf.SortDirectionR\rsortDirection\x12\x10\n\
    \x03set\x18\x06\x20\x03(\x01R\x03set\"\xa4\x02\n\x0eTimestampField\x120\
    \n\x05value\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x05valu\
    e\x12:\n\x08rel_type\x18\x02\x20\x01(\x0e2\x1f.epl.protobuf.FieldRelatio\
    nshipR\x07relType\x120\n\x05start\x18\x03\x20\x01(\x0b2\x1a.google.proto\
    buf.TimestampR\x05start\x12.\n\x04stop\x18\x04\x20\x01(\x0b2\x1a.google.\
    protobuf.TimestampR\x04stop\x12B\n\x0esort_direction\x18\x05\x20\x01(\
    \x0e2\x1b.epl.protobuf.SortDirectionR\rsortDirection\"\xdf\x01\n\x0bUInt\
    32Field\x12\x14\n\x05value\x18\x01\x20\x01(\rR\x05value\x12:\n\x08rel_ty\
    pe\x18\x02\x20\x01(\x0e2\x1f.epl.protobuf.FieldRelationshipR\x07relType\
    \x12\x14\n\x05start\x18\x03\x20\x01(\rR\x05start\x12\x12\n\x04stop\x18\
    \x04\x20\x01(\rR\x04stop\x12B\n\x0esort_direction\x18\x05\x20\x01(\x0e2\
    \x1b.epl.protobuf.SortDirectionR\rsortDirection\x12\x10\n\x03set\x18\x06\
    \x20\x03(\rR\x03set\"q\n\x0bStringField\x12\x14\n\x05value\x18\x01\x20\
    \x01(\tR\x05value\x12:\n\x08rel_type\x18\x02\x20\x01(\x0e2\x1f.epl.proto\
    buf.FieldRelationshipR\x07relType\x12\x10\n\x03set\x18\x06\x20\x03(\tR\
    \x03set*2\n\rSortDirection\x12\x0e\n\nNOT_SORTED\x10\0\x12\x08\n\x04DESC\
    \x10\x01\x12\x07\n\x03ASC\x10\x02*\xa2\x01\n\x11FieldRelationship\x12\
    \x06\n\x02EQ\x10\0\x12\x0c\n\x08LT_OR_EQ\x10\x02\x12\x0c\n\x08GT_OR_EQ\
    \x10\x04\x12\x06\n\x02LT\x10\x08\x12\x06\n\x02GT\x10\x10\x12\x0b\n\x07BE\
    TWEEN\x10\x20\x12\x0f\n\x0bNOT_BETWEEN\x10@\x12\x0b\n\x06NOT_EQ\x10\x80\
    \x01\x12\x07\n\x02IN\x10\x80\x02\x12\x0b\n\x06NOT_IN\x10\x80\x04\x12\t\n\
    \x04LIKE\x10\x80\x08\x12\r\n\x08NOT_LIKE\x10\x80\x10BS\n\x10com.epl.prot\
    obufB\nQueryProtoP\x01Z+github.com/geo-grpc/api/golang/epl/protobuf\xa2\
    \x02\x03QPBb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
