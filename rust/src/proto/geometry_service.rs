// This file is generated by rust-protobuf 2.10.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `epl/protobuf/geometry_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#epl/protobuf/geometry_service.proto\x12\x0cepl.protobuf\x1a\x1bepl/pr\
    otobuf/geometry.proto2\xa6\x04\n\x0fGeometryService\x12J\n\x07Operate\
    \x12\x1d.epl.protobuf.GeometryRequest\x1a\x1e.epl.protobuf.GeometryRespo\
    nse\"\0\x12V\n\x0fOperateBiStream\x12\x1d.epl.protobuf.GeometryRequest\
    \x1a\x1e.epl.protobuf.GeometryResponse\"\0(\x010\x01\x12Z\n\x13OperateBi\
    StreamFlow\x12\x1d.epl.protobuf.GeometryRequest\x1a\x1e.epl.protobuf.Geo\
    metryResponse\"\0(\x010\x01\x12X\n\x13OperateServerStream\x12\x1d.epl.pr\
    otobuf.GeometryRequest\x1a\x1e.epl.protobuf.GeometryResponse\"\00\x01\
    \x12X\n\x13OperateClientStream\x12\x1d.epl.protobuf.GeometryRequest\x1a\
    \x1e.epl.protobuf.GeometryResponse\"\0(\x01\x12_\n\x17FileOperateBiStrea\
    mFlow\x12\x1e.epl.protobuf.FileRequestChunk\x1a\x1e.epl.protobuf.Geometr\
    yResponse\"\0(\x010\x01B]\n\x10com.epl.protobufB\x14GeometryServiceProto\
    P\x01Z+github.com/geo-grpc/api/golang/epl/protobuf\xa2\x02\x03GMSb\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
