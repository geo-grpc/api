// This file is generated by rust-protobuf 2.10.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `epl/protobuf/stac_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fepl/protobuf/stac_service.proto\x12\x0cepl.protobuf\x1a\x17epl/pro\
    tobuf/stac.proto2\xaf\x04\n\x0bStacService\x12?\n\x06Search\x12\x19.epl.\
    protobuf.StacRequest\x1a\x16.epl.protobuf.StacItem\"\00\x01\x12D\n\x06In\
    sert\x12\x16.epl.protobuf.StacItem\x1a\x1c.epl.protobuf.StacDbResponse\"\
    \0(\x010\x01\x12D\n\x06Update\x12\x16.epl.protobuf.StacItem\x1a\x1c.epl.\
    protobuf.StacDbResponse\"\0(\x010\x01\x12B\n\x05Count\x12\x19.epl.protob\
    uf.StacRequest\x1a\x1c.epl.protobuf.StacDbResponse\"\0\x12C\n\tDeleteOne\
    \x12\x16.epl.protobuf.StacItem\x1a\x1c.epl.protobuf.StacDbResponse\"\0\
    \x12@\n\tSearchOne\x12\x19.epl.protobuf.StacRequest\x1a\x16.epl.protobuf\
    .StacItem\"\0\x12C\n\tInsertOne\x12\x16.epl.protobuf.StacItem\x1a\x1c.ep\
    l.protobuf.StacDbResponse\"\0\x12C\n\tUpdateOne\x12\x16.epl.protobuf.Sta\
    cItem\x1a\x1c.epl.protobuf.StacDbResponse\"\0BY\n\x10com.epl.protobufB\
    \x10StacServiceProtoP\x01Z+github.com/geo-grpc/api/golang/epl/protobuf\
    \xa2\x02\x03STSb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
