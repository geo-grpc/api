//
//Copyright 2017-2019 Echo Park Labs
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//For additional information, contact:
//
//email: info@echoparklabs.io

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: epl/protobuf/v1/geometry.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// the state of a geometry topological correctness
type SimpleState int32

const (
	// on creation, after projection and after generalization a geometry has state simple unknown (not know if simple or not)
	SimpleState_SIMPLE_UNKNOWN SimpleState = 0
	// weak simple (no self intersections, ring orientation is correct, but ring order is not)
	SimpleState_WEAK_SIMPLE SimpleState = 1
	// same as weak simple + OGC ring order.
	SimpleState_STRONG_SIMPLE SimpleState = 2
	// is_simple method has been run on the geometry and it is known to be non-simple, but the reason is unknown
	SimpleState_NON_SIMPLE SimpleState = 3
	// non-simple, because the structure is bad (0 size path, for example).
	SimpleState_STRUCTURE_FLAW SimpleState = 4
	// Non-simple, because there are degenerate segments.
	SimpleState_DEGENERATE_SEGMENTS SimpleState = 5
	// Non-simple, because not clustered properly, that is there are non-coincident vertices closer than tolerance.
	SimpleState_CLUSTERING SimpleState = 6
	// Non-simple, because not cracked properly (intersecting segments, overlaping segments)
	SimpleState_CRACKING SimpleState = 7
	// Non-simple, because there are crossovers (self intersections that are not cracking case).
	SimpleState_CROSS_OVER SimpleState = 8
	// Non-simple, because holes or exteriors have wrong orientation.
	SimpleState_RING_ORIENTATION SimpleState = 9
)

// Enum value maps for SimpleState.
var (
	SimpleState_name = map[int32]string{
		0: "SIMPLE_UNKNOWN",
		1: "WEAK_SIMPLE",
		2: "STRONG_SIMPLE",
		3: "NON_SIMPLE",
		4: "STRUCTURE_FLAW",
		5: "DEGENERATE_SEGMENTS",
		6: "CLUSTERING",
		7: "CRACKING",
		8: "CROSS_OVER",
		9: "RING_ORIENTATION",
	}
	SimpleState_value = map[string]int32{
		"SIMPLE_UNKNOWN":      0,
		"WEAK_SIMPLE":         1,
		"STRONG_SIMPLE":       2,
		"NON_SIMPLE":          3,
		"STRUCTURE_FLAW":      4,
		"DEGENERATE_SEGMENTS": 5,
		"CLUSTERING":          6,
		"CRACKING":            7,
		"CROSS_OVER":          8,
		"RING_ORIENTATION":    9,
	}
)

func (x SimpleState) Enum() *SimpleState {
	p := new(SimpleState)
	*p = x
	return p
}

func (x SimpleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleState) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[0].Descriptor()
}

func (SimpleState) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[0]
}

func (x SimpleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleState.Descriptor instead.
func (SimpleState) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{0}
}

//
//type of geometry encodings
type Encoding int32

const (
	Encoding_UNKNOWN_ENCODING Encoding = 0 // unknown type.
	Encoding_WKB              Encoding = 1 // well-known binary
	Encoding_WKT              Encoding = 2 // well-known text
	Encoding_GEOJSON          Encoding = 3 // geojson
	Encoding_ESRI_SHAPE       Encoding = 4 // esri shape binary
	Encoding_EWKB             Encoding = 5 // extended well-known binary
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0: "UNKNOWN_ENCODING",
		1: "WKB",
		2: "WKT",
		3: "GEOJSON",
		4: "ESRI_SHAPE",
		5: "EWKB",
	}
	Encoding_value = map[string]int32{
		"UNKNOWN_ENCODING": 0,
		"WKB":              1,
		"WKT":              2,
		"GEOJSON":          3,
		"ESRI_SHAPE":       4,
		"EWKB":             5,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[1].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[1]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{1}
}

//
//type of geometry operators
type OperatorType int32

const (
	OperatorType_UNKNOWN_OPERATOR           OperatorType = 0
	OperatorType_PROJECT                    OperatorType = 1 // project geometry
	OperatorType_EXPORT_TO_JSON             OperatorType = 2
	OperatorType_IMPORT_FROM_JSON           OperatorType = 3
	OperatorType_EXPORT_TO_ESRI_SHAPE       OperatorType = 4
	OperatorType_IMPORT_FROM_ESRI_SHAPE     OperatorType = 5
	OperatorType_UNION                      OperatorType = 6 // union one or more geometries
	OperatorType_DIFFERENCE                 OperatorType = 7 // difference two geometries
	OperatorType_PROXIMITY_2D               OperatorType = 8
	OperatorType_RELATE                     OperatorType = 9
	OperatorType_EQUALS                     OperatorType = 10
	OperatorType_DISJOINT                   OperatorType = 11
	OperatorType_INTERSECTS                 OperatorType = 12
	OperatorType_WITHIN                     OperatorType = 13
	OperatorType_CONTAINS                   OperatorType = 14
	OperatorType_CROSSES                    OperatorType = 15
	OperatorType_TOUCHES                    OperatorType = 16
	OperatorType_OVERLAPS                   OperatorType = 17
	OperatorType_BUFFER                     OperatorType = 18
	OperatorType_DISTANCE                   OperatorType = 19
	OperatorType_INTERSECTION               OperatorType = 20
	OperatorType_CLIP                       OperatorType = 21
	OperatorType_CUT                        OperatorType = 22
	OperatorType_DENSIFY_BY_LENGTH          OperatorType = 23
	OperatorType_GEODESIC_BUFFER            OperatorType = 26
	OperatorType_GEODETIC_DENSIFY_BY_LENGTH OperatorType = 27
	OperatorType_GEODETIC_AREA              OperatorType = 30
	OperatorType_SIMPLIFY                   OperatorType = 31
	OperatorType_SIMPLIFY_OGC               OperatorType = 32
	OperatorType_OFFSET                     OperatorType = 33
	OperatorType_GENERALIZE                 OperatorType = 34
	OperatorType_GENERALIZE_BY_AREA         OperatorType = 35
	OperatorType_EXPORT_TO_WKB              OperatorType = 36
	OperatorType_IMPORT_FROM_WKB            OperatorType = 37
	OperatorType_EXPORT_TO_WKT              OperatorType = 38
	OperatorType_IMPORT_FROM_WKT            OperatorType = 39
	OperatorType_IMPORT_FROM_GEOJSON        OperatorType = 40
	OperatorType_EXPORT_TO_GEOJSON          OperatorType = 41
	OperatorType_SYMMETRIC_DIFFERENCE       OperatorType = 42
	OperatorType_CONVEX_HULL                OperatorType = 43
	OperatorType_BOUNDARY                   OperatorType = 44
	OperatorType_RANDOM_POINTS              OperatorType = 45
	OperatorType_ENCLOSING_CIRCLE           OperatorType = 46
	OperatorType_AFFINE_TRANSFORM           OperatorType = 47
	OperatorType_GEODETIC_LENGTH            OperatorType = 48
	OperatorType_GEODETIC_INVERSE           OperatorType = 49
	OperatorType_EXPORT_TO_EWKB             OperatorType = 50
	OperatorType_IMPORT_FROM_EWKB           OperatorType = 51
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0:  "UNKNOWN_OPERATOR",
		1:  "PROJECT",
		2:  "EXPORT_TO_JSON",
		3:  "IMPORT_FROM_JSON",
		4:  "EXPORT_TO_ESRI_SHAPE",
		5:  "IMPORT_FROM_ESRI_SHAPE",
		6:  "UNION",
		7:  "DIFFERENCE",
		8:  "PROXIMITY_2D",
		9:  "RELATE",
		10: "EQUALS",
		11: "DISJOINT",
		12: "INTERSECTS",
		13: "WITHIN",
		14: "CONTAINS",
		15: "CROSSES",
		16: "TOUCHES",
		17: "OVERLAPS",
		18: "BUFFER",
		19: "DISTANCE",
		20: "INTERSECTION",
		21: "CLIP",
		22: "CUT",
		23: "DENSIFY_BY_LENGTH",
		26: "GEODESIC_BUFFER",
		27: "GEODETIC_DENSIFY_BY_LENGTH",
		30: "GEODETIC_AREA",
		31: "SIMPLIFY",
		32: "SIMPLIFY_OGC",
		33: "OFFSET",
		34: "GENERALIZE",
		35: "GENERALIZE_BY_AREA",
		36: "EXPORT_TO_WKB",
		37: "IMPORT_FROM_WKB",
		38: "EXPORT_TO_WKT",
		39: "IMPORT_FROM_WKT",
		40: "IMPORT_FROM_GEOJSON",
		41: "EXPORT_TO_GEOJSON",
		42: "SYMMETRIC_DIFFERENCE",
		43: "CONVEX_HULL",
		44: "BOUNDARY",
		45: "RANDOM_POINTS",
		46: "ENCLOSING_CIRCLE",
		47: "AFFINE_TRANSFORM",
		48: "GEODETIC_LENGTH",
		49: "GEODETIC_INVERSE",
		50: "EXPORT_TO_EWKB",
		51: "IMPORT_FROM_EWKB",
	}
	OperatorType_value = map[string]int32{
		"UNKNOWN_OPERATOR":           0,
		"PROJECT":                    1,
		"EXPORT_TO_JSON":             2,
		"IMPORT_FROM_JSON":           3,
		"EXPORT_TO_ESRI_SHAPE":       4,
		"IMPORT_FROM_ESRI_SHAPE":     5,
		"UNION":                      6,
		"DIFFERENCE":                 7,
		"PROXIMITY_2D":               8,
		"RELATE":                     9,
		"EQUALS":                     10,
		"DISJOINT":                   11,
		"INTERSECTS":                 12,
		"WITHIN":                     13,
		"CONTAINS":                   14,
		"CROSSES":                    15,
		"TOUCHES":                    16,
		"OVERLAPS":                   17,
		"BUFFER":                     18,
		"DISTANCE":                   19,
		"INTERSECTION":               20,
		"CLIP":                       21,
		"CUT":                        22,
		"DENSIFY_BY_LENGTH":          23,
		"GEODESIC_BUFFER":            26,
		"GEODETIC_DENSIFY_BY_LENGTH": 27,
		"GEODETIC_AREA":              30,
		"SIMPLIFY":                   31,
		"SIMPLIFY_OGC":               32,
		"OFFSET":                     33,
		"GENERALIZE":                 34,
		"GENERALIZE_BY_AREA":         35,
		"EXPORT_TO_WKB":              36,
		"IMPORT_FROM_WKB":            37,
		"EXPORT_TO_WKT":              38,
		"IMPORT_FROM_WKT":            39,
		"IMPORT_FROM_GEOJSON":        40,
		"EXPORT_TO_GEOJSON":          41,
		"SYMMETRIC_DIFFERENCE":       42,
		"CONVEX_HULL":                43,
		"BOUNDARY":                   44,
		"RANDOM_POINTS":              45,
		"ENCLOSING_CIRCLE":           46,
		"AFFINE_TRANSFORM":           47,
		"GEODETIC_LENGTH":            48,
		"GEODETIC_INVERSE":           49,
		"EXPORT_TO_EWKB":             50,
		"IMPORT_FROM_EWKB":           51,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[2].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[2]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{2}
}

// Projection names
type ProjectionData_CSType int32

const (
	// default is Lambert Azimuthal Equal Area Projection, with x origin x_0=4321000 and y origin y_0=3210000
	ProjectionData_LAMBERT_AZI ProjectionData_CSType = 0
)

// Enum value maps for ProjectionData_CSType.
var (
	ProjectionData_CSType_name = map[int32]string{
		0: "LAMBERT_AZI",
	}
	ProjectionData_CSType_value = map[string]int32{
		"LAMBERT_AZI": 0,
	}
)

func (x ProjectionData_CSType) Enum() *ProjectionData_CSType {
	p := new(ProjectionData_CSType)
	*p = x
	return p
}

func (x ProjectionData_CSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectionData_CSType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[3].Descriptor()
}

func (ProjectionData_CSType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[3]
}

func (x ProjectionData_CSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectionData_CSType.Descriptor instead.
func (ProjectionData_CSType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{1, 0}
}

type FileRequestChunk_FileType int32

const (
	FileRequestChunk_SHAPEFILE FileRequestChunk_FileType = 0
)

// Enum value maps for FileRequestChunk_FileType.
var (
	FileRequestChunk_FileType_name = map[int32]string{
		0: "SHAPEFILE",
	}
	FileRequestChunk_FileType_value = map[string]int32{
		"SHAPEFILE": 0,
	}
)

func (x FileRequestChunk_FileType) Enum() *FileRequestChunk_FileType {
	p := new(FileRequestChunk_FileType)
	*p = x
	return p
}

func (x FileRequestChunk_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileRequestChunk_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[4].Descriptor()
}

func (FileRequestChunk_FileType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[4]
}

func (x FileRequestChunk_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileRequestChunk_FileType.Descriptor instead.
func (FileRequestChunk_FileType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{6, 0}
}

type Params_Offset_OffsetJoinType int32

const (
	Params_Offset_ROUND  Params_Offset_OffsetJoinType = 0
	Params_Offset_BEVEL  Params_Offset_OffsetJoinType = 1
	Params_Offset_MITER  Params_Offset_OffsetJoinType = 2
	Params_Offset_SQUARE Params_Offset_OffsetJoinType = 3
)

// Enum value maps for Params_Offset_OffsetJoinType.
var (
	Params_Offset_OffsetJoinType_name = map[int32]string{
		0: "ROUND",
		1: "BEVEL",
		2: "MITER",
		3: "SQUARE",
	}
	Params_Offset_OffsetJoinType_value = map[string]int32{
		"ROUND":  0,
		"BEVEL":  1,
		"MITER":  2,
		"SQUARE": 3,
	}
)

func (x Params_Offset_OffsetJoinType) Enum() *Params_Offset_OffsetJoinType {
	p := new(Params_Offset_OffsetJoinType)
	*p = x
	return p
}

func (x Params_Offset_OffsetJoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Params_Offset_OffsetJoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_geometry_proto_enumTypes[5].Descriptor()
}

func (Params_Offset_OffsetJoinType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_geometry_proto_enumTypes[5]
}

func (x Params_Offset_OffsetJoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Params_Offset_OffsetJoinType.Descriptor instead.
func (Params_Offset_OffsetJoinType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 8, 0}
}

//*
// Container for Geometry data, has id, encoded geometry coordinates and shape, spatial reference and envelope
type GeometryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// geometry id as an integer
	GeometryId uint64 `protobuf:"varint,1,opt,name=geometry_id,json=geometryId,proto3" json:"geometry_id,omitempty"`
	// feature id as a string (for guids and other ids that aren't numeric)
	FeatureId string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Types that are assignable to Data:
	//	*GeometryData_Wkt
	//	*GeometryData_Geojson
	//	*GeometryData_Wkb
	//	*GeometryData_EsriShape
	//	*GeometryData_Ewkb
	Data isGeometryData_Data `protobuf_oneof:"data"`
	// spatial reference of geometry
	Proj *ProjectionData `protobuf:"bytes,7,opt,name=proj,proto3" json:"proj,omitempty"`
	// envelope or bounding box of geometry
	Envelope *EnvelopeData `protobuf:"bytes,13,opt,name=envelope,proto3" json:"envelope,omitempty"`
	// state of the geometry topological correctness. at geometry creation, it is unknown if it is simple
	Simple SimpleState `protobuf:"varint,14,opt,name=simple,proto3,enum=epl.protobuf.v1.SimpleState" json:"simple,omitempty"`
}

func (x *GeometryData) Reset() {
	*x = GeometryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryData) ProtoMessage() {}

func (x *GeometryData) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryData.ProtoReflect.Descriptor instead.
func (*GeometryData) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{0}
}

func (x *GeometryData) GetGeometryId() uint64 {
	if x != nil {
		return x.GeometryId
	}
	return 0
}

func (x *GeometryData) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (m *GeometryData) GetData() isGeometryData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *GeometryData) GetWkt() string {
	if x, ok := x.GetData().(*GeometryData_Wkt); ok {
		return x.Wkt
	}
	return ""
}

func (x *GeometryData) GetGeojson() string {
	if x, ok := x.GetData().(*GeometryData_Geojson); ok {
		return x.Geojson
	}
	return ""
}

func (x *GeometryData) GetWkb() []byte {
	if x, ok := x.GetData().(*GeometryData_Wkb); ok {
		return x.Wkb
	}
	return nil
}

func (x *GeometryData) GetEsriShape() []byte {
	if x, ok := x.GetData().(*GeometryData_EsriShape); ok {
		return x.EsriShape
	}
	return nil
}

func (x *GeometryData) GetEwkb() []byte {
	if x, ok := x.GetData().(*GeometryData_Ewkb); ok {
		return x.Ewkb
	}
	return nil
}

func (x *GeometryData) GetProj() *ProjectionData {
	if x != nil {
		return x.Proj
	}
	return nil
}

func (x *GeometryData) GetEnvelope() *EnvelopeData {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *GeometryData) GetSimple() SimpleState {
	if x != nil {
		return x.Simple
	}
	return SimpleState_SIMPLE_UNKNOWN
}

type isGeometryData_Data interface {
	isGeometryData_Data()
}

type GeometryData_Wkt struct {
	// well known text format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry
	Wkt string `protobuf:"bytes,3,opt,name=wkt,proto3,oneof"`
}

type GeometryData_Geojson struct {
	// geojson format for geometry encoding, https://en.wikipedia.org/wiki/GeoJSON
	Geojson string `protobuf:"bytes,4,opt,name=geojson,proto3,oneof"`
}

type GeometryData_Wkb struct {
	// well known binary format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary
	Wkb []byte `protobuf:"bytes,5,opt,name=wkb,proto3,oneof"`
}

type GeometryData_EsriShape struct {
	// ESRI shape binary format for geometry encoding (fastest decoding and encoding for geometry service) https://www.esri.com/library/whitepapers/pdfs/shapefile.pdf
	EsriShape []byte `protobuf:"bytes,6,opt,name=esri_shape,json=esriShape,proto3,oneof"`
}

type GeometryData_Ewkb struct {
	// extended well known binary format
	Ewkb []byte `protobuf:"bytes,15,opt,name=ewkb,proto3,oneof"`
}

func (*GeometryData_Wkt) isGeometryData_Data() {}

func (*GeometryData_Geojson) isGeometryData_Data() {}

func (*GeometryData_Wkb) isGeometryData_Data() {}

func (*GeometryData_EsriShape) isGeometryData_Data() {}

func (*GeometryData_Ewkb) isGeometryData_Data() {}

//*
// Spatial Reference system. Used with a geometry to define the reference system of the geometry's coordinates
type ProjectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Definition:
	//	*ProjectionData_Epsg
	//	*ProjectionData_Proj4
	//	*ProjectionData_Custom_
	//	*ProjectionData_Wkt
	Definition isProjectionData_Definition `protobuf_oneof:"definition"`
	Geometry   *GeometryData               `protobuf:"bytes,10,opt,name=geometry,proto3" json:"geometry,omitempty"`
	Bbox       *EnvelopeData               `protobuf:"bytes,11,opt,name=bbox,proto3" json:"bbox,omitempty"`
	Centroid   *GeometryData               `protobuf:"bytes,12,opt,name=centroid,proto3" json:"centroid,omitempty"`
	Shape      []uint32                    `protobuf:"varint,8,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	Transform  []float64                   `protobuf:"fixed64,9,rep,packed,name=transform,proto3" json:"transform,omitempty"`
}

func (x *ProjectionData) Reset() {
	*x = ProjectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionData) ProtoMessage() {}

func (x *ProjectionData) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionData.ProtoReflect.Descriptor instead.
func (*ProjectionData) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{1}
}

func (m *ProjectionData) GetDefinition() isProjectionData_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *ProjectionData) GetEpsg() int32 {
	if x, ok := x.GetDefinition().(*ProjectionData_Epsg); ok {
		return x.Epsg
	}
	return 0
}

func (x *ProjectionData) GetProj4() string {
	if x, ok := x.GetDefinition().(*ProjectionData_Proj4); ok {
		return x.Proj4
	}
	return ""
}

func (x *ProjectionData) GetCustom() *ProjectionData_Custom {
	if x, ok := x.GetDefinition().(*ProjectionData_Custom_); ok {
		return x.Custom
	}
	return nil
}

func (x *ProjectionData) GetWkt() string {
	if x, ok := x.GetDefinition().(*ProjectionData_Wkt); ok {
		return x.Wkt
	}
	return ""
}

func (x *ProjectionData) GetGeometry() *GeometryData {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *ProjectionData) GetBbox() *EnvelopeData {
	if x != nil {
		return x.Bbox
	}
	return nil
}

func (x *ProjectionData) GetCentroid() *GeometryData {
	if x != nil {
		return x.Centroid
	}
	return nil
}

func (x *ProjectionData) GetShape() []uint32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ProjectionData) GetTransform() []float64 {
	if x != nil {
		return x.Transform
	}
	return nil
}

type isProjectionData_Definition interface {
	isProjectionData_Definition()
}

type ProjectionData_Epsg struct {
	// epsg wkid (well know id), or srid (spatial reference id) of the projected or geographic coordinate system
	Epsg int32 `protobuf:"varint,1,opt,name=epsg,proto3,oneof"`
}

type ProjectionData_Proj4 struct {
	// proj string describing a projection or geographic coordinate system https://proj4.org/usage/projections.html
	Proj4 string `protobuf:"bytes,2,opt,name=proj4,proto3,oneof"`
}

type ProjectionData_Custom_ struct {
	// custom projection
	Custom *ProjectionData_Custom `protobuf:"bytes,3,opt,name=custom,proto3,oneof"`
}

type ProjectionData_Wkt struct {
	// well-known text string of spatial reference
	Wkt string `protobuf:"bytes,4,opt,name=wkt,proto3,oneof"` // esri wkid (if not yet approved by epsg)
}

func (*ProjectionData_Epsg) isProjectionData_Definition() {}

func (*ProjectionData_Proj4) isProjectionData_Definition() {}

func (*ProjectionData_Custom_) isProjectionData_Definition() {}

func (*ProjectionData_Wkt) isProjectionData_Definition() {}

//*
// Container for Envelope data (bounding box), x and y min and max and an optional spatial reference
type EnvelopeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min x value
	Xmin float64 `protobuf:"fixed64,1,opt,name=xmin,proto3" json:"xmin,omitempty"`
	// min y value
	Ymin float64 `protobuf:"fixed64,2,opt,name=ymin,proto3" json:"ymin,omitempty"`
	// max x value
	Xmax float64 `protobuf:"fixed64,3,opt,name=xmax,proto3" json:"xmax,omitempty"`
	// max y value
	Ymax float64 `protobuf:"fixed64,4,opt,name=ymax,proto3" json:"ymax,omitempty"`
	// spatial reference of envelope
	Proj *ProjectionData `protobuf:"bytes,5,opt,name=proj,proto3" json:"proj,omitempty"`
	Zmin float64         `protobuf:"fixed64,6,opt,name=zmin,proto3" json:"zmin,omitempty"`
	Zmax float64         `protobuf:"fixed64,7,opt,name=zmax,proto3" json:"zmax,omitempty"`
}

func (x *EnvelopeData) Reset() {
	*x = EnvelopeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeData) ProtoMessage() {}

func (x *EnvelopeData) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeData.ProtoReflect.Descriptor instead.
func (*EnvelopeData) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{2}
}

func (x *EnvelopeData) GetXmin() float64 {
	if x != nil {
		return x.Xmin
	}
	return 0
}

func (x *EnvelopeData) GetYmin() float64 {
	if x != nil {
		return x.Ymin
	}
	return 0
}

func (x *EnvelopeData) GetXmax() float64 {
	if x != nil {
		return x.Xmax
	}
	return 0
}

func (x *EnvelopeData) GetYmax() float64 {
	if x != nil {
		return x.Ymax
	}
	return 0
}

func (x *EnvelopeData) GetProj() *ProjectionData {
	if x != nil {
		return x.Proj
	}
	return nil
}

func (x *EnvelopeData) GetZmin() float64 {
	if x != nil {
		return x.Zmin
	}
	return 0
}

func (x *EnvelopeData) GetZmax() float64 {
	if x != nil {
		return x.Zmax
	}
	return 0
}

//*
// response message for insertion and updates to stac db
type GeometryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//	*GeometryRequest_Geometry
	//	*GeometryRequest_LeftGeometry
	//	*GeometryRequest_GeometryRequest
	//	*GeometryRequest_LeftGeometryRequest
	Left isGeometryRequest_Left `protobuf_oneof:"left"`
	// Types that are assignable to Right:
	//	*GeometryRequest_RightGeometry
	//	*GeometryRequest_RightGeometryRequest
	Right isGeometryRequest_Right `protobuf_oneof:"right"`
	// (default is PROJECT) geometry operation to perform on input geometries
	Operator OperatorType `protobuf:"varint,7,opt,name=operator,proto3,enum=epl.protobuf.v1.OperatorType" json:"operator,omitempty"`
	// (default is wkb) encoding, wkt, wkb, esri_shape, etc
	ResultEncoding Encoding `protobuf:"varint,8,opt,name=result_encoding,json=resultEncoding,proto3,enum=epl.protobuf.v1.Encoding" json:"result_encoding,omitempty"`
	// (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
	OperationProj *ProjectionData `protobuf:"bytes,9,opt,name=operation_proj,json=operationProj,proto3" json:"operation_proj,omitempty"`
	// (optional) after the operation has been completed, project the results to a new spatial reference.
	ResultProj *ProjectionData `protobuf:"bytes,10,opt,name=result_proj,json=resultProj,proto3" json:"result_proj,omitempty"`
	// Types that are assignable to Params:
	//	*GeometryRequest_BufferParams
	//	*GeometryRequest_ConvexParams
	//	*GeometryRequest_RelateParams
	//	*GeometryRequest_RandomPointsParams
	//	*GeometryRequest_GeneralizeParams
	//	*GeometryRequest_IntersectionParams
	//	*GeometryRequest_OffsetParams
	//	*GeometryRequest_CutParams
	//	*GeometryRequest_ClipParams
	//	*GeometryRequest_DensifyParams
	//	*GeometryRequest_SimplifyParams
	//	*GeometryRequest_GeneralizeByAreaParams
	//	*GeometryRequest_AffineTransformParams
	//	*GeometryRequest_GeodeticBufferParams
	Params isGeometryRequest_Params `protobuf_oneof:"params"`
}

func (x *GeometryRequest) Reset() {
	*x = GeometryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryRequest) ProtoMessage() {}

func (x *GeometryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryRequest.ProtoReflect.Descriptor instead.
func (*GeometryRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{3}
}

func (m *GeometryRequest) GetLeft() isGeometryRequest_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *GeometryRequest) GetGeometry() *GeometryData {
	if x, ok := x.GetLeft().(*GeometryRequest_Geometry); ok {
		return x.Geometry
	}
	return nil
}

func (x *GeometryRequest) GetLeftGeometry() *GeometryData {
	if x, ok := x.GetLeft().(*GeometryRequest_LeftGeometry); ok {
		return x.LeftGeometry
	}
	return nil
}

func (x *GeometryRequest) GetGeometryRequest() *GeometryRequest {
	if x, ok := x.GetLeft().(*GeometryRequest_GeometryRequest); ok {
		return x.GeometryRequest
	}
	return nil
}

func (x *GeometryRequest) GetLeftGeometryRequest() *GeometryRequest {
	if x, ok := x.GetLeft().(*GeometryRequest_LeftGeometryRequest); ok {
		return x.LeftGeometryRequest
	}
	return nil
}

func (m *GeometryRequest) GetRight() isGeometryRequest_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *GeometryRequest) GetRightGeometry() *GeometryData {
	if x, ok := x.GetRight().(*GeometryRequest_RightGeometry); ok {
		return x.RightGeometry
	}
	return nil
}

func (x *GeometryRequest) GetRightGeometryRequest() *GeometryRequest {
	if x, ok := x.GetRight().(*GeometryRequest_RightGeometryRequest); ok {
		return x.RightGeometryRequest
	}
	return nil
}

func (x *GeometryRequest) GetOperator() OperatorType {
	if x != nil {
		return x.Operator
	}
	return OperatorType_UNKNOWN_OPERATOR
}

func (x *GeometryRequest) GetResultEncoding() Encoding {
	if x != nil {
		return x.ResultEncoding
	}
	return Encoding_UNKNOWN_ENCODING
}

func (x *GeometryRequest) GetOperationProj() *ProjectionData {
	if x != nil {
		return x.OperationProj
	}
	return nil
}

func (x *GeometryRequest) GetResultProj() *ProjectionData {
	if x != nil {
		return x.ResultProj
	}
	return nil
}

func (m *GeometryRequest) GetParams() isGeometryRequest_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *GeometryRequest) GetBufferParams() *Params_Buffer {
	if x, ok := x.GetParams().(*GeometryRequest_BufferParams); ok {
		return x.BufferParams
	}
	return nil
}

func (x *GeometryRequest) GetConvexParams() *Params_Convex {
	if x, ok := x.GetParams().(*GeometryRequest_ConvexParams); ok {
		return x.ConvexParams
	}
	return nil
}

func (x *GeometryRequest) GetRelateParams() *Params_Relate {
	if x, ok := x.GetParams().(*GeometryRequest_RelateParams); ok {
		return x.RelateParams
	}
	return nil
}

func (x *GeometryRequest) GetRandomPointsParams() *Params_RandomPoints {
	if x, ok := x.GetParams().(*GeometryRequest_RandomPointsParams); ok {
		return x.RandomPointsParams
	}
	return nil
}

func (x *GeometryRequest) GetGeneralizeParams() *Params_Generalize {
	if x, ok := x.GetParams().(*GeometryRequest_GeneralizeParams); ok {
		return x.GeneralizeParams
	}
	return nil
}

func (x *GeometryRequest) GetIntersectionParams() *Params_Intersection {
	if x, ok := x.GetParams().(*GeometryRequest_IntersectionParams); ok {
		return x.IntersectionParams
	}
	return nil
}

func (x *GeometryRequest) GetOffsetParams() *Params_Offset {
	if x, ok := x.GetParams().(*GeometryRequest_OffsetParams); ok {
		return x.OffsetParams
	}
	return nil
}

func (x *GeometryRequest) GetCutParams() *Params_Cut {
	if x, ok := x.GetParams().(*GeometryRequest_CutParams); ok {
		return x.CutParams
	}
	return nil
}

func (x *GeometryRequest) GetClipParams() *Params_Clip {
	if x, ok := x.GetParams().(*GeometryRequest_ClipParams); ok {
		return x.ClipParams
	}
	return nil
}

func (x *GeometryRequest) GetDensifyParams() *Params_Densify {
	if x, ok := x.GetParams().(*GeometryRequest_DensifyParams); ok {
		return x.DensifyParams
	}
	return nil
}

func (x *GeometryRequest) GetSimplifyParams() *Params_Simplify {
	if x, ok := x.GetParams().(*GeometryRequest_SimplifyParams); ok {
		return x.SimplifyParams
	}
	return nil
}

func (x *GeometryRequest) GetGeneralizeByAreaParams() *Params_GeneralizeByArea {
	if x, ok := x.GetParams().(*GeometryRequest_GeneralizeByAreaParams); ok {
		return x.GeneralizeByAreaParams
	}
	return nil
}

func (x *GeometryRequest) GetAffineTransformParams() *Params_AffineTransform {
	if x, ok := x.GetParams().(*GeometryRequest_AffineTransformParams); ok {
		return x.AffineTransformParams
	}
	return nil
}

func (x *GeometryRequest) GetGeodeticBufferParams() *Params_GeodeticBuffer {
	if x, ok := x.GetParams().(*GeometryRequest_GeodeticBufferParams); ok {
		return x.GeodeticBufferParams
	}
	return nil
}

type isGeometryRequest_Left interface {
	isGeometryRequest_Left()
}

type GeometryRequest_Geometry struct {
	// geometry to be operated on
	Geometry *GeometryData `protobuf:"bytes,1,opt,name=geometry,proto3,oneof"`
}

type GeometryRequest_LeftGeometry struct {
	// if there are two geometries to operate on, then this is the first geometry
	LeftGeometry *GeometryData `protobuf:"bytes,2,opt,name=left_geometry,json=leftGeometry,proto3,oneof"`
}

type GeometryRequest_GeometryRequest struct {
	// the result of the geometry request is to be operated on by this request
	GeometryRequest *GeometryRequest `protobuf:"bytes,3,opt,name=geometry_request,json=geometryRequest,proto3,oneof"`
}

type GeometryRequest_LeftGeometryRequest struct {
	// if there are two geometries, the left geometry request is to be operated on by this request
	LeftGeometryRequest *GeometryRequest `protobuf:"bytes,4,opt,name=left_geometry_request,json=leftGeometryRequest,proto3,oneof"`
}

func (*GeometryRequest_Geometry) isGeometryRequest_Left() {}

func (*GeometryRequest_LeftGeometry) isGeometryRequest_Left() {}

func (*GeometryRequest_GeometryRequest) isGeometryRequest_Left() {}

func (*GeometryRequest_LeftGeometryRequest) isGeometryRequest_Left() {}

type isGeometryRequest_Right interface {
	isGeometryRequest_Right()
}

type GeometryRequest_RightGeometry struct {
	// if there are two geometries to operate on, then this is the second geometry
	RightGeometry *GeometryData `protobuf:"bytes,5,opt,name=right_geometry,json=rightGeometry,proto3,oneof"`
}

type GeometryRequest_RightGeometryRequest struct {
	// if there are two geometries, the right geometry request is to be operated on by this request
	RightGeometryRequest *GeometryRequest `protobuf:"bytes,6,opt,name=right_geometry_request,json=rightGeometryRequest,proto3,oneof"`
}

func (*GeometryRequest_RightGeometry) isGeometryRequest_Right() {}

func (*GeometryRequest_RightGeometryRequest) isGeometryRequest_Right() {}

type isGeometryRequest_Params interface {
	isGeometryRequest_Params()
}

type GeometryRequest_BufferParams struct {
	BufferParams *Params_Buffer `protobuf:"bytes,11,opt,name=buffer_params,json=bufferParams,proto3,oneof"`
}

type GeometryRequest_ConvexParams struct {
	ConvexParams *Params_Convex `protobuf:"bytes,12,opt,name=convex_params,json=convexParams,proto3,oneof"`
}

type GeometryRequest_RelateParams struct {
	RelateParams *Params_Relate `protobuf:"bytes,13,opt,name=relate_params,json=relateParams,proto3,oneof"`
}

type GeometryRequest_RandomPointsParams struct {
	RandomPointsParams *Params_RandomPoints `protobuf:"bytes,14,opt,name=random_points_params,json=randomPointsParams,proto3,oneof"`
}

type GeometryRequest_GeneralizeParams struct {
	GeneralizeParams *Params_Generalize `protobuf:"bytes,15,opt,name=generalize_params,json=generalizeParams,proto3,oneof"`
}

type GeometryRequest_IntersectionParams struct {
	IntersectionParams *Params_Intersection `protobuf:"bytes,16,opt,name=intersection_params,json=intersectionParams,proto3,oneof"`
}

type GeometryRequest_OffsetParams struct {
	OffsetParams *Params_Offset `protobuf:"bytes,17,opt,name=offset_params,json=offsetParams,proto3,oneof"`
}

type GeometryRequest_CutParams struct {
	CutParams *Params_Cut `protobuf:"bytes,18,opt,name=cut_params,json=cutParams,proto3,oneof"`
}

type GeometryRequest_ClipParams struct {
	ClipParams *Params_Clip `protobuf:"bytes,19,opt,name=clip_params,json=clipParams,proto3,oneof"`
}

type GeometryRequest_DensifyParams struct {
	DensifyParams *Params_Densify `protobuf:"bytes,20,opt,name=densify_params,json=densifyParams,proto3,oneof"`
}

type GeometryRequest_SimplifyParams struct {
	SimplifyParams *Params_Simplify `protobuf:"bytes,21,opt,name=simplify_params,json=simplifyParams,proto3,oneof"`
}

type GeometryRequest_GeneralizeByAreaParams struct {
	GeneralizeByAreaParams *Params_GeneralizeByArea `protobuf:"bytes,22,opt,name=generalize_by_area_params,json=generalizeByAreaParams,proto3,oneof"`
}

type GeometryRequest_AffineTransformParams struct {
	AffineTransformParams *Params_AffineTransform `protobuf:"bytes,23,opt,name=affine_transform_params,json=affineTransformParams,proto3,oneof"`
}

type GeometryRequest_GeodeticBufferParams struct {
	GeodeticBufferParams *Params_GeodeticBuffer `protobuf:"bytes,24,opt,name=geodetic_buffer_params,json=geodeticBufferParams,proto3,oneof"`
}

func (*GeometryRequest_BufferParams) isGeometryRequest_Params() {}

func (*GeometryRequest_ConvexParams) isGeometryRequest_Params() {}

func (*GeometryRequest_RelateParams) isGeometryRequest_Params() {}

func (*GeometryRequest_RandomPointsParams) isGeometryRequest_Params() {}

func (*GeometryRequest_GeneralizeParams) isGeometryRequest_Params() {}

func (*GeometryRequest_IntersectionParams) isGeometryRequest_Params() {}

func (*GeometryRequest_OffsetParams) isGeometryRequest_Params() {}

func (*GeometryRequest_CutParams) isGeometryRequest_Params() {}

func (*GeometryRequest_ClipParams) isGeometryRequest_Params() {}

func (*GeometryRequest_DensifyParams) isGeometryRequest_Params() {}

func (*GeometryRequest_SimplifyParams) isGeometryRequest_Params() {}

func (*GeometryRequest_GeneralizeByAreaParams) isGeometryRequest_Params() {}

func (*GeometryRequest_AffineTransformParams) isGeometryRequest_Params() {}

func (*GeometryRequest_GeodeticBufferParams) isGeometryRequest_Params() {}

type GeodeticInverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Azimuth from the first to the second point
	Az12 float64 `protobuf:"fixed64,1,opt,name=az12,proto3" json:"az12,omitempty"`
	// Azimuth from the second to the first point
	Az21 float64 `protobuf:"fixed64,2,opt,name=az21,proto3" json:"az21,omitempty"`
	// Geodesic distance
	Distance float64 `protobuf:"fixed64,3,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *GeodeticInverse) Reset() {
	*x = GeodeticInverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeodeticInverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeodeticInverse) ProtoMessage() {}

func (x *GeodeticInverse) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeodeticInverse.ProtoReflect.Descriptor instead.
func (*GeodeticInverse) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{4}
}

func (x *GeodeticInverse) GetAz12() float64 {
	if x != nil {
		return x.Az12
	}
	return 0
}

func (x *GeodeticInverse) GetAz21() float64 {
	if x != nil {
		return x.Az21
	}
	return 0
}

func (x *GeodeticInverse) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

//*
// response message geometry request
type GeometryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*GeometryResponse_Geometry
	//	*GeometryResponse_SpatialRelationship
	//	*GeometryResponse_Measure
	//	*GeometryResponse_GeodeticInverse
	Result    isGeometryResponse_Result `protobuf_oneof:"result"`
	RelateMap map[int64]bool            `protobuf:"bytes,5,rep,name=relate_map,json=relateMap,proto3" json:"relate_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GeometryResponse) Reset() {
	*x = GeometryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryResponse) ProtoMessage() {}

func (x *GeometryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryResponse.ProtoReflect.Descriptor instead.
func (*GeometryResponse) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{5}
}

func (m *GeometryResponse) GetResult() isGeometryResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GeometryResponse) GetGeometry() *GeometryData {
	if x, ok := x.GetResult().(*GeometryResponse_Geometry); ok {
		return x.Geometry
	}
	return nil
}

func (x *GeometryResponse) GetSpatialRelationship() bool {
	if x, ok := x.GetResult().(*GeometryResponse_SpatialRelationship); ok {
		return x.SpatialRelationship
	}
	return false
}

func (x *GeometryResponse) GetMeasure() float64 {
	if x, ok := x.GetResult().(*GeometryResponse_Measure); ok {
		return x.Measure
	}
	return 0
}

func (x *GeometryResponse) GetGeodeticInverse() *GeodeticInverse {
	if x, ok := x.GetResult().(*GeometryResponse_GeodeticInverse); ok {
		return x.GeodeticInverse
	}
	return nil
}

func (x *GeometryResponse) GetRelateMap() map[int64]bool {
	if x != nil {
		return x.RelateMap
	}
	return nil
}

type isGeometryResponse_Result interface {
	isGeometryResponse_Result()
}

type GeometryResponse_Geometry struct {
	// if geometry result, then this field holds the geometry data
	Geometry *GeometryData `protobuf:"bytes,1,opt,name=geometry,proto3,oneof"`
}

type GeometryResponse_SpatialRelationship struct {
	// if a topo spatial relationship request, then this field holds the true or false result
	SpatialRelationship bool `protobuf:"varint,2,opt,name=spatial_relationship,json=spatialRelationship,proto3,oneof"`
}

type GeometryResponse_Measure struct {
	// a measure result will be a float for area and length requests
	Measure float64 `protobuf:"fixed64,3,opt,name=measure,proto3,oneof"`
}

type GeometryResponse_GeodeticInverse struct {
	GeodeticInverse *GeodeticInverse `protobuf:"bytes,4,opt,name=geodetic_inverse,json=geodeticInverse,proto3,oneof"`
}

func (*GeometryResponse_Geometry) isGeometryResponse_Result() {}

func (*GeometryResponse_SpatialRelationship) isGeometryResponse_Result() {}

func (*GeometryResponse_Measure) isGeometryResponse_Result() {}

func (*GeometryResponse_GeodeticInverse) isGeometryResponse_Result() {}

type FileRequestChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedRequest      *GeometryRequest `protobuf:"bytes,1,opt,name=nested_request,json=nestedRequest,proto3" json:"nested_request,omitempty"`
	ResultEncodingType Encoding         `protobuf:"varint,2,opt,name=result_encoding_type,json=resultEncodingType,proto3,enum=epl.protobuf.v1.Encoding" json:"result_encoding_type,omitempty"`
	InputProj          *ProjectionData  `protobuf:"bytes,3,opt,name=input_proj,json=inputProj,proto3" json:"input_proj,omitempty"`
	ResultProj         *ProjectionData  `protobuf:"bytes,5,opt,name=result_proj,json=resultProj,proto3" json:"result_proj,omitempty"`
	Data               []byte           `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Size               int64            `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Offset             int64            `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	FileName           string           `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	IsLastChunk        bool             `protobuf:"varint,10,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
}

func (x *FileRequestChunk) Reset() {
	*x = FileRequestChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequestChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequestChunk) ProtoMessage() {}

func (x *FileRequestChunk) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequestChunk.ProtoReflect.Descriptor instead.
func (*FileRequestChunk) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{6}
}

func (x *FileRequestChunk) GetNestedRequest() *GeometryRequest {
	if x != nil {
		return x.NestedRequest
	}
	return nil
}

func (x *FileRequestChunk) GetResultEncodingType() Encoding {
	if x != nil {
		return x.ResultEncodingType
	}
	return Encoding_UNKNOWN_ENCODING
}

func (x *FileRequestChunk) GetInputProj() *ProjectionData {
	if x != nil {
		return x.InputProj
	}
	return nil
}

func (x *FileRequestChunk) GetResultProj() *ProjectionData {
	if x != nil {
		return x.ResultProj
	}
	return nil
}

func (x *FileRequestChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileRequestChunk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileRequestChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileRequestChunk) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileRequestChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7}
}

// Projected coordinate system that doesn't have a wkid / srid
type ProjectionData_Custom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// longitude of center of projection (central meridian)
	Lon_0 float64 `protobuf:"fixed64,1,opt,name=lon_0,json=lon0,proto3" json:"lon_0,omitempty"`
	// latitude of center of projection (latitude of origin)
	Lat_0 float64 `protobuf:"fixed64,2,opt,name=lat_0,json=lat0,proto3" json:"lat_0,omitempty"`
	// enum defining the type of projection
	CsType ProjectionData_CSType `protobuf:"varint,3,opt,name=cs_type,json=csType,proto3,enum=epl.protobuf.v1.ProjectionData_CSType" json:"cs_type,omitempty"`
}

func (x *ProjectionData_Custom) Reset() {
	*x = ProjectionData_Custom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionData_Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionData_Custom) ProtoMessage() {}

func (x *ProjectionData_Custom) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionData_Custom.ProtoReflect.Descriptor instead.
func (*ProjectionData_Custom) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ProjectionData_Custom) GetLon_0() float64 {
	if x != nil {
		return x.Lon_0
	}
	return 0
}

func (x *ProjectionData_Custom) GetLat_0() float64 {
	if x != nil {
		return x.Lat_0
	}
	return 0
}

func (x *ProjectionData_Custom) GetCsType() ProjectionData_CSType {
	if x != nil {
		return x.CsType
	}
	return ProjectionData_LAMBERT_AZI
}

type Params_Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance     float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	MaxDeviation float64 `protobuf:"fixed64,2,opt,name=max_deviation,json=maxDeviation,proto3" json:"max_deviation,omitempty"`
	// oneof https://github.com/golang/protobuf/issues/283
	//        }
	UnionResult             bool  `protobuf:"varint,3,opt,name=union_result,json=unionResult,proto3" json:"union_result,omitempty"`
	MaxVerticesInFullCircle int32 `protobuf:"varint,4,opt,name=max_vertices_in_full_circle,json=maxVerticesInFullCircle,proto3" json:"max_vertices_in_full_circle,omitempty"`
}

func (x *Params_Buffer) Reset() {
	*x = Params_Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Buffer) ProtoMessage() {}

func (x *Params_Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Buffer.ProtoReflect.Descriptor instead.
func (*Params_Buffer) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Params_Buffer) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Params_Buffer) GetMaxDeviation() float64 {
	if x != nil {
		return x.MaxDeviation
	}
	return 0
}

func (x *Params_Buffer) GetUnionResult() bool {
	if x != nil {
		return x.UnionResult
	}
	return false
}

func (x *Params_Buffer) GetMaxVerticesInFullCircle() int32 {
	if x != nil {
		return x.MaxVerticesInFullCircle
	}
	return 0
}

type Params_GeodeticBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance     float64 `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	MaxDeviation float64 `protobuf:"fixed64,2,opt,name=max_deviation,json=maxDeviation,proto3" json:"max_deviation,omitempty"`
	// oneof https://github.com/golang/protobuf/issues/283
	//        }
	UnionResult             bool  `protobuf:"varint,3,opt,name=union_result,json=unionResult,proto3" json:"union_result,omitempty"`
	MaxVerticesInFullCircle int32 `protobuf:"varint,4,opt,name=max_vertices_in_full_circle,json=maxVerticesInFullCircle,proto3" json:"max_vertices_in_full_circle,omitempty"`
}

func (x *Params_GeodeticBuffer) Reset() {
	*x = Params_GeodeticBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_GeodeticBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_GeodeticBuffer) ProtoMessage() {}

func (x *Params_GeodeticBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_GeodeticBuffer.ProtoReflect.Descriptor instead.
func (*Params_GeodeticBuffer) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Params_GeodeticBuffer) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Params_GeodeticBuffer) GetMaxDeviation() float64 {
	if x != nil {
		return x.MaxDeviation
	}
	return 0
}

func (x *Params_GeodeticBuffer) GetUnionResult() bool {
	if x != nil {
		return x.UnionResult
	}
	return false
}

func (x *Params_GeodeticBuffer) GetMaxVerticesInFullCircle() int32 {
	if x != nil {
		return x.MaxVerticesInFullCircle
	}
	return 0
}

type Params_Convex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merge bool `protobuf:"varint,1,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (x *Params_Convex) Reset() {
	*x = Params_Convex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Convex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Convex) ProtoMessage() {}

func (x *Params_Convex) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Convex.ProtoReflect.Descriptor instead.
func (*Params_Convex) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Params_Convex) GetMerge() bool {
	if x != nil {
		return x.Merge
	}
	return false
}

type Params_Relate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	De_9Im string `protobuf:"bytes,1,opt,name=de_9im,json=de9im,proto3" json:"de_9im,omitempty"`
}

func (x *Params_Relate) Reset() {
	*x = Params_Relate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Relate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Relate) ProtoMessage() {}

func (x *Params_Relate) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Relate.ProtoReflect.Descriptor instead.
func (*Params_Relate) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Params_Relate) GetDe_9Im() string {
	if x != nil {
		return x.De_9Im
	}
	return ""
}

type Params_RandomPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsPerSquareKm float64 `protobuf:"fixed64,1,opt,name=points_per_square_km,json=pointsPerSquareKm,proto3" json:"points_per_square_km,omitempty"`
	Seed              int64   `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *Params_RandomPoints) Reset() {
	*x = Params_RandomPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_RandomPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_RandomPoints) ProtoMessage() {}

func (x *Params_RandomPoints) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_RandomPoints.ProtoReflect.Descriptor instead.
func (*Params_RandomPoints) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 4}
}

func (x *Params_RandomPoints) GetPointsPerSquareKm() float64 {
	if x != nil {
		return x.PointsPerSquareKm
	}
	return 0
}

func (x *Params_RandomPoints) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

type Params_Generalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDeviation      float64 `protobuf:"fixed64,1,opt,name=max_deviation,json=maxDeviation,proto3" json:"max_deviation,omitempty"`
	RemoveDegenerates bool    `protobuf:"varint,2,opt,name=remove_degenerates,json=removeDegenerates,proto3" json:"remove_degenerates,omitempty"`
}

func (x *Params_Generalize) Reset() {
	*x = Params_Generalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Generalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Generalize) ProtoMessage() {}

func (x *Params_Generalize) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Generalize.ProtoReflect.Descriptor instead.
func (*Params_Generalize) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 5}
}

func (x *Params_Generalize) GetMaxDeviation() float64 {
	if x != nil {
		return x.MaxDeviation
	}
	return 0
}

func (x *Params_Generalize) GetRemoveDegenerates() bool {
	if x != nil {
		return x.RemoveDegenerates
	}
	return false
}

type Params_GeneralizeByArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oneof https://github.com/golang/protobuf/issues/283
	//        oneof method {
	PercentReduction  float64 `protobuf:"fixed64,1,opt,name=percent_reduction,json=percentReduction,proto3" json:"percent_reduction,omitempty"`
	MaxPointCount     int32   `protobuf:"varint,2,opt,name=max_point_count,json=maxPointCount,proto3" json:"max_point_count,omitempty"`
	RemoveDegenerates bool    `protobuf:"varint,3,opt,name=remove_degenerates,json=removeDegenerates,proto3" json:"remove_degenerates,omitempty"`
}

func (x *Params_GeneralizeByArea) Reset() {
	*x = Params_GeneralizeByArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_GeneralizeByArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_GeneralizeByArea) ProtoMessage() {}

func (x *Params_GeneralizeByArea) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_GeneralizeByArea.ProtoReflect.Descriptor instead.
func (*Params_GeneralizeByArea) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 6}
}

func (x *Params_GeneralizeByArea) GetPercentReduction() float64 {
	if x != nil {
		return x.PercentReduction
	}
	return 0
}

func (x *Params_GeneralizeByArea) GetMaxPointCount() int32 {
	if x != nil {
		return x.MaxPointCount
	}
	return 0
}

func (x *Params_GeneralizeByArea) GetRemoveDegenerates() bool {
	if x != nil {
		return x.RemoveDegenerates
	}
	return false
}

type Params_Intersection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionMask int32 `protobuf:"varint,1,opt,name=dimension_mask,json=dimensionMask,proto3" json:"dimension_mask,omitempty"`
}

func (x *Params_Intersection) Reset() {
	*x = Params_Intersection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Intersection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Intersection) ProtoMessage() {}

func (x *Params_Intersection) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Intersection.ProtoReflect.Descriptor instead.
func (*Params_Intersection) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 7}
}

func (x *Params_Intersection) GetDimensionMask() int32 {
	if x != nil {
		return x.DimensionMask
	}
	return 0
}

type Params_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance     float64                      `protobuf:"fixed64,1,opt,name=distance,proto3" json:"distance,omitempty"`
	JoinType     Params_Offset_OffsetJoinType `protobuf:"varint,2,opt,name=join_type,json=joinType,proto3,enum=epl.protobuf.v1.Params_Offset_OffsetJoinType" json:"join_type,omitempty"`
	BevelRatio   float64                      `protobuf:"fixed64,3,opt,name=bevel_ratio,json=bevelRatio,proto3" json:"bevel_ratio,omitempty"`
	FlattenError float64                      `protobuf:"fixed64,4,opt,name=flatten_error,json=flattenError,proto3" json:"flatten_error,omitempty"`
}

func (x *Params_Offset) Reset() {
	*x = Params_Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Offset) ProtoMessage() {}

func (x *Params_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Offset.ProtoReflect.Descriptor instead.
func (*Params_Offset) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 8}
}

func (x *Params_Offset) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Params_Offset) GetJoinType() Params_Offset_OffsetJoinType {
	if x != nil {
		return x.JoinType
	}
	return Params_Offset_ROUND
}

func (x *Params_Offset) GetBevelRatio() float64 {
	if x != nil {
		return x.BevelRatio
	}
	return 0
}

func (x *Params_Offset) GetFlattenError() float64 {
	if x != nil {
		return x.FlattenError
	}
	return 0
}

type Params_Cut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsiderTouch bool `protobuf:"varint,1,opt,name=consider_touch,json=considerTouch,proto3" json:"consider_touch,omitempty"`
}

func (x *Params_Cut) Reset() {
	*x = Params_Cut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Cut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Cut) ProtoMessage() {}

func (x *Params_Cut) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Cut.ProtoReflect.Descriptor instead.
func (*Params_Cut) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 9}
}

func (x *Params_Cut) GetConsiderTouch() bool {
	if x != nil {
		return x.ConsiderTouch
	}
	return false
}

type Params_Clip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope *EnvelopeData `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
}

func (x *Params_Clip) Reset() {
	*x = Params_Clip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Clip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Clip) ProtoMessage() {}

func (x *Params_Clip) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Clip.ProtoReflect.Descriptor instead.
func (*Params_Clip) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 10}
}

func (x *Params_Clip) GetEnvelope() *EnvelopeData {
	if x != nil {
		return x.Envelope
	}
	return nil
}

type Params_Densify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLength float64 `protobuf:"fixed64,1,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
}

func (x *Params_Densify) Reset() {
	*x = Params_Densify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Densify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Densify) ProtoMessage() {}

func (x *Params_Densify) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Densify.ProtoReflect.Descriptor instead.
func (*Params_Densify) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 11}
}

func (x *Params_Densify) GetMaxLength() float64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

type Params_Simplify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *Params_Simplify) Reset() {
	*x = Params_Simplify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_Simplify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_Simplify) ProtoMessage() {}

func (x *Params_Simplify) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_Simplify.ProtoReflect.Descriptor instead.
func (*Params_Simplify) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 12}
}

func (x *Params_Simplify) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type Params_AffineTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geodetic bool    `protobuf:"varint,2,opt,name=geodetic,proto3" json:"geodetic,omitempty"`
	XOffset  float64 `protobuf:"fixed64,3,opt,name=x_offset,json=xOffset,proto3" json:"x_offset,omitempty"`
	YOffset  float64 `protobuf:"fixed64,4,opt,name=y_offset,json=yOffset,proto3" json:"y_offset,omitempty"`
}

func (x *Params_AffineTransform) Reset() {
	*x = Params_AffineTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params_AffineTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params_AffineTransform) ProtoMessage() {}

func (x *Params_AffineTransform) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_geometry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params_AffineTransform.ProtoReflect.Descriptor instead.
func (*Params_AffineTransform) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_geometry_proto_rawDescGZIP(), []int{7, 13}
}

func (x *Params_AffineTransform) GetGeodetic() bool {
	if x != nil {
		return x.Geodetic
	}
	return false
}

func (x *Params_AffineTransform) GetXOffset() float64 {
	if x != nil {
		return x.XOffset
	}
	return 0
}

func (x *Params_AffineTransform) GetYOffset() float64 {
	if x != nil {
		return x.YOffset
	}
	return 0
}

var File_epl_protobuf_v1_geometry_proto protoreflect.FileDescriptor

var file_epl_protobuf_v1_geometry_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x22, 0xfd, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x77, 0x6b, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x77, 0x6b, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x77, 0x6b, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x03, 0x77, 0x6b, 0x62, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x73, 0x72, 0x69, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x65, 0x73,
	0x72, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x77, 0x6b, 0x62, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x65, 0x77, 0x6b, 0x62, 0x12, 0x33, 0x0a,
	0x04, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x6a, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x0d, 0x22, 0xa1, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x70, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x65, 0x70, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6a, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6a, 0x34, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x77, 0x6b, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x77, 0x6b, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x73, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x6e, 0x5f, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6c, 0x6f, 0x6e, 0x30, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x61, 0x74, 0x5f, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x74, 0x30, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x06, 0x43, 0x53,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4d, 0x42, 0x45, 0x52, 0x54, 0x5f,
	0x41, 0x5a, 0x49, 0x10, 0x00, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x6d,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x6d, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x78, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x6d,
	0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x79, 0x6d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x7a, 0x6d, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x7a,
	0x6d, 0x61, 0x78, 0x22, 0xe3, 0x0e, 0x0a, 0x0f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65,
	0x66, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x67, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x65,
	0x66, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x16, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x14, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x45, 0x0a, 0x0d,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x48, 0x02, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x58, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x02, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x48, 0x02, 0x52, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x57,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x02,
	0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x63, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x75, 0x74, 0x48,
	0x02, 0x52, 0x09, 0x63, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x48,
	0x02, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a,
	0x0e, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x44,
	0x65, 0x6e, 0x73, 0x69, 0x66, 0x79, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x66,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x79, 0x48, 0x02, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x65, 0x0a, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x41, 0x72, 0x65,
	0x61, 0x48, 0x02, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x02, 0x52, 0x15, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5e,
	0x0a, 0x16, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x02, 0x52, 0x14, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74,
	0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x6f,
	0x64, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x7a, 0x31, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x7a, 0x31, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x7a, 0x32, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x61, 0x7a, 0x32, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x88, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x10,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x19, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x48, 0x41, 0x50, 0x45, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x00, 0x22, 0xd2, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0xaa, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c,
	0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x1a, 0xb2, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x1a, 0x1e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x1a, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x65, 0x5f, 0x39, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x39,
	0x69, 0x6d, 0x1a, 0x53, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4b, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x1a, 0x60, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x35, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xf5, 0x01, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x3d, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10,
	0x03, 0x1a, 0x2c, 0x0a, 0x03, 0x43, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x1a,
	0x41, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x1a, 0x28, 0x0a, 0x07, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x20, 0x0a, 0x08,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x1a, 0x69,
	0x0a, 0x0f, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x12, 0x19, 0x0a,
	0x08, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x0b, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x57, 0x45, 0x41, 0x4b, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x57, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x2a, 0x59, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4b, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x4b, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4f, 0x4a, 0x53, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x52, 0x49, 0x5f, 0x53, 0x48, 0x41, 0x50,
	0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x57, 0x4b, 0x42, 0x10, 0x05, 0x2a, 0xf5, 0x06,
	0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x53, 0x52, 0x49, 0x5f, 0x53, 0x48,
	0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x53, 0x52, 0x49, 0x5f, 0x53, 0x48, 0x41, 0x50, 0x45, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x49, 0x54, 0x59, 0x5f, 0x32, 0x44, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x53, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43,
	0x54, 0x53, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x4f, 0x55, 0x43, 0x48, 0x45, 0x53, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52,
	0x4c, 0x41, 0x50, 0x53, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x13,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4c, 0x49, 0x50, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x55, 0x54, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4e, 0x53, 0x49, 0x46, 0x59,
	0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x45, 0x4f, 0x44, 0x45, 0x53, 0x49, 0x43, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x44, 0x45,
	0x4e, 0x53, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10,
	0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x59,
	0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x59, 0x5f, 0x4f,
	0x47, 0x43, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x21,
	0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x22,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x4b, 0x42, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x4b, 0x42, 0x10, 0x25,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x4b,
	0x54, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x57, 0x4b, 0x54, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x45, 0x4f, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x28, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x47,
	0x45, 0x4f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x58, 0x5f, 0x48, 0x55, 0x4c,
	0x4c, 0x10, 0x2b, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10,
	0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x53, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x2e, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x46,
	0x46, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x2f,
	0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x10, 0x30, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x54, 0x49,
	0x43, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x57, 0x4b, 0x42, 0x10, 0x32, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x45,
	0x57, 0x4b, 0x42, 0x10, 0x33, 0x42, 0x73, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6f, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x70,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x04,
	0x47, 0x4d, 0x50, 0x42, 0xaa, 0x02, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_epl_protobuf_v1_geometry_proto_rawDescOnce sync.Once
	file_epl_protobuf_v1_geometry_proto_rawDescData = file_epl_protobuf_v1_geometry_proto_rawDesc
)

func file_epl_protobuf_v1_geometry_proto_rawDescGZIP() []byte {
	file_epl_protobuf_v1_geometry_proto_rawDescOnce.Do(func() {
		file_epl_protobuf_v1_geometry_proto_rawDescData = protoimpl.X.CompressGZIP(file_epl_protobuf_v1_geometry_proto_rawDescData)
	})
	return file_epl_protobuf_v1_geometry_proto_rawDescData
}

var file_epl_protobuf_v1_geometry_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_epl_protobuf_v1_geometry_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_epl_protobuf_v1_geometry_proto_goTypes = []interface{}{
	(SimpleState)(0),                  // 0: epl.protobuf.v1.SimpleState
	(Encoding)(0),                     // 1: epl.protobuf.v1.Encoding
	(OperatorType)(0),                 // 2: epl.protobuf.v1.OperatorType
	(ProjectionData_CSType)(0),        // 3: epl.protobuf.v1.ProjectionData.CSType
	(FileRequestChunk_FileType)(0),    // 4: epl.protobuf.v1.FileRequestChunk.FileType
	(Params_Offset_OffsetJoinType)(0), // 5: epl.protobuf.v1.Params.Offset.OffsetJoinType
	(*GeometryData)(nil),              // 6: epl.protobuf.v1.GeometryData
	(*ProjectionData)(nil),            // 7: epl.protobuf.v1.ProjectionData
	(*EnvelopeData)(nil),              // 8: epl.protobuf.v1.EnvelopeData
	(*GeometryRequest)(nil),           // 9: epl.protobuf.v1.GeometryRequest
	(*GeodeticInverse)(nil),           // 10: epl.protobuf.v1.GeodeticInverse
	(*GeometryResponse)(nil),          // 11: epl.protobuf.v1.GeometryResponse
	(*FileRequestChunk)(nil),          // 12: epl.protobuf.v1.FileRequestChunk
	(*Params)(nil),                    // 13: epl.protobuf.v1.Params
	(*ProjectionData_Custom)(nil),     // 14: epl.protobuf.v1.ProjectionData.Custom
	nil,                               // 15: epl.protobuf.v1.GeometryResponse.RelateMapEntry
	(*Params_Buffer)(nil),             // 16: epl.protobuf.v1.Params.Buffer
	(*Params_GeodeticBuffer)(nil),     // 17: epl.protobuf.v1.Params.GeodeticBuffer
	(*Params_Convex)(nil),             // 18: epl.protobuf.v1.Params.Convex
	(*Params_Relate)(nil),             // 19: epl.protobuf.v1.Params.Relate
	(*Params_RandomPoints)(nil),       // 20: epl.protobuf.v1.Params.RandomPoints
	(*Params_Generalize)(nil),         // 21: epl.protobuf.v1.Params.Generalize
	(*Params_GeneralizeByArea)(nil),   // 22: epl.protobuf.v1.Params.GeneralizeByArea
	(*Params_Intersection)(nil),       // 23: epl.protobuf.v1.Params.Intersection
	(*Params_Offset)(nil),             // 24: epl.protobuf.v1.Params.Offset
	(*Params_Cut)(nil),                // 25: epl.protobuf.v1.Params.Cut
	(*Params_Clip)(nil),               // 26: epl.protobuf.v1.Params.Clip
	(*Params_Densify)(nil),            // 27: epl.protobuf.v1.Params.Densify
	(*Params_Simplify)(nil),           // 28: epl.protobuf.v1.Params.Simplify
	(*Params_AffineTransform)(nil),    // 29: epl.protobuf.v1.Params.AffineTransform
}
var file_epl_protobuf_v1_geometry_proto_depIdxs = []int32{
	7,  // 0: epl.protobuf.v1.GeometryData.proj:type_name -> epl.protobuf.v1.ProjectionData
	8,  // 1: epl.protobuf.v1.GeometryData.envelope:type_name -> epl.protobuf.v1.EnvelopeData
	0,  // 2: epl.protobuf.v1.GeometryData.simple:type_name -> epl.protobuf.v1.SimpleState
	14, // 3: epl.protobuf.v1.ProjectionData.custom:type_name -> epl.protobuf.v1.ProjectionData.Custom
	6,  // 4: epl.protobuf.v1.ProjectionData.geometry:type_name -> epl.protobuf.v1.GeometryData
	8,  // 5: epl.protobuf.v1.ProjectionData.bbox:type_name -> epl.protobuf.v1.EnvelopeData
	6,  // 6: epl.protobuf.v1.ProjectionData.centroid:type_name -> epl.protobuf.v1.GeometryData
	7,  // 7: epl.protobuf.v1.EnvelopeData.proj:type_name -> epl.protobuf.v1.ProjectionData
	6,  // 8: epl.protobuf.v1.GeometryRequest.geometry:type_name -> epl.protobuf.v1.GeometryData
	6,  // 9: epl.protobuf.v1.GeometryRequest.left_geometry:type_name -> epl.protobuf.v1.GeometryData
	9,  // 10: epl.protobuf.v1.GeometryRequest.geometry_request:type_name -> epl.protobuf.v1.GeometryRequest
	9,  // 11: epl.protobuf.v1.GeometryRequest.left_geometry_request:type_name -> epl.protobuf.v1.GeometryRequest
	6,  // 12: epl.protobuf.v1.GeometryRequest.right_geometry:type_name -> epl.protobuf.v1.GeometryData
	9,  // 13: epl.protobuf.v1.GeometryRequest.right_geometry_request:type_name -> epl.protobuf.v1.GeometryRequest
	2,  // 14: epl.protobuf.v1.GeometryRequest.operator:type_name -> epl.protobuf.v1.OperatorType
	1,  // 15: epl.protobuf.v1.GeometryRequest.result_encoding:type_name -> epl.protobuf.v1.Encoding
	7,  // 16: epl.protobuf.v1.GeometryRequest.operation_proj:type_name -> epl.protobuf.v1.ProjectionData
	7,  // 17: epl.protobuf.v1.GeometryRequest.result_proj:type_name -> epl.protobuf.v1.ProjectionData
	16, // 18: epl.protobuf.v1.GeometryRequest.buffer_params:type_name -> epl.protobuf.v1.Params.Buffer
	18, // 19: epl.protobuf.v1.GeometryRequest.convex_params:type_name -> epl.protobuf.v1.Params.Convex
	19, // 20: epl.protobuf.v1.GeometryRequest.relate_params:type_name -> epl.protobuf.v1.Params.Relate
	20, // 21: epl.protobuf.v1.GeometryRequest.random_points_params:type_name -> epl.protobuf.v1.Params.RandomPoints
	21, // 22: epl.protobuf.v1.GeometryRequest.generalize_params:type_name -> epl.protobuf.v1.Params.Generalize
	23, // 23: epl.protobuf.v1.GeometryRequest.intersection_params:type_name -> epl.protobuf.v1.Params.Intersection
	24, // 24: epl.protobuf.v1.GeometryRequest.offset_params:type_name -> epl.protobuf.v1.Params.Offset
	25, // 25: epl.protobuf.v1.GeometryRequest.cut_params:type_name -> epl.protobuf.v1.Params.Cut
	26, // 26: epl.protobuf.v1.GeometryRequest.clip_params:type_name -> epl.protobuf.v1.Params.Clip
	27, // 27: epl.protobuf.v1.GeometryRequest.densify_params:type_name -> epl.protobuf.v1.Params.Densify
	28, // 28: epl.protobuf.v1.GeometryRequest.simplify_params:type_name -> epl.protobuf.v1.Params.Simplify
	22, // 29: epl.protobuf.v1.GeometryRequest.generalize_by_area_params:type_name -> epl.protobuf.v1.Params.GeneralizeByArea
	29, // 30: epl.protobuf.v1.GeometryRequest.affine_transform_params:type_name -> epl.protobuf.v1.Params.AffineTransform
	17, // 31: epl.protobuf.v1.GeometryRequest.geodetic_buffer_params:type_name -> epl.protobuf.v1.Params.GeodeticBuffer
	6,  // 32: epl.protobuf.v1.GeometryResponse.geometry:type_name -> epl.protobuf.v1.GeometryData
	10, // 33: epl.protobuf.v1.GeometryResponse.geodetic_inverse:type_name -> epl.protobuf.v1.GeodeticInverse
	15, // 34: epl.protobuf.v1.GeometryResponse.relate_map:type_name -> epl.protobuf.v1.GeometryResponse.RelateMapEntry
	9,  // 35: epl.protobuf.v1.FileRequestChunk.nested_request:type_name -> epl.protobuf.v1.GeometryRequest
	1,  // 36: epl.protobuf.v1.FileRequestChunk.result_encoding_type:type_name -> epl.protobuf.v1.Encoding
	7,  // 37: epl.protobuf.v1.FileRequestChunk.input_proj:type_name -> epl.protobuf.v1.ProjectionData
	7,  // 38: epl.protobuf.v1.FileRequestChunk.result_proj:type_name -> epl.protobuf.v1.ProjectionData
	3,  // 39: epl.protobuf.v1.ProjectionData.Custom.cs_type:type_name -> epl.protobuf.v1.ProjectionData.CSType
	5,  // 40: epl.protobuf.v1.Params.Offset.join_type:type_name -> epl.protobuf.v1.Params.Offset.OffsetJoinType
	8,  // 41: epl.protobuf.v1.Params.Clip.envelope:type_name -> epl.protobuf.v1.EnvelopeData
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_epl_protobuf_v1_geometry_proto_init() }
func file_epl_protobuf_v1_geometry_proto_init() {
	if File_epl_protobuf_v1_geometry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_epl_protobuf_v1_geometry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeodeticInverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequestChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionData_Custom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_GeodeticBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Convex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Relate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_RandomPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Generalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_GeneralizeByArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Intersection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Cut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Clip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Densify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_Simplify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_geometry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params_AffineTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_epl_protobuf_v1_geometry_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GeometryData_Wkt)(nil),
		(*GeometryData_Geojson)(nil),
		(*GeometryData_Wkb)(nil),
		(*GeometryData_EsriShape)(nil),
		(*GeometryData_Ewkb)(nil),
	}
	file_epl_protobuf_v1_geometry_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ProjectionData_Epsg)(nil),
		(*ProjectionData_Proj4)(nil),
		(*ProjectionData_Custom_)(nil),
		(*ProjectionData_Wkt)(nil),
	}
	file_epl_protobuf_v1_geometry_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GeometryRequest_Geometry)(nil),
		(*GeometryRequest_LeftGeometry)(nil),
		(*GeometryRequest_GeometryRequest)(nil),
		(*GeometryRequest_LeftGeometryRequest)(nil),
		(*GeometryRequest_RightGeometry)(nil),
		(*GeometryRequest_RightGeometryRequest)(nil),
		(*GeometryRequest_BufferParams)(nil),
		(*GeometryRequest_ConvexParams)(nil),
		(*GeometryRequest_RelateParams)(nil),
		(*GeometryRequest_RandomPointsParams)(nil),
		(*GeometryRequest_GeneralizeParams)(nil),
		(*GeometryRequest_IntersectionParams)(nil),
		(*GeometryRequest_OffsetParams)(nil),
		(*GeometryRequest_CutParams)(nil),
		(*GeometryRequest_ClipParams)(nil),
		(*GeometryRequest_DensifyParams)(nil),
		(*GeometryRequest_SimplifyParams)(nil),
		(*GeometryRequest_GeneralizeByAreaParams)(nil),
		(*GeometryRequest_AffineTransformParams)(nil),
		(*GeometryRequest_GeodeticBufferParams)(nil),
	}
	file_epl_protobuf_v1_geometry_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GeometryResponse_Geometry)(nil),
		(*GeometryResponse_SpatialRelationship)(nil),
		(*GeometryResponse_Measure)(nil),
		(*GeometryResponse_GeodeticInverse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epl_protobuf_v1_geometry_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_epl_protobuf_v1_geometry_proto_goTypes,
		DependencyIndexes: file_epl_protobuf_v1_geometry_proto_depIdxs,
		EnumInfos:         file_epl_protobuf_v1_geometry_proto_enumTypes,
		MessageInfos:      file_epl_protobuf_v1_geometry_proto_msgTypes,
	}.Build()
	File_epl_protobuf_v1_geometry_proto = out.File
	file_epl_protobuf_v1_geometry_proto_rawDesc = nil
	file_epl_protobuf_v1_geometry_proto_goTypes = nil
	file_epl_protobuf_v1_geometry_proto_depIdxs = nil
}
