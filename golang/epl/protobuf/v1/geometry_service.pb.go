// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/v1/geometry_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("epl/protobuf/v1/geometry_service.proto", fileDescriptor_494a01c76b97a366)
}

var fileDescriptor_494a01c76b97a366 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0x2d, 0xc8, 0xd1,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x33, 0xd4, 0x4f, 0x4f, 0xcd, 0xcf,
	0x4d, 0x2d, 0x29, 0xaa, 0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x4b, 0x0a,
	0xf1, 0xa7, 0x16, 0xe4, 0xe8, 0xc1, 0xd4, 0xe9, 0x95, 0x19, 0x4a, 0xc9, 0xe1, 0xd2, 0x08, 0x51,
	0x65, 0x74, 0x8a, 0x85, 0x8b, 0xdf, 0x1d, 0x2a, 0x14, 0x0c, 0x31, 0x4a, 0x28, 0x80, 0x8b, 0xdd,
	0xbf, 0x20, 0xb5, 0x28, 0xb1, 0x24, 0x55, 0x48, 0x41, 0x0f, 0xcd, 0x40, 0x3d, 0x98, 0xe2, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x45, 0x3c, 0x2a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x95, 0x18, 0x84, 0x62, 0xb8, 0xf8, 0xa1, 0x26, 0x3a, 0x65, 0x06, 0x97, 0x14, 0xa5, 0x26, 0xe6,
	0x52, 0xc9, 0x64, 0x0d, 0x46, 0x03, 0x46, 0xa1, 0x04, 0x2e, 0x61, 0x34, 0xd3, 0xdd, 0x72, 0xf2,
	0xcb, 0xa9, 0x69, 0x43, 0x1c, 0xdc, 0x06, 0x50, 0x18, 0xa5, 0x16, 0x51, 0xd5, 0x0f, 0x28, 0xe6,
	0x3b, 0xe7, 0x64, 0xa6, 0xe6, 0x95, 0x50, 0x39, 0x8c, 0x84, 0x52, 0xb9, 0xc4, 0xdd, 0x32, 0x73,
	0x52, 0xb1, 0x85, 0x12, 0xa6, 0x09, 0x20, 0x95, 0x50, 0xf3, 0x9d, 0x33, 0x4a, 0xf3, 0xb2, 0x89,
	0x0e, 0x26, 0xa7, 0x4a, 0x2e, 0xe1, 0xe4, 0xfc, 0x5c, 0x74, 0xd5, 0x4e, 0x22, 0x68, 0x09, 0x2c,
	0x00, 0x24, 0x17, 0xc0, 0x18, 0xa5, 0x97, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f,
	0x0b, 0x4a, 0x96, 0xba, 0xe9, 0x45, 0x05, 0xc9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0xe9, 0xf9, 0x39,
	0x89, 0x79, 0xe9, 0xfa, 0x68, 0x49, 0x77, 0x11, 0x13, 0xb3, 0xbb, 0x6f, 0xf0, 0x2a, 0x26, 0x6c,
	0x76, 0x24, 0xb1, 0x81, 0x39, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x6b, 0x09, 0x12,
	0x29, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeometryServiceClient is the client API for GeometryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeometryServiceClient interface {
	// Execute a single blocking geometry operation
	Operate(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (*GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	OperateBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamClient, error)
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	OperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamFlowClient, error)
	// Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
	OperateServerStream(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (GeometryService_OperateServerStreamClient, error)
	// Maybe something like a union operation. for now, this is not implemented.
	OperateClientStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateClientStreamClient, error)
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperateBiStreamFlowClient, error)
}

type geometryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeometryServiceClient(cc grpc.ClientConnInterface) GeometryServiceClient {
	return &geometryServiceClient{cc}
}

func (c *geometryServiceClient) Operate(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (*GeometryResponse, error) {
	out := new(GeometryResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.GeometryService/Operate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geometryServiceClient) OperateBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[0], "/epl.protobuf.v1.GeometryService/OperateBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateBiStreamClient{stream}
	return x, nil
}

type GeometryService_OperateBiStreamClient interface {
	Send(*GeometryRequest) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateBiStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateBiStreamClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[1], "/epl.protobuf.v1.GeometryService/OperateBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_OperateBiStreamFlowClient interface {
	Send(*GeometryRequest) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateBiStreamFlowClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamFlowClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateServerStream(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (GeometryService_OperateServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[2], "/epl.protobuf.v1.GeometryService/OperateServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeometryService_OperateServerStreamClient interface {
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateServerStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateServerStreamClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateClientStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[3], "/epl.protobuf.v1.GeometryService/OperateClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateClientStreamClient{stream}
	return x, nil
}

type GeometryService_OperateClientStreamClient interface {
	Send(*GeometryRequest) error
	CloseAndRecv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateClientStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateClientStreamClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateClientStreamClient) CloseAndRecv() (*GeometryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) FileOperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperateBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[4], "/epl.protobuf.v1.GeometryService/FileOperateBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceFileOperateBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_FileOperateBiStreamFlowClient interface {
	Send(*FileRequestChunk) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceFileOperateBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceFileOperateBiStreamFlowClient) Send(m *FileRequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceFileOperateBiStreamFlowClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeometryServiceServer is the server API for GeometryService service.
type GeometryServiceServer interface {
	// Execute a single blocking geometry operation
	Operate(context.Context, *GeometryRequest) (*GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	OperateBiStream(GeometryService_OperateBiStreamServer) error
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	OperateBiStreamFlow(GeometryService_OperateBiStreamFlowServer) error
	// Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
	OperateServerStream(*GeometryRequest, GeometryService_OperateServerStreamServer) error
	// Maybe something like a union operation. for now, this is not implemented.
	OperateClientStream(GeometryService_OperateClientStreamServer) error
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperateBiStreamFlow(GeometryService_FileOperateBiStreamFlowServer) error
}

// UnimplementedGeometryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeometryServiceServer struct {
}

func (*UnimplementedGeometryServiceServer) Operate(ctx context.Context, req *GeometryRequest) (*GeometryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operate not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateBiStream(srv GeometryService_OperateBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateBiStream not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateBiStreamFlow(srv GeometryService_OperateBiStreamFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateBiStreamFlow not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateServerStream(req *GeometryRequest, srv GeometryService_OperateServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateServerStream not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateClientStream(srv GeometryService_OperateClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateClientStream not implemented")
}
func (*UnimplementedGeometryServiceServer) FileOperateBiStreamFlow(srv GeometryService_FileOperateBiStreamFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method FileOperateBiStreamFlow not implemented")
}

func RegisterGeometryServiceServer(s *grpc.Server, srv GeometryServiceServer) {
	s.RegisterService(&_GeometryService_serviceDesc, srv)
}

func _GeometryService_Operate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeometryServiceServer).Operate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.GeometryService/Operate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeometryServiceServer).Operate(ctx, req.(*GeometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeometryService_OperateBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateBiStream(&geometryServiceOperateBiStreamServer{stream})
}

type GeometryService_OperateBiStreamServer interface {
	Send(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateBiStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateBiStreamServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_OperateBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateBiStreamFlow(&geometryServiceOperateBiStreamFlowServer{stream})
}

type GeometryService_OperateBiStreamFlowServer interface {
	Send(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateBiStreamFlowServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamFlowServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_OperateServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GeometryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeometryServiceServer).OperateServerStream(m, &geometryServiceOperateServerStreamServer{stream})
}

type GeometryService_OperateServerStreamServer interface {
	Send(*GeometryResponse) error
	grpc.ServerStream
}

type geometryServiceOperateServerStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateServerStreamServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GeometryService_OperateClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateClientStream(&geometryServiceOperateClientStreamServer{stream})
}

type GeometryService_OperateClientStreamServer interface {
	SendAndClose(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateClientStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateClientStreamServer) SendAndClose(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateClientStreamServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_FileOperateBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).FileOperateBiStreamFlow(&geometryServiceFileOperateBiStreamFlowServer{stream})
}

type GeometryService_FileOperateBiStreamFlowServer interface {
	Send(*GeometryResponse) error
	Recv() (*FileRequestChunk, error)
	grpc.ServerStream
}

type geometryServiceFileOperateBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceFileOperateBiStreamFlowServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceFileOperateBiStreamFlowServer) Recv() (*FileRequestChunk, error) {
	m := new(FileRequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GeometryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.v1.GeometryService",
	HandlerType: (*GeometryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operate",
			Handler:    _GeometryService_Operate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OperateBiStream",
			Handler:       _GeometryService_OperateBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OperateBiStreamFlow",
			Handler:       _GeometryService_OperateBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OperateServerStream",
			Handler:       _GeometryService_OperateServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OperateClientStream",
			Handler:       _GeometryService_OperateClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileOperateBiStreamFlow",
			Handler:       _GeometryService_FileOperateBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/protobuf/v1/geometry_service.proto",
}
