//
//Copyright 2017-2019 Echo Park Labs
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//For additional information, contact:
//
//email: info@echoparklabs.io

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: epl/protobuf/v1/geometry_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_epl_protobuf_v1_geometry_service_proto protoreflect.FileDescriptor

var file_epl_protobuf_v1_geometry_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x65, 0x70, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xca, 0x04, 0x0a, 0x0f, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a,
	0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x60, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x5e, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x5e, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x65, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x21, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x79, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x65, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x4d, 0x53, 0xaa, 0x02, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_epl_protobuf_v1_geometry_service_proto_goTypes = []interface{}{
	(*GeometryRequest)(nil),  // 0: epl.protobuf.v1.GeometryRequest
	(*FileRequestChunk)(nil), // 1: epl.protobuf.v1.FileRequestChunk
	(*GeometryResponse)(nil), // 2: epl.protobuf.v1.GeometryResponse
}
var file_epl_protobuf_v1_geometry_service_proto_depIdxs = []int32{
	0, // 0: epl.protobuf.v1.GeometryService.Operate:input_type -> epl.protobuf.v1.GeometryRequest
	0, // 1: epl.protobuf.v1.GeometryService.OperateBiStream:input_type -> epl.protobuf.v1.GeometryRequest
	0, // 2: epl.protobuf.v1.GeometryService.OperateBiStreamFlow:input_type -> epl.protobuf.v1.GeometryRequest
	0, // 3: epl.protobuf.v1.GeometryService.OperateServerStream:input_type -> epl.protobuf.v1.GeometryRequest
	0, // 4: epl.protobuf.v1.GeometryService.OperateClientStream:input_type -> epl.protobuf.v1.GeometryRequest
	1, // 5: epl.protobuf.v1.GeometryService.FileOperateBiStreamFlow:input_type -> epl.protobuf.v1.FileRequestChunk
	2, // 6: epl.protobuf.v1.GeometryService.Operate:output_type -> epl.protobuf.v1.GeometryResponse
	2, // 7: epl.protobuf.v1.GeometryService.OperateBiStream:output_type -> epl.protobuf.v1.GeometryResponse
	2, // 8: epl.protobuf.v1.GeometryService.OperateBiStreamFlow:output_type -> epl.protobuf.v1.GeometryResponse
	2, // 9: epl.protobuf.v1.GeometryService.OperateServerStream:output_type -> epl.protobuf.v1.GeometryResponse
	2, // 10: epl.protobuf.v1.GeometryService.OperateClientStream:output_type -> epl.protobuf.v1.GeometryResponse
	2, // 11: epl.protobuf.v1.GeometryService.FileOperateBiStreamFlow:output_type -> epl.protobuf.v1.GeometryResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_epl_protobuf_v1_geometry_service_proto_init() }
func file_epl_protobuf_v1_geometry_service_proto_init() {
	if File_epl_protobuf_v1_geometry_service_proto != nil {
		return
	}
	file_epl_protobuf_v1_geometry_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epl_protobuf_v1_geometry_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_epl_protobuf_v1_geometry_service_proto_goTypes,
		DependencyIndexes: file_epl_protobuf_v1_geometry_service_proto_depIdxs,
	}.Build()
	File_epl_protobuf_v1_geometry_service_proto = out.File
	file_epl_protobuf_v1_geometry_service_proto_rawDesc = nil
	file_epl_protobuf_v1_geometry_service_proto_goTypes = nil
	file_epl_protobuf_v1_geometry_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeometryServiceClient is the client API for GeometryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeometryServiceClient interface {
	// Execute a single blocking geometry operation
	Operate(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (*GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	OperateBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamClient, error)
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	OperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamFlowClient, error)
	// Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
	OperateServerStream(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (GeometryService_OperateServerStreamClient, error)
	// Maybe something like a union operation. for now, this is not implemented.
	OperateClientStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateClientStreamClient, error)
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperateBiStreamFlowClient, error)
}

type geometryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeometryServiceClient(cc grpc.ClientConnInterface) GeometryServiceClient {
	return &geometryServiceClient{cc}
}

func (c *geometryServiceClient) Operate(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (*GeometryResponse, error) {
	out := new(GeometryResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.GeometryService/Operate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geometryServiceClient) OperateBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[0], "/epl.protobuf.v1.GeometryService/OperateBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateBiStreamClient{stream}
	return x, nil
}

type GeometryService_OperateBiStreamClient interface {
	Send(*GeometryRequest) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateBiStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateBiStreamClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[1], "/epl.protobuf.v1.GeometryService/OperateBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_OperateBiStreamFlowClient interface {
	Send(*GeometryRequest) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateBiStreamFlowClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamFlowClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateServerStream(ctx context.Context, in *GeometryRequest, opts ...grpc.CallOption) (GeometryService_OperateServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[2], "/epl.protobuf.v1.GeometryService/OperateServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeometryService_OperateServerStreamClient interface {
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateServerStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateServerStreamClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) OperateClientStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_OperateClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[3], "/epl.protobuf.v1.GeometryService/OperateClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceOperateClientStreamClient{stream}
	return x, nil
}

type GeometryService_OperateClientStreamClient interface {
	Send(*GeometryRequest) error
	CloseAndRecv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceOperateClientStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceOperateClientStreamClient) Send(m *GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceOperateClientStreamClient) CloseAndRecv() (*GeometryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) FileOperateBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperateBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[4], "/epl.protobuf.v1.GeometryService/FileOperateBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceFileOperateBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_FileOperateBiStreamFlowClient interface {
	Send(*FileRequestChunk) error
	Recv() (*GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceFileOperateBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceFileOperateBiStreamFlowClient) Send(m *FileRequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceFileOperateBiStreamFlowClient) Recv() (*GeometryResponse, error) {
	m := new(GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeometryServiceServer is the server API for GeometryService service.
type GeometryServiceServer interface {
	// Execute a single blocking geometry operation
	Operate(context.Context, *GeometryRequest) (*GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	OperateBiStream(GeometryService_OperateBiStreamServer) error
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	OperateBiStreamFlow(GeometryService_OperateBiStreamFlowServer) error
	// Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
	OperateServerStream(*GeometryRequest, GeometryService_OperateServerStreamServer) error
	// Maybe something like a union operation. for now, this is not implemented.
	OperateClientStream(GeometryService_OperateClientStreamServer) error
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperateBiStreamFlow(GeometryService_FileOperateBiStreamFlowServer) error
}

// UnimplementedGeometryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeometryServiceServer struct {
}

func (*UnimplementedGeometryServiceServer) Operate(context.Context, *GeometryRequest) (*GeometryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operate not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateBiStream(GeometryService_OperateBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateBiStream not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateBiStreamFlow(GeometryService_OperateBiStreamFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateBiStreamFlow not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateServerStream(*GeometryRequest, GeometryService_OperateServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateServerStream not implemented")
}
func (*UnimplementedGeometryServiceServer) OperateClientStream(GeometryService_OperateClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperateClientStream not implemented")
}
func (*UnimplementedGeometryServiceServer) FileOperateBiStreamFlow(GeometryService_FileOperateBiStreamFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method FileOperateBiStreamFlow not implemented")
}

func RegisterGeometryServiceServer(s *grpc.Server, srv GeometryServiceServer) {
	s.RegisterService(&_GeometryService_serviceDesc, srv)
}

func _GeometryService_Operate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeometryServiceServer).Operate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.GeometryService/Operate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeometryServiceServer).Operate(ctx, req.(*GeometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeometryService_OperateBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateBiStream(&geometryServiceOperateBiStreamServer{stream})
}

type GeometryService_OperateBiStreamServer interface {
	Send(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateBiStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateBiStreamServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_OperateBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateBiStreamFlow(&geometryServiceOperateBiStreamFlowServer{stream})
}

type GeometryService_OperateBiStreamFlowServer interface {
	Send(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateBiStreamFlowServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateBiStreamFlowServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_OperateServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GeometryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeometryServiceServer).OperateServerStream(m, &geometryServiceOperateServerStreamServer{stream})
}

type GeometryService_OperateServerStreamServer interface {
	Send(*GeometryResponse) error
	grpc.ServerStream
}

type geometryServiceOperateServerStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateServerStreamServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GeometryService_OperateClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).OperateClientStream(&geometryServiceOperateClientStreamServer{stream})
}

type GeometryService_OperateClientStreamServer interface {
	SendAndClose(*GeometryResponse) error
	Recv() (*GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceOperateClientStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceOperateClientStreamServer) SendAndClose(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceOperateClientStreamServer) Recv() (*GeometryRequest, error) {
	m := new(GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_FileOperateBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).FileOperateBiStreamFlow(&geometryServiceFileOperateBiStreamFlowServer{stream})
}

type GeometryService_FileOperateBiStreamFlowServer interface {
	Send(*GeometryResponse) error
	Recv() (*FileRequestChunk, error)
	grpc.ServerStream
}

type geometryServiceFileOperateBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceFileOperateBiStreamFlowServer) Send(m *GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceFileOperateBiStreamFlowServer) Recv() (*FileRequestChunk, error) {
	m := new(FileRequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GeometryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.v1.GeometryService",
	HandlerType: (*GeometryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operate",
			Handler:    _GeometryService_Operate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OperateBiStream",
			Handler:       _GeometryService_OperateBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OperateBiStreamFlow",
			Handler:       _GeometryService_OperateBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OperateServerStream",
			Handler:       _GeometryService_OperateServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OperateClientStream",
			Handler:       _GeometryService_OperateClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileOperateBiStreamFlow",
			Handler:       _GeometryService_FileOperateBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/protobuf/v1/geometry_service.proto",
}
