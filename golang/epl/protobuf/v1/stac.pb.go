//
//Copyright 2017-2019 Echo Park Labs
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//For additional information, contact:
//
//email: info@echoparklabs.io

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: epl/protobuf/v1/stac.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	AssetType_UNKNOWN_ASSET AssetType = 0
	AssetType_JPEG          AssetType = 1
	AssetType_GEOTIFF       AssetType = 2 // geotiff https://www.gdal.org/frmt_gtiff.html
	AssetType_LERC          AssetType = 3 // Limited Error Raster Compression
	AssetType_MRF           AssetType = 4 // metadata raster file https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-metadata-file-mrf
	AssetType_MRF_IDX       AssetType = 5 // metadata raster file index https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-index-file-idx
	AssetType_MRF_XML       AssetType = 6
	AssetType_CO_GEOTIFF    AssetType = 7 // cloud optimized geotiff https://www.cogeo.org/
	AssetType_RAW           AssetType = 8 // Generic raw data
	AssetType_THUMBNAIL     AssetType = 9 // thumbnail. could be jpg or png
	AssetType_TIFF          AssetType = 10
	AssetType_JPEG_2000     AssetType = 11
	AssetType_XML           AssetType = 12
	AssetType_TXT           AssetType = 13
	AssetType_PNG           AssetType = 14
	AssetType_OVERVIEW      AssetType = 15 // GDAL overview file https://gdal.org/programs/gdaladdo.html
	AssetType_JSON          AssetType = 16
	AssetType_HTML          AssetType = 17
	AssetType_WEBP          AssetType = 18
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0:  "UNKNOWN_ASSET",
		1:  "JPEG",
		2:  "GEOTIFF",
		3:  "LERC",
		4:  "MRF",
		5:  "MRF_IDX",
		6:  "MRF_XML",
		7:  "CO_GEOTIFF",
		8:  "RAW",
		9:  "THUMBNAIL",
		10: "TIFF",
		11: "JPEG_2000",
		12: "XML",
		13: "TXT",
		14: "PNG",
		15: "OVERVIEW",
		16: "JSON",
		17: "HTML",
		18: "WEBP",
	}
	AssetType_value = map[string]int32{
		"UNKNOWN_ASSET": 0,
		"JPEG":          1,
		"GEOTIFF":       2,
		"LERC":          3,
		"MRF":           4,
		"MRF_IDX":       5,
		"MRF_XML":       6,
		"CO_GEOTIFF":    7,
		"RAW":           8,
		"THUMBNAIL":     9,
		"TIFF":          10,
		"JPEG_2000":     11,
		"XML":           12,
		"TXT":           13,
		"PNG":           14,
		"OVERVIEW":      15,
		"JSON":          16,
		"HTML":          17,
		"WEBP":          18,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{0}
}

type CloudPlatform int32

const (
	CloudPlatform_UNKNOWN_CLOUD_PLATFORM CloudPlatform = 0
	CloudPlatform_AWS                    CloudPlatform = 1 // Amazon Web Services
	CloudPlatform_GCP                    CloudPlatform = 2 // Google Cloud Platform
	CloudPlatform_AZURE                  CloudPlatform = 3 // Microsoft's Azure
	CloudPlatform_IBM                    CloudPlatform = 4 // IBM
)

// Enum value maps for CloudPlatform.
var (
	CloudPlatform_name = map[int32]string{
		0: "UNKNOWN_CLOUD_PLATFORM",
		1: "AWS",
		2: "GCP",
		3: "AZURE",
		4: "IBM",
	}
	CloudPlatform_value = map[string]int32{
		"UNKNOWN_CLOUD_PLATFORM": 0,
		"AWS":                    1,
		"GCP":                    2,
		"AZURE":                  3,
		"IBM":                    4,
	}
)

func (x CloudPlatform) Enum() *CloudPlatform {
	p := new(CloudPlatform)
	*p = x
	return p
}

func (x CloudPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[1].Descriptor()
}

func (CloudPlatform) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[1]
}

func (x CloudPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudPlatform.Descriptor instead.
func (CloudPlatform) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{1}
}

type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_LANDSAT_1        Platform = 2
	Platform_LANDSAT_2        Platform = 4
	Platform_LANDSAT_3        Platform = 8
	Platform_LANDSAT_123      Platform = 14
	Platform_LANDSAT_4        Platform = 16
	Platform_LANDSAT_5        Platform = 32
	Platform_LANDSAT_45       Platform = 48
	Platform_LANDSAT_7        Platform = 64
	Platform_LANDSAT_8        Platform = 128
	// near space labs platform
	Platform_SWIFT_2 Platform = 256
	Platform_SWIFT_3 Platform = 512
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:   "UNKNOWN_PLATFORM",
		2:   "LANDSAT_1",
		4:   "LANDSAT_2",
		8:   "LANDSAT_3",
		14:  "LANDSAT_123",
		16:  "LANDSAT_4",
		32:  "LANDSAT_5",
		48:  "LANDSAT_45",
		64:  "LANDSAT_7",
		128: "LANDSAT_8",
		256: "SWIFT_2",
		512: "SWIFT_3",
	}
	Platform_value = map[string]int32{
		"UNKNOWN_PLATFORM": 0,
		"LANDSAT_1":        2,
		"LANDSAT_2":        4,
		"LANDSAT_3":        8,
		"LANDSAT_123":      14,
		"LANDSAT_4":        16,
		"LANDSAT_5":        32,
		"LANDSAT_45":       48,
		"LANDSAT_7":        64,
		"LANDSAT_8":        128,
		"SWIFT_2":          256,
		"SWIFT_3":          512,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[2].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[2]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{2}
}

type Instrument int32

const (
	Instrument_UNKNOWN_INSTRUMENT Instrument = 0
	Instrument_OLI                Instrument = 2
	Instrument_TIRS               Instrument = 4
	Instrument_OLI_TIRS           Instrument = 6
	// near space labs instrument 1
	Instrument_POM_1 Instrument = 8
	Instrument_TM    Instrument = 16
	Instrument_ETM   Instrument = 32
	Instrument_MSS   Instrument = 64
	// near space labs instrument 2
	Instrument_POM_2 Instrument = 128
)

// Enum value maps for Instrument.
var (
	Instrument_name = map[int32]string{
		0:   "UNKNOWN_INSTRUMENT",
		2:   "OLI",
		4:   "TIRS",
		6:   "OLI_TIRS",
		8:   "POM_1",
		16:  "TM",
		32:  "ETM",
		64:  "MSS",
		128: "POM_2",
	}
	Instrument_value = map[string]int32{
		"UNKNOWN_INSTRUMENT": 0,
		"OLI":                2,
		"TIRS":               4,
		"OLI_TIRS":           6,
		"POM_1":              8,
		"TM":                 16,
		"ETM":                32,
		"MSS":                64,
		"POM_2":              128,
	}
)

func (x Instrument) Enum() *Instrument {
	p := new(Instrument)
	*p = x
	return p
}

func (x Instrument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instrument) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[3].Descriptor()
}

func (Instrument) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[3]
}

func (x Instrument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instrument.Descriptor instead.
func (Instrument) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{3}
}

type Constellation int32

const (
	Constellation_UNKNOWN_CONSTELLATION Constellation = 0
)

// Enum value maps for Constellation.
var (
	Constellation_name = map[int32]string{
		0: "UNKNOWN_CONSTELLATION",
	}
	Constellation_value = map[string]int32{
		"UNKNOWN_CONSTELLATION": 0,
	}
)

func (x Constellation) Enum() *Constellation {
	p := new(Constellation)
	*p = x
	return p
}

func (x Constellation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Constellation) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[4].Descriptor()
}

func (Constellation) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[4]
}

func (x Constellation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Constellation.Descriptor instead.
func (Constellation) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{4}
}

type Mission int32

const (
	Mission_UNKNOWN_MISSION Mission = 0
	Mission_LANDSAT         Mission = 2
	Mission_NAIP            Mission = 4
	// spanish aerial dataset
	Mission_PNOA Mission = 8
	// near space labs dataset
	Mission_SWIFT Mission = 16
)

// Enum value maps for Mission.
var (
	Mission_name = map[int32]string{
		0:  "UNKNOWN_MISSION",
		2:  "LANDSAT",
		4:  "NAIP",
		8:  "PNOA",
		16: "SWIFT",
	}
	Mission_value = map[string]int32{
		"UNKNOWN_MISSION": 0,
		"LANDSAT":         2,
		"NAIP":            4,
		"PNOA":            8,
		"SWIFT":           16,
	}
)

func (x Mission) Enum() *Mission {
	p := new(Mission)
	*p = x
	return p
}

func (x Mission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mission) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[5].Descriptor()
}

func (Mission) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[5]
}

func (x Mission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mission.Descriptor instead.
func (Mission) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{5}
}

type Sat_OrbitState int32

const (
	Sat_UKNOWN_ORBIT_STATE  Sat_OrbitState = 0
	Sat_ASCENDING_ORBIT     Sat_OrbitState = 1
	Sat_DESCENDING_ORBIT    Sat_OrbitState = 2
	Sat_GEOSTATIONARY_ORBIT Sat_OrbitState = 3
)

// Enum value maps for Sat_OrbitState.
var (
	Sat_OrbitState_name = map[int32]string{
		0: "UKNOWN_ORBIT_STATE",
		1: "ASCENDING_ORBIT",
		2: "DESCENDING_ORBIT",
		3: "GEOSTATIONARY_ORBIT",
	}
	Sat_OrbitState_value = map[string]int32{
		"UKNOWN_ORBIT_STATE":  0,
		"ASCENDING_ORBIT":     1,
		"DESCENDING_ORBIT":    2,
		"GEOSTATIONARY_ORBIT": 3,
	}
)

func (x Sat_OrbitState) Enum() *Sat_OrbitState {
	p := new(Sat_OrbitState)
	*p = x
	return p
}

func (x Sat_OrbitState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sat_OrbitState) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[6].Descriptor()
}

func (Sat_OrbitState) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[6]
}

func (x Sat_OrbitState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sat_OrbitState.Descriptor instead.
func (Sat_OrbitState) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{10, 0}
}

type Eo_Band int32

const (
	// band type not specified. default value. if used in query, any band type is acceptable
	Eo_UNKNOWN_BAND Eo_Band = 0
	Eo_COASTAL      Eo_Band = 2
	Eo_BLUE         Eo_Band = 4
	Eo_GREEN        Eo_Band = 8
	Eo_RED          Eo_Band = 16
	Eo_RGB          Eo_Band = 28
	Eo_NIR          Eo_Band = 32
	// special case for landsat 1-3
	Eo_NIR_2  Eo_Band = 33
	Eo_RGBIR  Eo_Band = 60
	Eo_SWIR_1 Eo_Band = 64
	Eo_SWIR_2 Eo_Band = 128
	Eo_PAN    Eo_Band = 256
	Eo_CIRRUS Eo_Band = 512
	Eo_LWIR_1 Eo_Band = 1024
	Eo_LWIR_2 Eo_Band = 2048
)

// Enum value maps for Eo_Band.
var (
	Eo_Band_name = map[int32]string{
		0:    "UNKNOWN_BAND",
		2:    "COASTAL",
		4:    "BLUE",
		8:    "GREEN",
		16:   "RED",
		28:   "RGB",
		32:   "NIR",
		33:   "NIR_2",
		60:   "RGBIR",
		64:   "SWIR_1",
		128:  "SWIR_2",
		256:  "PAN",
		512:  "CIRRUS",
		1024: "LWIR_1",
		2048: "LWIR_2",
	}
	Eo_Band_value = map[string]int32{
		"UNKNOWN_BAND": 0,
		"COASTAL":      2,
		"BLUE":         4,
		"GREEN":        8,
		"RED":          16,
		"RGB":          28,
		"NIR":          32,
		"NIR_2":        33,
		"RGBIR":        60,
		"SWIR_1":       64,
		"SWIR_2":       128,
		"PAN":          256,
		"CIRRUS":       512,
		"LWIR_1":       1024,
		"LWIR_2":       2048,
	}
)

func (x Eo_Band) Enum() *Eo_Band {
	p := new(Eo_Band)
	*p = x
	return p
}

func (x Eo_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Eo_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[7].Descriptor()
}

func (Eo_Band) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[7]
}

func (x Eo_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Eo_Band.Descriptor instead.
func (Eo_Band) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{12, 0}
}

type Sar_Platform int32

const (
	Sar_UNKNOWN_PLATFORM Sar_Platform = 0
	Sar_ENVISAT          Sar_Platform = 1
	Sar_SENTINEL_1A      Sar_Platform = 2
)

// Enum value maps for Sar_Platform.
var (
	Sar_Platform_name = map[int32]string{
		0: "UNKNOWN_PLATFORM",
		1: "ENVISAT",
		2: "SENTINEL_1A",
	}
	Sar_Platform_value = map[string]int32{
		"UNKNOWN_PLATFORM": 0,
		"ENVISAT":          1,
		"SENTINEL_1A":      2,
	}
)

func (x Sar_Platform) Enum() *Sar_Platform {
	p := new(Sar_Platform)
	*p = x
	return p
}

func (x Sar_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sar_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[8].Descriptor()
}

func (Sar_Platform) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[8]
}

func (x Sar_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sar_Platform.Descriptor instead.
func (Sar_Platform) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{17, 0}
}

type Sar_Instrument int32

const (
	Sar_UNKNOWN_INSTRUMENT Sar_Instrument = 0
)

// Enum value maps for Sar_Instrument.
var (
	Sar_Instrument_name = map[int32]string{
		0: "UNKNOWN_INSTRUMENT",
	}
	Sar_Instrument_value = map[string]int32{
		"UNKNOWN_INSTRUMENT": 0,
	}
)

func (x Sar_Instrument) Enum() *Sar_Instrument {
	p := new(Sar_Instrument)
	*p = x
	return p
}

func (x Sar_Instrument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sar_Instrument) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[9].Descriptor()
}

func (Sar_Instrument) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[9]
}

func (x Sar_Instrument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sar_Instrument.Descriptor instead.
func (Sar_Instrument) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{17, 1}
}

type Landsat_CollectionCategory int32

const (
	Landsat_UNKNOWN_COLLECTION_CATEGORY Landsat_CollectionCategory = 0
	Landsat_A1                          Landsat_CollectionCategory = 1
	Landsat_A2                          Landsat_CollectionCategory = 2
	Landsat_T1                          Landsat_CollectionCategory = 3
	Landsat_T2                          Landsat_CollectionCategory = 4
	Landsat_RT                          Landsat_CollectionCategory = 5
)

// Enum value maps for Landsat_CollectionCategory.
var (
	Landsat_CollectionCategory_name = map[int32]string{
		0: "UNKNOWN_COLLECTION_CATEGORY",
		1: "A1",
		2: "A2",
		3: "T1",
		4: "T2",
		5: "RT",
	}
	Landsat_CollectionCategory_value = map[string]int32{
		"UNKNOWN_COLLECTION_CATEGORY": 0,
		"A1":                          1,
		"A2":                          2,
		"T1":                          3,
		"T2":                          4,
		"RT":                          5,
	}
)

func (x Landsat_CollectionCategory) Enum() *Landsat_CollectionCategory {
	p := new(Landsat_CollectionCategory)
	*p = x
	return p
}

func (x Landsat_CollectionCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Landsat_CollectionCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[10].Descriptor()
}

func (Landsat_CollectionCategory) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[10]
}

func (x Landsat_CollectionCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Landsat_CollectionCategory.Descriptor instead.
func (Landsat_CollectionCategory) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{18, 0}
}

type Landsat_WRSType int32

const (
	Landsat_UKNOWN_WRS Landsat_WRSType = 0
	Landsat_WRS1       Landsat_WRSType = 1
	Landsat_WRS2       Landsat_WRSType = 2
)

// Enum value maps for Landsat_WRSType.
var (
	Landsat_WRSType_name = map[int32]string{
		0: "UKNOWN_WRS",
		1: "WRS1",
		2: "WRS2",
	}
	Landsat_WRSType_value = map[string]int32{
		"UKNOWN_WRS": 0,
		"WRS1":       1,
		"WRS2":       2,
	}
)

func (x Landsat_WRSType) Enum() *Landsat_WRSType {
	p := new(Landsat_WRSType)
	*p = x
	return p
}

func (x Landsat_WRSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Landsat_WRSType) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[11].Descriptor()
}

func (Landsat_WRSType) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[11]
}

func (x Landsat_WRSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Landsat_WRSType.Descriptor instead.
func (Landsat_WRSType) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{18, 1}
}

type Landsat_ProcessingLevel int32

const (
	Landsat_UNKNOWN_PROCESSING_LEVEL Landsat_ProcessingLevel = 0
	Landsat_L1G                      Landsat_ProcessingLevel = 1
	Landsat_L1TP                     Landsat_ProcessingLevel = 2
	Landsat_L1T                      Landsat_ProcessingLevel = 3
	Landsat_L1GT                     Landsat_ProcessingLevel = 4
	Landsat_L1GS                     Landsat_ProcessingLevel = 5
)

// Enum value maps for Landsat_ProcessingLevel.
var (
	Landsat_ProcessingLevel_name = map[int32]string{
		0: "UNKNOWN_PROCESSING_LEVEL",
		1: "L1G",
		2: "L1TP",
		3: "L1T",
		4: "L1GT",
		5: "L1GS",
	}
	Landsat_ProcessingLevel_value = map[string]int32{
		"UNKNOWN_PROCESSING_LEVEL": 0,
		"L1G":                      1,
		"L1TP":                     2,
		"L1T":                      3,
		"L1GT":                     4,
		"L1GS":                     5,
	}
)

func (x Landsat_ProcessingLevel) Enum() *Landsat_ProcessingLevel {
	p := new(Landsat_ProcessingLevel)
	*p = x
	return p
}

func (x Landsat_ProcessingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Landsat_ProcessingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_stac_proto_enumTypes[12].Descriptor()
}

func (Landsat_ProcessingLevel) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_stac_proto_enumTypes[12]
}

func (x Landsat_ProcessingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Landsat_ProcessingLevel.Descriptor instead.
func (Landsat_ProcessingLevel) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{18, 2}
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The STAC version the Collection implements. STAC versions
	// can be mixed, but please keep the recommended best practices in mind.
	StacVersion string `protobuf:"bytes,1,opt,name=stac_version,json=stacVersion,proto3" json:"stac_version,omitempty"`
	// REQUIRED. Identifier for the collection that is unique across the provider.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A short descriptive one-line title for the collection.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// REQUIRED. Detailed multi-line description to fully explain the collection. CommonMark 0.29 syntax MAY be used for rich text representation.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// List of keywords describing the collection.
	Keywords []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// REQUIRED. Collection's license(s), either a SPDX License identifier, various if multiple licenses apply or proprietary for all other cases.
	License string `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty"`
	// A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.
	Providers []*Provider `protobuf:"bytes,8,rep,name=providers,proto3" json:"providers,omitempty"`
	// REQUIRED. Spatial and temporal extents.
	Extent *Extent `protobuf:"bytes,9,opt,name=extent,proto3" json:"extent,omitempty"`
	// A map of property summaries, either a set of values or statistics such as a range.
	Summaries map[string]*Stats `protobuf:"bytes,10,rep,name=summaries,proto3" json:"summaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{0}
}

func (x *Collection) GetStacVersion() string {
	if x != nil {
		return x.StacVersion
	}
	return ""
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Collection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collection) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Collection) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Collection) GetProviders() []*Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *Collection) GetExtent() *Extent {
	if x != nil {
		return x.Extent
	}
	return nil
}

func (x *Collection) GetSummaries() map[string]*Stats {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Spatial:
	//	*CollectionRequest_Bbox
	//	*CollectionRequest_Intersects
	Spatial isCollectionRequest_Spatial `protobuf_oneof:"spatial"`
}

func (x *CollectionRequest) Reset() {
	*x = CollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRequest) ProtoMessage() {}

func (x *CollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRequest.ProtoReflect.Descriptor instead.
func (*CollectionRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *CollectionRequest) GetSpatial() isCollectionRequest_Spatial {
	if m != nil {
		return m.Spatial
	}
	return nil
}

func (x *CollectionRequest) GetBbox() *EnvelopeData {
	if x, ok := x.GetSpatial().(*CollectionRequest_Bbox); ok {
		return x.Bbox
	}
	return nil
}

func (x *CollectionRequest) GetIntersects() *GeometryData {
	if x, ok := x.GetSpatial().(*CollectionRequest_Intersects); ok {
		return x.Intersects
	}
	return nil
}

type isCollectionRequest_Spatial interface {
	isCollectionRequest_Spatial()
}

type CollectionRequest_Bbox struct {
	Bbox *EnvelopeData `protobuf:"bytes,2,opt,name=bbox,proto3,oneof"`
}

type CollectionRequest_Intersects struct {
	Intersects *GeometryData `protobuf:"bytes,3,opt,name=intersects,proto3,oneof"`
}

func (*CollectionRequest_Bbox) isCollectionRequest_Spatial() {}

func (*CollectionRequest_Intersects) isCollectionRequest_Spatial() {}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{2}
}

// The object describes the spatio-temporal extents of the Collection. Both spatial and temporal extents are required to be specified.
type Extent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. Potential spatial extent covered by the collection.
	Spatial []*EnvelopeData `protobuf:"bytes,1,rep,name=spatial,proto3" json:"spatial,omitempty"`
	// REQUIRED. Potential temporal extent covered by the collection.
	Temporal []*Interval `protobuf:"bytes,2,rep,name=temporal,proto3" json:"temporal,omitempty"`
}

func (x *Extent) Reset() {
	*x = Extent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extent) ProtoMessage() {}

func (x *Extent) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extent.ProtoReflect.Descriptor instead.
func (*Extent) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{3}
}

func (x *Extent) GetSpatial() []*EnvelopeData {
	if x != nil {
		return x.Spatial
	}
	return nil
}

func (x *Extent) GetTemporal() []*Interval {
	if x != nil {
		return x.Temporal
	}
	return nil
}

// https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md#temporal-extent-object
// The object describes the temporal extents of the Collection.
type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{4}
}

func (x *Interval) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Interval) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// The object provides information about a provider. A provider is any of the organizations that captures or processes the content of the collection and therefore influences the data offered by this collection. May also include information about the final storage provider hosting the data.
type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The name of the organization or the individual.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.29 syntax MAY be used for rich text representation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Roles of the provider. Any of licensor, producer, processor or host.
	Roles []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	// Homepage on which the provider describes the dataset and publishes contact information.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{5}
}

func (x *Provider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Provider) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Provider) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Provider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//*
// Spatio-Temporal Asset Catalog Item. This data item has a spatial and temporal extent. It has a unique identifier
// downloadable assets. It may have an extension with details beyond the spatial and temporal extents. It may have
// additional properties in the properties field
type StacItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider identifier. As most geospatial assets are already defined by some identification scheme by the data
	// provider it is recommended to simply use that ID. Data providers are advised to include sufficient information
	// to make their IDs globally unique, including things like unique satellite IDs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (optional) A human readable title describing the item.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// (optional) The id of the STAC Collection this Item references to (see collection relation type below). This
	// field is required if such a relation type is present. This field provides an easy way for a user to search for
	// any Items that belong in a specified Collection.
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	// the properties of an item that are not defined within the STAC specification. Requires marshalling and
	// un-marshalling https://developers.google.com/protocol-buffers/docs/proto3#any
	Properties *anypb.Any `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	// Dictionary of asset objects that can be downloaded, each with a unique key. Some pre-defined keys are listed
	// in the chapter 'Asset types'.
	Assets map[string]*Asset `protobuf:"bytes,5,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the spatial shape of the item. must have a spatial reference defined.
	Geometry *GeometryData `protobuf:"bytes,6,opt,name=geometry,proto3" json:"geometry,omitempty"`
	// the bounding box of the spatial shape of the item. must have a spatial reference defined.
	Bbox *EnvelopeData `protobuf:"bytes,7,opt,name=bbox,proto3" json:"bbox,omitempty"`
	// Types that are assignable to TemporalDeprecated:
	//	*StacItem_Datetime
	//	*StacItem_StartDatetime
	TemporalDeprecated isStacItem_TemporalDeprecated `protobuf_oneof:"temporal_deprecated"`
	// Types that are assignable to Temporal:
	//	*StacItem_Observed
	//	*StacItem_StartObservation
	Temporal isStacItem_Temporal `protobuf_oneof:"temporal"`
	// deprecated
	EndDatetime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
	// end timestamp for a period of observation
	EndObservation *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=end_observation,json=endObservation,proto3" json:"end_observation,omitempty"`
	// timestamp when it was created (according to STAC spec this applies to metadata only,
	// but in our case we haven't implemented the asset level created date yet, so we don't have a
	// differentiation yet between metadata creation and asset creation. used to be `processed`)
	Created *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	// last timestamp when STAC metadata itself was updated
	Updated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated,proto3" json:"updated,omitempty"`
	// spatial reference of the assets (if assets have different projections, those can be assigned on
	// the assets and any not defined default to this projection)
	Proj *ProjectionData `protobuf:"bytes,16,opt,name=proj,proto3" json:"proj,omitempty"`
	// platform from which the data was collected
	PlatformEnum Platform `protobuf:"varint,17,opt,name=platform_enum,json=platformEnum,proto3,enum=epl.protobuf.v1.Platform" json:"platform_enum,omitempty"`
	// platform from which the data was collected
	Platform string `protobuf:"bytes,18,opt,name=platform,proto3" json:"platform,omitempty"`
	// instrument which collected the data
	InstrumentEnum Instrument `protobuf:"varint,19,opt,name=instrument_enum,json=instrumentEnum,proto3,enum=epl.protobuf.v1.Instrument" json:"instrument_enum,omitempty"`
	// instrument which collected the data
	Instrument string `protobuf:"bytes,20,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// constellation of data collectors
	ConstellationEnum Constellation `protobuf:"varint,21,opt,name=constellation_enum,json=constellationEnum,proto3,enum=epl.protobuf.v1.Constellation" json:"constellation_enum,omitempty"`
	Constellation     string        `protobuf:"bytes,22,opt,name=constellation,proto3" json:"constellation,omitempty"`
	MissionEnum       Mission       `protobuf:"varint,23,opt,name=mission_enum,json=missionEnum,proto3,enum=epl.protobuf.v1.Mission" json:"mission_enum,omitempty"`
	Mission           string        `protobuf:"bytes,24,opt,name=mission,proto3" json:"mission,omitempty"`
	// ground sampling distance
	Gsd *wrapperspb.FloatValue `protobuf:"bytes,25,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// version of JSON STAC that this protobuf attempts to match
	StacVersion string `protobuf:"bytes,26,opt,name=stac_version,json=stacVersion,proto3" json:"stac_version,omitempty"`
	// version of protobuf STAC
	StacPbVersion string `protobuf:"bytes,27,opt,name=stac_pb_version,json=stacPbVersion,proto3" json:"stac_pb_version,omitempty"`
	// STAC
	StacExtensions []string `protobuf:"bytes,28,rep,name=stac_extensions,json=stacExtensions,proto3" json:"stac_extensions,omitempty"`
	// electro-optical data message
	Eo *Eo `protobuf:"bytes,29,opt,name=eo,proto3" json:"eo,omitempty"`
	// view of the asset, includes all relevant angular information
	View *View `protobuf:"bytes,34,opt,name=view,proto3" json:"view,omitempty"`
	// Landsat Message
	Landsat *Landsat `protobuf:"bytes,31,opt,name=landsat,proto3" json:"landsat,omitempty"`
	Mosaic  *Mosaic  `protobuf:"bytes,32,opt,name=mosaic,proto3" json:"mosaic,omitempty"`
}

func (x *StacItem) Reset() {
	*x = StacItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StacItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacItem) ProtoMessage() {}

func (x *StacItem) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacItem.ProtoReflect.Descriptor instead.
func (*StacItem) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{6}
}

func (x *StacItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StacItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StacItem) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *StacItem) GetProperties() *anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *StacItem) GetAssets() map[string]*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *StacItem) GetGeometry() *GeometryData {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *StacItem) GetBbox() *EnvelopeData {
	if x != nil {
		return x.Bbox
	}
	return nil
}

func (m *StacItem) GetTemporalDeprecated() isStacItem_TemporalDeprecated {
	if m != nil {
		return m.TemporalDeprecated
	}
	return nil
}

func (x *StacItem) GetDatetime() *timestamppb.Timestamp {
	if x, ok := x.GetTemporalDeprecated().(*StacItem_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *StacItem) GetStartDatetime() *timestamppb.Timestamp {
	if x, ok := x.GetTemporalDeprecated().(*StacItem_StartDatetime); ok {
		return x.StartDatetime
	}
	return nil
}

func (m *StacItem) GetTemporal() isStacItem_Temporal {
	if m != nil {
		return m.Temporal
	}
	return nil
}

func (x *StacItem) GetObserved() *timestamppb.Timestamp {
	if x, ok := x.GetTemporal().(*StacItem_Observed); ok {
		return x.Observed
	}
	return nil
}

func (x *StacItem) GetStartObservation() *timestamppb.Timestamp {
	if x, ok := x.GetTemporal().(*StacItem_StartObservation); ok {
		return x.StartObservation
	}
	return nil
}

func (x *StacItem) GetEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatetime
	}
	return nil
}

func (x *StacItem) GetEndObservation() *timestamppb.Timestamp {
	if x != nil {
		return x.EndObservation
	}
	return nil
}

func (x *StacItem) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *StacItem) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *StacItem) GetProj() *ProjectionData {
	if x != nil {
		return x.Proj
	}
	return nil
}

func (x *StacItem) GetPlatformEnum() Platform {
	if x != nil {
		return x.PlatformEnum
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *StacItem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *StacItem) GetInstrumentEnum() Instrument {
	if x != nil {
		return x.InstrumentEnum
	}
	return Instrument_UNKNOWN_INSTRUMENT
}

func (x *StacItem) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *StacItem) GetConstellationEnum() Constellation {
	if x != nil {
		return x.ConstellationEnum
	}
	return Constellation_UNKNOWN_CONSTELLATION
}

func (x *StacItem) GetConstellation() string {
	if x != nil {
		return x.Constellation
	}
	return ""
}

func (x *StacItem) GetMissionEnum() Mission {
	if x != nil {
		return x.MissionEnum
	}
	return Mission_UNKNOWN_MISSION
}

func (x *StacItem) GetMission() string {
	if x != nil {
		return x.Mission
	}
	return ""
}

func (x *StacItem) GetGsd() *wrapperspb.FloatValue {
	if x != nil {
		return x.Gsd
	}
	return nil
}

func (x *StacItem) GetStacVersion() string {
	if x != nil {
		return x.StacVersion
	}
	return ""
}

func (x *StacItem) GetStacPbVersion() string {
	if x != nil {
		return x.StacPbVersion
	}
	return ""
}

func (x *StacItem) GetStacExtensions() []string {
	if x != nil {
		return x.StacExtensions
	}
	return nil
}

func (x *StacItem) GetEo() *Eo {
	if x != nil {
		return x.Eo
	}
	return nil
}

func (x *StacItem) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *StacItem) GetLandsat() *Landsat {
	if x != nil {
		return x.Landsat
	}
	return nil
}

func (x *StacItem) GetMosaic() *Mosaic {
	if x != nil {
		return x.Mosaic
	}
	return nil
}

type isStacItem_TemporalDeprecated interface {
	isStacItem_TemporalDeprecated()
}

type StacItem_Datetime struct {
	// deprecated
	Datetime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=datetime,proto3,oneof"`
}

type StacItem_StartDatetime struct {
	// deprecated
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_datetime,json=startDatetime,proto3,oneof"`
}

func (*StacItem_Datetime) isStacItem_TemporalDeprecated() {}

func (*StacItem_StartDatetime) isStacItem_TemporalDeprecated() {}

type isStacItem_Temporal interface {
	isStacItem_Temporal()
}

type StacItem_Observed struct {
	// timestamp at which data was observed (optional if datetime set)
	Observed *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=observed,proto3,oneof"`
}

type StacItem_StartObservation struct {
	// start timestamp for a period of observation
	StartObservation *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=start_observation,json=startObservation,proto3,oneof"`
}

func (*StacItem_Observed) isStacItem_Temporal() {}

func (*StacItem_StartObservation) isStacItem_Temporal() {}

//*
// message for making a request for STAC items.
type StacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limit the number of results returned
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// the offset from which the query should start
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Types that are assignable to Identity:
	//	*StacRequest_Id
	//	*StacRequest_IdComplex
	Identity   isStacRequest_Identity `protobuf_oneof:"identity"`
	Collection string                 `protobuf:"bytes,5,opt,name=collection,proto3" json:"collection,omitempty"`
	// search by properties specified by user using a request object known by user and the Any marshalling pattern
	Properties *anypb.Any `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	// Types that are assignable to Spatial:
	//	*StacRequest_Intersects
	//	*StacRequest_Bbox
	//	*StacRequest_GeometryRequest
	Spatial isStacRequest_Spatial `protobuf_oneof:"spatial"`
	// Types that are assignable to Temporal:
	//	*StacRequest_Datetime
	//	*StacRequest_Observed
	Temporal isStacRequest_Temporal `protobuf_oneof:"temporal"`
	// search for the moment the asset data was created by bounds defined by the exact timestamp or a range of timestamp
	Created *TimestampFilter `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// search for the moment the STAC item metadata was updated by bounds defined by the exact timestamp or a range of
	// timestamp
	Updated *TimestampFilter `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
	// spatial reference. (currently only supports epsg field)
	Proj *ProjectionData `protobuf:"bytes,14,opt,name=proj,proto3" json:"proj,omitempty"`
	// only data from the platform specified
	PlatformEnum Platform `protobuf:"varint,15,opt,name=platform_enum,json=platformEnum,proto3,enum=epl.protobuf.v1.Platform" json:"platform_enum,omitempty"`
	// only data from the instrument specified
	InstrumentEnum Instrument `protobuf:"varint,17,opt,name=instrument_enum,json=instrumentEnum,proto3,enum=epl.protobuf.v1.Instrument" json:"instrument_enum,omitempty"`
	// only data from the constellation specified
	ConstellationEnum Constellation `protobuf:"varint,19,opt,name=constellation_enum,json=constellationEnum,proto3,enum=epl.protobuf.v1.Constellation" json:"constellation_enum,omitempty"`
	MissionEnum       Mission       `protobuf:"varint,21,opt,name=mission_enum,json=missionEnum,proto3,enum=epl.protobuf.v1.Mission" json:"mission_enum,omitempty"`
	// data with a gsd equal to or in the range specified in gsd
	Gsd *FloatFilter `protobuf:"bytes,23,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// use certain electro-optical search parameters in your query
	Eo      *EoRequest      `protobuf:"bytes,24,opt,name=eo,proto3" json:"eo,omitempty"`
	View    *ViewRequest    `protobuf:"bytes,25,opt,name=view,proto3" json:"view,omitempty"`
	Landsat *LandsatRequest `protobuf:"bytes,26,opt,name=landsat,proto3" json:"landsat,omitempty"`
	Mosaic  *MosaicRequest  `protobuf:"bytes,27,opt,name=mosaic,proto3" json:"mosaic,omitempty"`
}

func (x *StacRequest) Reset() {
	*x = StacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacRequest) ProtoMessage() {}

func (x *StacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacRequest.ProtoReflect.Descriptor instead.
func (*StacRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{7}
}

func (x *StacRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StacRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (m *StacRequest) GetIdentity() isStacRequest_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (x *StacRequest) GetId() string {
	if x, ok := x.GetIdentity().(*StacRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *StacRequest) GetIdComplex() *StringFilter {
	if x, ok := x.GetIdentity().(*StacRequest_IdComplex); ok {
		return x.IdComplex
	}
	return nil
}

func (x *StacRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *StacRequest) GetProperties() *anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (m *StacRequest) GetSpatial() isStacRequest_Spatial {
	if m != nil {
		return m.Spatial
	}
	return nil
}

func (x *StacRequest) GetIntersects() *GeometryData {
	if x, ok := x.GetSpatial().(*StacRequest_Intersects); ok {
		return x.Intersects
	}
	return nil
}

func (x *StacRequest) GetBbox() *EnvelopeData {
	if x, ok := x.GetSpatial().(*StacRequest_Bbox); ok {
		return x.Bbox
	}
	return nil
}

func (x *StacRequest) GetGeometryRequest() *GeometryRequest {
	if x, ok := x.GetSpatial().(*StacRequest_GeometryRequest); ok {
		return x.GeometryRequest
	}
	return nil
}

func (m *StacRequest) GetTemporal() isStacRequest_Temporal {
	if m != nil {
		return m.Temporal
	}
	return nil
}

func (x *StacRequest) GetDatetime() *TimestampFilter {
	if x, ok := x.GetTemporal().(*StacRequest_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *StacRequest) GetObserved() *TimestampFilter {
	if x, ok := x.GetTemporal().(*StacRequest_Observed); ok {
		return x.Observed
	}
	return nil
}

func (x *StacRequest) GetCreated() *TimestampFilter {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *StacRequest) GetUpdated() *TimestampFilter {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *StacRequest) GetProj() *ProjectionData {
	if x != nil {
		return x.Proj
	}
	return nil
}

func (x *StacRequest) GetPlatformEnum() Platform {
	if x != nil {
		return x.PlatformEnum
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *StacRequest) GetInstrumentEnum() Instrument {
	if x != nil {
		return x.InstrumentEnum
	}
	return Instrument_UNKNOWN_INSTRUMENT
}

func (x *StacRequest) GetConstellationEnum() Constellation {
	if x != nil {
		return x.ConstellationEnum
	}
	return Constellation_UNKNOWN_CONSTELLATION
}

func (x *StacRequest) GetMissionEnum() Mission {
	if x != nil {
		return x.MissionEnum
	}
	return Mission_UNKNOWN_MISSION
}

func (x *StacRequest) GetGsd() *FloatFilter {
	if x != nil {
		return x.Gsd
	}
	return nil
}

func (x *StacRequest) GetEo() *EoRequest {
	if x != nil {
		return x.Eo
	}
	return nil
}

func (x *StacRequest) GetView() *ViewRequest {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *StacRequest) GetLandsat() *LandsatRequest {
	if x != nil {
		return x.Landsat
	}
	return nil
}

func (x *StacRequest) GetMosaic() *MosaicRequest {
	if x != nil {
		return x.Mosaic
	}
	return nil
}

type isStacRequest_Identity interface {
	isStacRequest_Identity()
}

type StacRequest_Id struct {
	// if id matches, return the one matching STAC item
	Id string `protobuf:"bytes,3,opt,name=id,proto3,oneof"`
}

type StacRequest_IdComplex struct {
	// more complex id search. allows for searching by pattern or by IN or NOT_IN sets
	IdComplex *StringFilter `protobuf:"bytes,4,opt,name=id_complex,json=idComplex,proto3,oneof"`
}

func (*StacRequest_Id) isStacRequest_Identity() {}

func (*StacRequest_IdComplex) isStacRequest_Identity() {}

type isStacRequest_Spatial interface {
	isStacRequest_Spatial()
}

type StacRequest_Intersects struct {
	// search by the spatial extent as defined by geometry
	Intersects *GeometryData `protobuf:"bytes,7,opt,name=intersects,proto3,oneof"`
}

type StacRequest_Bbox struct {
	// search by the spatial extent as defined by the envelope bounds
	Bbox *EnvelopeData `protobuf:"bytes,8,opt,name=bbox,proto3,oneof"`
}

type StacRequest_GeometryRequest struct {
	// search by a geometry request. this sends a geometry operator to a geometry service, and the returned geometry
	// is in turn used as the spatial extent
	GeometryRequest *GeometryRequest `protobuf:"bytes,9,opt,name=geometry_request,json=geometryRequest,proto3,oneof"`
}

func (*StacRequest_Intersects) isStacRequest_Spatial() {}

func (*StacRequest_Bbox) isStacRequest_Spatial() {}

func (*StacRequest_GeometryRequest) isStacRequest_Spatial() {}

type isStacRequest_Temporal interface {
	isStacRequest_Temporal()
}

type StacRequest_Datetime struct {
	// search for the datetime that matched by bounds defined by the exact timestamp or a range of timestamp
	Datetime *TimestampFilter `protobuf:"bytes,10,opt,name=datetime,proto3,oneof"`
}

type StacRequest_Observed struct {
	// search for the moment the data was observed by bounds defined by the exact timestamp or a range of timestamp
	Observed *TimestampFilter `protobuf:"bytes,11,opt,name=observed,proto3,oneof"`
}

func (*StacRequest_Datetime) isStacRequest_Temporal() {}

func (*StacRequest_Observed) isStacRequest_Temporal() {}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Viewing angle. The angle from the sensor between nadir (straight down) and the scene center. Measured in
	// degrees (0-90).
	OffNadir *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// The incidence angle is the angle between the vertical (normal) to the intercepting surface and the line of sight
	// back to the satellite at the scene center. Measured in degrees (0-90).
	IncidenceAngle *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=incidence_angle,json=incidenceAngle,proto3" json:"incidence_angle,omitempty"`
	// The angle measured from the sub-sensor point (point on the ground below the platform) between the scene center
	// and true north. Measured clockwise from north in degrees (0-360).
	Azimuth *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun.
	// Measured clockwise in degrees (0-360).
	SunAzimuth *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// Sun elevation angle. The angle from the tangent of the scene center point to the sun. Measured from the horizon
	// in degrees (0-90).
	SunElevation *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{8}
}

func (x *View) GetOffNadir() *wrapperspb.FloatValue {
	if x != nil {
		return x.OffNadir
	}
	return nil
}

func (x *View) GetIncidenceAngle() *wrapperspb.FloatValue {
	if x != nil {
		return x.IncidenceAngle
	}
	return nil
}

func (x *View) GetAzimuth() *wrapperspb.FloatValue {
	if x != nil {
		return x.Azimuth
	}
	return nil
}

func (x *View) GetSunAzimuth() *wrapperspb.FloatValue {
	if x != nil {
		return x.SunAzimuth
	}
	return nil
}

func (x *View) GetSunElevation() *wrapperspb.FloatValue {
	if x != nil {
		return x.SunElevation
	}
	return nil
}

type ViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data with a off_nadir equal to or in the range specified in off_nadir
	OffNadir *FloatFilter `protobuf:"bytes,1,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// data with a incidence equal to or in the range specified in incidence
	IncidenceAngle *FloatFilter `protobuf:"bytes,2,opt,name=incidence_angle,json=incidenceAngle,proto3" json:"incidence_angle,omitempty"`
	// data with a azimuth equal to or in the range specified in azimuth
	Azimuth *FloatFilter `protobuf:"bytes,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// data with a sun_azimuth equal to or in the range specified in sun_azimuth
	SunAzimuth *FloatFilter `protobuf:"bytes,4,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// data with a sun_elevation equal to or in the range specified in sun_elevation
	SunElevation *FloatFilter `protobuf:"bytes,5,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
}

func (x *ViewRequest) Reset() {
	*x = ViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewRequest) ProtoMessage() {}

func (x *ViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewRequest.ProtoReflect.Descriptor instead.
func (*ViewRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{9}
}

func (x *ViewRequest) GetOffNadir() *FloatFilter {
	if x != nil {
		return x.OffNadir
	}
	return nil
}

func (x *ViewRequest) GetIncidenceAngle() *FloatFilter {
	if x != nil {
		return x.IncidenceAngle
	}
	return nil
}

func (x *ViewRequest) GetAzimuth() *FloatFilter {
	if x != nil {
		return x.Azimuth
	}
	return nil
}

func (x *ViewRequest) GetSunAzimuth() *FloatFilter {
	if x != nil {
		return x.SunAzimuth
	}
	return nil
}

func (x *ViewRequest) GetSunElevation() *FloatFilter {
	if x != nil {
		return x.SunElevation
	}
	return nil
}

type Sat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The relative orbit number at the time of acquisition.
	RelativeOrbit *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=relative_orbit,json=relativeOrbit,proto3" json:"relative_orbit,omitempty"`
	// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
	// geosynchronous satellites
	OrbitState Sat_OrbitState `protobuf:"varint,1,opt,name=orbit_state,json=orbitState,proto3,enum=epl.protobuf.v1.Sat_OrbitState" json:"orbit_state,omitempty"`
}

func (x *Sat) Reset() {
	*x = Sat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sat) ProtoMessage() {}

func (x *Sat) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sat.ProtoReflect.Descriptor instead.
func (*Sat) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{10}
}

func (x *Sat) GetRelativeOrbit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RelativeOrbit
	}
	return nil
}

func (x *Sat) GetOrbitState() Sat_OrbitState {
	if x != nil {
		return x.OrbitState
	}
	return Sat_UKNOWN_ORBIT_STATE
}

type SatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The relative orbit number at the time of acquisition.
	RelativeOrbit uint32 `protobuf:"varint,6,opt,name=relative_orbit,json=relativeOrbit,proto3" json:"relative_orbit,omitempty"`
	// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
	// geosynchronous satellites
	OrbitState Sat_OrbitState `protobuf:"varint,1,opt,name=orbit_state,json=orbitState,proto3,enum=epl.protobuf.v1.Sat_OrbitState" json:"orbit_state,omitempty"`
}

func (x *SatRequest) Reset() {
	*x = SatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatRequest) ProtoMessage() {}

func (x *SatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatRequest.ProtoReflect.Descriptor instead.
func (*SatRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{11}
}

func (x *SatRequest) GetRelativeOrbit() uint32 {
	if x != nil {
		return x.RelativeOrbit
	}
	return 0
}

func (x *SatRequest) GetOrbitState() Sat_OrbitState {
	if x != nil {
		return x.OrbitState
	}
	return Sat_UKNOWN_ORBIT_STATE
}

//*
// message for electro-optical details of STAC items.
type Eo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// percent cloud cover. 0 no clouds, 100 completely covered
	CloudCover *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// band or bands represented in data. If multiple bands, then use a bitwise operator
	Bands Eo_Band `protobuf:"varint,2,opt,name=bands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"bands,omitempty"`
}

func (x *Eo) Reset() {
	*x = Eo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eo) ProtoMessage() {}

func (x *Eo) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eo.ProtoReflect.Descriptor instead.
func (*Eo) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{12}
}

func (x *Eo) GetCloudCover() *wrapperspb.FloatValue {
	if x != nil {
		return x.CloudCover
	}
	return nil
}

func (x *Eo) GetBands() Eo_Band {
	if x != nil {
		return x.Bands
	}
	return Eo_UNKNOWN_BAND
}

//*
// sub message request for specifying electro-optical details in STAC request
type EoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data with a cloud_cover equal to or in the range specified in cloud_cover
	CloudCover *FloatFilter `protobuf:"bytes,1,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// data that possesses the bands specified in bands
	Bands Eo_Band `protobuf:"varint,2,opt,name=bands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"bands,omitempty"`
}

func (x *EoRequest) Reset() {
	*x = EoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EoRequest) ProtoMessage() {}

func (x *EoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EoRequest.ProtoReflect.Descriptor instead.
func (*EoRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{13}
}

func (x *EoRequest) GetCloudCover() *FloatFilter {
	if x != nil {
		return x.CloudCover
	}
	return nil
}

func (x *EoRequest) GetBands() Eo_Band {
	if x != nil {
		return x.Bands
	}
	return Eo_UNKNOWN_BAND
}

//*
// message for an asset of a STAC item.
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// href for downloading item
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// asset type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// band(s) of data in asset.
	// https://github.com/radiantearth/stac-spec/blob/612ee4fb4f979c049d2416e7f5374a5301b8a277/extensions/eo/README.md
	EoBands Eo_Band `protobuf:"varint,3,opt,name=eo_bands,json=eoBands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"eo_bands,omitempty"`
	// enum for asset type
	AssetType AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=epl.protobuf.v1.AssetType" json:"asset_type,omitempty"`
	// cloud platform enum (Google cloud, Azure, etc)
	CloudPlatform CloudPlatform `protobuf:"varint,5,opt,name=cloud_platform,json=cloudPlatform,proto3,enum=epl.protobuf.v1.CloudPlatform" json:"cloud_platform,omitempty"`
	// manager of the bucket
	BucketManager string `protobuf:"bytes,6,opt,name=bucket_manager,json=bucketManager,proto3" json:"bucket_manager,omitempty"`
	// bucket region. useful when concerned about egress
	BucketRegion string `protobuf:"bytes,7,opt,name=bucket_region,json=bucketRegion,proto3" json:"bucket_region,omitempty"`
	// bucket name
	Bucket string `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// path to the object in the bucket
	ObjectPath string `protobuf:"bytes,9,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	// requester_pays pertains to egress cost. Some buckets are hosted with the egress costs assigned to the requester.
	// some hosts pay the regress costs for the requester.
	RequesterPays bool `protobuf:"varint,10,opt,name=requester_pays,json=requesterPays,proto3" json:"requester_pays,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{14}
}

func (x *Asset) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Asset) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Asset) GetEoBands() Eo_Band {
	if x != nil {
		return x.EoBands
	}
	return Eo_UNKNOWN_BAND
}

func (x *Asset) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_UNKNOWN_ASSET
}

func (x *Asset) GetCloudPlatform() CloudPlatform {
	if x != nil {
		return x.CloudPlatform
	}
	return CloudPlatform_UNKNOWN_CLOUD_PLATFORM
}

func (x *Asset) GetBucketManager() string {
	if x != nil {
		return x.BucketManager
	}
	return ""
}

func (x *Asset) GetBucketRegion() string {
	if x != nil {
		return x.BucketRegion
	}
	return ""
}

func (x *Asset) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Asset) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *Asset) GetRequesterPays() bool {
	if x != nil {
		return x.RequesterPays
	}
	return false
}

type DatetimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DatetimeRange) Reset() {
	*x = DatetimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeRange) ProtoMessage() {}

func (x *DatetimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeRange.ProtoReflect.Descriptor instead.
func (*DatetimeRange) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{15}
}

func (x *DatetimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DatetimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

//*
// response message for insertion and updates to STAC db
type StacDbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	DataId     string `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Count      uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StacDbResponse) Reset() {
	*x = StacDbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StacDbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacDbResponse) ProtoMessage() {}

func (x *StacDbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacDbResponse.ProtoReflect.Descriptor instead.
func (*StacDbResponse) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{16}
}

func (x *StacDbResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StacDbResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *StacDbResponse) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

func (x *StacDbResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

//*
// place holder for SAR
type Sar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform Sar_Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=epl.protobuf.v1.Sar_Platform" json:"platform,omitempty"`
}

func (x *Sar) Reset() {
	*x = Sar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sar) ProtoMessage() {}

func (x *Sar) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sar.ProtoReflect.Descriptor instead.
func (*Sar) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{17}
}

func (x *Sar) GetPlatform() Sar_Platform {
	if x != nil {
		return x.Platform
	}
	return Sar_UNKNOWN_PLATFORM
}

// https://landsat.usgs.gov/stac/landsat-extension/schema.json
type Landsat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of scene should be id of STAC item, but there may be a use case where someone does not want that
	SceneId         string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId       string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.v1.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath         int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow          int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand  *wrapperspb.FloatValue  `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
	WrsType         Landsat_WRSType         `protobuf:"varint,7,opt,name=wrs_type,json=wrsType,proto3,enum=epl.protobuf.v1.Landsat_WRSType" json:"wrs_type,omitempty"`
}

func (x *Landsat) Reset() {
	*x = Landsat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Landsat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Landsat) ProtoMessage() {}

func (x *Landsat) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Landsat.ProtoReflect.Descriptor instead.
func (*Landsat) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{18}
}

func (x *Landsat) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *Landsat) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Landsat) GetProcessingLevel() Landsat_ProcessingLevel {
	if x != nil {
		return x.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (x *Landsat) GetWrsPath() int32 {
	if x != nil {
		return x.WrsPath
	}
	return 0
}

func (x *Landsat) GetWrsRow() int32 {
	if x != nil {
		return x.WrsRow
	}
	return 0
}

func (x *Landsat) GetCloudCoverLand() *wrapperspb.FloatValue {
	if x != nil {
		return x.CloudCoverLand
	}
	return nil
}

func (x *Landsat) GetWrsType() Landsat_WRSType {
	if x != nil {
		return x.WrsType
	}
	return Landsat_UKNOWN_WRS
}

type LandsatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId         string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId       string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.v1.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath         int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow          int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand  *FloatFilter            `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
}

func (x *LandsatRequest) Reset() {
	*x = LandsatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandsatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandsatRequest) ProtoMessage() {}

func (x *LandsatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandsatRequest.ProtoReflect.Descriptor instead.
func (*LandsatRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{19}
}

func (x *LandsatRequest) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *LandsatRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *LandsatRequest) GetProcessingLevel() Landsat_ProcessingLevel {
	if x != nil {
		return x.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (x *LandsatRequest) GetWrsPath() int32 {
	if x != nil {
		return x.WrsPath
	}
	return 0
}

func (x *LandsatRequest) GetWrsRow() int32 {
	if x != nil {
		return x.WrsRow
	}
	return 0
}

func (x *LandsatRequest) GetCloudCoverLand() *FloatFilter {
	if x != nil {
		return x.CloudCoverLand
	}
	return nil
}

// Experimental
type Mosaic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// experimental name of the mosaic this item is a member of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// experimental the quad_key of this specific item
	QuadKey string `protobuf:"bytes,2,opt,name=quad_key,json=quadKey,proto3" json:"quad_key,omitempty"`
	// experimental an array of the zooms contained within the asset(s)
	Zooms []int32 `protobuf:"varint,3,rep,packed,name=zooms,proto3" json:"zooms,omitempty"`
	// deprecated
	ObservationRange *DatetimeRange `protobuf:"bytes,4,opt,name=observation_range,json=observationRange,proto3" json:"observation_range,omitempty"`
	// experimental scene provenance. ordered list of STAC item ids that contribute to the mosaic. The 0th STAC item in provenance_ids is the front-most contributor to the mosaic, the last STAC item in bottom contributor and is likely to be partially covered by other contributing scenes
	ProvenanceIds []string `protobuf:"bytes,5,rep,name=provenance_ids,json=provenanceIds,proto3" json:"provenance_ids,omitempty"`
}

func (x *Mosaic) Reset() {
	*x = Mosaic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mosaic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mosaic) ProtoMessage() {}

func (x *Mosaic) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mosaic.ProtoReflect.Descriptor instead.
func (*Mosaic) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{20}
}

func (x *Mosaic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mosaic) GetQuadKey() string {
	if x != nil {
		return x.QuadKey
	}
	return ""
}

func (x *Mosaic) GetZooms() []int32 {
	if x != nil {
		return x.Zooms
	}
	return nil
}

func (x *Mosaic) GetObservationRange() *DatetimeRange {
	if x != nil {
		return x.ObservationRange
	}
	return nil
}

func (x *Mosaic) GetProvenanceIds() []string {
	if x != nil {
		return x.ProvenanceIds
	}
	return nil
}

// Experimental
type MosaicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// experimental mosaic to search for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// experimental quad_key to search by
	QuadKey string `protobuf:"bytes,2,opt,name=quad_key,json=quadKey,proto3" json:"quad_key,omitempty"`
}

func (x *MosaicRequest) Reset() {
	*x = MosaicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_stac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MosaicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MosaicRequest) ProtoMessage() {}

func (x *MosaicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_stac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MosaicRequest.ProtoReflect.Descriptor instead.
func (*MosaicRequest) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_stac_proto_rawDescGZIP(), []int{21}
}

func (x *MosaicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MosaicRequest) GetQuadKey() string {
	if x != nil {
		return x.QuadKey
	}
	return ""
}

var File_epl_protobuf_v1_stac_proto protoreflect.FileDescriptor

var file_epl_protobuf_v1_stac_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x70, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x70, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xa4, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x74,
	0x69, 0x61, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x06,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x35, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x22, 0x6a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x68, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb8, 0x0d, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x31, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x62, 0x62,
	0x6f, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x6a, 0x12, 0x3e, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x73, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x73, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x63, 0x5f, 0x70, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x50, 0x62, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x02,
	0x65, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6f, 0x52, 0x02, 0x65,
	0x6f, 0x12, 0x29, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x07,
	0x6c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x6f, 0x73, 0x61, 0x69,
	0x63, 0x1a, 0x51, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x22, 0xa3, 0x0a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x69, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x04, 0x62,
	0x62, 0x6f, 0x78, 0x12, 0x4d, 0x0a, 0x10, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x01, 0x52, 0x0f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x72,
	0x6f, 0x6a, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x6a, 0x12,
	0x3e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x73, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x67, 0x73,
	0x64, 0x12, 0x2a, 0x0a, 0x02, 0x65, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x65, 0x6f, 0x12, 0x30, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x39, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x6f,
	0x73, 0x61, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x73,
	0x61, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x73, 0x61,
	0x69, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x12, 0x10,
	0x13, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x22, 0xbd, 0x02,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x5f, 0x6e, 0x61,
	0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x4e, 0x61, 0x64, 0x69, 0x72,
	0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x3c, 0x0a,
	0x0b, 0x73, 0x75, 0x6e, 0x5f, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x73, 0x75, 0x6e, 0x41, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x75, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x6e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x02,
	0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x6f, 0x66, 0x66, 0x5f, 0x6e, 0x61, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x4e, 0x61, 0x64, 0x69, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x6e, 0x5f, 0x61,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x75, 0x6e, 0x41,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x6e, 0x5f, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x75, 0x6e,
	0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x03, 0x53, 0x61,
	0x74, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72,
	0x62, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x74, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x72,
	0x62, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x0a, 0x4f, 0x72, 0x62, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x4f, 0x52, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x42, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x52, 0x42, 0x49, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x4f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x52, 0x42, 0x49, 0x54,
	0x10, 0x03, 0x22, 0x75, 0x0a, 0x0a, 0x53, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x62,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x62, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x74, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x02, 0x45, 0x6f,
	0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x41,
	0x53, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x47, 0x42, 0x10, 0x1c, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x49, 0x52, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x49, 0x52, 0x5f, 0x32, 0x10,
	0x21, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x47, 0x42, 0x49, 0x52, 0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x57, 0x49, 0x52, 0x5f, 0x31, 0x10, 0x40, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x57, 0x49, 0x52,
	0x5f, 0x32, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x41, 0x4e, 0x10, 0x80, 0x02, 0x12,
	0x0b, 0x0a, 0x06, 0x43, 0x49, 0x52, 0x52, 0x55, 0x53, 0x10, 0x80, 0x04, 0x12, 0x0b, 0x0a, 0x06,
	0x4c, 0x57, 0x49, 0x52, 0x5f, 0x31, 0x10, 0x80, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x57, 0x49,
	0x52, 0x5f, 0x32, 0x10, 0x80, 0x10, 0x22, 0x7a, 0x0a, 0x09, 0x45, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x61, 0x6e,
	0x64, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x64,
	0x52, 0x07, 0x65, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x78, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x63,
	0x44, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x03, 0x53, 0x61, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x56, 0x49, 0x53,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x4c,
	0x5f, 0x31, 0x41, 0x10, 0x02, 0x22, 0x24, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x22, 0xbf, 0x04, 0x0a, 0x07,
	0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x6e, 0x64, 0x73, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x72, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x72, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x72, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x08, 0x77, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x2e, 0x57, 0x52,
	0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x77, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d,
	0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x41, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x31, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x54, 0x32, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x54, 0x10, 0x05, 0x22, 0x2d, 0x0a,
	0x07, 0x57, 0x52, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x57, 0x52, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x52, 0x53, 0x31,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x52, 0x53, 0x32, 0x10, 0x02, 0x22, 0x5f, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x31, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x31, 0x54, 0x50, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x31, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x31, 0x47,
	0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x31, 0x47, 0x53, 0x10, 0x05, 0x22, 0x9b, 0x02,
	0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x77, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x72,
	0x73, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x72, 0x73,
	0x52, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x06,
	0x4d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x3e, 0x0a, 0x0d, 0x4d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x2a,
	0xea, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45,
	0x4f, 0x54, 0x49, 0x46, 0x46, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x52, 0x43, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x52, 0x46, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52,
	0x46, 0x5f, 0x49, 0x44, 0x58, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x46, 0x5f, 0x58,
	0x4d, 0x4c, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x5f, 0x47, 0x45, 0x4f, 0x54, 0x49,
	0x46, 0x46, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x4e, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x46, 0x46, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x50, 0x45, 0x47, 0x5f, 0x32,
	0x30, 0x30, 0x30, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x0c, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x58, 0x54, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x0e,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0f, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c,
	0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x42, 0x50, 0x10, 0x12, 0x2a, 0x51, 0x0a, 0x0d,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a,
	0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x42, 0x4d, 0x10, 0x04, 0x2a,
	0xc7, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x31, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x32, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x33, 0x10, 0x08, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x31, 0x32, 0x33, 0x10, 0x0e,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x34, 0x10, 0x10, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x35, 0x10, 0x20, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x34, 0x35, 0x10, 0x30, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x37, 0x10, 0x40, 0x12, 0x0e, 0x0a,
	0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x5f, 0x38, 0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x53, 0x57, 0x49, 0x46, 0x54, 0x5f, 0x32, 0x10, 0x80, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x53,
	0x57, 0x49, 0x46, 0x54, 0x5f, 0x33, 0x10, 0x80, 0x04, 0x2a, 0x76, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x52, 0x53,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4c, 0x49, 0x5f, 0x54, 0x49, 0x52, 0x53, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x4d, 0x5f, 0x31, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x54,
	0x4d, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x4d, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x53, 0x53, 0x10, 0x40, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x4f, 0x4d, 0x5f, 0x32, 0x10, 0x80,
	0x01, 0x2a, 0x2a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x2a, 0x4a, 0x0a,
	0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x41, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41,
	0x49, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4e, 0x4f, 0x41, 0x10, 0x08, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x10, 0x42, 0x6f, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x42, 0x09, 0x53, 0x74, 0x61, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6f, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x70,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x04,
	0x53, 0x54, 0x50, 0x42, 0xaa, 0x02, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_epl_protobuf_v1_stac_proto_rawDescOnce sync.Once
	file_epl_protobuf_v1_stac_proto_rawDescData = file_epl_protobuf_v1_stac_proto_rawDesc
)

func file_epl_protobuf_v1_stac_proto_rawDescGZIP() []byte {
	file_epl_protobuf_v1_stac_proto_rawDescOnce.Do(func() {
		file_epl_protobuf_v1_stac_proto_rawDescData = protoimpl.X.CompressGZIP(file_epl_protobuf_v1_stac_proto_rawDescData)
	})
	return file_epl_protobuf_v1_stac_proto_rawDescData
}

var file_epl_protobuf_v1_stac_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_epl_protobuf_v1_stac_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_epl_protobuf_v1_stac_proto_goTypes = []interface{}{
	(AssetType)(0),                  // 0: epl.protobuf.v1.AssetType
	(CloudPlatform)(0),              // 1: epl.protobuf.v1.CloudPlatform
	(Platform)(0),                   // 2: epl.protobuf.v1.Platform
	(Instrument)(0),                 // 3: epl.protobuf.v1.Instrument
	(Constellation)(0),              // 4: epl.protobuf.v1.Constellation
	(Mission)(0),                    // 5: epl.protobuf.v1.Mission
	(Sat_OrbitState)(0),             // 6: epl.protobuf.v1.Sat.OrbitState
	(Eo_Band)(0),                    // 7: epl.protobuf.v1.Eo.Band
	(Sar_Platform)(0),               // 8: epl.protobuf.v1.Sar.Platform
	(Sar_Instrument)(0),             // 9: epl.protobuf.v1.Sar.Instrument
	(Landsat_CollectionCategory)(0), // 10: epl.protobuf.v1.Landsat.CollectionCategory
	(Landsat_WRSType)(0),            // 11: epl.protobuf.v1.Landsat.WRSType
	(Landsat_ProcessingLevel)(0),    // 12: epl.protobuf.v1.Landsat.ProcessingLevel
	(*Collection)(nil),              // 13: epl.protobuf.v1.Collection
	(*CollectionRequest)(nil),       // 14: epl.protobuf.v1.CollectionRequest
	(*Stats)(nil),                   // 15: epl.protobuf.v1.Stats
	(*Extent)(nil),                  // 16: epl.protobuf.v1.Extent
	(*Interval)(nil),                // 17: epl.protobuf.v1.Interval
	(*Provider)(nil),                // 18: epl.protobuf.v1.Provider
	(*StacItem)(nil),                // 19: epl.protobuf.v1.StacItem
	(*StacRequest)(nil),             // 20: epl.protobuf.v1.StacRequest
	(*View)(nil),                    // 21: epl.protobuf.v1.View
	(*ViewRequest)(nil),             // 22: epl.protobuf.v1.ViewRequest
	(*Sat)(nil),                     // 23: epl.protobuf.v1.Sat
	(*SatRequest)(nil),              // 24: epl.protobuf.v1.SatRequest
	(*Eo)(nil),                      // 25: epl.protobuf.v1.Eo
	(*EoRequest)(nil),               // 26: epl.protobuf.v1.EoRequest
	(*Asset)(nil),                   // 27: epl.protobuf.v1.Asset
	(*DatetimeRange)(nil),           // 28: epl.protobuf.v1.DatetimeRange
	(*StacDbResponse)(nil),          // 29: epl.protobuf.v1.StacDbResponse
	(*Sar)(nil),                     // 30: epl.protobuf.v1.Sar
	(*Landsat)(nil),                 // 31: epl.protobuf.v1.Landsat
	(*LandsatRequest)(nil),          // 32: epl.protobuf.v1.LandsatRequest
	(*Mosaic)(nil),                  // 33: epl.protobuf.v1.Mosaic
	(*MosaicRequest)(nil),           // 34: epl.protobuf.v1.MosaicRequest
	nil,                             // 35: epl.protobuf.v1.Collection.SummariesEntry
	nil,                             // 36: epl.protobuf.v1.StacItem.AssetsEntry
	(*EnvelopeData)(nil),            // 37: epl.protobuf.v1.EnvelopeData
	(*GeometryData)(nil),            // 38: epl.protobuf.v1.GeometryData
	(*timestamppb.Timestamp)(nil),   // 39: google.protobuf.Timestamp
	(*anypb.Any)(nil),               // 40: google.protobuf.Any
	(*ProjectionData)(nil),          // 41: epl.protobuf.v1.ProjectionData
	(*wrapperspb.FloatValue)(nil),   // 42: google.protobuf.FloatValue
	(*StringFilter)(nil),            // 43: epl.protobuf.v1.StringFilter
	(*GeometryRequest)(nil),         // 44: epl.protobuf.v1.GeometryRequest
	(*TimestampFilter)(nil),         // 45: epl.protobuf.v1.TimestampFilter
	(*FloatFilter)(nil),             // 46: epl.protobuf.v1.FloatFilter
	(*wrapperspb.UInt32Value)(nil),  // 47: google.protobuf.UInt32Value
}
var file_epl_protobuf_v1_stac_proto_depIdxs = []int32{
	18, // 0: epl.protobuf.v1.Collection.providers:type_name -> epl.protobuf.v1.Provider
	16, // 1: epl.protobuf.v1.Collection.extent:type_name -> epl.protobuf.v1.Extent
	35, // 2: epl.protobuf.v1.Collection.summaries:type_name -> epl.protobuf.v1.Collection.SummariesEntry
	37, // 3: epl.protobuf.v1.CollectionRequest.bbox:type_name -> epl.protobuf.v1.EnvelopeData
	38, // 4: epl.protobuf.v1.CollectionRequest.intersects:type_name -> epl.protobuf.v1.GeometryData
	37, // 5: epl.protobuf.v1.Extent.spatial:type_name -> epl.protobuf.v1.EnvelopeData
	17, // 6: epl.protobuf.v1.Extent.temporal:type_name -> epl.protobuf.v1.Interval
	39, // 7: epl.protobuf.v1.Interval.start:type_name -> google.protobuf.Timestamp
	39, // 8: epl.protobuf.v1.Interval.end:type_name -> google.protobuf.Timestamp
	40, // 9: epl.protobuf.v1.StacItem.properties:type_name -> google.protobuf.Any
	36, // 10: epl.protobuf.v1.StacItem.assets:type_name -> epl.protobuf.v1.StacItem.AssetsEntry
	38, // 11: epl.protobuf.v1.StacItem.geometry:type_name -> epl.protobuf.v1.GeometryData
	37, // 12: epl.protobuf.v1.StacItem.bbox:type_name -> epl.protobuf.v1.EnvelopeData
	39, // 13: epl.protobuf.v1.StacItem.datetime:type_name -> google.protobuf.Timestamp
	39, // 14: epl.protobuf.v1.StacItem.start_datetime:type_name -> google.protobuf.Timestamp
	39, // 15: epl.protobuf.v1.StacItem.observed:type_name -> google.protobuf.Timestamp
	39, // 16: epl.protobuf.v1.StacItem.start_observation:type_name -> google.protobuf.Timestamp
	39, // 17: epl.protobuf.v1.StacItem.end_datetime:type_name -> google.protobuf.Timestamp
	39, // 18: epl.protobuf.v1.StacItem.end_observation:type_name -> google.protobuf.Timestamp
	39, // 19: epl.protobuf.v1.StacItem.created:type_name -> google.protobuf.Timestamp
	39, // 20: epl.protobuf.v1.StacItem.updated:type_name -> google.protobuf.Timestamp
	41, // 21: epl.protobuf.v1.StacItem.proj:type_name -> epl.protobuf.v1.ProjectionData
	2,  // 22: epl.protobuf.v1.StacItem.platform_enum:type_name -> epl.protobuf.v1.Platform
	3,  // 23: epl.protobuf.v1.StacItem.instrument_enum:type_name -> epl.protobuf.v1.Instrument
	4,  // 24: epl.protobuf.v1.StacItem.constellation_enum:type_name -> epl.protobuf.v1.Constellation
	5,  // 25: epl.protobuf.v1.StacItem.mission_enum:type_name -> epl.protobuf.v1.Mission
	42, // 26: epl.protobuf.v1.StacItem.gsd:type_name -> google.protobuf.FloatValue
	25, // 27: epl.protobuf.v1.StacItem.eo:type_name -> epl.protobuf.v1.Eo
	21, // 28: epl.protobuf.v1.StacItem.view:type_name -> epl.protobuf.v1.View
	31, // 29: epl.protobuf.v1.StacItem.landsat:type_name -> epl.protobuf.v1.Landsat
	33, // 30: epl.protobuf.v1.StacItem.mosaic:type_name -> epl.protobuf.v1.Mosaic
	43, // 31: epl.protobuf.v1.StacRequest.id_complex:type_name -> epl.protobuf.v1.StringFilter
	40, // 32: epl.protobuf.v1.StacRequest.properties:type_name -> google.protobuf.Any
	38, // 33: epl.protobuf.v1.StacRequest.intersects:type_name -> epl.protobuf.v1.GeometryData
	37, // 34: epl.protobuf.v1.StacRequest.bbox:type_name -> epl.protobuf.v1.EnvelopeData
	44, // 35: epl.protobuf.v1.StacRequest.geometry_request:type_name -> epl.protobuf.v1.GeometryRequest
	45, // 36: epl.protobuf.v1.StacRequest.datetime:type_name -> epl.protobuf.v1.TimestampFilter
	45, // 37: epl.protobuf.v1.StacRequest.observed:type_name -> epl.protobuf.v1.TimestampFilter
	45, // 38: epl.protobuf.v1.StacRequest.created:type_name -> epl.protobuf.v1.TimestampFilter
	45, // 39: epl.protobuf.v1.StacRequest.updated:type_name -> epl.protobuf.v1.TimestampFilter
	41, // 40: epl.protobuf.v1.StacRequest.proj:type_name -> epl.protobuf.v1.ProjectionData
	2,  // 41: epl.protobuf.v1.StacRequest.platform_enum:type_name -> epl.protobuf.v1.Platform
	3,  // 42: epl.protobuf.v1.StacRequest.instrument_enum:type_name -> epl.protobuf.v1.Instrument
	4,  // 43: epl.protobuf.v1.StacRequest.constellation_enum:type_name -> epl.protobuf.v1.Constellation
	5,  // 44: epl.protobuf.v1.StacRequest.mission_enum:type_name -> epl.protobuf.v1.Mission
	46, // 45: epl.protobuf.v1.StacRequest.gsd:type_name -> epl.protobuf.v1.FloatFilter
	26, // 46: epl.protobuf.v1.StacRequest.eo:type_name -> epl.protobuf.v1.EoRequest
	22, // 47: epl.protobuf.v1.StacRequest.view:type_name -> epl.protobuf.v1.ViewRequest
	32, // 48: epl.protobuf.v1.StacRequest.landsat:type_name -> epl.protobuf.v1.LandsatRequest
	34, // 49: epl.protobuf.v1.StacRequest.mosaic:type_name -> epl.protobuf.v1.MosaicRequest
	42, // 50: epl.protobuf.v1.View.off_nadir:type_name -> google.protobuf.FloatValue
	42, // 51: epl.protobuf.v1.View.incidence_angle:type_name -> google.protobuf.FloatValue
	42, // 52: epl.protobuf.v1.View.azimuth:type_name -> google.protobuf.FloatValue
	42, // 53: epl.protobuf.v1.View.sun_azimuth:type_name -> google.protobuf.FloatValue
	42, // 54: epl.protobuf.v1.View.sun_elevation:type_name -> google.protobuf.FloatValue
	46, // 55: epl.protobuf.v1.ViewRequest.off_nadir:type_name -> epl.protobuf.v1.FloatFilter
	46, // 56: epl.protobuf.v1.ViewRequest.incidence_angle:type_name -> epl.protobuf.v1.FloatFilter
	46, // 57: epl.protobuf.v1.ViewRequest.azimuth:type_name -> epl.protobuf.v1.FloatFilter
	46, // 58: epl.protobuf.v1.ViewRequest.sun_azimuth:type_name -> epl.protobuf.v1.FloatFilter
	46, // 59: epl.protobuf.v1.ViewRequest.sun_elevation:type_name -> epl.protobuf.v1.FloatFilter
	47, // 60: epl.protobuf.v1.Sat.relative_orbit:type_name -> google.protobuf.UInt32Value
	6,  // 61: epl.protobuf.v1.Sat.orbit_state:type_name -> epl.protobuf.v1.Sat.OrbitState
	6,  // 62: epl.protobuf.v1.SatRequest.orbit_state:type_name -> epl.protobuf.v1.Sat.OrbitState
	42, // 63: epl.protobuf.v1.Eo.cloud_cover:type_name -> google.protobuf.FloatValue
	7,  // 64: epl.protobuf.v1.Eo.bands:type_name -> epl.protobuf.v1.Eo.Band
	46, // 65: epl.protobuf.v1.EoRequest.cloud_cover:type_name -> epl.protobuf.v1.FloatFilter
	7,  // 66: epl.protobuf.v1.EoRequest.bands:type_name -> epl.protobuf.v1.Eo.Band
	7,  // 67: epl.protobuf.v1.Asset.eo_bands:type_name -> epl.protobuf.v1.Eo.Band
	0,  // 68: epl.protobuf.v1.Asset.asset_type:type_name -> epl.protobuf.v1.AssetType
	1,  // 69: epl.protobuf.v1.Asset.cloud_platform:type_name -> epl.protobuf.v1.CloudPlatform
	39, // 70: epl.protobuf.v1.DatetimeRange.start:type_name -> google.protobuf.Timestamp
	39, // 71: epl.protobuf.v1.DatetimeRange.end:type_name -> google.protobuf.Timestamp
	8,  // 72: epl.protobuf.v1.Sar.platform:type_name -> epl.protobuf.v1.Sar.Platform
	12, // 73: epl.protobuf.v1.Landsat.processing_level:type_name -> epl.protobuf.v1.Landsat.ProcessingLevel
	42, // 74: epl.protobuf.v1.Landsat.cloud_cover_land:type_name -> google.protobuf.FloatValue
	11, // 75: epl.protobuf.v1.Landsat.wrs_type:type_name -> epl.protobuf.v1.Landsat.WRSType
	12, // 76: epl.protobuf.v1.LandsatRequest.processing_level:type_name -> epl.protobuf.v1.Landsat.ProcessingLevel
	46, // 77: epl.protobuf.v1.LandsatRequest.cloud_cover_land:type_name -> epl.protobuf.v1.FloatFilter
	28, // 78: epl.protobuf.v1.Mosaic.observation_range:type_name -> epl.protobuf.v1.DatetimeRange
	15, // 79: epl.protobuf.v1.Collection.SummariesEntry.value:type_name -> epl.protobuf.v1.Stats
	27, // 80: epl.protobuf.v1.StacItem.AssetsEntry.value:type_name -> epl.protobuf.v1.Asset
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_epl_protobuf_v1_stac_proto_init() }
func file_epl_protobuf_v1_stac_proto_init() {
	if File_epl_protobuf_v1_stac_proto != nil {
		return
	}
	file_epl_protobuf_v1_geometry_proto_init()
	file_epl_protobuf_v1_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_epl_protobuf_v1_stac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StacItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Eo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StacDbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Landsat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandsatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mosaic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_stac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MosaicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_epl_protobuf_v1_stac_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CollectionRequest_Bbox)(nil),
		(*CollectionRequest_Intersects)(nil),
	}
	file_epl_protobuf_v1_stac_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*StacItem_Datetime)(nil),
		(*StacItem_StartDatetime)(nil),
		(*StacItem_Observed)(nil),
		(*StacItem_StartObservation)(nil),
	}
	file_epl_protobuf_v1_stac_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*StacRequest_Id)(nil),
		(*StacRequest_IdComplex)(nil),
		(*StacRequest_Intersects)(nil),
		(*StacRequest_Bbox)(nil),
		(*StacRequest_GeometryRequest)(nil),
		(*StacRequest_Datetime)(nil),
		(*StacRequest_Observed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epl_protobuf_v1_stac_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_epl_protobuf_v1_stac_proto_goTypes,
		DependencyIndexes: file_epl_protobuf_v1_stac_proto_depIdxs,
		EnumInfos:         file_epl_protobuf_v1_stac_proto_enumTypes,
		MessageInfos:      file_epl_protobuf_v1_stac_proto_msgTypes,
	}.Build()
	File_epl_protobuf_v1_stac_proto = out.File
	file_epl_protobuf_v1_stac_proto_rawDesc = nil
	file_epl_protobuf_v1_stac_proto_goTypes = nil
	file_epl_protobuf_v1_stac_proto_depIdxs = nil
}
