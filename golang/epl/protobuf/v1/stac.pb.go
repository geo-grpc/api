// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/v1/stac.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AssetType int32

const (
	AssetType_UNKNOWN_ASSET AssetType = 0
	AssetType_JPEG          AssetType = 1
	AssetType_GEOTIFF       AssetType = 2
	AssetType_LERC          AssetType = 3
	AssetType_MRF           AssetType = 4
	AssetType_MRF_IDX       AssetType = 5
	AssetType_MRF_XML       AssetType = 6
	AssetType_CO_GEOTIFF    AssetType = 7
	AssetType_RAW           AssetType = 8
	AssetType_THUMBNAIL     AssetType = 9
	AssetType_TIFF          AssetType = 10
	AssetType_JPEG_2000     AssetType = 11
	AssetType_XML           AssetType = 12
	AssetType_TXT           AssetType = 13
	AssetType_PNG           AssetType = 14
	AssetType_OVERVIEW      AssetType = 15
	AssetType_JSON          AssetType = 16
	AssetType_HTML          AssetType = 17
	AssetType_WEBP          AssetType = 18
)

var AssetType_name = map[int32]string{
	0:  "UNKNOWN_ASSET",
	1:  "JPEG",
	2:  "GEOTIFF",
	3:  "LERC",
	4:  "MRF",
	5:  "MRF_IDX",
	6:  "MRF_XML",
	7:  "CO_GEOTIFF",
	8:  "RAW",
	9:  "THUMBNAIL",
	10: "TIFF",
	11: "JPEG_2000",
	12: "XML",
	13: "TXT",
	14: "PNG",
	15: "OVERVIEW",
	16: "JSON",
	17: "HTML",
	18: "WEBP",
}

var AssetType_value = map[string]int32{
	"UNKNOWN_ASSET": 0,
	"JPEG":          1,
	"GEOTIFF":       2,
	"LERC":          3,
	"MRF":           4,
	"MRF_IDX":       5,
	"MRF_XML":       6,
	"CO_GEOTIFF":    7,
	"RAW":           8,
	"THUMBNAIL":     9,
	"TIFF":          10,
	"JPEG_2000":     11,
	"XML":           12,
	"TXT":           13,
	"PNG":           14,
	"OVERVIEW":      15,
	"JSON":          16,
	"HTML":          17,
	"WEBP":          18,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{0}
}

type CloudPlatform int32

const (
	CloudPlatform_UNKNOWN_CLOUD_PLATFORM CloudPlatform = 0
	CloudPlatform_AWS                    CloudPlatform = 1
	CloudPlatform_GCP                    CloudPlatform = 2
	CloudPlatform_AZURE                  CloudPlatform = 3
	CloudPlatform_IBM                    CloudPlatform = 4
)

var CloudPlatform_name = map[int32]string{
	0: "UNKNOWN_CLOUD_PLATFORM",
	1: "AWS",
	2: "GCP",
	3: "AZURE",
	4: "IBM",
}

var CloudPlatform_value = map[string]int32{
	"UNKNOWN_CLOUD_PLATFORM": 0,
	"AWS":                    1,
	"GCP":                    2,
	"AZURE":                  3,
	"IBM":                    4,
}

func (x CloudPlatform) String() string {
	return proto.EnumName(CloudPlatform_name, int32(x))
}

func (CloudPlatform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{1}
}

type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_LANDSAT_1        Platform = 2
	Platform_LANDSAT_2        Platform = 4
	Platform_LANDSAT_3        Platform = 8
	Platform_LANDSAT_123      Platform = 14
	Platform_LANDSAT_4        Platform = 16
	Platform_LANDSAT_5        Platform = 32
	Platform_LANDSAT_45       Platform = 48
	Platform_LANDSAT_7        Platform = 64
	Platform_LANDSAT_8        Platform = 128
	// near space labs platform
	Platform_SWIFT_2 Platform = 256
)

var Platform_name = map[int32]string{
	0:   "UNKNOWN_PLATFORM",
	2:   "LANDSAT_1",
	4:   "LANDSAT_2",
	8:   "LANDSAT_3",
	14:  "LANDSAT_123",
	16:  "LANDSAT_4",
	32:  "LANDSAT_5",
	48:  "LANDSAT_45",
	64:  "LANDSAT_7",
	128: "LANDSAT_8",
	256: "SWIFT_2",
}

var Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"LANDSAT_1":        2,
	"LANDSAT_2":        4,
	"LANDSAT_3":        8,
	"LANDSAT_123":      14,
	"LANDSAT_4":        16,
	"LANDSAT_5":        32,
	"LANDSAT_45":       48,
	"LANDSAT_7":        64,
	"LANDSAT_8":        128,
	"SWIFT_2":          256,
}

func (x Platform) String() string {
	return proto.EnumName(Platform_name, int32(x))
}

func (Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{2}
}

type Instrument int32

const (
	Instrument_UNKNOWN_INSTRUMENT Instrument = 0
	Instrument_OLI                Instrument = 2
	Instrument_TIRS               Instrument = 4
	Instrument_OLI_TIRS           Instrument = 6
	// near space labs instrument
	Instrument_POM_1 Instrument = 8
	Instrument_TM    Instrument = 16
	Instrument_ETM   Instrument = 32
	Instrument_MSS   Instrument = 64
)

var Instrument_name = map[int32]string{
	0:  "UNKNOWN_INSTRUMENT",
	2:  "OLI",
	4:  "TIRS",
	6:  "OLI_TIRS",
	8:  "POM_1",
	16: "TM",
	32: "ETM",
	64: "MSS",
}

var Instrument_value = map[string]int32{
	"UNKNOWN_INSTRUMENT": 0,
	"OLI":                2,
	"TIRS":               4,
	"OLI_TIRS":           6,
	"POM_1":              8,
	"TM":                 16,
	"ETM":                32,
	"MSS":                64,
}

func (x Instrument) String() string {
	return proto.EnumName(Instrument_name, int32(x))
}

func (Instrument) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{3}
}

type Constellation int32

const (
	Constellation_UNKNOWN_CONSTELLATION Constellation = 0
)

var Constellation_name = map[int32]string{
	0: "UNKNOWN_CONSTELLATION",
}

var Constellation_value = map[string]int32{
	"UNKNOWN_CONSTELLATION": 0,
}

func (x Constellation) String() string {
	return proto.EnumName(Constellation_name, int32(x))
}

func (Constellation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{4}
}

type Mission int32

const (
	Mission_UNKNOWN_MISSION Mission = 0
	Mission_LANDSAT         Mission = 2
	Mission_NAIP            Mission = 4
	// spanish aerial dataset
	Mission_PNOA Mission = 8
	// near space labs dataset
	Mission_SWIFT Mission = 16
)

var Mission_name = map[int32]string{
	0:  "UNKNOWN_MISSION",
	2:  "LANDSAT",
	4:  "NAIP",
	8:  "PNOA",
	16: "SWIFT",
}

var Mission_value = map[string]int32{
	"UNKNOWN_MISSION": 0,
	"LANDSAT":         2,
	"NAIP":            4,
	"PNOA":            8,
	"SWIFT":           16,
}

func (x Mission) String() string {
	return proto.EnumName(Mission_name, int32(x))
}

func (Mission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{5}
}

type Sat_OrbitState int32

const (
	Sat_UKNOWN_ORBIT_STATE  Sat_OrbitState = 0
	Sat_ASCENDING_ORBIT     Sat_OrbitState = 1
	Sat_DESCENDING_ORBIT    Sat_OrbitState = 2
	Sat_GEOSTATIONARY_ORBIT Sat_OrbitState = 3
)

var Sat_OrbitState_name = map[int32]string{
	0: "UKNOWN_ORBIT_STATE",
	1: "ASCENDING_ORBIT",
	2: "DESCENDING_ORBIT",
	3: "GEOSTATIONARY_ORBIT",
}

var Sat_OrbitState_value = map[string]int32{
	"UKNOWN_ORBIT_STATE":  0,
	"ASCENDING_ORBIT":     1,
	"DESCENDING_ORBIT":    2,
	"GEOSTATIONARY_ORBIT": 3,
}

func (x Sat_OrbitState) String() string {
	return proto.EnumName(Sat_OrbitState_name, int32(x))
}

func (Sat_OrbitState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{10, 0}
}

type Eo_Band int32

const (
	// band type not specified. default value. if used in query, any band type is acceptable
	Eo_UNKNOWN_BAND Eo_Band = 0
	Eo_COASTAL      Eo_Band = 2
	Eo_BLUE         Eo_Band = 4
	Eo_GREEN        Eo_Band = 8
	Eo_RED          Eo_Band = 16
	Eo_RGB          Eo_Band = 28
	Eo_NIR          Eo_Band = 32
	// special case for landsat 1-3
	Eo_NIR_2  Eo_Band = 33
	Eo_RGBIR  Eo_Band = 60
	Eo_SWIR_1 Eo_Band = 64
	Eo_SWIR_2 Eo_Band = 128
	Eo_PAN    Eo_Band = 256
	Eo_CIRRUS Eo_Band = 512
	Eo_LWIR_1 Eo_Band = 1024
	Eo_LWIR_2 Eo_Band = 2048
)

var Eo_Band_name = map[int32]string{
	0:    "UNKNOWN_BAND",
	2:    "COASTAL",
	4:    "BLUE",
	8:    "GREEN",
	16:   "RED",
	28:   "RGB",
	32:   "NIR",
	33:   "NIR_2",
	60:   "RGBIR",
	64:   "SWIR_1",
	128:  "SWIR_2",
	256:  "PAN",
	512:  "CIRRUS",
	1024: "LWIR_1",
	2048: "LWIR_2",
}

var Eo_Band_value = map[string]int32{
	"UNKNOWN_BAND": 0,
	"COASTAL":      2,
	"BLUE":         4,
	"GREEN":        8,
	"RED":          16,
	"RGB":          28,
	"NIR":          32,
	"NIR_2":        33,
	"RGBIR":        60,
	"SWIR_1":       64,
	"SWIR_2":       128,
	"PAN":          256,
	"CIRRUS":       512,
	"LWIR_1":       1024,
	"LWIR_2":       2048,
}

func (x Eo_Band) String() string {
	return proto.EnumName(Eo_Band_name, int32(x))
}

func (Eo_Band) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{12, 0}
}

type Sar_Platform int32

const (
	Sar_UNKNOWN_PLATFORM Sar_Platform = 0
	Sar_ENVISAT          Sar_Platform = 1
	Sar_SENTINEL_1A      Sar_Platform = 2
)

var Sar_Platform_name = map[int32]string{
	0: "UNKNOWN_PLATFORM",
	1: "ENVISAT",
	2: "SENTINEL_1A",
}

var Sar_Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"ENVISAT":          1,
	"SENTINEL_1A":      2,
}

func (x Sar_Platform) String() string {
	return proto.EnumName(Sar_Platform_name, int32(x))
}

func (Sar_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{17, 0}
}

type Sar_Instrument int32

const (
	Sar_UNKNOWN_INSTRUMENT Sar_Instrument = 0
)

var Sar_Instrument_name = map[int32]string{
	0: "UNKNOWN_INSTRUMENT",
}

var Sar_Instrument_value = map[string]int32{
	"UNKNOWN_INSTRUMENT": 0,
}

func (x Sar_Instrument) String() string {
	return proto.EnumName(Sar_Instrument_name, int32(x))
}

func (Sar_Instrument) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{17, 1}
}

type Landsat_CollectionCategory int32

const (
	Landsat_UNKNOWN_COLLECTION_CATEGORY Landsat_CollectionCategory = 0
	Landsat_A1                          Landsat_CollectionCategory = 1
	Landsat_A2                          Landsat_CollectionCategory = 2
	Landsat_T1                          Landsat_CollectionCategory = 3
	Landsat_T2                          Landsat_CollectionCategory = 4
	Landsat_RT                          Landsat_CollectionCategory = 5
)

var Landsat_CollectionCategory_name = map[int32]string{
	0: "UNKNOWN_COLLECTION_CATEGORY",
	1: "A1",
	2: "A2",
	3: "T1",
	4: "T2",
	5: "RT",
}

var Landsat_CollectionCategory_value = map[string]int32{
	"UNKNOWN_COLLECTION_CATEGORY": 0,
	"A1":                          1,
	"A2":                          2,
	"T1":                          3,
	"T2":                          4,
	"RT":                          5,
}

func (x Landsat_CollectionCategory) String() string {
	return proto.EnumName(Landsat_CollectionCategory_name, int32(x))
}

func (Landsat_CollectionCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{18, 0}
}

type Landsat_WRSType int32

const (
	Landsat_UKNOWN_WRS Landsat_WRSType = 0
	Landsat_WRS1       Landsat_WRSType = 1
	Landsat_WRS2       Landsat_WRSType = 2
)

var Landsat_WRSType_name = map[int32]string{
	0: "UKNOWN_WRS",
	1: "WRS1",
	2: "WRS2",
}

var Landsat_WRSType_value = map[string]int32{
	"UKNOWN_WRS": 0,
	"WRS1":       1,
	"WRS2":       2,
}

func (x Landsat_WRSType) String() string {
	return proto.EnumName(Landsat_WRSType_name, int32(x))
}

func (Landsat_WRSType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{18, 1}
}

type Landsat_ProcessingLevel int32

const (
	Landsat_UNKNOWN_PROCESSING_LEVEL Landsat_ProcessingLevel = 0
	Landsat_L1G                      Landsat_ProcessingLevel = 1
	Landsat_L1TP                     Landsat_ProcessingLevel = 2
	Landsat_L1T                      Landsat_ProcessingLevel = 3
	Landsat_L1GT                     Landsat_ProcessingLevel = 4
	Landsat_L1GS                     Landsat_ProcessingLevel = 5
)

var Landsat_ProcessingLevel_name = map[int32]string{
	0: "UNKNOWN_PROCESSING_LEVEL",
	1: "L1G",
	2: "L1TP",
	3: "L1T",
	4: "L1GT",
	5: "L1GS",
}

var Landsat_ProcessingLevel_value = map[string]int32{
	"UNKNOWN_PROCESSING_LEVEL": 0,
	"L1G":                      1,
	"L1TP":                     2,
	"L1T":                      3,
	"L1GT":                     4,
	"L1GS":                     5,
}

func (x Landsat_ProcessingLevel) String() string {
	return proto.EnumName(Landsat_ProcessingLevel_name, int32(x))
}

func (Landsat_ProcessingLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{18, 2}
}

type Collection struct {
	// REQUIRED. The STAC version the Collection implements. STAC versions
	// can be mixed, but please keep the recommended best practices in mind.
	StacVersion string `protobuf:"bytes,1,opt,name=stac_version,json=stacVersion,proto3" json:"stac_version,omitempty"`
	// REQUIRED. Identifier for the collection that is unique across the provider.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A short descriptive one-line title for the collection.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// REQUIRED. Detailed multi-line description to fully explain the collection. CommonMark 0.29 syntax MAY be used for rich text representation.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// List of keywords describing the collection.
	Keywords []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// REQUIRED. Collection's license(s), either a SPDX License identifier, various if multiple licenses apply or proprietary for all other cases.
	License string `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty"`
	// A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.
	Providers []*Provider `protobuf:"bytes,8,rep,name=providers,proto3" json:"providers,omitempty"`
	// REQUIRED. Spatial and temporal extents.
	Extent *Extent `protobuf:"bytes,9,opt,name=extent,proto3" json:"extent,omitempty"`
	// A map of property summaries, either a set of values or statistics such as a range.
	Summaries            map[string]*Stats `protobuf:"bytes,10,rep,name=summaries,proto3" json:"summaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Collection) Reset()         { *m = Collection{} }
func (m *Collection) String() string { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()    {}
func (*Collection) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{0}
}

func (m *Collection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collection.Unmarshal(m, b)
}
func (m *Collection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collection.Marshal(b, m, deterministic)
}
func (m *Collection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collection.Merge(m, src)
}
func (m *Collection) XXX_Size() int {
	return xxx_messageInfo_Collection.Size(m)
}
func (m *Collection) XXX_DiscardUnknown() {
	xxx_messageInfo_Collection.DiscardUnknown(m)
}

var xxx_messageInfo_Collection proto.InternalMessageInfo

func (m *Collection) GetStacVersion() string {
	if m != nil {
		return m.StacVersion
	}
	return ""
}

func (m *Collection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Collection) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Collection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Collection) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *Collection) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Collection) GetProviders() []*Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *Collection) GetExtent() *Extent {
	if m != nil {
		return m.Extent
	}
	return nil
}

func (m *Collection) GetSummaries() map[string]*Stats {
	if m != nil {
		return m.Summaries
	}
	return nil
}

type CollectionRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Spatial:
	//	*CollectionRequest_Bbox
	//	*CollectionRequest_Intersects
	Spatial              isCollectionRequest_Spatial `protobuf_oneof:"spatial"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CollectionRequest) Reset()         { *m = CollectionRequest{} }
func (m *CollectionRequest) String() string { return proto.CompactTextString(m) }
func (*CollectionRequest) ProtoMessage()    {}
func (*CollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{1}
}

func (m *CollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRequest.Unmarshal(m, b)
}
func (m *CollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRequest.Marshal(b, m, deterministic)
}
func (m *CollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRequest.Merge(m, src)
}
func (m *CollectionRequest) XXX_Size() int {
	return xxx_messageInfo_CollectionRequest.Size(m)
}
func (m *CollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRequest proto.InternalMessageInfo

func (m *CollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isCollectionRequest_Spatial interface {
	isCollectionRequest_Spatial()
}

type CollectionRequest_Bbox struct {
	Bbox *EnvelopeData `protobuf:"bytes,2,opt,name=bbox,proto3,oneof"`
}

type CollectionRequest_Intersects struct {
	Intersects *GeometryData `protobuf:"bytes,3,opt,name=intersects,proto3,oneof"`
}

func (*CollectionRequest_Bbox) isCollectionRequest_Spatial() {}

func (*CollectionRequest_Intersects) isCollectionRequest_Spatial() {}

func (m *CollectionRequest) GetSpatial() isCollectionRequest_Spatial {
	if m != nil {
		return m.Spatial
	}
	return nil
}

func (m *CollectionRequest) GetBbox() *EnvelopeData {
	if x, ok := m.GetSpatial().(*CollectionRequest_Bbox); ok {
		return x.Bbox
	}
	return nil
}

func (m *CollectionRequest) GetIntersects() *GeometryData {
	if x, ok := m.GetSpatial().(*CollectionRequest_Intersects); ok {
		return x.Intersects
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CollectionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CollectionRequest_Bbox)(nil),
		(*CollectionRequest_Intersects)(nil),
	}
}

type Stats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{2}
}

func (m *Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stats.Unmarshal(m, b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return xxx_messageInfo_Stats.Size(m)
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

// The object describes the spatio-temporal extents of the Collection. Both spatial and temporal extents are required to be specified.
type Extent struct {
	// REQUIRED. Potential spatial extent covered by the collection.
	Spatial []*EnvelopeData `protobuf:"bytes,1,rep,name=spatial,proto3" json:"spatial,omitempty"`
	// REQUIRED. Potential temporal extent covered by the collection.
	Temporal             []*Interval `protobuf:"bytes,2,rep,name=temporal,proto3" json:"temporal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Extent) Reset()         { *m = Extent{} }
func (m *Extent) String() string { return proto.CompactTextString(m) }
func (*Extent) ProtoMessage()    {}
func (*Extent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{3}
}

func (m *Extent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extent.Unmarshal(m, b)
}
func (m *Extent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extent.Marshal(b, m, deterministic)
}
func (m *Extent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extent.Merge(m, src)
}
func (m *Extent) XXX_Size() int {
	return xxx_messageInfo_Extent.Size(m)
}
func (m *Extent) XXX_DiscardUnknown() {
	xxx_messageInfo_Extent.DiscardUnknown(m)
}

var xxx_messageInfo_Extent proto.InternalMessageInfo

func (m *Extent) GetSpatial() []*EnvelopeData {
	if m != nil {
		return m.Spatial
	}
	return nil
}

func (m *Extent) GetTemporal() []*Interval {
	if m != nil {
		return m.Temporal
	}
	return nil
}

// https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md#temporal-extent-object
// The object describes the temporal extents of the Collection.
type Interval struct {
	Start                *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Interval) Reset()         { *m = Interval{} }
func (m *Interval) String() string { return proto.CompactTextString(m) }
func (*Interval) ProtoMessage()    {}
func (*Interval) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{4}
}

func (m *Interval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interval.Unmarshal(m, b)
}
func (m *Interval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interval.Marshal(b, m, deterministic)
}
func (m *Interval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interval.Merge(m, src)
}
func (m *Interval) XXX_Size() int {
	return xxx_messageInfo_Interval.Size(m)
}
func (m *Interval) XXX_DiscardUnknown() {
	xxx_messageInfo_Interval.DiscardUnknown(m)
}

var xxx_messageInfo_Interval proto.InternalMessageInfo

func (m *Interval) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Interval) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// The object provides information about a provider. A provider is any of the organizations that captures or processes the content of the collection and therefore influences the data offered by this collection. May also include information about the final storage provider hosting the data.
type Provider struct {
	// REQUIRED. The name of the organization or the individual.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.29 syntax MAY be used for rich text representation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Roles of the provider. Any of licensor, producer, processor or host.
	Roles []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	// Homepage on which the provider describes the dataset and publishes contact information.
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{5}
}

func (m *Provider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provider.Unmarshal(m, b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return xxx_messageInfo_Provider.Size(m)
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Provider) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Provider) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Provider) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

//*
// Spatio-Temporal Asset Catalog Item. This data item has a spatial and temporal extent. It has a unique identifier
// downloadable assets. It may have an extension with details beyond the spatial and temporal extents. It may have
// additional properties in the properties field
type StacItem struct {
	// Provider identifier. As most geospatial assets are already defined by some identification scheme by the data
	// provider it is recommended to simply use that ID. Data providers are advised to include sufficient information
	// to make their IDs globally unique, including things like unique satellite IDs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (optional) A human readable title describing the item.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// (optional) The id of the STAC Collection this Item references to (see collection relation type below). This
	// field is required if such a relation type is present. This field provides an easy way for a user to search for
	// any Items that belong in a specified Collection.
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	// the properties of an item that are not defined within the STAC specification. Requires marshalling and
	// un-marshalling https://developers.google.com/protocol-buffers/docs/proto3#any
	Properties *any.Any `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	// Dictionary of asset objects that can be downloaded, each with a unique key. Some pre-defined keys are listed
	// in the chapter 'Asset types'.
	Assets map[string]*Asset `protobuf:"bytes,5,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the spatial shape of the item. must have a spatial reference defined.
	Geometry *GeometryData `protobuf:"bytes,6,opt,name=geometry,proto3" json:"geometry,omitempty"`
	// the bounding box of the spatial shape of the item. must have a spatial reference defined.
	Bbox *EnvelopeData `protobuf:"bytes,7,opt,name=bbox,proto3" json:"bbox,omitempty"`
	// Types that are valid to be assigned to TemporalDeprecated:
	//	*StacItem_Datetime
	//	*StacItem_StartDatetime
	TemporalDeprecated isStacItem_TemporalDeprecated `protobuf_oneof:"temporal_deprecated"`
	// Types that are valid to be assigned to Temporal:
	//	*StacItem_Observed
	//	*StacItem_StartObservation
	Temporal isStacItem_Temporal `protobuf_oneof:"temporal"`
	// deprecated
	EndDatetime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
	// end timestamp for a period of observation
	EndObservation *timestamp.Timestamp `protobuf:"bytes,13,opt,name=end_observation,json=endObservation,proto3" json:"end_observation,omitempty"`
	// timestamp when it was created (according to STAC spec this applies to metadata only,
	// but in our case we haven't implemented the asset level created date yet, so we don't have a
	// differentiation yet between metadata creation and asset creation. used to be `processed`)
	Created *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	// last timestamp when STAC metadata itself was updated
	Updated *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated,proto3" json:"updated,omitempty"`
	// spatial reference of the assets (if assets have different projections, those can be assigned on
	// the assets and any not defined default to this projection)
	Proj *ProjectionData `protobuf:"bytes,16,opt,name=proj,proto3" json:"proj,omitempty"`
	// platform from which the data was collected
	PlatformEnum Platform `protobuf:"varint,17,opt,name=platform_enum,json=platformEnum,proto3,enum=epl.protobuf.v1.Platform" json:"platform_enum,omitempty"`
	// platform from which the data was collected
	Platform string `protobuf:"bytes,18,opt,name=platform,proto3" json:"platform,omitempty"`
	// instrument which collected the data
	InstrumentEnum Instrument `protobuf:"varint,19,opt,name=instrument_enum,json=instrumentEnum,proto3,enum=epl.protobuf.v1.Instrument" json:"instrument_enum,omitempty"`
	// instrument which collected the data
	Instrument string `protobuf:"bytes,20,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// constellation of data collectors
	ConstellationEnum Constellation `protobuf:"varint,21,opt,name=constellation_enum,json=constellationEnum,proto3,enum=epl.protobuf.v1.Constellation" json:"constellation_enum,omitempty"`
	Constellation     string        `protobuf:"bytes,22,opt,name=constellation,proto3" json:"constellation,omitempty"`
	MissionEnum       Mission       `protobuf:"varint,23,opt,name=mission_enum,json=missionEnum,proto3,enum=epl.protobuf.v1.Mission" json:"mission_enum,omitempty"`
	Mission           string        `protobuf:"bytes,24,opt,name=mission,proto3" json:"mission,omitempty"`
	// ground sampling distance
	Gsd *wrappers.FloatValue `protobuf:"bytes,25,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// version of JSON STAC that this protobuf attempts to match
	StacVersion string `protobuf:"bytes,26,opt,name=stac_version,json=stacVersion,proto3" json:"stac_version,omitempty"`
	// version of protobuf STAC
	StacPbVersion string `protobuf:"bytes,27,opt,name=stac_pb_version,json=stacPbVersion,proto3" json:"stac_pb_version,omitempty"`
	// STAC
	StacExtensions []string `protobuf:"bytes,28,rep,name=stac_extensions,json=stacExtensions,proto3" json:"stac_extensions,omitempty"`
	// electro-optical data message
	Eo *Eo `protobuf:"bytes,29,opt,name=eo,proto3" json:"eo,omitempty"`
	// view of the asset, includes all relevant angular information
	View *View `protobuf:"bytes,34,opt,name=view,proto3" json:"view,omitempty"`
	// Landsat Message
	Landsat              *Landsat `protobuf:"bytes,31,opt,name=landsat,proto3" json:"landsat,omitempty"`
	Mosaic               *Mosaic  `protobuf:"bytes,32,opt,name=mosaic,proto3" json:"mosaic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StacItem) Reset()         { *m = StacItem{} }
func (m *StacItem) String() string { return proto.CompactTextString(m) }
func (*StacItem) ProtoMessage()    {}
func (*StacItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{6}
}

func (m *StacItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacItem.Unmarshal(m, b)
}
func (m *StacItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacItem.Marshal(b, m, deterministic)
}
func (m *StacItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacItem.Merge(m, src)
}
func (m *StacItem) XXX_Size() int {
	return xxx_messageInfo_StacItem.Size(m)
}
func (m *StacItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StacItem.DiscardUnknown(m)
}

var xxx_messageInfo_StacItem proto.InternalMessageInfo

func (m *StacItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StacItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StacItem) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *StacItem) GetProperties() *any.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *StacItem) GetAssets() map[string]*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *StacItem) GetGeometry() *GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *StacItem) GetBbox() *EnvelopeData {
	if m != nil {
		return m.Bbox
	}
	return nil
}

type isStacItem_TemporalDeprecated interface {
	isStacItem_TemporalDeprecated()
}

type StacItem_Datetime struct {
	Datetime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=datetime,proto3,oneof"`
}

type StacItem_StartDatetime struct {
	StartDatetime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=start_datetime,json=startDatetime,proto3,oneof"`
}

func (*StacItem_Datetime) isStacItem_TemporalDeprecated() {}

func (*StacItem_StartDatetime) isStacItem_TemporalDeprecated() {}

func (m *StacItem) GetTemporalDeprecated() isStacItem_TemporalDeprecated {
	if m != nil {
		return m.TemporalDeprecated
	}
	return nil
}

func (m *StacItem) GetDatetime() *timestamp.Timestamp {
	if x, ok := m.GetTemporalDeprecated().(*StacItem_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (m *StacItem) GetStartDatetime() *timestamp.Timestamp {
	if x, ok := m.GetTemporalDeprecated().(*StacItem_StartDatetime); ok {
		return x.StartDatetime
	}
	return nil
}

type isStacItem_Temporal interface {
	isStacItem_Temporal()
}

type StacItem_Observed struct {
	Observed *timestamp.Timestamp `protobuf:"bytes,9,opt,name=observed,proto3,oneof"`
}

type StacItem_StartObservation struct {
	StartObservation *timestamp.Timestamp `protobuf:"bytes,11,opt,name=start_observation,json=startObservation,proto3,oneof"`
}

func (*StacItem_Observed) isStacItem_Temporal() {}

func (*StacItem_StartObservation) isStacItem_Temporal() {}

func (m *StacItem) GetTemporal() isStacItem_Temporal {
	if m != nil {
		return m.Temporal
	}
	return nil
}

func (m *StacItem) GetObserved() *timestamp.Timestamp {
	if x, ok := m.GetTemporal().(*StacItem_Observed); ok {
		return x.Observed
	}
	return nil
}

func (m *StacItem) GetStartObservation() *timestamp.Timestamp {
	if x, ok := m.GetTemporal().(*StacItem_StartObservation); ok {
		return x.StartObservation
	}
	return nil
}

func (m *StacItem) GetEndDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.EndDatetime
	}
	return nil
}

func (m *StacItem) GetEndObservation() *timestamp.Timestamp {
	if m != nil {
		return m.EndObservation
	}
	return nil
}

func (m *StacItem) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *StacItem) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *StacItem) GetProj() *ProjectionData {
	if m != nil {
		return m.Proj
	}
	return nil
}

func (m *StacItem) GetPlatformEnum() Platform {
	if m != nil {
		return m.PlatformEnum
	}
	return Platform_UNKNOWN_PLATFORM
}

func (m *StacItem) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StacItem) GetInstrumentEnum() Instrument {
	if m != nil {
		return m.InstrumentEnum
	}
	return Instrument_UNKNOWN_INSTRUMENT
}

func (m *StacItem) GetInstrument() string {
	if m != nil {
		return m.Instrument
	}
	return ""
}

func (m *StacItem) GetConstellationEnum() Constellation {
	if m != nil {
		return m.ConstellationEnum
	}
	return Constellation_UNKNOWN_CONSTELLATION
}

func (m *StacItem) GetConstellation() string {
	if m != nil {
		return m.Constellation
	}
	return ""
}

func (m *StacItem) GetMissionEnum() Mission {
	if m != nil {
		return m.MissionEnum
	}
	return Mission_UNKNOWN_MISSION
}

func (m *StacItem) GetMission() string {
	if m != nil {
		return m.Mission
	}
	return ""
}

func (m *StacItem) GetGsd() *wrappers.FloatValue {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *StacItem) GetStacVersion() string {
	if m != nil {
		return m.StacVersion
	}
	return ""
}

func (m *StacItem) GetStacPbVersion() string {
	if m != nil {
		return m.StacPbVersion
	}
	return ""
}

func (m *StacItem) GetStacExtensions() []string {
	if m != nil {
		return m.StacExtensions
	}
	return nil
}

func (m *StacItem) GetEo() *Eo {
	if m != nil {
		return m.Eo
	}
	return nil
}

func (m *StacItem) GetView() *View {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *StacItem) GetLandsat() *Landsat {
	if m != nil {
		return m.Landsat
	}
	return nil
}

func (m *StacItem) GetMosaic() *Mosaic {
	if m != nil {
		return m.Mosaic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StacItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StacItem_Datetime)(nil),
		(*StacItem_StartDatetime)(nil),
		(*StacItem_Observed)(nil),
		(*StacItem_StartObservation)(nil),
	}
}

//*
// message for making a request for STAC items.
type StacRequest struct {
	// limit the number of results returned
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// the offset from which the query should start
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Types that are valid to be assigned to Identity:
	//	*StacRequest_Id
	//	*StacRequest_IdComplex
	Identity   isStacRequest_Identity `protobuf_oneof:"identity"`
	Collection string                 `protobuf:"bytes,5,opt,name=collection,proto3" json:"collection,omitempty"`
	// search by properties specified by user using a request object known by user and the Any marshalling pattern
	Properties *any.Any `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	// Types that are valid to be assigned to Spatial:
	//	*StacRequest_Intersects
	//	*StacRequest_Bbox
	//	*StacRequest_GeometryRequest
	Spatial isStacRequest_Spatial `protobuf_oneof:"spatial"`
	// Types that are valid to be assigned to Temporal:
	//	*StacRequest_Datetime
	//	*StacRequest_Observed
	Temporal isStacRequest_Temporal `protobuf_oneof:"temporal"`
	// search for the moment the asset data was created by bounds defined by the exact timestamp or a range of timestamp
	Created *TimestampFilter `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// search for the moment the STAC item metadata was updated by bounds defined by the exact timestamp or a range of
	// timestamp
	Updated *TimestampFilter `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
	// spatial reference. (currently only supports epsg field)
	Proj *ProjectionData `protobuf:"bytes,14,opt,name=proj,proto3" json:"proj,omitempty"`
	// only data from the platform specified
	PlatformEnum Platform `protobuf:"varint,15,opt,name=platform_enum,json=platformEnum,proto3,enum=epl.protobuf.v1.Platform" json:"platform_enum,omitempty"`
	// only data from the instrument specified
	InstrumentEnum Instrument `protobuf:"varint,17,opt,name=instrument_enum,json=instrumentEnum,proto3,enum=epl.protobuf.v1.Instrument" json:"instrument_enum,omitempty"`
	// only data from the constellation specified
	ConstellationEnum Constellation `protobuf:"varint,19,opt,name=constellation_enum,json=constellationEnum,proto3,enum=epl.protobuf.v1.Constellation" json:"constellation_enum,omitempty"`
	MissionEnum       Mission       `protobuf:"varint,21,opt,name=mission_enum,json=missionEnum,proto3,enum=epl.protobuf.v1.Mission" json:"mission_enum,omitempty"`
	// data with a gsd equal to or in the range specified in gsd
	Gsd *FloatFilter `protobuf:"bytes,23,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// use certain electro-optical search parameters in your query
	Eo                   *EoRequest      `protobuf:"bytes,24,opt,name=eo,proto3" json:"eo,omitempty"`
	View                 *ViewRequest    `protobuf:"bytes,25,opt,name=view,proto3" json:"view,omitempty"`
	Landsat              *LandsatRequest `protobuf:"bytes,26,opt,name=landsat,proto3" json:"landsat,omitempty"`
	Mosaic               *MosaicRequest  `protobuf:"bytes,27,opt,name=mosaic,proto3" json:"mosaic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StacRequest) Reset()         { *m = StacRequest{} }
func (m *StacRequest) String() string { return proto.CompactTextString(m) }
func (*StacRequest) ProtoMessage()    {}
func (*StacRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{7}
}

func (m *StacRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacRequest.Unmarshal(m, b)
}
func (m *StacRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacRequest.Marshal(b, m, deterministic)
}
func (m *StacRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacRequest.Merge(m, src)
}
func (m *StacRequest) XXX_Size() int {
	return xxx_messageInfo_StacRequest.Size(m)
}
func (m *StacRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StacRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StacRequest proto.InternalMessageInfo

func (m *StacRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *StacRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type isStacRequest_Identity interface {
	isStacRequest_Identity()
}

type StacRequest_Id struct {
	Id string `protobuf:"bytes,3,opt,name=id,proto3,oneof"`
}

type StacRequest_IdComplex struct {
	IdComplex *StringFilter `protobuf:"bytes,4,opt,name=id_complex,json=idComplex,proto3,oneof"`
}

func (*StacRequest_Id) isStacRequest_Identity() {}

func (*StacRequest_IdComplex) isStacRequest_Identity() {}

func (m *StacRequest) GetIdentity() isStacRequest_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *StacRequest) GetId() string {
	if x, ok := m.GetIdentity().(*StacRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *StacRequest) GetIdComplex() *StringFilter {
	if x, ok := m.GetIdentity().(*StacRequest_IdComplex); ok {
		return x.IdComplex
	}
	return nil
}

func (m *StacRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *StacRequest) GetProperties() *any.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

type isStacRequest_Spatial interface {
	isStacRequest_Spatial()
}

type StacRequest_Intersects struct {
	Intersects *GeometryData `protobuf:"bytes,7,opt,name=intersects,proto3,oneof"`
}

type StacRequest_Bbox struct {
	Bbox *EnvelopeData `protobuf:"bytes,8,opt,name=bbox,proto3,oneof"`
}

type StacRequest_GeometryRequest struct {
	GeometryRequest *GeometryRequest `protobuf:"bytes,9,opt,name=geometry_request,json=geometryRequest,proto3,oneof"`
}

func (*StacRequest_Intersects) isStacRequest_Spatial() {}

func (*StacRequest_Bbox) isStacRequest_Spatial() {}

func (*StacRequest_GeometryRequest) isStacRequest_Spatial() {}

func (m *StacRequest) GetSpatial() isStacRequest_Spatial {
	if m != nil {
		return m.Spatial
	}
	return nil
}

func (m *StacRequest) GetIntersects() *GeometryData {
	if x, ok := m.GetSpatial().(*StacRequest_Intersects); ok {
		return x.Intersects
	}
	return nil
}

func (m *StacRequest) GetBbox() *EnvelopeData {
	if x, ok := m.GetSpatial().(*StacRequest_Bbox); ok {
		return x.Bbox
	}
	return nil
}

func (m *StacRequest) GetGeometryRequest() *GeometryRequest {
	if x, ok := m.GetSpatial().(*StacRequest_GeometryRequest); ok {
		return x.GeometryRequest
	}
	return nil
}

type isStacRequest_Temporal interface {
	isStacRequest_Temporal()
}

type StacRequest_Datetime struct {
	Datetime *TimestampFilter `protobuf:"bytes,10,opt,name=datetime,proto3,oneof"`
}

type StacRequest_Observed struct {
	Observed *TimestampFilter `protobuf:"bytes,11,opt,name=observed,proto3,oneof"`
}

func (*StacRequest_Datetime) isStacRequest_Temporal() {}

func (*StacRequest_Observed) isStacRequest_Temporal() {}

func (m *StacRequest) GetTemporal() isStacRequest_Temporal {
	if m != nil {
		return m.Temporal
	}
	return nil
}

func (m *StacRequest) GetDatetime() *TimestampFilter {
	if x, ok := m.GetTemporal().(*StacRequest_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (m *StacRequest) GetObserved() *TimestampFilter {
	if x, ok := m.GetTemporal().(*StacRequest_Observed); ok {
		return x.Observed
	}
	return nil
}

func (m *StacRequest) GetCreated() *TimestampFilter {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *StacRequest) GetUpdated() *TimestampFilter {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *StacRequest) GetProj() *ProjectionData {
	if m != nil {
		return m.Proj
	}
	return nil
}

func (m *StacRequest) GetPlatformEnum() Platform {
	if m != nil {
		return m.PlatformEnum
	}
	return Platform_UNKNOWN_PLATFORM
}

func (m *StacRequest) GetInstrumentEnum() Instrument {
	if m != nil {
		return m.InstrumentEnum
	}
	return Instrument_UNKNOWN_INSTRUMENT
}

func (m *StacRequest) GetConstellationEnum() Constellation {
	if m != nil {
		return m.ConstellationEnum
	}
	return Constellation_UNKNOWN_CONSTELLATION
}

func (m *StacRequest) GetMissionEnum() Mission {
	if m != nil {
		return m.MissionEnum
	}
	return Mission_UNKNOWN_MISSION
}

func (m *StacRequest) GetGsd() *FloatFilter {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *StacRequest) GetEo() *EoRequest {
	if m != nil {
		return m.Eo
	}
	return nil
}

func (m *StacRequest) GetView() *ViewRequest {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *StacRequest) GetLandsat() *LandsatRequest {
	if m != nil {
		return m.Landsat
	}
	return nil
}

func (m *StacRequest) GetMosaic() *MosaicRequest {
	if m != nil {
		return m.Mosaic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StacRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StacRequest_Id)(nil),
		(*StacRequest_IdComplex)(nil),
		(*StacRequest_Intersects)(nil),
		(*StacRequest_Bbox)(nil),
		(*StacRequest_GeometryRequest)(nil),
		(*StacRequest_Datetime)(nil),
		(*StacRequest_Observed)(nil),
	}
}

type View struct {
	// Viewing angle. The angle from the sensor between nadir (straight down) and the scene center. Measured in
	// degrees (0-90).
	OffNadir *wrappers.FloatValue `protobuf:"bytes,1,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// The incidence angle is the angle between the vertical (normal) to the intercepting surface and the line of sight
	// back to the satellite at the scene center. Measured in degrees (0-90).
	IncidenceAngle *wrappers.FloatValue `protobuf:"bytes,2,opt,name=incidence_angle,json=incidenceAngle,proto3" json:"incidence_angle,omitempty"`
	// The angle measured from the sub-sensor point (point on the ground below the platform) between the scene center
	// and true north. Measured clockwise from north in degrees (0-360).
	Azimuth *wrappers.FloatValue `protobuf:"bytes,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun.
	// Measured clockwise in degrees (0-360).
	SunAzimuth *wrappers.FloatValue `protobuf:"bytes,4,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// Sun elevation angle. The angle from the tangent of the scene center point to the sun. Measured from the horizon
	// in degrees (0-90).
	SunElevation         *wrappers.FloatValue `protobuf:"bytes,5,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *View) Reset()         { *m = View{} }
func (m *View) String() string { return proto.CompactTextString(m) }
func (*View) ProtoMessage()    {}
func (*View) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{8}
}

func (m *View) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_View.Unmarshal(m, b)
}
func (m *View) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_View.Marshal(b, m, deterministic)
}
func (m *View) XXX_Merge(src proto.Message) {
	xxx_messageInfo_View.Merge(m, src)
}
func (m *View) XXX_Size() int {
	return xxx_messageInfo_View.Size(m)
}
func (m *View) XXX_DiscardUnknown() {
	xxx_messageInfo_View.DiscardUnknown(m)
}

var xxx_messageInfo_View proto.InternalMessageInfo

func (m *View) GetOffNadir() *wrappers.FloatValue {
	if m != nil {
		return m.OffNadir
	}
	return nil
}

func (m *View) GetIncidenceAngle() *wrappers.FloatValue {
	if m != nil {
		return m.IncidenceAngle
	}
	return nil
}

func (m *View) GetAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.Azimuth
	}
	return nil
}

func (m *View) GetSunAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.SunAzimuth
	}
	return nil
}

func (m *View) GetSunElevation() *wrappers.FloatValue {
	if m != nil {
		return m.SunElevation
	}
	return nil
}

type ViewRequest struct {
	// data with a off_nadir equal to or in the range specified in off_nadir
	OffNadir *FloatFilter `protobuf:"bytes,1,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// data with a incidence equal to or in the range specified in incidence
	IncidenceAngle *FloatFilter `protobuf:"bytes,2,opt,name=incidence_angle,json=incidenceAngle,proto3" json:"incidence_angle,omitempty"`
	// data with a azimuth equal to or in the range specified in azimuth
	Azimuth *FloatFilter `protobuf:"bytes,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// data with a sun_azimuth equal to or in the range specified in sun_azimuth
	SunAzimuth *FloatFilter `protobuf:"bytes,4,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// data with a sun_elevation equal to or in the range specified in sun_elevation
	SunElevation         *FloatFilter `protobuf:"bytes,5,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ViewRequest) Reset()         { *m = ViewRequest{} }
func (m *ViewRequest) String() string { return proto.CompactTextString(m) }
func (*ViewRequest) ProtoMessage()    {}
func (*ViewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{9}
}

func (m *ViewRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewRequest.Unmarshal(m, b)
}
func (m *ViewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewRequest.Marshal(b, m, deterministic)
}
func (m *ViewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRequest.Merge(m, src)
}
func (m *ViewRequest) XXX_Size() int {
	return xxx_messageInfo_ViewRequest.Size(m)
}
func (m *ViewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRequest proto.InternalMessageInfo

func (m *ViewRequest) GetOffNadir() *FloatFilter {
	if m != nil {
		return m.OffNadir
	}
	return nil
}

func (m *ViewRequest) GetIncidenceAngle() *FloatFilter {
	if m != nil {
		return m.IncidenceAngle
	}
	return nil
}

func (m *ViewRequest) GetAzimuth() *FloatFilter {
	if m != nil {
		return m.Azimuth
	}
	return nil
}

func (m *ViewRequest) GetSunAzimuth() *FloatFilter {
	if m != nil {
		return m.SunAzimuth
	}
	return nil
}

func (m *ViewRequest) GetSunElevation() *FloatFilter {
	if m != nil {
		return m.SunElevation
	}
	return nil
}

type Sat struct {
	// The relative orbit number at the time of acquisition.
	RelativeOrbit *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=relative_orbit,json=relativeOrbit,proto3" json:"relative_orbit,omitempty"`
	// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
	// geosynchronous satellites
	OrbitState           Sat_OrbitState `protobuf:"varint,1,opt,name=orbit_state,json=orbitState,proto3,enum=epl.protobuf.v1.Sat_OrbitState" json:"orbit_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Sat) Reset()         { *m = Sat{} }
func (m *Sat) String() string { return proto.CompactTextString(m) }
func (*Sat) ProtoMessage()    {}
func (*Sat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{10}
}

func (m *Sat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sat.Unmarshal(m, b)
}
func (m *Sat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sat.Marshal(b, m, deterministic)
}
func (m *Sat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sat.Merge(m, src)
}
func (m *Sat) XXX_Size() int {
	return xxx_messageInfo_Sat.Size(m)
}
func (m *Sat) XXX_DiscardUnknown() {
	xxx_messageInfo_Sat.DiscardUnknown(m)
}

var xxx_messageInfo_Sat proto.InternalMessageInfo

func (m *Sat) GetRelativeOrbit() *wrappers.UInt32Value {
	if m != nil {
		return m.RelativeOrbit
	}
	return nil
}

func (m *Sat) GetOrbitState() Sat_OrbitState {
	if m != nil {
		return m.OrbitState
	}
	return Sat_UKNOWN_ORBIT_STATE
}

type SatRequest struct {
	// The relative orbit number at the time of acquisition.
	RelativeOrbit uint32 `protobuf:"varint,6,opt,name=relative_orbit,json=relativeOrbit,proto3" json:"relative_orbit,omitempty"`
	// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
	// geosynchronous satellites
	OrbitState           Sat_OrbitState `protobuf:"varint,1,opt,name=orbit_state,json=orbitState,proto3,enum=epl.protobuf.v1.Sat_OrbitState" json:"orbit_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SatRequest) Reset()         { *m = SatRequest{} }
func (m *SatRequest) String() string { return proto.CompactTextString(m) }
func (*SatRequest) ProtoMessage()    {}
func (*SatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{11}
}

func (m *SatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatRequest.Unmarshal(m, b)
}
func (m *SatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatRequest.Marshal(b, m, deterministic)
}
func (m *SatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatRequest.Merge(m, src)
}
func (m *SatRequest) XXX_Size() int {
	return xxx_messageInfo_SatRequest.Size(m)
}
func (m *SatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatRequest proto.InternalMessageInfo

func (m *SatRequest) GetRelativeOrbit() uint32 {
	if m != nil {
		return m.RelativeOrbit
	}
	return 0
}

func (m *SatRequest) GetOrbitState() Sat_OrbitState {
	if m != nil {
		return m.OrbitState
	}
	return Sat_UKNOWN_ORBIT_STATE
}

//*
// message for electro-optical details of STAC items.
type Eo struct {
	// percent cloud cover. 0 no clouds, 100 completely covered
	CloudCover *wrappers.FloatValue `protobuf:"bytes,1,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// band or bands represented in data. If multiple bands, then use a bitwise operator
	Bands                Eo_Band  `protobuf:"varint,2,opt,name=bands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Eo) Reset()         { *m = Eo{} }
func (m *Eo) String() string { return proto.CompactTextString(m) }
func (*Eo) ProtoMessage()    {}
func (*Eo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{12}
}

func (m *Eo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eo.Unmarshal(m, b)
}
func (m *Eo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eo.Marshal(b, m, deterministic)
}
func (m *Eo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eo.Merge(m, src)
}
func (m *Eo) XXX_Size() int {
	return xxx_messageInfo_Eo.Size(m)
}
func (m *Eo) XXX_DiscardUnknown() {
	xxx_messageInfo_Eo.DiscardUnknown(m)
}

var xxx_messageInfo_Eo proto.InternalMessageInfo

func (m *Eo) GetCloudCover() *wrappers.FloatValue {
	if m != nil {
		return m.CloudCover
	}
	return nil
}

func (m *Eo) GetBands() Eo_Band {
	if m != nil {
		return m.Bands
	}
	return Eo_UNKNOWN_BAND
}

//*
// sub message request for specifying electro-optical details in STAC request
type EoRequest struct {
	// data with a cloud_cover equal to or in the range specified in cloud_cover
	CloudCover *FloatFilter `protobuf:"bytes,1,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// data that possesses the bands specified in bands
	Bands                Eo_Band  `protobuf:"varint,2,opt,name=bands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EoRequest) Reset()         { *m = EoRequest{} }
func (m *EoRequest) String() string { return proto.CompactTextString(m) }
func (*EoRequest) ProtoMessage()    {}
func (*EoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{13}
}

func (m *EoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EoRequest.Unmarshal(m, b)
}
func (m *EoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EoRequest.Marshal(b, m, deterministic)
}
func (m *EoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EoRequest.Merge(m, src)
}
func (m *EoRequest) XXX_Size() int {
	return xxx_messageInfo_EoRequest.Size(m)
}
func (m *EoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EoRequest proto.InternalMessageInfo

func (m *EoRequest) GetCloudCover() *FloatFilter {
	if m != nil {
		return m.CloudCover
	}
	return nil
}

func (m *EoRequest) GetBands() Eo_Band {
	if m != nil {
		return m.Bands
	}
	return Eo_UNKNOWN_BAND
}

//*
// message for an asset of a STAC item.
type Asset struct {
	// href for downloading item
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// asset type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// band(s) of data in asset.
	// https://github.com/radiantearth/stac-spec/blob/612ee4fb4f979c049d2416e7f5374a5301b8a277/extensions/eo/README.md
	EoBands Eo_Band `protobuf:"varint,3,opt,name=eo_bands,json=eoBands,proto3,enum=epl.protobuf.v1.Eo_Band" json:"eo_bands,omitempty"`
	// enum for asset type
	AssetType AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=epl.protobuf.v1.AssetType" json:"asset_type,omitempty"`
	// cloud platform enum (Google cloud, Azure, etc)
	CloudPlatform CloudPlatform `protobuf:"varint,5,opt,name=cloud_platform,json=cloudPlatform,proto3,enum=epl.protobuf.v1.CloudPlatform" json:"cloud_platform,omitempty"`
	// manager of the bucket
	BucketManager string `protobuf:"bytes,6,opt,name=bucket_manager,json=bucketManager,proto3" json:"bucket_manager,omitempty"`
	// bucket region. useful when concerned about egress
	BucketRegion string `protobuf:"bytes,7,opt,name=bucket_region,json=bucketRegion,proto3" json:"bucket_region,omitempty"`
	// bucket name
	Bucket string `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// path to the object in the bucket
	ObjectPath string `protobuf:"bytes,9,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	// requester_pays pertains to egress cost. Some buckets are hosted with the egress costs assigned to the requester.
	// some hosts pay the regress costs for the requester.
	RequesterPays        bool     `protobuf:"varint,10,opt,name=requester_pays,json=requesterPays,proto3" json:"requester_pays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{14}
}

func (m *Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Asset.Unmarshal(m, b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return xxx_messageInfo_Asset.Size(m)
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Asset) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Asset) GetEoBands() Eo_Band {
	if m != nil {
		return m.EoBands
	}
	return Eo_UNKNOWN_BAND
}

func (m *Asset) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_UNKNOWN_ASSET
}

func (m *Asset) GetCloudPlatform() CloudPlatform {
	if m != nil {
		return m.CloudPlatform
	}
	return CloudPlatform_UNKNOWN_CLOUD_PLATFORM
}

func (m *Asset) GetBucketManager() string {
	if m != nil {
		return m.BucketManager
	}
	return ""
}

func (m *Asset) GetBucketRegion() string {
	if m != nil {
		return m.BucketRegion
	}
	return ""
}

func (m *Asset) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Asset) GetObjectPath() string {
	if m != nil {
		return m.ObjectPath
	}
	return ""
}

func (m *Asset) GetRequesterPays() bool {
	if m != nil {
		return m.RequesterPays
	}
	return false
}

type DatetimeRange struct {
	Start                *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DatetimeRange) Reset()         { *m = DatetimeRange{} }
func (m *DatetimeRange) String() string { return proto.CompactTextString(m) }
func (*DatetimeRange) ProtoMessage()    {}
func (*DatetimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{15}
}

func (m *DatetimeRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatetimeRange.Unmarshal(m, b)
}
func (m *DatetimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatetimeRange.Marshal(b, m, deterministic)
}
func (m *DatetimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatetimeRange.Merge(m, src)
}
func (m *DatetimeRange) XXX_Size() int {
	return xxx_messageInfo_DatetimeRange.Size(m)
}
func (m *DatetimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_DatetimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_DatetimeRange proto.InternalMessageInfo

func (m *DatetimeRange) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *DatetimeRange) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

//*
// response message for insertion and updates to STAC db
type StacDbResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode           int32    `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	DataId               string   `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Count                uint64   `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StacDbResponse) Reset()         { *m = StacDbResponse{} }
func (m *StacDbResponse) String() string { return proto.CompactTextString(m) }
func (*StacDbResponse) ProtoMessage()    {}
func (*StacDbResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{16}
}

func (m *StacDbResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacDbResponse.Unmarshal(m, b)
}
func (m *StacDbResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacDbResponse.Marshal(b, m, deterministic)
}
func (m *StacDbResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacDbResponse.Merge(m, src)
}
func (m *StacDbResponse) XXX_Size() int {
	return xxx_messageInfo_StacDbResponse.Size(m)
}
func (m *StacDbResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StacDbResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StacDbResponse proto.InternalMessageInfo

func (m *StacDbResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StacDbResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *StacDbResponse) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *StacDbResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

//*
// place holder for SAR
type Sar struct {
	Platform             Sar_Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=epl.protobuf.v1.Sar_Platform" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Sar) Reset()         { *m = Sar{} }
func (m *Sar) String() string { return proto.CompactTextString(m) }
func (*Sar) ProtoMessage()    {}
func (*Sar) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{17}
}

func (m *Sar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sar.Unmarshal(m, b)
}
func (m *Sar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sar.Marshal(b, m, deterministic)
}
func (m *Sar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sar.Merge(m, src)
}
func (m *Sar) XXX_Size() int {
	return xxx_messageInfo_Sar.Size(m)
}
func (m *Sar) XXX_DiscardUnknown() {
	xxx_messageInfo_Sar.DiscardUnknown(m)
}

var xxx_messageInfo_Sar proto.InternalMessageInfo

func (m *Sar) GetPlatform() Sar_Platform {
	if m != nil {
		return m.Platform
	}
	return Sar_UNKNOWN_PLATFORM
}

// https://landsat.usgs.gov/stac/landsat-extension/schema.json
type Landsat struct {
	// id of scene should be id of STAC item, but there may be a use case where someone does not want that
	SceneId              string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId            string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel      Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.v1.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath              int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow               int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand       *wrappers.FloatValue    `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
	WrsType              Landsat_WRSType         `protobuf:"varint,7,opt,name=wrs_type,json=wrsType,proto3,enum=epl.protobuf.v1.Landsat_WRSType" json:"wrs_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Landsat) Reset()         { *m = Landsat{} }
func (m *Landsat) String() string { return proto.CompactTextString(m) }
func (*Landsat) ProtoMessage()    {}
func (*Landsat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{18}
}

func (m *Landsat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Landsat.Unmarshal(m, b)
}
func (m *Landsat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Landsat.Marshal(b, m, deterministic)
}
func (m *Landsat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Landsat.Merge(m, src)
}
func (m *Landsat) XXX_Size() int {
	return xxx_messageInfo_Landsat.Size(m)
}
func (m *Landsat) XXX_DiscardUnknown() {
	xxx_messageInfo_Landsat.DiscardUnknown(m)
}

var xxx_messageInfo_Landsat proto.InternalMessageInfo

func (m *Landsat) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *Landsat) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Landsat) GetProcessingLevel() Landsat_ProcessingLevel {
	if m != nil {
		return m.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (m *Landsat) GetWrsPath() int32 {
	if m != nil {
		return m.WrsPath
	}
	return 0
}

func (m *Landsat) GetWrsRow() int32 {
	if m != nil {
		return m.WrsRow
	}
	return 0
}

func (m *Landsat) GetCloudCoverLand() *wrappers.FloatValue {
	if m != nil {
		return m.CloudCoverLand
	}
	return nil
}

func (m *Landsat) GetWrsType() Landsat_WRSType {
	if m != nil {
		return m.WrsType
	}
	return Landsat_UKNOWN_WRS
}

type LandsatRequest struct {
	SceneId              string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId            string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel      Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.v1.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath              int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow               int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand       *FloatFilter            `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LandsatRequest) Reset()         { *m = LandsatRequest{} }
func (m *LandsatRequest) String() string { return proto.CompactTextString(m) }
func (*LandsatRequest) ProtoMessage()    {}
func (*LandsatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{19}
}

func (m *LandsatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LandsatRequest.Unmarshal(m, b)
}
func (m *LandsatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LandsatRequest.Marshal(b, m, deterministic)
}
func (m *LandsatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandsatRequest.Merge(m, src)
}
func (m *LandsatRequest) XXX_Size() int {
	return xxx_messageInfo_LandsatRequest.Size(m)
}
func (m *LandsatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LandsatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LandsatRequest proto.InternalMessageInfo

func (m *LandsatRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *LandsatRequest) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *LandsatRequest) GetProcessingLevel() Landsat_ProcessingLevel {
	if m != nil {
		return m.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (m *LandsatRequest) GetWrsPath() int32 {
	if m != nil {
		return m.WrsPath
	}
	return 0
}

func (m *LandsatRequest) GetWrsRow() int32 {
	if m != nil {
		return m.WrsRow
	}
	return 0
}

func (m *LandsatRequest) GetCloudCoverLand() *FloatFilter {
	if m != nil {
		return m.CloudCoverLand
	}
	return nil
}

// Experimental
type Mosaic struct {
	// experimental name of the mosaic this item is a member of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// experimental the quad_key of this specific item
	QuadKey string `protobuf:"bytes,2,opt,name=quad_key,json=quadKey,proto3" json:"quad_key,omitempty"`
	// experimental an array of the zooms contained within the asset(s)
	Zooms []int32 `protobuf:"varint,3,rep,packed,name=zooms,proto3" json:"zooms,omitempty"`
	// deprecated
	ObservationRange *DatetimeRange `protobuf:"bytes,4,opt,name=observation_range,json=observationRange,proto3" json:"observation_range,omitempty"`
	// experimental scene provenance. ordered list of STAC item ids that contribute to the mosaic. The 0th STAC item in provenance_ids is the front-most contributor to the mosaic, the last STAC item in bottom contributor and is likely to be partially covered by other contributing scenes
	ProvenanceIds        []string `protobuf:"bytes,5,rep,name=provenance_ids,json=provenanceIds,proto3" json:"provenance_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mosaic) Reset()         { *m = Mosaic{} }
func (m *Mosaic) String() string { return proto.CompactTextString(m) }
func (*Mosaic) ProtoMessage()    {}
func (*Mosaic) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{20}
}

func (m *Mosaic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mosaic.Unmarshal(m, b)
}
func (m *Mosaic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mosaic.Marshal(b, m, deterministic)
}
func (m *Mosaic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mosaic.Merge(m, src)
}
func (m *Mosaic) XXX_Size() int {
	return xxx_messageInfo_Mosaic.Size(m)
}
func (m *Mosaic) XXX_DiscardUnknown() {
	xxx_messageInfo_Mosaic.DiscardUnknown(m)
}

var xxx_messageInfo_Mosaic proto.InternalMessageInfo

func (m *Mosaic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mosaic) GetQuadKey() string {
	if m != nil {
		return m.QuadKey
	}
	return ""
}

func (m *Mosaic) GetZooms() []int32 {
	if m != nil {
		return m.Zooms
	}
	return nil
}

func (m *Mosaic) GetObservationRange() *DatetimeRange {
	if m != nil {
		return m.ObservationRange
	}
	return nil
}

func (m *Mosaic) GetProvenanceIds() []string {
	if m != nil {
		return m.ProvenanceIds
	}
	return nil
}

// Experimental
type MosaicRequest struct {
	// experimental mosaic to search for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// experimental quad_key to search by
	QuadKey              string   `protobuf:"bytes,2,opt,name=quad_key,json=quadKey,proto3" json:"quad_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MosaicRequest) Reset()         { *m = MosaicRequest{} }
func (m *MosaicRequest) String() string { return proto.CompactTextString(m) }
func (*MosaicRequest) ProtoMessage()    {}
func (*MosaicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f29a77f2d54ba66, []int{21}
}

func (m *MosaicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MosaicRequest.Unmarshal(m, b)
}
func (m *MosaicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MosaicRequest.Marshal(b, m, deterministic)
}
func (m *MosaicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MosaicRequest.Merge(m, src)
}
func (m *MosaicRequest) XXX_Size() int {
	return xxx_messageInfo_MosaicRequest.Size(m)
}
func (m *MosaicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MosaicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MosaicRequest proto.InternalMessageInfo

func (m *MosaicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MosaicRequest) GetQuadKey() string {
	if m != nil {
		return m.QuadKey
	}
	return ""
}

func init() {
	proto.RegisterEnum("epl.protobuf.v1.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("epl.protobuf.v1.CloudPlatform", CloudPlatform_name, CloudPlatform_value)
	proto.RegisterEnum("epl.protobuf.v1.Platform", Platform_name, Platform_value)
	proto.RegisterEnum("epl.protobuf.v1.Instrument", Instrument_name, Instrument_value)
	proto.RegisterEnum("epl.protobuf.v1.Constellation", Constellation_name, Constellation_value)
	proto.RegisterEnum("epl.protobuf.v1.Mission", Mission_name, Mission_value)
	proto.RegisterEnum("epl.protobuf.v1.Sat_OrbitState", Sat_OrbitState_name, Sat_OrbitState_value)
	proto.RegisterEnum("epl.protobuf.v1.Eo_Band", Eo_Band_name, Eo_Band_value)
	proto.RegisterEnum("epl.protobuf.v1.Sar_Platform", Sar_Platform_name, Sar_Platform_value)
	proto.RegisterEnum("epl.protobuf.v1.Sar_Instrument", Sar_Instrument_name, Sar_Instrument_value)
	proto.RegisterEnum("epl.protobuf.v1.Landsat_CollectionCategory", Landsat_CollectionCategory_name, Landsat_CollectionCategory_value)
	proto.RegisterEnum("epl.protobuf.v1.Landsat_WRSType", Landsat_WRSType_name, Landsat_WRSType_value)
	proto.RegisterEnum("epl.protobuf.v1.Landsat_ProcessingLevel", Landsat_ProcessingLevel_name, Landsat_ProcessingLevel_value)
	proto.RegisterType((*Collection)(nil), "epl.protobuf.v1.Collection")
	proto.RegisterMapType((map[string]*Stats)(nil), "epl.protobuf.v1.Collection.SummariesEntry")
	proto.RegisterType((*CollectionRequest)(nil), "epl.protobuf.v1.CollectionRequest")
	proto.RegisterType((*Stats)(nil), "epl.protobuf.v1.Stats")
	proto.RegisterType((*Extent)(nil), "epl.protobuf.v1.Extent")
	proto.RegisterType((*Interval)(nil), "epl.protobuf.v1.Interval")
	proto.RegisterType((*Provider)(nil), "epl.protobuf.v1.Provider")
	proto.RegisterType((*StacItem)(nil), "epl.protobuf.v1.StacItem")
	proto.RegisterMapType((map[string]*Asset)(nil), "epl.protobuf.v1.StacItem.AssetsEntry")
	proto.RegisterType((*StacRequest)(nil), "epl.protobuf.v1.StacRequest")
	proto.RegisterType((*View)(nil), "epl.protobuf.v1.View")
	proto.RegisterType((*ViewRequest)(nil), "epl.protobuf.v1.ViewRequest")
	proto.RegisterType((*Sat)(nil), "epl.protobuf.v1.Sat")
	proto.RegisterType((*SatRequest)(nil), "epl.protobuf.v1.SatRequest")
	proto.RegisterType((*Eo)(nil), "epl.protobuf.v1.Eo")
	proto.RegisterType((*EoRequest)(nil), "epl.protobuf.v1.EoRequest")
	proto.RegisterType((*Asset)(nil), "epl.protobuf.v1.Asset")
	proto.RegisterType((*DatetimeRange)(nil), "epl.protobuf.v1.DatetimeRange")
	proto.RegisterType((*StacDbResponse)(nil), "epl.protobuf.v1.StacDbResponse")
	proto.RegisterType((*Sar)(nil), "epl.protobuf.v1.Sar")
	proto.RegisterType((*Landsat)(nil), "epl.protobuf.v1.Landsat")
	proto.RegisterType((*LandsatRequest)(nil), "epl.protobuf.v1.LandsatRequest")
	proto.RegisterType((*Mosaic)(nil), "epl.protobuf.v1.Mosaic")
	proto.RegisterType((*MosaicRequest)(nil), "epl.protobuf.v1.MosaicRequest")
}

func init() {
	proto.RegisterFile("epl/protobuf/v1/stac.proto", fileDescriptor_4f29a77f2d54ba66)
}

var fileDescriptor_4f29a77f2d54ba66 = []byte{
	// 3068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcb, 0x73, 0xdb, 0x46,
	0x9a, 0x17, 0xdf, 0xe0, 0x47, 0x91, 0x6a, 0xb5, 0x64, 0x1b, 0x96, 0x5f, 0x0a, 0x93, 0xec, 0x7a,
	0x55, 0x89, 0x64, 0xc9, 0x71, 0x62, 0xe7, 0xe1, 0x35, 0x45, 0x41, 0x12, 0x14, 0xbe, 0xd2, 0xa0,
	0xac, 0x24, 0x55, 0x5b, 0x28, 0x88, 0x68, 0xd1, 0xb0, 0x49, 0x80, 0x01, 0x40, 0xc9, 0xca, 0xc9,
	0x7f, 0xc3, 0x5e, 0xf7, 0xb6, 0xbb, 0xb5, 0x87, 0xbd, 0x4f, 0xd5, 0xcc, 0x61, 0x6a, 0x6a, 0x6a,
	0x4e, 0xf3, 0xaf, 0xcc, 0x1f, 0x30, 0xe7, 0xa9, 0x7e, 0x00, 0xa4, 0x44, 0xea, 0xe1, 0x64, 0xe6,
	0x32, 0x27, 0x76, 0x7f, 0xfd, 0xfb, 0xf5, 0xe3, 0xeb, 0xef, 0x85, 0x96, 0x60, 0x89, 0x0e, 0x7a,
	0x6b, 0x03, 0xdf, 0x0b, 0xbd, 0xc3, 0xe1, 0xd1, 0xda, 0xf1, 0xfa, 0x5a, 0x10, 0x5a, 0x9d, 0x55,
	0x2e, 0xc0, 0x73, 0x74, 0xd0, 0x5b, 0x8d, 0xc6, 0x56, 0x8f, 0xd7, 0x97, 0x1e, 0x74, 0x3d, 0xaf,
	0xdb, 0xa3, 0x23, 0x7c, 0xe8, 0xf4, 0x69, 0x10, 0x5a, 0xfd, 0x81, 0x80, 0x2d, 0xdd, 0x3f, 0x0f,
	0x38, 0xf1, 0xad, 0xc1, 0x80, 0xfa, 0x81, 0x1c, 0xbf, 0x7d, 0x7e, 0xdc, 0x72, 0x4f, 0x23, 0xea,
	0xf9, 0x8d, 0x74, 0xa9, 0xd7, 0xa7, 0xa1, 0x1f, 0x8d, 0xdf, 0x39, 0x3f, 0xfe, 0xd3, 0x90, 0x46,
	0x83, 0xe5, 0x3f, 0xa5, 0x00, 0xaa, 0x5e, 0xaf, 0x47, 0x3b, 0xa1, 0xe3, 0xb9, 0xf8, 0x03, 0x98,
	0x65, 0xc7, 0x30, 0x8f, 0xa9, 0x1f, 0x38, 0x9e, 0xab, 0x26, 0x96, 0x13, 0x0f, 0xf3, 0xa4, 0xc0,
	0x64, 0x2f, 0x85, 0x08, 0x97, 0x20, 0xe9, 0xd8, 0x6a, 0x8a, 0x0f, 0x24, 0x1d, 0x1b, 0x2f, 0x42,
	0x26, 0x74, 0xc2, 0x1e, 0x55, 0xd3, 0x5c, 0x24, 0x3a, 0x78, 0x19, 0x0a, 0x36, 0x0d, 0x3a, 0xbe,
	0x33, 0x60, 0xf3, 0xaa, 0x19, 0x31, 0xcf, 0x98, 0x08, 0x2f, 0x81, 0xf2, 0x86, 0x9e, 0x9e, 0x78,
	0xbe, 0x1d, 0xa8, 0xd9, 0xe5, 0xd4, 0xc3, 0x3c, 0x89, 0xfb, 0x58, 0x85, 0x5c, 0xcf, 0xe9, 0x50,
	0x37, 0xa0, 0x6a, 0x8e, 0x33, 0xa3, 0x2e, 0xfe, 0x02, 0xf2, 0x03, 0xdf, 0x3b, 0x76, 0x6c, 0xea,
	0x07, 0xaa, 0xb2, 0x9c, 0x7a, 0x58, 0xd8, 0xb8, 0xbd, 0x7a, 0x4e, 0xdb, 0xab, 0x2d, 0x89, 0x20,
	0x23, 0x2c, 0x5e, 0x83, 0x2c, 0x7d, 0x1b, 0x52, 0x37, 0x54, 0xf3, 0xcb, 0x89, 0x87, 0x85, 0x8d,
	0x5b, 0x13, 0x2c, 0x8d, 0x0f, 0x13, 0x09, 0xc3, 0xbb, 0x90, 0x0f, 0x86, 0xfd, 0xbe, 0xe5, 0x3b,
	0x34, 0x50, 0x81, 0xaf, 0xb4, 0x32, 0xc1, 0x19, 0xa9, 0x6e, 0xd5, 0x88, 0xc0, 0x9a, 0x1b, 0xfa,
	0xa7, 0x64, 0x44, 0x5e, 0x6a, 0x43, 0xe9, 0xec, 0x20, 0x46, 0x90, 0x7a, 0x43, 0x4f, 0xa5, 0x76,
	0x59, 0x13, 0x7f, 0x02, 0x99, 0x63, 0xab, 0x37, 0xa4, 0x6a, 0x92, 0xef, 0xee, 0xe6, 0xc4, 0x4a,
	0x46, 0x68, 0x85, 0x01, 0x11, 0xa0, 0x2f, 0x93, 0x4f, 0x13, 0x7b, 0x69, 0x25, 0x89, 0x52, 0x7b,
	0x69, 0xa5, 0x80, 0x66, 0xcb, 0xff, 0x9b, 0x80, 0xf9, 0xd1, 0x56, 0x08, 0xfd, 0x69, 0x48, 0x83,
	0x50, 0xde, 0x54, 0x22, 0xbe, 0xa9, 0xc7, 0x90, 0x3e, 0x3c, 0xf4, 0xde, 0xca, 0x25, 0xee, 0x4d,
	0x2a, 0xc0, 0x3d, 0xa6, 0x3d, 0x6f, 0x40, 0xb7, 0xac, 0xd0, 0xda, 0x9d, 0x21, 0x1c, 0x8c, 0xff,
	0x1d, 0xc0, 0x71, 0x43, 0xea, 0x07, 0xb4, 0x13, 0x06, 0xfc, 0xda, 0xa7, 0x51, 0x77, 0xa4, 0xc9,
	0x49, 0xea, 0x18, 0x65, 0x33, 0x0f, 0xb9, 0x60, 0x60, 0x85, 0x8e, 0xd5, 0x2b, 0xe7, 0x20, 0xc3,
	0x8f, 0x51, 0x7e, 0x0b, 0x59, 0xa1, 0x6d, 0xfc, 0x45, 0x3c, 0xaa, 0x26, 0xb8, 0x8e, 0x2f, 0xdf,
	0x16, 0x89, 0xd0, 0xf8, 0x09, 0x28, 0x21, 0xed, 0x0f, 0x3c, 0xdf, 0xea, 0xa9, 0xc9, 0x0b, 0xec,
	0x40, 0x67, 0xbb, 0x38, 0xb6, 0x7a, 0x24, 0x86, 0x96, 0x5f, 0x83, 0x12, 0x49, 0xf1, 0x23, 0xc8,
	0x04, 0xa1, 0xe5, 0x87, 0x5c, 0x45, 0x85, 0x8d, 0xa5, 0x55, 0xe1, 0x63, 0xa3, 0x29, 0xda, 0x91,
	0x93, 0x12, 0x01, 0xc4, 0x9f, 0x40, 0x8a, 0xba, 0xb6, 0x54, 0xe0, 0x65, 0x78, 0x06, 0x2b, 0xbf,
	0x02, 0x25, 0xb2, 0x44, 0x8c, 0x21, 0xed, 0x5a, 0x7d, 0x2a, 0x6f, 0x83, 0xb7, 0xcf, 0xfb, 0x48,
	0x72, 0xd2, 0x47, 0x16, 0x21, 0xe3, 0x7b, 0x3d, 0xca, 0xf4, 0xce, 0x1c, 0x44, 0x74, 0x98, 0xf5,
	0x0c, 0xfd, 0x9e, 0xf4, 0x37, 0xd6, 0x2c, 0xff, 0xb6, 0x08, 0x8a, 0x11, 0x5a, 0x1d, 0x3d, 0xa4,
	0xfd, 0x89, 0x6b, 0x8f, 0x1d, 0x34, 0x39, 0xee, 0xa0, 0xf7, 0x01, 0x3a, 0xb1, 0xc5, 0x48, 0x77,
	0x1e, 0x93, 0xe0, 0xcf, 0x00, 0x06, 0xbe, 0x37, 0xa0, 0x7e, 0xc8, 0xec, 0x3f, 0xcd, 0x4f, 0xbc,
	0x38, 0x71, 0xe2, 0x8a, 0x7b, 0x4a, 0xc6, 0x70, 0xf8, 0x1b, 0xc8, 0x5a, 0x41, 0x40, 0xc3, 0x40,
	0xcd, 0xf0, 0x3b, 0xf9, 0x78, 0x9a, 0x1d, 0xf3, 0x6d, 0xae, 0x56, 0x38, 0x4e, 0x38, 0x8b, 0x24,
	0xe1, 0x67, 0xa0, 0x44, 0xc1, 0x4b, 0xcd, 0x5e, 0xc3, 0xd4, 0x48, 0x0c, 0xc7, 0xeb, 0xd2, 0xb8,
	0x73, 0xd7, 0x30, 0x6e, 0x69, 0xda, 0x4f, 0x41, 0xb1, 0xad, 0x90, 0xb2, 0x50, 0xac, 0x2a, 0x57,
	0x5d, 0xe9, 0xee, 0x0c, 0x89, 0xd1, 0xb8, 0x0a, 0x25, 0x6e, 0x10, 0x66, 0xcc, 0x87, 0x6b, 0xf0,
	0x8b, 0x9c, 0xb3, 0x15, 0x4d, 0xf2, 0x14, 0x14, 0xef, 0x30, 0xa0, 0xfe, 0x31, 0xb5, 0x65, 0x4c,
	0xba, 0x8c, 0x9e, 0x20, 0x31, 0x1a, 0xeb, 0x30, 0x2f, 0x96, 0x17, 0x12, 0x8b, 0x5f, 0x61, 0xe1,
	0x1a, 0x53, 0x20, 0x4e, 0x6b, 0x8e, 0x58, 0xf8, 0x1b, 0x98, 0xa5, 0xae, 0x3d, 0x3a, 0xc7, 0xec,
	0x95, 0xa6, 0x5d, 0xa0, 0xae, 0xbd, 0x35, 0x52, 0xc4, 0x1c, 0xa3, 0x8f, 0xef, 0xa3, 0x78, 0xe5,
	0x0c, 0x25, 0xea, 0xda, 0xe3, 0x7b, 0xf8, 0x0c, 0x72, 0x1d, 0x9f, 0x5a, 0x21, 0xb5, 0xd5, 0xd2,
	0x95, 0xe4, 0x08, 0xca, 0x58, 0xc3, 0x81, 0xcd, 0x59, 0x73, 0x57, 0xb3, 0x24, 0x94, 0xc5, 0xc0,
	0x81, 0xef, 0xbd, 0x56, 0x11, 0xa7, 0x3c, 0x98, 0x96, 0x3a, 0x5e, 0x0b, 0x0f, 0x10, 0x86, 0xc2,
	0xc0, 0xf8, 0x39, 0x14, 0x07, 0x3d, 0x2b, 0x3c, 0xf2, 0xfc, 0xbe, 0x49, 0xdd, 0x61, 0x5f, 0x9d,
	0x5f, 0x4e, 0x3c, 0x2c, 0x4d, 0x4b, 0x3c, 0x12, 0x45, 0x66, 0x23, 0xbc, 0xe6, 0x0e, 0xfb, 0x2c,
	0xd5, 0x45, 0x7d, 0x15, 0x73, 0x4f, 0x8b, 0xfb, 0x78, 0x0b, 0xe6, 0x1c, 0x37, 0x08, 0xfd, 0x61,
	0x9f, 0xba, 0xa1, 0x98, 0x7d, 0x81, 0xcf, 0x7e, 0x67, 0x4a, 0x38, 0x8b, 0x70, 0xa4, 0x34, 0xe2,
	0xf0, 0x15, 0xee, 0xb3, 0x28, 0x1d, 0x49, 0xd4, 0x45, 0xe1, 0xcd, 0x23, 0x09, 0xae, 0x03, 0xee,
	0x78, 0x6e, 0x10, 0xd2, 0x5e, 0x8f, 0xeb, 0x5c, 0x2c, 0x74, 0x83, 0x2f, 0x74, 0x7f, 0x4a, 0x56,
	0x1b, 0x83, 0x92, 0xf9, 0x33, 0x4c, 0xbe, 0xdc, 0x47, 0x50, 0x3c, 0x23, 0x54, 0x6f, 0xf2, 0x15,
	0xcf, 0x0a, 0xf1, 0x57, 0x30, 0xdb, 0x77, 0x82, 0x20, 0x5e, 0xee, 0x16, 0x5f, 0x4e, 0x9d, 0x58,
	0xae, 0x2e, 0x40, 0xa4, 0x20, 0xd1, 0x7c, 0x09, 0x15, 0x72, 0xb2, 0xab, 0xaa, 0xa2, 0x04, 0x90,
	0x5d, 0xfc, 0x29, 0xa4, 0xba, 0x81, 0xad, 0xde, 0xe6, 0x37, 0x78, 0x67, 0xe2, 0xd2, 0xb7, 0x7b,
	0x9e, 0x15, 0xbe, 0x64, 0x69, 0x92, 0x30, 0xdc, 0x44, 0x49, 0xb3, 0x34, 0x59, 0xd2, 0xfc, 0x0b,
	0xcc, 0x71, 0xc8, 0xe0, 0x30, 0x46, 0xdd, 0x11, 0x07, 0x62, 0xe2, 0xd6, 0x61, 0x84, 0xfb, 0x57,
	0x89, 0xe3, 0x15, 0x02, 0x93, 0x04, 0xea, 0x5d, 0x1e, 0x98, 0x59, 0x34, 0xe8, 0x68, 0xb1, 0x14,
	0x7f, 0x08, 0x49, 0xea, 0xa9, 0xf7, 0xf8, 0x0e, 0x17, 0x26, 0x43, 0x91, 0x47, 0x92, 0xd4, 0xc3,
	0xff, 0x06, 0xe9, 0x63, 0x87, 0x9e, 0xa8, 0x65, 0x0e, 0xbb, 0x31, 0x01, 0x7b, 0xe9, 0xd0, 0x13,
	0xc2, 0x21, 0x78, 0x03, 0x72, 0x3d, 0xcb, 0xb5, 0x03, 0x2b, 0x54, 0x1f, 0x70, 0xf4, 0xa4, 0x12,
	0x6b, 0x62, 0x9c, 0x44, 0x40, 0x56, 0xf0, 0xf4, 0xbd, 0xc0, 0x72, 0x3a, 0xea, 0xf2, 0x05, 0x05,
	0x4f, 0x9d, 0x0f, 0x13, 0x09, 0x5b, 0xfa, 0x0e, 0x0a, 0x63, 0x31, 0xf9, 0x97, 0xd4, 0x28, 0x9c,
	0x3e, 0x56, 0xa3, 0x6c, 0xde, 0x80, 0x85, 0x28, 0xf3, 0x9a, 0x36, 0x1d, 0xf8, 0xb4, 0xc3, 0x9c,
	0x70, 0x13, 0x46, 0xb9, 0xbb, 0xfc, 0x3f, 0x00, 0x05, 0x96, 0x13, 0xa2, 0xa2, 0x65, 0x11, 0x32,
	0x3d, 0xa7, 0xef, 0x88, 0xa4, 0x5c, 0x24, 0xa2, 0x83, 0x6f, 0x42, 0xd6, 0x3b, 0x3a, 0x0a, 0x68,
	0xc8, 0xd7, 0x4e, 0x13, 0xd9, 0xc3, 0x68, 0x54, 0x8c, 0xee, 0xce, 0xf0, 0x6c, 0xf7, 0x1c, 0xc0,
	0xb1, 0xcd, 0x8e, 0xd7, 0x1f, 0xf4, 0xe8, 0x5b, 0x99, 0xb7, 0xee, 0x4d, 0xc9, 0x42, 0xbe, 0xe3,
	0x76, 0xb7, 0x9d, 0x5e, 0x48, 0xfd, 0xdd, 0x19, 0x92, 0x77, 0xec, 0xaa, 0x60, 0x9c, 0xcb, 0x8b,
	0x99, 0x2b, 0xf2, 0x62, 0xf6, 0x9a, 0x79, 0xf1, 0x6c, 0x15, 0x95, 0xbb, 0x4e, 0x15, 0x95, 0x18,
	0xaf, 0xa2, 0xe2, 0xda, 0x4d, 0xb9, 0x4e, 0xed, 0x96, 0x90, 0x09, 0xae, 0x0e, 0x28, 0xca, 0x8f,
	0xa6, 0x2f, 0xf4, 0x2b, 0x33, 0xcd, 0xf2, 0x85, 0x6b, 0xcb, 0x7b, 0xd8, 0x4d, 0x90, 0xb9, 0xee,
	0x59, 0x11, 0x7e, 0x3e, 0x96, 0x2f, 0xe1, 0x82, 0x69, 0xe2, 0x90, 0x2b, 0x75, 0x9b, 0x1c, 0xcb,
	0x9a, 0xcf, 0xc7, 0x12, 0x5e, 0xe1, 0xfa, 0xfc, 0x38, 0xed, 0x7d, 0x39, 0xca, 0x13, 0xb3, 0xd7,
	0xa3, 0x8f, 0xb2, 0xc5, 0x97, 0xa3, 0x6c, 0x51, 0xbc, 0x2e, 0xf7, 0x7c, 0xce, 0x28, 0xfd, 0xaa,
	0x9c, 0x31, 0xf7, 0x7e, 0x39, 0x63, 0x4a, 0x5e, 0x98, 0x7f, 0xff, 0xbc, 0x30, 0x3d, 0xee, 0x2f,
	0xfc, 0xd2, 0xb8, 0x7f, 0x3e, 0xa2, 0xdf, 0x78, 0x9f, 0x88, 0xbe, 0x2a, 0xe2, 0xf6, 0x2d, 0xae,
	0xc5, 0xbb, 0x13, 0x1c, 0x1e, 0xb7, 0xa5, 0xea, 0x79, 0xe0, 0x5e, 0xe1, 0x41, 0x54, 0x95, 0xb9,
	0x7d, 0x4a, 0x10, 0x15, 0x66, 0xc9, 0x63, 0xe9, 0x23, 0x19, 0x4b, 0x6f, 0x5f, 0x30, 0x39, 0x8f,
	0xa5, 0x12, 0x2f, 0x42, 0xea, 0xb3, 0x51, 0x48, 0x5d, 0xba, 0xe0, 0x5e, 0xa3, 0x90, 0x2a, 0x79,
	0x71, 0x64, 0xfd, 0x3c, 0x8e, 0xac, 0x77, 0x38, 0xf3, 0xfe, 0x45, 0x91, 0x55, 0x12, 0x25, 0x9a,
	0x85, 0x3d, 0xc7, 0xa6, 0x6e, 0xe8, 0x84, 0xa7, 0x63, 0x5f, 0x45, 0xe3, 0xd1, 0x70, 0x2f, 0xad,
	0x20, 0x34, 0xbf, 0x97, 0x56, 0x30, 0x5a, 0xd8, 0x4b, 0x2b, 0x8b, 0xe8, 0xc6, 0x5e, 0x5a, 0xb9,
	0x89, 0x6e, 0x95, 0x7f, 0x9f, 0x84, 0x34, 0x3b, 0x03, 0x7e, 0x0a, 0x79, 0xef, 0xe8, 0xc8, 0x74,
	0x2d, 0xdb, 0xf1, 0xe5, 0x77, 0xcb, 0xa5, 0x29, 0x50, 0xf1, 0x8e, 0x8e, 0x1a, 0x0c, 0x2c, 0x0c,
	0xaa, 0xc3, 0x36, 0xd0, 0xa1, 0xa6, 0xe5, 0x76, 0x7b, 0x51, 0x1c, 0xbf, 0x94, 0x5f, 0x8a, 0x39,
	0x15, 0x46, 0xc1, 0x4f, 0x20, 0x67, 0xfd, 0xec, 0xf4, 0x87, 0xe1, 0x2b, 0xf9, 0x2d, 0x78, 0x29,
	0x3b, 0xc2, 0xe2, 0xaf, 0xa1, 0x10, 0x0c, 0x5d, 0x33, 0xa2, 0xa6, 0xaf, 0xa6, 0x42, 0x30, 0x74,
	0x2b, 0x92, 0xfd, 0x02, 0x8a, 0x8c, 0x4d, 0x7b, 0x54, 0xd6, 0x98, 0x99, 0xab, 0xf9, 0xb3, 0xc1,
	0xd0, 0xd5, 0x22, 0x42, 0xf9, 0xcf, 0x49, 0x28, 0x8c, 0xd9, 0x00, 0x7e, 0x36, 0xa9, 0xc6, 0xcb,
	0x2d, 0x72, 0xa4, 0x47, 0xed, 0x22, 0x3d, 0x5e, 0x3e, 0xc1, 0x79, 0x45, 0x7e, 0x7e, 0x5e, 0x91,
	0x97, 0xd3, 0x63, 0x4d, 0x7e, 0x33, 0x4d, 0x93, 0x97, 0x73, 0xc7, 0x55, 0x59, 0x99, 0xae, 0xca,
	0xcb, 0x27, 0x38, 0xab, 0xcb, 0xbf, 0x26, 0x20, 0x65, 0x58, 0x21, 0xfb, 0x08, 0xf2, 0x29, 0x0b,
	0x0e, 0xc7, 0xd4, 0xf4, 0xfc, 0x43, 0x27, 0x94, 0xd9, 0xf0, 0xee, 0xc4, 0xb5, 0xec, 0xeb, 0x6e,
	0xf8, 0x78, 0x43, 0xdc, 0x4b, 0x31, 0xe2, 0x34, 0x19, 0x05, 0xbf, 0x80, 0x02, 0xe7, 0x9a, 0x41,
	0x68, 0x85, 0xe2, 0xf3, 0xb8, 0x34, 0xc5, 0x15, 0x0d, 0x2b, 0x5c, 0xe5, 0x04, 0x83, 0xc1, 0x08,
	0x78, 0x71, 0xbb, 0xfc, 0x0a, 0x60, 0x34, 0x82, 0x6f, 0x02, 0xde, 0xff, 0xb6, 0xd1, 0x3c, 0x68,
	0x98, 0x4d, 0xb2, 0xa9, 0xb7, 0x4d, 0xa3, 0x5d, 0x69, 0x6b, 0x68, 0x06, 0x2f, 0xc0, 0x5c, 0xc5,
	0xa8, 0x6a, 0x8d, 0x2d, 0xbd, 0xb1, 0x23, 0x86, 0x50, 0x02, 0x2f, 0x02, 0xda, 0xd2, 0xce, 0x49,
	0x93, 0xf8, 0x16, 0x2c, 0xec, 0x68, 0x4d, 0x46, 0xd4, 0x9b, 0x8d, 0x0a, 0xf9, 0x41, 0x0e, 0xa4,
	0xca, 0x43, 0x00, 0x23, 0x0e, 0x07, 0xf8, 0xe3, 0xa9, 0xc7, 0x2f, 0xfe, 0xfd, 0x0f, 0xf8, 0xff,
	0x49, 0x48, 0x6a, 0x1e, 0x73, 0xa1, 0x4e, 0xcf, 0x1b, 0xb2, 0xda, 0xe6, 0x98, 0x5e, 0xcb, 0xf7,
	0x81, 0xe3, 0xab, 0x0c, 0x8e, 0x57, 0x21, 0x73, 0xc8, 0xc2, 0x17, 0xb7, 0xd5, 0x69, 0x21, 0x5b,
	0xf3, 0x56, 0x37, 0x2d, 0xd7, 0x26, 0x02, 0x56, 0xfe, 0x4d, 0x02, 0xd2, 0xac, 0x8f, 0x11, 0xcc,
	0xee, 0x37, 0x84, 0x46, 0x37, 0x2b, 0x8d, 0x2d, 0x34, 0x83, 0x0b, 0x90, 0xab, 0x36, 0x2b, 0x46,
	0xbb, 0x52, 0x43, 0x49, 0xac, 0x40, 0x7a, 0xb3, 0xb6, 0xaf, 0xa1, 0x34, 0xce, 0x43, 0x66, 0x87,
	0x68, 0x5a, 0x03, 0x29, 0x38, 0x07, 0x29, 0xa2, 0x6d, 0x21, 0xc4, 0x1b, 0x3b, 0x9b, 0xe8, 0x2e,
	0x6b, 0x34, 0x74, 0x82, 0x96, 0x19, 0xaa, 0xa1, 0x13, 0x73, 0x03, 0x7d, 0xc0, 0x9a, 0x64, 0x67,
	0x53, 0x27, 0xe8, 0x6b, 0x0c, 0x90, 0x35, 0x0e, 0x74, 0x62, 0xae, 0xa3, 0x17, 0xb8, 0x20, 0xdb,
	0x1b, 0xe8, 0x5d, 0x02, 0x2b, 0x90, 0x6a, 0x55, 0x1a, 0xe8, 0x5d, 0x92, 0x89, 0xab, 0x3a, 0x21,
	0xfb, 0x06, 0x7a, 0x97, 0x66, 0x9d, 0x9a, 0xc0, 0xbf, 0x53, 0xe2, 0xce, 0x06, 0x7a, 0x87, 0xca,
	0x3f, 0x43, 0x3e, 0xce, 0x0c, 0xcc, 0x57, 0x26, 0x55, 0x76, 0x85, 0xaf, 0xfc, 0x0a, 0x9d, 0xfd,
	0x67, 0x0a, 0x32, 0xbc, 0x04, 0xc6, 0x18, 0xd2, 0xaf, 0x7c, 0x7a, 0x14, 0xbd, 0xf6, 0xb0, 0x36,
	0x93, 0x85, 0xa7, 0x83, 0xe8, 0x15, 0x86, 0xb7, 0xf1, 0x63, 0x50, 0xa8, 0x67, 0x8a, 0x45, 0x52,
	0x57, 0x2c, 0x92, 0xa3, 0x1e, 0xfb, 0x0d, 0xf0, 0x33, 0x00, 0xfe, 0x5c, 0x62, 0xf2, 0xe9, 0xd2,
	0x9c, 0xb6, 0x34, 0xbd, 0x16, 0x6f, 0x9f, 0x0e, 0x28, 0xc9, 0x5b, 0x51, 0x13, 0x6b, 0x50, 0x12,
	0x0a, 0x89, 0x3f, 0x47, 0x33, 0x17, 0x95, 0x02, 0x0c, 0x16, 0x97, 0x26, 0xc5, 0xce, 0x78, 0x97,
	0x99, 0xfe, 0xe1, 0xb0, 0xf3, 0x86, 0x86, 0x66, 0xdf, 0x72, 0xad, 0x2e, 0xf5, 0xb9, 0xe9, 0xe7,
	0x49, 0x51, 0x48, 0xeb, 0x42, 0x88, 0x3f, 0x04, 0x29, 0x30, 0x7d, 0xda, 0x65, 0xb1, 0x46, 0xbc,
	0xe5, 0xce, 0x0a, 0x21, 0xe1, 0x32, 0x56, 0xd9, 0x8b, 0x3e, 0x2f, 0x6d, 0xf3, 0x44, 0xf6, 0xf0,
	0x03, 0x28, 0x78, 0x87, 0xac, 0xac, 0x32, 0x07, 0x56, 0xf8, 0x8a, 0x97, 0xad, 0x79, 0x02, 0x42,
	0xd4, 0xb2, 0xc2, 0x57, 0xc2, 0xff, 0xf8, 0x3d, 0x53, 0xdf, 0x1c, 0x58, 0xa7, 0x01, 0xaf, 0x49,
	0x15, 0xe6, 0x7f, 0x52, 0xda, 0xb2, 0x4e, 0x83, 0xb2, 0x07, 0xc5, 0xe8, 0xb5, 0x82, 0x58, 0x6e,
	0x97, 0xfe, 0xc3, 0x5f, 0xfd, 0xde, 0x42, 0x89, 0x7d, 0xcf, 0x6c, 0x1d, 0x12, 0x1a, 0x0c, 0x3c,
	0x37, 0x60, 0x31, 0x29, 0xcb, 0x9c, 0x7f, 0x18, 0x48, 0x7b, 0x90, 0x3d, 0x76, 0x44, 0xd1, 0x32,
	0x3b, 0x9e, 0x2d, 0x0c, 0x23, 0x43, 0x40, 0x88, 0xaa, 0x9e, 0x4d, 0xf1, 0x2d, 0xc8, 0xd9, 0x56,
	0x68, 0x99, 0xf1, 0x7b, 0x7b, 0x96, 0x75, 0x75, 0xfe, 0xa4, 0xd7, 0xf1, 0x86, 0x6e, 0xc8, 0x6f,
	0x3f, 0x4d, 0x44, 0xa7, 0xfc, 0x7f, 0x3c, 0x30, 0xfb, 0xf8, 0xd9, 0xd8, 0x73, 0x83, 0x88, 0x37,
	0x53, 0x3e, 0x80, 0x2c, 0x7f, 0x54, 0x79, 0xc6, 0xf0, 0xf2, 0x73, 0x50, 0xe2, 0x5b, 0x5e, 0x04,
	0x14, 0x79, 0x7e, 0xab, 0x56, 0x69, 0x6f, 0x37, 0x49, 0x5d, 0x78, 0xbf, 0xd6, 0x78, 0xa9, 0x1b,
	0x15, 0x16, 0x40, 0xe7, 0xa0, 0x60, 0x68, 0x8d, 0xb6, 0xde, 0xd0, 0x6a, 0xe6, 0x7a, 0x05, 0x25,
	0xcb, 0x1f, 0x01, 0x8c, 0xaa, 0x51, 0x1e, 0x8c, 0xe5, 0x0c, 0x7a, 0xc3, 0x68, 0x93, 0xfd, 0xba,
	0xd6, 0x68, 0xa3, 0x99, 0xf2, 0x1f, 0xd2, 0x90, 0x93, 0xc5, 0x15, 0xbe, 0x0d, 0x4a, 0xd0, 0xa1,
	0x2e, 0x35, 0xe3, 0x37, 0xcb, 0x1c, 0xef, 0xeb, 0x36, 0xbe, 0xc7, 0x3f, 0xb5, 0xec, 0x61, 0x27,
	0x64, 0x83, 0xc2, 0x6f, 0xf2, 0x52, 0xa2, 0xdb, 0xd8, 0x00, 0x34, 0xf0, 0xbd, 0x0e, 0x0d, 0x02,
	0xc7, 0xed, 0x9a, 0x3d, 0x7a, 0x4c, 0x7b, 0xd2, 0x89, 0x1e, 0x5e, 0x54, 0xca, 0xb1, 0x52, 0x5d,
	0x12, 0x6a, 0x0c, 0x4f, 0xe6, 0x06, 0x67, 0x05, 0x6c, 0x3b, 0x27, 0x7e, 0x20, 0x6c, 0x2e, 0xcd,
	0x2f, 0x24, 0x77, 0xe2, 0x07, 0xdc, 0xe0, 0x6e, 0x01, 0x6b, 0x9a, 0xbe, 0x77, 0xc2, 0xbd, 0x26,
	0x43, 0xb2, 0x27, 0x7e, 0x40, 0xbc, 0x13, 0xac, 0x01, 0x1a, 0x0b, 0x33, 0x26, 0x2b, 0x13, 0x65,
	0x2a, 0xbc, 0xbc, 0xb4, 0x1a, 0x85, 0x1a, 0xb6, 0x3d, 0xfc, 0x95, 0x58, 0x9a, 0x7b, 0x75, 0x8e,
	0x9f, 0x63, 0xf9, 0xc2, 0x73, 0x1c, 0x10, 0x83, 0xfb, 0x36, 0xdb, 0x11, 0x6b, 0x94, 0xff, 0x03,
	0xf0, 0xe8, 0x0f, 0x00, 0x55, 0x2b, 0xa4, 0x5d, 0xcf, 0x3f, 0xc5, 0x0f, 0xe0, 0x4e, 0x74, 0x01,
	0xd5, 0x66, 0xad, 0xa6, 0x55, 0x59, 0x4a, 0x33, 0xab, 0x95, 0xb6, 0xb6, 0xd3, 0x24, 0x3f, 0xa0,
	0x19, 0x9c, 0x85, 0x64, 0x65, 0x1d, 0x25, 0xf8, 0xef, 0x06, 0x4a, 0xb2, 0xdf, 0xf6, 0x3a, 0x4a,
	0xf1, 0xdf, 0x0d, 0x94, 0x66, 0xbf, 0xa4, 0x8d, 0x32, 0xe5, 0x4f, 0x21, 0x27, 0x97, 0xc4, 0x25,
	0x00, 0x99, 0x61, 0x0f, 0x88, 0x81, 0x66, 0x58, 0x06, 0x38, 0x20, 0x06, 0x9b, 0x44, 0xb4, 0x36,
	0x50, 0xb2, 0x6c, 0xc2, 0xdc, 0x39, 0x4d, 0xe3, 0xbb, 0xa0, 0xc6, 0xd6, 0x44, 0x9a, 0x55, 0xcd,
	0x30, 0x58, 0xce, 0xad, 0x69, 0x2f, 0xb5, 0x1a, 0x9a, 0x61, 0xf9, 0xa1, 0xb6, 0xbe, 0x23, 0xe6,
	0xa8, 0xad, 0xb7, 0x5b, 0x28, 0x29, 0x44, 0x6d, 0x94, 0x12, 0xa2, 0x9d, 0x36, 0x4a, 0xcb, 0x96,
	0x81, 0x32, 0xe5, 0xff, 0x4a, 0x42, 0xe9, 0x6c, 0x79, 0xfe, 0xcf, 0x60, 0x48, 0xdb, 0x17, 0x1a,
	0xd2, 0x15, 0xb5, 0xe5, 0x59, 0x4b, 0x2a, 0xff, 0x31, 0x01, 0x59, 0xf1, 0x09, 0x32, 0xf5, 0xef,
	0x0e, 0xb7, 0x41, 0xf9, 0x69, 0x68, 0xd9, 0xe6, 0x1b, 0x7a, 0x2a, 0x95, 0x91, 0x63, 0xfd, 0x6f,
	0xe9, 0x29, 0x0b, 0x2c, 0x3f, 0x7b, 0x5e, 0x5f, 0xfc, 0xc1, 0x21, 0x43, 0x44, 0x07, 0x7f, 0x0b,
	0xf3, 0x63, 0x2f, 0xbc, 0xa6, 0xcf, 0xe2, 0xa8, 0xac, 0x3c, 0x27, 0x33, 0xc7, 0x99, 0x68, 0x4b,
	0xd0, 0x18, 0x51, 0xc4, 0xdf, 0x8f, 0xa1, 0x34, 0xf0, 0xbd, 0x63, 0xea, 0x5a, 0xac, 0x80, 0x76,
	0x6c, 0xf1, 0xa7, 0x82, 0x3c, 0x29, 0x8e, 0xa4, 0xba, 0x1d, 0x94, 0x9f, 0x43, 0xf1, 0xcc, 0x57,
	0xd4, 0x7b, 0x9e, 0x64, 0xe5, 0x2f, 0x09, 0xc8, 0xc7, 0x39, 0x10, 0xcf, 0x43, 0x31, 0xb2, 0xbe,
	0x8a, 0x61, 0x68, 0x6d, 0x61, 0xb7, 0x7b, 0x2d, 0x8d, 0xd9, 0x5c, 0x01, 0x72, 0x3b, 0x5a, 0xb3,
	0xad, 0x6f, 0x6f, 0x8b, 0x82, 0xa6, 0xa6, 0x91, 0x2a, 0x4a, 0x31, 0x03, 0xac, 0x93, 0x6d, 0xc4,
	0xaa, 0x8d, 0x5c, 0x9d, 0x6c, 0x9b, 0xfa, 0xd6, 0xf7, 0x28, 0x13, 0x75, 0xbe, 0xaf, 0xd7, 0x50,
	0x96, 0xf9, 0x42, 0xb5, 0x69, 0x46, 0xe4, 0x1c, 0xaf, 0x77, 0x2a, 0x07, 0x48, 0xc1, 0x45, 0xc8,
	0xb7, 0x77, 0xf7, 0xeb, 0x9b, 0x8d, 0x8a, 0x5e, 0x43, 0x79, 0x36, 0x29, 0x47, 0x00, 0x1b, 0x60,
	0xab, 0x9a, 0x1b, 0x8f, 0x1e, 0x3d, 0x42, 0x05, 0x46, 0x60, 0x33, 0xcd, 0xb2, 0x46, 0xfb, 0xfb,
	0x36, 0x2a, 0xb2, 0x46, 0xab, 0xb1, 0x83, 0x4a, 0x78, 0x16, 0x94, 0xe6, 0x4b, 0x8d, 0xbc, 0xd4,
	0xb5, 0x03, 0x34, 0xc7, 0x77, 0x6b, 0x34, 0x1b, 0x08, 0xb1, 0xd6, 0x6e, 0xbb, 0x5e, 0x43, 0xf3,
	0xdc, 0xdf, 0xb4, 0xcd, 0x16, 0xc2, 0x2b, 0xdf, 0x41, 0xf1, 0x4c, 0xc2, 0xc6, 0x4b, 0x70, 0x33,
	0x76, 0xfc, 0x5a, 0x73, 0x7f, 0x6b, 0x3c, 0x82, 0xe7, 0x20, 0x55, 0x39, 0x30, 0x50, 0x82, 0x35,
	0x76, 0xaa, 0xcc, 0xd5, 0xf2, 0x90, 0xa9, 0xfc, 0xb8, 0x4f, 0x34, 0x71, 0x68, 0x7d, 0xb3, 0x8e,
	0xd2, 0x2b, 0xbf, 0x4b, 0x5c, 0x99, 0x0a, 0x8a, 0x90, 0xaf, 0x55, 0x1a, 0x5b, 0x46, 0xa5, 0x6d,
	0xae, 0xa3, 0xe4, 0x78, 0x97, 0x85, 0x8e, 0xb1, 0xee, 0x63, 0xa4, 0xb0, 0x54, 0x11, 0x83, 0x37,
	0x1e, 0xa3, 0xd2, 0xf8, 0xf8, 0x67, 0x08, 0x8d, 0x77, 0x9f, 0xa0, 0x65, 0xa6, 0xd9, 0x78, 0xf4,
	0x09, 0x7a, 0x34, 0x3e, 0xfc, 0x05, 0x7a, 0x81, 0x4b, 0xa3, 0xee, 0x53, 0x56, 0x27, 0xce, 0x42,
	0xce, 0x38, 0xd0, 0xb7, 0xd9, 0xca, 0xef, 0x92, 0x2b, 0xaf, 0xaf, 0x93, 0x85, 0xd8, 0x51, 0x9b,
	0x35, 0x5d, 0x5c, 0x79, 0x5b, 0x27, 0x06, 0x4a, 0x73, 0x9d, 0xd7, 0x74, 0x93, 0xf7, 0xb2, 0x4c,
	0x2d, 0xad, 0x66, 0xdd, 0x5c, 0x47, 0x0a, 0x8f, 0x87, 0x75, 0x51, 0xd0, 0x6a, 0xed, 0x3a, 0x5a,
	0xe6, 0xc6, 0x61, 0x18, 0xe8, 0xc5, 0xca, 0x0a, 0x14, 0xcf, 0x3c, 0x9b, 0xe0, 0xdb, 0x70, 0x63,
	0x14, 0x73, 0x1b, 0x46, 0x5b, 0xab, 0xd5, 0xf8, 0x97, 0x04, 0x9a, 0x59, 0xd9, 0x83, 0x9c, 0x7c,
	0x19, 0x61, 0xdf, 0x23, 0x11, 0xaa, 0xae, 0x1b, 0x06, 0x1f, 0x67, 0xb6, 0x25, 0x4f, 0x25, 0x76,
	0xd5, 0xa8, 0xe8, 0x2d, 0x11, 0xf6, 0x5a, 0x8d, 0x66, 0x05, 0x29, 0x6c, 0x47, 0xfc, 0x98, 0x08,
	0x6d, 0xfe, 0x00, 0x0b, 0x1d, 0xaf, 0x7f, 0xde, 0xfb, 0x36, 0xf3, 0xac, 0xf6, 0x68, 0x31, 0x41,
	0x2b, 0xf1, 0xe3, 0x6a, 0xd7, 0x09, 0x5f, 0x0d, 0x0f, 0x57, 0x3b, 0x5e, 0x7f, 0xad, 0x4b, 0xbd,
	0x4f, 0xbb, 0xfe, 0xa0, 0xb3, 0x66, 0x0d, 0x9c, 0xb5, 0xae, 0xd7, 0xb3, 0xdc, 0xee, 0xda, 0xb9,
	0x7f, 0x0c, 0xf8, 0xef, 0x64, 0xda, 0x68, 0xb7, 0x36, 0x0f, 0xb3, 0x5c, 0xf6, 0xf8, 0x6f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd1, 0x57, 0x3c, 0x21, 0xe2, 0x20, 0x00, 0x00,
}
