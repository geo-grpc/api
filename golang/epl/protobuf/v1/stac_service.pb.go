// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/v1/stac_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("epl/protobuf/v1/stac_service.proto", fileDescriptor_6ea11455bb79ed0e)
}

var fileDescriptor_6ea11455bb79ed0e = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xb7, 0xfd, 0x61, 0x87, 0x8c, 0xf1, 0xd7, 0xec, 0x64, 0x15, 0x84, 0x9e, 0xbc, 0x98,
	0x38, 0xfd, 0x06, 0xdb, 0x2e, 0x1b, 0x8c, 0x8d, 0xd5, 0x81, 0x78, 0x91, 0x34, 0xbe, 0x76, 0x85,
	0x2c, 0x89, 0x4d, 0xda, 0x0f, 0xe4, 0xd1, 0xb3, 0x1f, 0x50, 0xda, 0x50, 0x27, 0xb5, 0xce, 0xa1,
	0x3d, 0xb6, 0xcf, 0xf3, 0xfe, 0x78, 0x78, 0x9f, 0xbc, 0xc8, 0x07, 0x2d, 0xa8, 0x4e, 0x94, 0x55,
	0x61, 0xfa, 0x44, 0xb3, 0x21, 0x35, 0x96, 0xf1, 0x07, 0x03, 0x49, 0x16, 0x73, 0x20, 0x85, 0x80,
	0xff, 0x83, 0x16, 0xa4, 0xf4, 0x90, 0x6c, 0xe8, 0x79, 0x75, 0x43, 0xce, 0x71, 0xfd, 0xd6, 0x45,
	0xbd, 0xc0, 0x32, 0x1e, 0x38, 0x04, 0x9e, 0xa1, 0x5e, 0x00, 0x2c, 0xe1, 0x9b, 0xa9, 0x85, 0xad,
	0xc1, 0x67, 0xa4, 0x02, 0x23, 0xb9, 0x79, 0x05, 0xcf, 0x29, 0x18, 0xeb, 0x9d, 0xd4, 0xaa, 0xf9,
	0xa4, 0xdf, 0xba, 0x6a, 0xe3, 0x3b, 0x74, 0xec, 0x58, 0x63, 0x25, 0x04, 0x70, 0x1b, 0x2b, 0x69,
	0xb0, 0xff, 0x65, 0x66, 0xa7, 0x96, 0xdc, 0xd3, 0x3d, 0x9e, 0x82, 0xbc, 0x40, 0xbd, 0xa9, 0x34,
	0x90, 0x58, 0x97, 0xf2, 0xfb, 0x1c, 0xde, 0x79, 0xad, 0x34, 0x09, 0x57, 0x60, 0xb4, 0x92, 0x06,
	0xfc, 0xd6, 0x45, 0xdb, 0x01, 0xd7, 0xfa, 0x91, 0x59, 0x68, 0x0a, 0x38, 0x47, 0x68, 0xac, 0x52,
	0x69, 0x0f, 0x59, 0xe3, 0xcf, 0x48, 0x3c, 0x47, 0xfd, 0x09, 0x08, 0xb0, 0xb0, 0x90, 0x45, 0xc4,
	0xbf, 0x25, 0xc4, 0x33, 0xd4, 0x77, 0xcd, 0x94, 0xb8, 0xdf, 0xf7, 0x9c, 0x47, 0x73, 0x5d, 0x34,
	0x13, 0x6d, 0x8d, 0x06, 0x1f, 0xb8, 0x5d, 0xeb, 0x78, 0xdf, 0x93, 0x38, 0x70, 0x81, 0xae, 0xe0,
	0x46, 0x52, 0x8e, 0x52, 0x34, 0xe0, 0x6a, 0x5b, 0xf5, 0x8d, 0x8e, 0x3e, 0x9d, 0xd2, 0x32, 0xff,
	0xbf, 0x6c, 0xdf, 0x93, 0x28, 0xb6, 0x9b, 0x34, 0x24, 0x5c, 0x6d, 0x69, 0x04, 0xea, 0x32, 0x4a,
	0x34, 0xa7, 0x4c, 0xc7, 0x34, 0x52, 0x82, 0xc9, 0x88, 0x56, 0x8e, 0xf3, 0xa5, 0xf3, 0x2f, 0xb8,
	0x0d, 0x5e, 0x3b, 0x75, 0xfc, 0xb0, 0x5b, 0x7c, 0xdc, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x42,
	0x02, 0xf2, 0xa1, 0x07, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StacServiceClient is the client API for StacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StacServiceClient interface {
	//
	//using a search request, stream all the results that match the search filter
	SearchItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchItemsClient, error)
	SearchCollections(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (StacService_SearchCollectionsClient, error)
	//
	//insert a stream of items into the STAC service
	InsertItems(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertItemsClient, error)
	//
	//update a stream of items in the STAC service
	UpdateItems(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateItemsClient, error)
	//
	//count all the items in the Stac service according to the StacRequest filter
	CountItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//delete an item from the STAC service
	DeleteOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//using a search request get the first item that matches the request
	SearchOneItem(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error)
	//
	//Insert one item into the STAC service
	InsertOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//Insert one item into the STAC service
	InsertOneCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//Update one item in the STAC service
	UpdateOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
}

type stacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStacServiceClient(cc grpc.ClientConnInterface) StacServiceClient {
	return &stacServiceClient{cc}
}

func (c *stacServiceClient) SearchItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[0], "/epl.protobuf.v1.StacService/SearchItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceSearchItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StacService_SearchItemsClient interface {
	Recv() (*StacItem, error)
	grpc.ClientStream
}

type stacServiceSearchItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceSearchItemsClient) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) SearchCollections(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (StacService_SearchCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[1], "/epl.protobuf.v1.StacService/SearchCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceSearchCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StacService_SearchCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type stacServiceSearchCollectionsClient struct {
	grpc.ClientStream
}

func (x *stacServiceSearchCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) InsertItems(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[2], "/epl.protobuf.v1.StacService/InsertItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceInsertItemsClient{stream}
	return x, nil
}

type StacService_InsertItemsClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceInsertItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceInsertItemsClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceInsertItemsClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) UpdateItems(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[3], "/epl.protobuf.v1.StacService/UpdateItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceUpdateItemsClient{stream}
	return x, nil
}

type StacService_UpdateItemsClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceUpdateItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceUpdateItemsClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceUpdateItemsClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) CountItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/CountItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) DeleteOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/DeleteOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) SearchOneItem(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error) {
	out := new(StacItem)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/SearchOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) InsertOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/InsertOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) InsertOneCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/InsertOneCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) UpdateOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/UpdateOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StacServiceServer is the server API for StacService service.
type StacServiceServer interface {
	//
	//using a search request, stream all the results that match the search filter
	SearchItems(*StacRequest, StacService_SearchItemsServer) error
	SearchCollections(*CollectionRequest, StacService_SearchCollectionsServer) error
	//
	//insert a stream of items into the STAC service
	InsertItems(StacService_InsertItemsServer) error
	//
	//update a stream of items in the STAC service
	UpdateItems(StacService_UpdateItemsServer) error
	//
	//count all the items in the Stac service according to the StacRequest filter
	CountItems(context.Context, *StacRequest) (*StacDbResponse, error)
	//
	//delete an item from the STAC service
	DeleteOneItem(context.Context, *StacItem) (*StacDbResponse, error)
	//
	//using a search request get the first item that matches the request
	SearchOneItem(context.Context, *StacRequest) (*StacItem, error)
	//
	//Insert one item into the STAC service
	InsertOneItem(context.Context, *StacItem) (*StacDbResponse, error)
	//
	//Insert one item into the STAC service
	InsertOneCollection(context.Context, *Collection) (*StacDbResponse, error)
	//
	//Update one item in the STAC service
	UpdateOneItem(context.Context, *StacItem) (*StacDbResponse, error)
}

// UnimplementedStacServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStacServiceServer struct {
}

func (*UnimplementedStacServiceServer) SearchItems(req *StacRequest, srv StacService_SearchItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (*UnimplementedStacServiceServer) SearchCollections(req *CollectionRequest, srv StacService_SearchCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCollections not implemented")
}
func (*UnimplementedStacServiceServer) InsertItems(srv StacService_InsertItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertItems not implemented")
}
func (*UnimplementedStacServiceServer) UpdateItems(srv StacService_UpdateItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateItems not implemented")
}
func (*UnimplementedStacServiceServer) CountItems(ctx context.Context, req *StacRequest) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountItems not implemented")
}
func (*UnimplementedStacServiceServer) DeleteOneItem(ctx context.Context, req *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneItem not implemented")
}
func (*UnimplementedStacServiceServer) SearchOneItem(ctx context.Context, req *StacRequest) (*StacItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOneItem not implemented")
}
func (*UnimplementedStacServiceServer) InsertOneItem(ctx context.Context, req *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOneItem not implemented")
}
func (*UnimplementedStacServiceServer) InsertOneCollection(ctx context.Context, req *Collection) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOneCollection not implemented")
}
func (*UnimplementedStacServiceServer) UpdateOneItem(ctx context.Context, req *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneItem not implemented")
}

func RegisterStacServiceServer(s *grpc.Server, srv StacServiceServer) {
	s.RegisterService(&_StacService_serviceDesc, srv)
}

func _StacService_SearchItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StacRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StacServiceServer).SearchItems(m, &stacServiceSearchItemsServer{stream})
}

type StacService_SearchItemsServer interface {
	Send(*StacItem) error
	grpc.ServerStream
}

type stacServiceSearchItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceSearchItemsServer) Send(m *StacItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StacService_SearchCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StacServiceServer).SearchCollections(m, &stacServiceSearchCollectionsServer{stream})
}

type StacService_SearchCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type stacServiceSearchCollectionsServer struct {
	grpc.ServerStream
}

func (x *stacServiceSearchCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _StacService_InsertItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).InsertItems(&stacServiceInsertItemsServer{stream})
}

type StacService_InsertItemsServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceInsertItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceInsertItemsServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceInsertItemsServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_UpdateItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).UpdateItems(&stacServiceUpdateItemsServer{stream})
}

type StacService_UpdateItemsServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceUpdateItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceUpdateItemsServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceUpdateItemsServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_CountItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).CountItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/CountItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).CountItems(ctx, req.(*StacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_DeleteOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).DeleteOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/DeleteOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).DeleteOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_SearchOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).SearchOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/SearchOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).SearchOneItem(ctx, req.(*StacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_InsertOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).InsertOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/InsertOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).InsertOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_InsertOneCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).InsertOneCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/InsertOneCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).InsertOneCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_UpdateOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).UpdateOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/UpdateOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).UpdateOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

var _StacService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.v1.StacService",
	HandlerType: (*StacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountItems",
			Handler:    _StacService_CountItems_Handler,
		},
		{
			MethodName: "DeleteOneItem",
			Handler:    _StacService_DeleteOneItem_Handler,
		},
		{
			MethodName: "SearchOneItem",
			Handler:    _StacService_SearchOneItem_Handler,
		},
		{
			MethodName: "InsertOneItem",
			Handler:    _StacService_InsertOneItem_Handler,
		},
		{
			MethodName: "InsertOneCollection",
			Handler:    _StacService_InsertOneCollection_Handler,
		},
		{
			MethodName: "UpdateOneItem",
			Handler:    _StacService_UpdateOneItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchItems",
			Handler:       _StacService_SearchItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchCollections",
			Handler:       _StacService_SearchCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InsertItems",
			Handler:       _StacService_InsertItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateItems",
			Handler:       _StacService_UpdateItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/protobuf/v1/stac_service.proto",
}
