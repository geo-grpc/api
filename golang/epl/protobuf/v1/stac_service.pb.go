//
//Copyright 2017-2019 Echo Park Labs
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//For additional information, contact:
//
//email: info@echoparklabs.io

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: epl/protobuf/v1/stac_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_epl_protobuf_v1_stac_service_proto protoreflect.FileDescriptor

var file_epl_protobuf_v1_stac_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xb4, 0x06, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x1f, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x44, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x75, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x42,
	0x10, 0x53, 0x74, 0x61, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x65, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x54, 0x53, 0xaa, 0x02, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_epl_protobuf_v1_stac_service_proto_goTypes = []interface{}{
	(*StacRequest)(nil),       // 0: epl.protobuf.v1.StacRequest
	(*CollectionRequest)(nil), // 1: epl.protobuf.v1.CollectionRequest
	(*StacItem)(nil),          // 2: epl.protobuf.v1.StacItem
	(*Collection)(nil),        // 3: epl.protobuf.v1.Collection
	(*StacDbResponse)(nil),    // 4: epl.protobuf.v1.StacDbResponse
}
var file_epl_protobuf_v1_stac_service_proto_depIdxs = []int32{
	0,  // 0: epl.protobuf.v1.StacService.SearchItems:input_type -> epl.protobuf.v1.StacRequest
	1,  // 1: epl.protobuf.v1.StacService.SearchCollections:input_type -> epl.protobuf.v1.CollectionRequest
	2,  // 2: epl.protobuf.v1.StacService.InsertItems:input_type -> epl.protobuf.v1.StacItem
	2,  // 3: epl.protobuf.v1.StacService.UpdateItems:input_type -> epl.protobuf.v1.StacItem
	0,  // 4: epl.protobuf.v1.StacService.CountItems:input_type -> epl.protobuf.v1.StacRequest
	2,  // 5: epl.protobuf.v1.StacService.DeleteOneItem:input_type -> epl.protobuf.v1.StacItem
	0,  // 6: epl.protobuf.v1.StacService.SearchOneItem:input_type -> epl.protobuf.v1.StacRequest
	2,  // 7: epl.protobuf.v1.StacService.InsertOneItem:input_type -> epl.protobuf.v1.StacItem
	3,  // 8: epl.protobuf.v1.StacService.InsertOneCollection:input_type -> epl.protobuf.v1.Collection
	2,  // 9: epl.protobuf.v1.StacService.UpdateOneItem:input_type -> epl.protobuf.v1.StacItem
	2,  // 10: epl.protobuf.v1.StacService.SearchItems:output_type -> epl.protobuf.v1.StacItem
	3,  // 11: epl.protobuf.v1.StacService.SearchCollections:output_type -> epl.protobuf.v1.Collection
	4,  // 12: epl.protobuf.v1.StacService.InsertItems:output_type -> epl.protobuf.v1.StacDbResponse
	4,  // 13: epl.protobuf.v1.StacService.UpdateItems:output_type -> epl.protobuf.v1.StacDbResponse
	4,  // 14: epl.protobuf.v1.StacService.CountItems:output_type -> epl.protobuf.v1.StacDbResponse
	4,  // 15: epl.protobuf.v1.StacService.DeleteOneItem:output_type -> epl.protobuf.v1.StacDbResponse
	2,  // 16: epl.protobuf.v1.StacService.SearchOneItem:output_type -> epl.protobuf.v1.StacItem
	4,  // 17: epl.protobuf.v1.StacService.InsertOneItem:output_type -> epl.protobuf.v1.StacDbResponse
	4,  // 18: epl.protobuf.v1.StacService.InsertOneCollection:output_type -> epl.protobuf.v1.StacDbResponse
	4,  // 19: epl.protobuf.v1.StacService.UpdateOneItem:output_type -> epl.protobuf.v1.StacDbResponse
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_epl_protobuf_v1_stac_service_proto_init() }
func file_epl_protobuf_v1_stac_service_proto_init() {
	if File_epl_protobuf_v1_stac_service_proto != nil {
		return
	}
	file_epl_protobuf_v1_stac_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epl_protobuf_v1_stac_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_epl_protobuf_v1_stac_service_proto_goTypes,
		DependencyIndexes: file_epl_protobuf_v1_stac_service_proto_depIdxs,
	}.Build()
	File_epl_protobuf_v1_stac_service_proto = out.File
	file_epl_protobuf_v1_stac_service_proto_rawDesc = nil
	file_epl_protobuf_v1_stac_service_proto_goTypes = nil
	file_epl_protobuf_v1_stac_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StacServiceClient is the client API for StacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StacServiceClient interface {
	//
	//using a search request, stream all the results that match the search filter
	SearchItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchItemsClient, error)
	SearchCollections(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (StacService_SearchCollectionsClient, error)
	//
	//insert a stream of items into the STAC service
	InsertItems(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertItemsClient, error)
	//
	//update a stream of items in the STAC service
	UpdateItems(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateItemsClient, error)
	//
	//count all the items in the Stac service according to the StacRequest filter
	CountItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//delete an item from the STAC service
	DeleteOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//using a search request get the first item that matches the request
	SearchOneItem(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error)
	//
	//Insert one item into the STAC service
	InsertOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//Insert one item into the STAC service
	InsertOneCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*StacDbResponse, error)
	//
	//Update one item in the STAC service
	UpdateOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
}

type stacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStacServiceClient(cc grpc.ClientConnInterface) StacServiceClient {
	return &stacServiceClient{cc}
}

func (c *stacServiceClient) SearchItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[0], "/epl.protobuf.v1.StacService/SearchItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceSearchItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StacService_SearchItemsClient interface {
	Recv() (*StacItem, error)
	grpc.ClientStream
}

type stacServiceSearchItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceSearchItemsClient) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) SearchCollections(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (StacService_SearchCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[1], "/epl.protobuf.v1.StacService/SearchCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceSearchCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StacService_SearchCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type stacServiceSearchCollectionsClient struct {
	grpc.ClientStream
}

func (x *stacServiceSearchCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) InsertItems(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[2], "/epl.protobuf.v1.StacService/InsertItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceInsertItemsClient{stream}
	return x, nil
}

type StacService_InsertItemsClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceInsertItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceInsertItemsClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceInsertItemsClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) UpdateItems(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[3], "/epl.protobuf.v1.StacService/UpdateItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceUpdateItemsClient{stream}
	return x, nil
}

type StacService_UpdateItemsClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceUpdateItemsClient struct {
	grpc.ClientStream
}

func (x *stacServiceUpdateItemsClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceUpdateItemsClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) CountItems(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/CountItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) DeleteOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/DeleteOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) SearchOneItem(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error) {
	out := new(StacItem)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/SearchOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) InsertOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/InsertOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) InsertOneCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/InsertOneCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) UpdateOneItem(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.v1.StacService/UpdateOneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StacServiceServer is the server API for StacService service.
type StacServiceServer interface {
	//
	//using a search request, stream all the results that match the search filter
	SearchItems(*StacRequest, StacService_SearchItemsServer) error
	SearchCollections(*CollectionRequest, StacService_SearchCollectionsServer) error
	//
	//insert a stream of items into the STAC service
	InsertItems(StacService_InsertItemsServer) error
	//
	//update a stream of items in the STAC service
	UpdateItems(StacService_UpdateItemsServer) error
	//
	//count all the items in the Stac service according to the StacRequest filter
	CountItems(context.Context, *StacRequest) (*StacDbResponse, error)
	//
	//delete an item from the STAC service
	DeleteOneItem(context.Context, *StacItem) (*StacDbResponse, error)
	//
	//using a search request get the first item that matches the request
	SearchOneItem(context.Context, *StacRequest) (*StacItem, error)
	//
	//Insert one item into the STAC service
	InsertOneItem(context.Context, *StacItem) (*StacDbResponse, error)
	//
	//Insert one item into the STAC service
	InsertOneCollection(context.Context, *Collection) (*StacDbResponse, error)
	//
	//Update one item in the STAC service
	UpdateOneItem(context.Context, *StacItem) (*StacDbResponse, error)
}

// UnimplementedStacServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStacServiceServer struct {
}

func (*UnimplementedStacServiceServer) SearchItems(*StacRequest, StacService_SearchItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (*UnimplementedStacServiceServer) SearchCollections(*CollectionRequest, StacService_SearchCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCollections not implemented")
}
func (*UnimplementedStacServiceServer) InsertItems(StacService_InsertItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertItems not implemented")
}
func (*UnimplementedStacServiceServer) UpdateItems(StacService_UpdateItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateItems not implemented")
}
func (*UnimplementedStacServiceServer) CountItems(context.Context, *StacRequest) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountItems not implemented")
}
func (*UnimplementedStacServiceServer) DeleteOneItem(context.Context, *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneItem not implemented")
}
func (*UnimplementedStacServiceServer) SearchOneItem(context.Context, *StacRequest) (*StacItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOneItem not implemented")
}
func (*UnimplementedStacServiceServer) InsertOneItem(context.Context, *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOneItem not implemented")
}
func (*UnimplementedStacServiceServer) InsertOneCollection(context.Context, *Collection) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOneCollection not implemented")
}
func (*UnimplementedStacServiceServer) UpdateOneItem(context.Context, *StacItem) (*StacDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneItem not implemented")
}

func RegisterStacServiceServer(s *grpc.Server, srv StacServiceServer) {
	s.RegisterService(&_StacService_serviceDesc, srv)
}

func _StacService_SearchItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StacRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StacServiceServer).SearchItems(m, &stacServiceSearchItemsServer{stream})
}

type StacService_SearchItemsServer interface {
	Send(*StacItem) error
	grpc.ServerStream
}

type stacServiceSearchItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceSearchItemsServer) Send(m *StacItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StacService_SearchCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StacServiceServer).SearchCollections(m, &stacServiceSearchCollectionsServer{stream})
}

type StacService_SearchCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type stacServiceSearchCollectionsServer struct {
	grpc.ServerStream
}

func (x *stacServiceSearchCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _StacService_InsertItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).InsertItems(&stacServiceInsertItemsServer{stream})
}

type StacService_InsertItemsServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceInsertItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceInsertItemsServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceInsertItemsServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_UpdateItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).UpdateItems(&stacServiceUpdateItemsServer{stream})
}

type StacService_UpdateItemsServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceUpdateItemsServer struct {
	grpc.ServerStream
}

func (x *stacServiceUpdateItemsServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceUpdateItemsServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_CountItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).CountItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/CountItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).CountItems(ctx, req.(*StacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_DeleteOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).DeleteOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/DeleteOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).DeleteOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_SearchOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).SearchOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/SearchOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).SearchOneItem(ctx, req.(*StacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_InsertOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).InsertOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/InsertOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).InsertOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_InsertOneCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).InsertOneCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/InsertOneCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).InsertOneCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_UpdateOneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).UpdateOneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.v1.StacService/UpdateOneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).UpdateOneItem(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

var _StacService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.v1.StacService",
	HandlerType: (*StacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountItems",
			Handler:    _StacService_CountItems_Handler,
		},
		{
			MethodName: "DeleteOneItem",
			Handler:    _StacService_DeleteOneItem_Handler,
		},
		{
			MethodName: "SearchOneItem",
			Handler:    _StacService_SearchOneItem_Handler,
		},
		{
			MethodName: "InsertOneItem",
			Handler:    _StacService_InsertOneItem_Handler,
		},
		{
			MethodName: "InsertOneCollection",
			Handler:    _StacService_InsertOneCollection_Handler,
		},
		{
			MethodName: "UpdateOneItem",
			Handler:    _StacService_UpdateOneItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchItems",
			Handler:       _StacService_SearchItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchCollections",
			Handler:       _StacService_SearchCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InsertItems",
			Handler:       _StacService_InsertItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateItems",
			Handler:       _StacService_UpdateItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/protobuf/v1/stac_service.proto",
}
