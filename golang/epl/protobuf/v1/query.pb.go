//
//Copyright 2017-2019 Echo Park Labs
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//For additional information, contact:
//
//email: info@echoparklabs.io

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: epl/protobuf/v1/query.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//Not currently in use
type SortDirection int32

const (
	SortDirection_NOT_SORTED SortDirection = 0
	SortDirection_DESC       SortDirection = 1
	SortDirection_ASC        SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "NOT_SORTED",
		1: "DESC",
		2: "ASC",
	}
	SortDirection_value = map[string]int32{
		"NOT_SORTED": 0,
		"DESC":       1,
		"ASC":        2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_query_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_query_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{0}
}

//
//Default Value is equals, `EQ`, so if you don't set rel_type, it is assumed you mean equals.
type FilterRelationship int32

const (
	FilterRelationship_EQ          FilterRelationship = 0    // for use with `value` field. return anything equaling the `value`
	FilterRelationship_LTE         FilterRelationship = 2    // for use with `value` field. return anything less than or equal to the `value`
	FilterRelationship_GTE         FilterRelationship = 4    // for use with `value` field. return anything greater than or equal to the `value`
	FilterRelationship_LT          FilterRelationship = 8    // for use with `value` field. return anything less than the `value`
	FilterRelationship_GT          FilterRelationship = 16   // for use with `value` field. return anything greater than the `value`
	FilterRelationship_BETWEEN     FilterRelationship = 32   // for use with `start` and `end`. return anything between `start` and `end`
	FilterRelationship_NOT_BETWEEN FilterRelationship = 64   // for use with `start` and `end`. return anything not between `start` and `end`
	FilterRelationship_NEQ         FilterRelationship = 128  // for use with `value` field. return everything not equal to the `value1
	FilterRelationship_IN          FilterRelationship = 256  // for use with with `set` field
	FilterRelationship_NOT_IN      FilterRelationship = 512  // for use with `set` field
	FilterRelationship_LIKE        FilterRelationship = 1024 // for use with `value` and StringField
	FilterRelationship_NOT_LIKE    FilterRelationship = 2048 // for use with `value` and StringField
)

// Enum value maps for FilterRelationship.
var (
	FilterRelationship_name = map[int32]string{
		0:    "EQ",
		2:    "LTE",
		4:    "GTE",
		8:    "LT",
		16:   "GT",
		32:   "BETWEEN",
		64:   "NOT_BETWEEN",
		128:  "NEQ",
		256:  "IN",
		512:  "NOT_IN",
		1024: "LIKE",
		2048: "NOT_LIKE",
	}
	FilterRelationship_value = map[string]int32{
		"EQ":          0,
		"LTE":         2,
		"GTE":         4,
		"LT":          8,
		"GT":          16,
		"BETWEEN":     32,
		"NOT_BETWEEN": 64,
		"NEQ":         128,
		"IN":          256,
		"NOT_IN":      512,
		"LIKE":        1024,
		"NOT_LIKE":    2048,
	}
)

func (x FilterRelationship) Enum() *FilterRelationship {
	p := new(FilterRelationship)
	*p = x
	return p
}

func (x FilterRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_epl_protobuf_v1_query_proto_enumTypes[1].Descriptor()
}

func (FilterRelationship) Type() protoreflect.EnumType {
	return &file_epl_protobuf_v1_query_proto_enumTypes[1]
}

func (x FilterRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterRelationship.Descriptor instead.
func (FilterRelationship) EnumDescriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{1}
}

//
//Query language for float fields.
type FloatFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are assignable to Data:
	//	*FloatFilter_Value
	//	*FloatFilter_Start
	Data isFloatFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End float32 `protobuf:"fixed32,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set []float32 `protobuf:"fixed32,6,rep,packed,name=set,proto3" json:"set,omitempty"`
}

func (x *FloatFilter) Reset() {
	*x = FloatFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatFilter) ProtoMessage() {}

func (x *FloatFilter) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatFilter.ProtoReflect.Descriptor instead.
func (*FloatFilter) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *FloatFilter) GetRelType() FilterRelationship {
	if x != nil {
		return x.RelType
	}
	return FilterRelationship_EQ
}

func (m *FloatFilter) GetData() isFloatFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FloatFilter) GetValue() float32 {
	if x, ok := x.GetData().(*FloatFilter_Value); ok {
		return x.Value
	}
	return 0
}

func (x *FloatFilter) GetStart() float32 {
	if x, ok := x.GetData().(*FloatFilter_Start); ok {
		return x.Start
	}
	return 0
}

func (x *FloatFilter) GetEnd() float32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FloatFilter) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (x *FloatFilter) GetSet() []float32 {
	if x != nil {
		return x.Set
	}
	return nil
}

type isFloatFilter_Data interface {
	isFloatFilter_Data()
}

type FloatFilter_Value struct {
	//
	//Singular float value that, combined with rel_type, allows you to search for floats that relate to this `value`.
	//`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
	//you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3,oneof"`
}

type FloatFilter_Start struct {
	//
	//For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
	//`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `end` value
	Start float32 `protobuf:"fixed32,3,opt,name=start,proto3,oneof"`
}

func (*FloatFilter_Value) isFloatFilter_Data() {}

func (*FloatFilter_Start) isFloatFilter_Data() {}

type DoubleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are assignable to Data:
	//	*DoubleFilter_Value
	//	*DoubleFilter_Start
	Data isDoubleFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End float64 `protobuf:"fixed64,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set []float64 `protobuf:"fixed64,6,rep,packed,name=set,proto3" json:"set,omitempty"`
}

func (x *DoubleFilter) Reset() {
	*x = DoubleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleFilter) ProtoMessage() {}

func (x *DoubleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleFilter.ProtoReflect.Descriptor instead.
func (*DoubleFilter) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *DoubleFilter) GetRelType() FilterRelationship {
	if x != nil {
		return x.RelType
	}
	return FilterRelationship_EQ
}

func (m *DoubleFilter) GetData() isDoubleFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DoubleFilter) GetValue() float64 {
	if x, ok := x.GetData().(*DoubleFilter_Value); ok {
		return x.Value
	}
	return 0
}

func (x *DoubleFilter) GetStart() float64 {
	if x, ok := x.GetData().(*DoubleFilter_Start); ok {
		return x.Start
	}
	return 0
}

func (x *DoubleFilter) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *DoubleFilter) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (x *DoubleFilter) GetSet() []float64 {
	if x != nil {
		return x.Set
	}
	return nil
}

type isDoubleFilter_Data interface {
	isDoubleFilter_Data()
}

type DoubleFilter_Value struct {
	//
	//Singular double value that, combined with rel_type, allows you to search for floats that relate to this `value`.
	//`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
	//you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3,oneof"`
}

type DoubleFilter_Start struct {
	//
	//For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
	//`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `end` value
	Start float64 `protobuf:"fixed64,3,opt,name=start,proto3,oneof"`
}

func (*DoubleFilter_Value) isDoubleFilter_Data() {}

func (*DoubleFilter_Start) isDoubleFilter_Data() {}

type TimestampFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are assignable to Data:
	//	*TimestampFilter_Value
	//	*TimestampFilter_Start
	Data isTimestampFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
}

func (x *TimestampFilter) Reset() {
	*x = TimestampFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFilter) ProtoMessage() {}

func (x *TimestampFilter) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFilter.ProtoReflect.Descriptor instead.
func (*TimestampFilter) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *TimestampFilter) GetRelType() FilterRelationship {
	if x != nil {
		return x.RelType
	}
	return FilterRelationship_EQ
}

func (m *TimestampFilter) GetData() isTimestampFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TimestampFilter) GetValue() *timestamppb.Timestamp {
	if x, ok := x.GetData().(*TimestampFilter_Value); ok {
		return x.Value
	}
	return nil
}

func (x *TimestampFilter) GetStart() *timestamppb.Timestamp {
	if x, ok := x.GetData().(*TimestampFilter_Start); ok {
		return x.Start
	}
	return nil
}

func (x *TimestampFilter) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *TimestampFilter) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_NOT_SORTED
}

type isTimestampFilter_Data interface {
	isTimestampFilter_Data()
}

type TimestampFilter_Value struct {
	//
	//Singular Timestamp value that, combined with rel_type, allows you to search for floats that relate to this `value`.
	//`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
	//you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
	Value *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type TimestampFilter_Start struct {
	//
	//For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
	//`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `end` value
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

func (*TimestampFilter_Value) isTimestampFilter_Data() {}

func (*TimestampFilter_Start) isTimestampFilter_Data() {}

type UInt32Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are assignable to Data:
	//	*UInt32Filter_Value
	//	*UInt32Filter_Start
	Data isUInt32Filter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set []uint32 `protobuf:"varint,6,rep,packed,name=set,proto3" json:"set,omitempty"`
}

func (x *UInt32Filter) Reset() {
	*x = UInt32Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Filter) ProtoMessage() {}

func (x *UInt32Filter) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Filter.ProtoReflect.Descriptor instead.
func (*UInt32Filter) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *UInt32Filter) GetRelType() FilterRelationship {
	if x != nil {
		return x.RelType
	}
	return FilterRelationship_EQ
}

func (m *UInt32Filter) GetData() isUInt32Filter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UInt32Filter) GetValue() uint32 {
	if x, ok := x.GetData().(*UInt32Filter_Value); ok {
		return x.Value
	}
	return 0
}

func (x *UInt32Filter) GetStart() uint32 {
	if x, ok := x.GetData().(*UInt32Filter_Start); ok {
		return x.Start
	}
	return 0
}

func (x *UInt32Filter) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *UInt32Filter) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (x *UInt32Filter) GetSet() []uint32 {
	if x != nil {
		return x.Set
	}
	return nil
}

type isUInt32Filter_Data interface {
	isUInt32Filter_Data()
}

type UInt32Filter_Value struct {
	//
	//Singular unint32 value that, combined with rel_type, allows you to search for floats that relate to this `value`.
	//`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
	//you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3,oneof"`
}

type UInt32Filter_Start struct {
	//
	//For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
	//`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `end` value
	Start uint32 `protobuf:"varint,3,opt,name=start,proto3,oneof"`
}

func (*UInt32Filter_Value) isUInt32Filter_Data() {}

func (*UInt32Filter_Start) isUInt32Filter_Data() {}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//for use with EQ, NEQ, LIKE and NOT_LIKE
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	//
	//relationship type of the query.
	//EQ, NEQ for `value`
	//IN or NOT_IN for use with `set`
	//LIKE or NOT_LIKE test if the string in `value` matches or does not match the supplied pattern
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	//
	//For use with 'IN' or 'NOT IN' sql operations
	Set []string `protobuf:"bytes,6,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_epl_protobuf_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_epl_protobuf_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_epl_protobuf_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *StringFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringFilter) GetRelType() FilterRelationship {
	if x != nil {
		return x.RelType
	}
	return FilterRelationship_EQ
}

func (x *StringFilter) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

var File_epl_protobuf_v1_query_proto protoreflect.FileDescriptor

var file_epl_protobuf_v1_query_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x70, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf0, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xf1, 0x01, 0x0a, 0x0c, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x70, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x70,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x2a, 0x32, 0x0a, 0x0d, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x02, 0x2a,
	0x96, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x10,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x08,
	0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x80, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x80,
	0x02, 0x12, 0x0b, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x09,
	0x0a, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x80, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x4f, 0x54,
	0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x80, 0x10, 0x42, 0x6f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x42,
	0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6f, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x70,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x51, 0x50, 0x42, 0xaa, 0x02, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x70, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_epl_protobuf_v1_query_proto_rawDescOnce sync.Once
	file_epl_protobuf_v1_query_proto_rawDescData = file_epl_protobuf_v1_query_proto_rawDesc
)

func file_epl_protobuf_v1_query_proto_rawDescGZIP() []byte {
	file_epl_protobuf_v1_query_proto_rawDescOnce.Do(func() {
		file_epl_protobuf_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_epl_protobuf_v1_query_proto_rawDescData)
	})
	return file_epl_protobuf_v1_query_proto_rawDescData
}

var file_epl_protobuf_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_epl_protobuf_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_epl_protobuf_v1_query_proto_goTypes = []interface{}{
	(SortDirection)(0),            // 0: epl.protobuf.v1.SortDirection
	(FilterRelationship)(0),       // 1: epl.protobuf.v1.FilterRelationship
	(*FloatFilter)(nil),           // 2: epl.protobuf.v1.FloatFilter
	(*DoubleFilter)(nil),          // 3: epl.protobuf.v1.DoubleFilter
	(*TimestampFilter)(nil),       // 4: epl.protobuf.v1.TimestampFilter
	(*UInt32Filter)(nil),          // 5: epl.protobuf.v1.UInt32Filter
	(*StringFilter)(nil),          // 6: epl.protobuf.v1.StringFilter
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_epl_protobuf_v1_query_proto_depIdxs = []int32{
	1,  // 0: epl.protobuf.v1.FloatFilter.rel_type:type_name -> epl.protobuf.v1.FilterRelationship
	0,  // 1: epl.protobuf.v1.FloatFilter.sort_direction:type_name -> epl.protobuf.v1.SortDirection
	1,  // 2: epl.protobuf.v1.DoubleFilter.rel_type:type_name -> epl.protobuf.v1.FilterRelationship
	0,  // 3: epl.protobuf.v1.DoubleFilter.sort_direction:type_name -> epl.protobuf.v1.SortDirection
	1,  // 4: epl.protobuf.v1.TimestampFilter.rel_type:type_name -> epl.protobuf.v1.FilterRelationship
	7,  // 5: epl.protobuf.v1.TimestampFilter.value:type_name -> google.protobuf.Timestamp
	7,  // 6: epl.protobuf.v1.TimestampFilter.start:type_name -> google.protobuf.Timestamp
	7,  // 7: epl.protobuf.v1.TimestampFilter.end:type_name -> google.protobuf.Timestamp
	0,  // 8: epl.protobuf.v1.TimestampFilter.sort_direction:type_name -> epl.protobuf.v1.SortDirection
	1,  // 9: epl.protobuf.v1.UInt32Filter.rel_type:type_name -> epl.protobuf.v1.FilterRelationship
	0,  // 10: epl.protobuf.v1.UInt32Filter.sort_direction:type_name -> epl.protobuf.v1.SortDirection
	1,  // 11: epl.protobuf.v1.StringFilter.rel_type:type_name -> epl.protobuf.v1.FilterRelationship
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_epl_protobuf_v1_query_proto_init() }
func file_epl_protobuf_v1_query_proto_init() {
	if File_epl_protobuf_v1_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_epl_protobuf_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt32Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_epl_protobuf_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_epl_protobuf_v1_query_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FloatFilter_Value)(nil),
		(*FloatFilter_Start)(nil),
	}
	file_epl_protobuf_v1_query_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DoubleFilter_Value)(nil),
		(*DoubleFilter_Start)(nil),
	}
	file_epl_protobuf_v1_query_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TimestampFilter_Value)(nil),
		(*TimestampFilter_Start)(nil),
	}
	file_epl_protobuf_v1_query_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UInt32Filter_Value)(nil),
		(*UInt32Filter_Start)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_epl_protobuf_v1_query_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_epl_protobuf_v1_query_proto_goTypes,
		DependencyIndexes: file_epl_protobuf_v1_query_proto_depIdxs,
		EnumInfos:         file_epl_protobuf_v1_query_proto_enumTypes,
		MessageInfos:      file_epl_protobuf_v1_query_proto_msgTypes,
	}.Build()
	File_epl_protobuf_v1_query_proto = out.File
	file_epl_protobuf_v1_query_proto_rawDesc = nil
	file_epl_protobuf_v1_query_proto_goTypes = nil
	file_epl_protobuf_v1_query_proto_depIdxs = nil
}
