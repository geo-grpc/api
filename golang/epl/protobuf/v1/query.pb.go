// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/v1/query.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
//Not currently in use
type SortDirection int32

const (
	SortDirection_NOT_SORTED SortDirection = 0
	SortDirection_DESC       SortDirection = 1
	SortDirection_ASC        SortDirection = 2
)

var SortDirection_name = map[int32]string{
	0: "NOT_SORTED",
	1: "DESC",
	2: "ASC",
}

var SortDirection_value = map[string]int32{
	"NOT_SORTED": 0,
	"DESC":       1,
	"ASC":        2,
}

func (x SortDirection) String() string {
	return proto.EnumName(SortDirection_name, int32(x))
}

func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{0}
}

//
//Default Value is equals, `EQ`, so if you don't set rel_type, it is assumed you mean equals.
type FilterRelationship int32

const (
	FilterRelationship_EQ          FilterRelationship = 0
	FilterRelationship_LTE         FilterRelationship = 2
	FilterRelationship_GTE         FilterRelationship = 4
	FilterRelationship_LT          FilterRelationship = 8
	FilterRelationship_GT          FilterRelationship = 16
	FilterRelationship_BETWEEN     FilterRelationship = 32
	FilterRelationship_NOT_BETWEEN FilterRelationship = 64
	FilterRelationship_NEQ         FilterRelationship = 128
	FilterRelationship_IN          FilterRelationship = 256
	FilterRelationship_NOT_IN      FilterRelationship = 512
	FilterRelationship_LIKE        FilterRelationship = 1024
	FilterRelationship_NOT_LIKE    FilterRelationship = 2048
)

var FilterRelationship_name = map[int32]string{
	0:    "EQ",
	2:    "LTE",
	4:    "GTE",
	8:    "LT",
	16:   "GT",
	32:   "BETWEEN",
	64:   "NOT_BETWEEN",
	128:  "NEQ",
	256:  "IN",
	512:  "NOT_IN",
	1024: "LIKE",
	2048: "NOT_LIKE",
}

var FilterRelationship_value = map[string]int32{
	"EQ":          0,
	"LTE":         2,
	"GTE":         4,
	"LT":          8,
	"GT":          16,
	"BETWEEN":     32,
	"NOT_BETWEEN": 64,
	"NEQ":         128,
	"IN":          256,
	"NOT_IN":      512,
	"LIKE":        1024,
	"NOT_LIKE":    2048,
}

func (x FilterRelationship) String() string {
	return proto.EnumName(FilterRelationship_name, int32(x))
}

func (FilterRelationship) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{1}
}

//
//Query language for float fields.
type FloatFilter struct {
	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*FloatFilter_Value
	//	*FloatFilter_Start
	Data isFloatFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End float32 `protobuf:"fixed32,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set                  []float32 `protobuf:"fixed32,6,rep,packed,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FloatFilter) Reset()         { *m = FloatFilter{} }
func (m *FloatFilter) String() string { return proto.CompactTextString(m) }
func (*FloatFilter) ProtoMessage()    {}
func (*FloatFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{0}
}

func (m *FloatFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatFilter.Unmarshal(m, b)
}
func (m *FloatFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatFilter.Marshal(b, m, deterministic)
}
func (m *FloatFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatFilter.Merge(m, src)
}
func (m *FloatFilter) XXX_Size() int {
	return xxx_messageInfo_FloatFilter.Size(m)
}
func (m *FloatFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FloatFilter proto.InternalMessageInfo

func (m *FloatFilter) GetRelType() FilterRelationship {
	if m != nil {
		return m.RelType
	}
	return FilterRelationship_EQ
}

type isFloatFilter_Data interface {
	isFloatFilter_Data()
}

type FloatFilter_Value struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3,oneof"`
}

type FloatFilter_Start struct {
	Start float32 `protobuf:"fixed32,3,opt,name=start,proto3,oneof"`
}

func (*FloatFilter_Value) isFloatFilter_Data() {}

func (*FloatFilter_Start) isFloatFilter_Data() {}

func (m *FloatFilter) GetData() isFloatFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FloatFilter) GetValue() float32 {
	if x, ok := m.GetData().(*FloatFilter_Value); ok {
		return x.Value
	}
	return 0
}

func (m *FloatFilter) GetStart() float32 {
	if x, ok := m.GetData().(*FloatFilter_Start); ok {
		return x.Start
	}
	return 0
}

func (m *FloatFilter) GetEnd() float32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *FloatFilter) GetSortDirection() SortDirection {
	if m != nil {
		return m.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (m *FloatFilter) GetSet() []float32 {
	if m != nil {
		return m.Set
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FloatFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FloatFilter_Value)(nil),
		(*FloatFilter_Start)(nil),
	}
}

type DoubleFilter struct {
	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*DoubleFilter_Value
	//	*DoubleFilter_Start
	Data isDoubleFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End float64 `protobuf:"fixed64,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set                  []float64 `protobuf:"fixed64,6,rep,packed,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DoubleFilter) Reset()         { *m = DoubleFilter{} }
func (m *DoubleFilter) String() string { return proto.CompactTextString(m) }
func (*DoubleFilter) ProtoMessage()    {}
func (*DoubleFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{1}
}

func (m *DoubleFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleFilter.Unmarshal(m, b)
}
func (m *DoubleFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleFilter.Marshal(b, m, deterministic)
}
func (m *DoubleFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleFilter.Merge(m, src)
}
func (m *DoubleFilter) XXX_Size() int {
	return xxx_messageInfo_DoubleFilter.Size(m)
}
func (m *DoubleFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleFilter proto.InternalMessageInfo

func (m *DoubleFilter) GetRelType() FilterRelationship {
	if m != nil {
		return m.RelType
	}
	return FilterRelationship_EQ
}

type isDoubleFilter_Data interface {
	isDoubleFilter_Data()
}

type DoubleFilter_Value struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3,oneof"`
}

type DoubleFilter_Start struct {
	Start float64 `protobuf:"fixed64,3,opt,name=start,proto3,oneof"`
}

func (*DoubleFilter_Value) isDoubleFilter_Data() {}

func (*DoubleFilter_Start) isDoubleFilter_Data() {}

func (m *DoubleFilter) GetData() isDoubleFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DoubleFilter) GetValue() float64 {
	if x, ok := m.GetData().(*DoubleFilter_Value); ok {
		return x.Value
	}
	return 0
}

func (m *DoubleFilter) GetStart() float64 {
	if x, ok := m.GetData().(*DoubleFilter_Start); ok {
		return x.Start
	}
	return 0
}

func (m *DoubleFilter) GetEnd() float64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *DoubleFilter) GetSortDirection() SortDirection {
	if m != nil {
		return m.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (m *DoubleFilter) GetSet() []float64 {
	if m != nil {
		return m.Set
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DoubleFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DoubleFilter_Value)(nil),
		(*DoubleFilter_Start)(nil),
	}
}

type TimestampFilter struct {
	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*TimestampFilter_Value
	//	*TimestampFilter_Start
	Data isTimestampFilter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection        SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TimestampFilter) Reset()         { *m = TimestampFilter{} }
func (m *TimestampFilter) String() string { return proto.CompactTextString(m) }
func (*TimestampFilter) ProtoMessage()    {}
func (*TimestampFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{2}
}

func (m *TimestampFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimestampFilter.Unmarshal(m, b)
}
func (m *TimestampFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimestampFilter.Marshal(b, m, deterministic)
}
func (m *TimestampFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampFilter.Merge(m, src)
}
func (m *TimestampFilter) XXX_Size() int {
	return xxx_messageInfo_TimestampFilter.Size(m)
}
func (m *TimestampFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampFilter proto.InternalMessageInfo

func (m *TimestampFilter) GetRelType() FilterRelationship {
	if m != nil {
		return m.RelType
	}
	return FilterRelationship_EQ
}

type isTimestampFilter_Data interface {
	isTimestampFilter_Data()
}

type TimestampFilter_Value struct {
	Value *timestamp.Timestamp `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type TimestampFilter_Start struct {
	Start *timestamp.Timestamp `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

func (*TimestampFilter_Value) isTimestampFilter_Data() {}

func (*TimestampFilter_Start) isTimestampFilter_Data() {}

func (m *TimestampFilter) GetData() isTimestampFilter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TimestampFilter) GetValue() *timestamp.Timestamp {
	if x, ok := m.GetData().(*TimestampFilter_Value); ok {
		return x.Value
	}
	return nil
}

func (m *TimestampFilter) GetStart() *timestamp.Timestamp {
	if x, ok := m.GetData().(*TimestampFilter_Start); ok {
		return x.Start
	}
	return nil
}

func (m *TimestampFilter) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *TimestampFilter) GetSortDirection() SortDirection {
	if m != nil {
		return m.SortDirection
	}
	return SortDirection_NOT_SORTED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TimestampFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TimestampFilter_Value)(nil),
		(*TimestampFilter_Start)(nil),
	}
}

type UInt32Filter struct {
	//
	//relationship type of the query.
	//EQ, LTE, GTE, LT, GT, NEQ for `value`
	//BETWEEN or NOT_BETWEEN for `start` with `end`
	//IN or NOT_IN for use with `set`
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*UInt32Filter_Value
	//	*UInt32Filter_Start
	Data isUInt32Filter_Data `protobuf_oneof:"data"`
	//
	//For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
	//`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
	//by a `start` value
	End uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	//
	//sort direction for the return values
	SortDirection SortDirection `protobuf:"varint,5,opt,name=sort_direction,json=sortDirection,proto3,enum=epl.protobuf.v1.SortDirection" json:"sort_direction,omitempty"`
	//
	//'IN' or 'NOT IN' sql operations
	Set                  []uint32 `protobuf:"varint,6,rep,packed,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UInt32Filter) Reset()         { *m = UInt32Filter{} }
func (m *UInt32Filter) String() string { return proto.CompactTextString(m) }
func (*UInt32Filter) ProtoMessage()    {}
func (*UInt32Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{3}
}

func (m *UInt32Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UInt32Filter.Unmarshal(m, b)
}
func (m *UInt32Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UInt32Filter.Marshal(b, m, deterministic)
}
func (m *UInt32Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt32Filter.Merge(m, src)
}
func (m *UInt32Filter) XXX_Size() int {
	return xxx_messageInfo_UInt32Filter.Size(m)
}
func (m *UInt32Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt32Filter.DiscardUnknown(m)
}

var xxx_messageInfo_UInt32Filter proto.InternalMessageInfo

func (m *UInt32Filter) GetRelType() FilterRelationship {
	if m != nil {
		return m.RelType
	}
	return FilterRelationship_EQ
}

type isUInt32Filter_Data interface {
	isUInt32Filter_Data()
}

type UInt32Filter_Value struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3,oneof"`
}

type UInt32Filter_Start struct {
	Start uint32 `protobuf:"varint,3,opt,name=start,proto3,oneof"`
}

func (*UInt32Filter_Value) isUInt32Filter_Data() {}

func (*UInt32Filter_Start) isUInt32Filter_Data() {}

func (m *UInt32Filter) GetData() isUInt32Filter_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UInt32Filter) GetValue() uint32 {
	if x, ok := m.GetData().(*UInt32Filter_Value); ok {
		return x.Value
	}
	return 0
}

func (m *UInt32Filter) GetStart() uint32 {
	if x, ok := m.GetData().(*UInt32Filter_Start); ok {
		return x.Start
	}
	return 0
}

func (m *UInt32Filter) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *UInt32Filter) GetSortDirection() SortDirection {
	if m != nil {
		return m.SortDirection
	}
	return SortDirection_NOT_SORTED
}

func (m *UInt32Filter) GetSet() []uint32 {
	if m != nil {
		return m.Set
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UInt32Filter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UInt32Filter_Value)(nil),
		(*UInt32Filter_Start)(nil),
	}
}

type StringFilter struct {
	//
	//for use with EQ, NEQ, LIKE and NOT_LIKE
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	//
	//relationship type of the query.
	//EQ, NEQ for `value`
	//IN or NOT_IN for use with `set`
	//LIKE or NOT_LIKE test if the string in `value` matches or does not match the supplied pattern
	RelType FilterRelationship `protobuf:"varint,2,opt,name=rel_type,json=relType,proto3,enum=epl.protobuf.v1.FilterRelationship" json:"rel_type,omitempty"`
	//
	//For use with 'IN' or 'NOT IN' sql operations
	Set                  []string `protobuf:"bytes,6,rep,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringFilter) Reset()         { *m = StringFilter{} }
func (m *StringFilter) String() string { return proto.CompactTextString(m) }
func (*StringFilter) ProtoMessage()    {}
func (*StringFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5cf09cdc39999d6, []int{4}
}

func (m *StringFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringFilter.Unmarshal(m, b)
}
func (m *StringFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringFilter.Marshal(b, m, deterministic)
}
func (m *StringFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringFilter.Merge(m, src)
}
func (m *StringFilter) XXX_Size() int {
	return xxx_messageInfo_StringFilter.Size(m)
}
func (m *StringFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_StringFilter.DiscardUnknown(m)
}

var xxx_messageInfo_StringFilter proto.InternalMessageInfo

func (m *StringFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *StringFilter) GetRelType() FilterRelationship {
	if m != nil {
		return m.RelType
	}
	return FilterRelationship_EQ
}

func (m *StringFilter) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

func init() {
	proto.RegisterEnum("epl.protobuf.v1.SortDirection", SortDirection_name, SortDirection_value)
	proto.RegisterEnum("epl.protobuf.v1.FilterRelationship", FilterRelationship_name, FilterRelationship_value)
	proto.RegisterType((*FloatFilter)(nil), "epl.protobuf.v1.FloatFilter")
	proto.RegisterType((*DoubleFilter)(nil), "epl.protobuf.v1.DoubleFilter")
	proto.RegisterType((*TimestampFilter)(nil), "epl.protobuf.v1.TimestampFilter")
	proto.RegisterType((*UInt32Filter)(nil), "epl.protobuf.v1.UInt32Filter")
	proto.RegisterType((*StringFilter)(nil), "epl.protobuf.v1.StringFilter")
}

func init() {
	proto.RegisterFile("epl/protobuf/v1/query.proto", fileDescriptor_b5cf09cdc39999d6)
}

var fileDescriptor_b5cf09cdc39999d6 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0x65, 0x6c, 0x07, 0xcc, 0x25, 0x86, 0xd1, 0x7c, 0x9f, 0x2a, 0x2b, 0x95, 0x5a, 0x94, 0x6e,
	0xa2, 0xa8, 0xb5, 0x15, 0x67, 0x5f, 0xb5, 0x04, 0x27, 0x45, 0x45, 0x04, 0x8c, 0xab, 0xaa, 0xdd,
	0x20, 0x03, 0x53, 0xc7, 0x92, 0x61, 0xdc, 0xf1, 0x80, 0xc4, 0x8e, 0xa7, 0xe8, 0x03, 0xf4, 0x21,
	0xfa, 0x5c, 0xed, 0x1b, 0x54, 0x83, 0xeb, 0xf2, 0x93, 0xa4, 0x5d, 0x34, 0xac, 0xf0, 0x3d, 0x73,
	0xef, 0x9c, 0x7b, 0x0e, 0x47, 0x03, 0x8f, 0x69, 0x12, 0xdb, 0x09, 0x67, 0x82, 0x0d, 0x67, 0x9f,
	0xec, 0xf9, 0x99, 0xfd, 0x79, 0x46, 0xf9, 0xc2, 0x5a, 0x21, 0xa4, 0x46, 0x93, 0xd8, 0xca, 0x0f,
	0xad, 0xf9, 0xd9, 0xd1, 0xd3, 0x90, 0xb1, 0x30, 0xa6, 0xeb, 0x01, 0x11, 0x4d, 0x68, 0x2a, 0x82,
	0x49, 0x92, 0xb5, 0x1d, 0x7f, 0x47, 0x50, 0xb9, 0x8c, 0x59, 0x20, 0x2e, 0xa3, 0x58, 0x50, 0x4e,
	0x5e, 0x82, 0xce, 0x69, 0x3c, 0x10, 0x8b, 0x84, 0x9a, 0x4a, 0x1d, 0x9d, 0x54, 0x9d, 0x67, 0xd6,
	0xce, 0xa5, 0x56, 0xd6, 0xea, 0xd1, 0x38, 0x10, 0x11, 0x9b, 0xa6, 0x37, 0x51, 0xe2, 0x95, 0x38,
	0x8d, 0xfd, 0x45, 0x42, 0xc9, 0x23, 0x38, 0x98, 0x07, 0xf1, 0x8c, 0x9a, 0xa8, 0x8e, 0x4e, 0x94,
	0x37, 0x05, 0x2f, 0x2b, 0x25, 0x9e, 0x8a, 0x80, 0x0b, 0x53, 0xcd, 0xf1, 0x55, 0x49, 0x30, 0xa8,
	0x74, 0x3a, 0x36, 0x35, 0x89, 0x7a, 0xf2, 0x93, 0xb8, 0x50, 0x4d, 0x19, 0x17, 0x83, 0x71, 0xc4,
	0xe9, 0x48, 0x12, 0x98, 0x07, 0xab, 0x3d, 0x9e, 0xdc, 0xda, 0xa3, 0xcf, 0xb8, 0x68, 0xe6, 0x5d,
	0x9e, 0x91, 0x6e, 0x96, 0xf2, 0xe2, 0x94, 0x0a, 0xb3, 0x58, 0x57, 0xe5, 0xc5, 0x29, 0x15, 0x8d,
	0x22, 0x68, 0xe3, 0x40, 0x04, 0xc7, 0x3f, 0x10, 0x1c, 0x36, 0xd9, 0x6c, 0x18, 0xd3, 0x7d, 0x68,
	0x46, 0xf7, 0x68, 0x46, 0x77, 0x6a, 0x46, 0xfb, 0xd2, 0x8c, 0xb6, 0x35, 0x7f, 0x53, 0xa0, 0xe6,
	0xe7, 0x7f, 0xfd, 0x03, 0xc9, 0x76, 0x36, 0x65, 0x57, 0x9c, 0x23, 0x2b, 0xcb, 0xda, 0x7a, 0xfe,
	0x37, 0xe1, 0xda, 0x12, 0x67, 0xd3, 0x92, 0xbf, 0xce, 0x64, 0x76, 0x3d, 0x5f, 0xdb, 0xf5, 0xc7,
	0x89, 0x87, 0xb4, 0x72, 0x2b, 0x2c, 0xef, 0x5a, 0x53, 0x71, 0xee, 0xec, 0x23, 0x2c, 0xc6, 0x3d,
	0x61, 0x31, 0xee, 0x0c, 0x8b, 0xb1, 0xaf, 0xb0, 0x18, 0xdb, 0x61, 0x99, 0xc3, 0x61, 0x5f, 0xf0,
	0x68, 0x1a, 0xfe, 0x92, 0xfc, 0xff, 0xe6, 0xca, 0xe5, 0x7c, 0xe1, 0x7f, 0x35, 0x62, 0x83, 0xbf,
	0xbc, 0xe2, 0x3f, 0x75, 0xc0, 0xd8, 0xda, 0x98, 0x54, 0x01, 0x3a, 0xd7, 0xfe, 0xa0, 0x7f, 0xed,
	0xf9, 0x6e, 0x13, 0x17, 0x88, 0x0e, 0x5a, 0xd3, 0xed, 0x5f, 0x60, 0x44, 0x4a, 0xa0, 0xbe, 0xee,
	0x5f, 0x60, 0xe5, 0xf4, 0x0b, 0x02, 0x72, 0x9b, 0x85, 0x14, 0x41, 0x71, 0x7b, 0xb8, 0x20, 0xfb,
	0xda, 0xbe, 0x8b, 0x15, 0xf9, 0x71, 0xe5, 0xbb, 0x58, 0x93, 0x27, 0x6d, 0x1f, 0xeb, 0xf2, 0xf7,
	0xca, 0xc7, 0x98, 0x54, 0xa0, 0xd4, 0x70, 0xfd, 0xf7, 0xae, 0xdb, 0xc1, 0x75, 0x52, 0x83, 0x8a,
	0x24, 0xcc, 0x81, 0x57, 0x44, 0x07, 0xb5, 0xe3, 0xf6, 0xf0, 0x52, 0x32, 0x2a, 0xad, 0x0e, 0x5e,
	0x2a, 0xa4, 0x02, 0x45, 0xd9, 0x23, 0x0b, 0x8d, 0x94, 0x41, 0x6b, 0xb7, 0xde, 0xba, 0x78, 0xa9,
	0x13, 0x03, 0x74, 0x89, 0x67, 0x25, 0x6e, 0x7c, 0x80, 0xff, 0x46, 0x6c, 0xb2, 0xeb, 0x48, 0x03,
	0x7a, 0xf2, 0xb9, 0xee, 0x4a, 0xa4, 0x8b, 0x3e, 0x5a, 0x61, 0x24, 0x6e, 0x66, 0x43, 0x6b, 0xc4,
	0x26, 0x76, 0x48, 0xd9, 0x8b, 0x90, 0x27, 0x23, 0x3b, 0x48, 0x22, 0x3b, 0x64, 0x71, 0x30, 0x0d,
	0xed, 0x9d, 0xb7, 0xfe, 0xab, 0xa2, 0xf6, 0xba, 0x8d, 0x61, 0x71, 0x05, 0x9d, 0xff, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0x34, 0x66, 0x20, 0x38, 0x0b, 0x06, 0x00, 0x00,
}
