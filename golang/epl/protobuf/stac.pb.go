// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/stac.proto

package protobuf // import "github.com/geo-grpc/api/golang/epl/protobuf"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AssetType int32

const (
	AssetType_UNKNOWN_ASSET AssetType = 0
	AssetType_JPEG          AssetType = 1
	// geotiff https://www.gdal.org/frmt_gtiff.html
	AssetType_GEOTIFF AssetType = 2
	// Limited Error Raster Compression
	AssetType_LERC AssetType = 3
	// metadata raster file https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-metadata-file-mrf
	AssetType_MRF AssetType = 4
	// metadata raster file index https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-index-file-idx
	AssetType_MRF_IDX AssetType = 5
	AssetType_MRF_XML AssetType = 6
	// cloud optimized geotiff https://www.cogeo.org/
	AssetType_CO_GEOTIFF AssetType = 7
	AssetType_RAW        AssetType = 8
	AssetType_THUMBNAIL  AssetType = 9
	AssetType_TIFF       AssetType = 10
	AssetType_JPEG_2000  AssetType = 11
	AssetType_XML        AssetType = 12
	AssetType_TXT        AssetType = 13
	AssetType_PNG        AssetType = 14
	// GDAL overview file https://gdal.org/programs/gdaladdo.html
	AssetType_OVERVIEW AssetType = 15
	AssetType_JSON     AssetType = 16
	AssetType_HTML     AssetType = 17
)

var AssetType_name = map[int32]string{
	0:  "UNKNOWN_ASSET",
	1:  "JPEG",
	2:  "GEOTIFF",
	3:  "LERC",
	4:  "MRF",
	5:  "MRF_IDX",
	6:  "MRF_XML",
	7:  "CO_GEOTIFF",
	8:  "RAW",
	9:  "THUMBNAIL",
	10: "TIFF",
	11: "JPEG_2000",
	12: "XML",
	13: "TXT",
	14: "PNG",
	15: "OVERVIEW",
	16: "JSON",
	17: "HTML",
}
var AssetType_value = map[string]int32{
	"UNKNOWN_ASSET": 0,
	"JPEG":          1,
	"GEOTIFF":       2,
	"LERC":          3,
	"MRF":           4,
	"MRF_IDX":       5,
	"MRF_XML":       6,
	"CO_GEOTIFF":    7,
	"RAW":           8,
	"THUMBNAIL":     9,
	"TIFF":          10,
	"JPEG_2000":     11,
	"XML":           12,
	"TXT":           13,
	"PNG":           14,
	"OVERVIEW":      15,
	"JSON":          16,
	"HTML":          17,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{0}
}

type CloudPlatform int32

const (
	CloudPlatform_UNKNOWN_CLOUD_PLATFORM CloudPlatform = 0
	CloudPlatform_AWS                    CloudPlatform = 1
	CloudPlatform_GCP                    CloudPlatform = 2
	CloudPlatform_AZURE                  CloudPlatform = 3
)

var CloudPlatform_name = map[int32]string{
	0: "UNKNOWN_CLOUD_PLATFORM",
	1: "AWS",
	2: "GCP",
	3: "AZURE",
}
var CloudPlatform_value = map[string]int32{
	"UNKNOWN_CLOUD_PLATFORM": 0,
	"AWS":                    1,
	"GCP":                    2,
	"AZURE":                  3,
}

func (x CloudPlatform) String() string {
	return proto.EnumName(CloudPlatform_name, int32(x))
}
func (CloudPlatform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{1}
}

type Sar_Platform int32

const (
	Sar_UNKNOWN_PLATFORM Sar_Platform = 0
	Sar_ENVISAT          Sar_Platform = 1
	Sar_SENTINEL_1A      Sar_Platform = 2
)

var Sar_Platform_name = map[int32]string{
	0: "UNKNOWN_PLATFORM",
	1: "ENVISAT",
	2: "SENTINEL_1A",
}
var Sar_Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"ENVISAT":          1,
	"SENTINEL_1A":      2,
}

func (x Sar_Platform) String() string {
	return proto.EnumName(Sar_Platform_name, int32(x))
}
func (Sar_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{6, 0}
}

type Sar_Instrument int32

const (
	Sar_UNKNOWN_INSTRUMENT Sar_Instrument = 0
)

var Sar_Instrument_name = map[int32]string{
	0: "UNKNOWN_INSTRUMENT",
}
var Sar_Instrument_value = map[string]int32{
	"UNKNOWN_INSTRUMENT": 0,
}

func (x Sar_Instrument) String() string {
	return proto.EnumName(Sar_Instrument_name, int32(x))
}
func (Sar_Instrument) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{6, 1}
}

type Eo_Platform int32

const (
	Eo_UNKNOWN_PLATFORM Eo_Platform = 0
	Eo_LANDSAT_1        Eo_Platform = 2
	Eo_LANDSAT_2        Eo_Platform = 4
	Eo_LANDSAT_3        Eo_Platform = 8
	Eo_LANDSAT_123      Eo_Platform = 14
	Eo_LANDSAT_4        Eo_Platform = 16
	Eo_LANDSAT_5        Eo_Platform = 32
	Eo_LANDSAT_45       Eo_Platform = 48
	Eo_LANDSAT_7        Eo_Platform = 64
	Eo_LANDSAT_8        Eo_Platform = 128
	// swiftera platform
	Eo_SWIFT_2 Eo_Platform = 256
)

var Eo_Platform_name = map[int32]string{
	0:   "UNKNOWN_PLATFORM",
	2:   "LANDSAT_1",
	4:   "LANDSAT_2",
	8:   "LANDSAT_3",
	14:  "LANDSAT_123",
	16:  "LANDSAT_4",
	32:  "LANDSAT_5",
	48:  "LANDSAT_45",
	64:  "LANDSAT_7",
	128: "LANDSAT_8",
	256: "SWIFT_2",
}
var Eo_Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"LANDSAT_1":        2,
	"LANDSAT_2":        4,
	"LANDSAT_3":        8,
	"LANDSAT_123":      14,
	"LANDSAT_4":        16,
	"LANDSAT_5":        32,
	"LANDSAT_45":       48,
	"LANDSAT_7":        64,
	"LANDSAT_8":        128,
	"SWIFT_2":          256,
}

func (x Eo_Platform) String() string {
	return proto.EnumName(Eo_Platform_name, int32(x))
}
func (Eo_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{7, 0}
}

type Eo_Instrument int32

const (
	Eo_UNKNOWN_INSTRUMENT Eo_Instrument = 0
	Eo_OLI                Eo_Instrument = 2
	Eo_TIRS               Eo_Instrument = 4
	Eo_OLI_TIRS           Eo_Instrument = 6
	// swiftera instrument
	Eo_POM_1 Eo_Instrument = 8
	Eo_TM    Eo_Instrument = 16
	Eo_ETM   Eo_Instrument = 32
	Eo_MSS   Eo_Instrument = 64
)

var Eo_Instrument_name = map[int32]string{
	0:  "UNKNOWN_INSTRUMENT",
	2:  "OLI",
	4:  "TIRS",
	6:  "OLI_TIRS",
	8:  "POM_1",
	16: "TM",
	32: "ETM",
	64: "MSS",
}
var Eo_Instrument_value = map[string]int32{
	"UNKNOWN_INSTRUMENT": 0,
	"OLI":                2,
	"TIRS":               4,
	"OLI_TIRS":           6,
	"POM_1":              8,
	"TM":                 16,
	"ETM":                32,
	"MSS":                64,
}

func (x Eo_Instrument) String() string {
	return proto.EnumName(Eo_Instrument_name, int32(x))
}
func (Eo_Instrument) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{7, 1}
}

type Eo_Constellation int32

const (
	Eo_UNKNOWN_CONSTELLATION Eo_Constellation = 0
	Eo_LANDSAT               Eo_Constellation = 2
	Eo_NAIP                  Eo_Constellation = 4
	// spanish aerial dataset
	Eo_PNOA Eo_Constellation = 8
	// swiftera dataset
	Eo_SWIFT Eo_Constellation = 16
)

var Eo_Constellation_name = map[int32]string{
	0:  "UNKNOWN_CONSTELLATION",
	2:  "LANDSAT",
	4:  "NAIP",
	8:  "PNOA",
	16: "SWIFT",
}
var Eo_Constellation_value = map[string]int32{
	"UNKNOWN_CONSTELLATION": 0,
	"LANDSAT":               2,
	"NAIP":                  4,
	"PNOA":                  8,
	"SWIFT":                 16,
}

func (x Eo_Constellation) String() string {
	return proto.EnumName(Eo_Constellation_name, int32(x))
}
func (Eo_Constellation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{7, 2}
}

type Eo_Band int32

const (
	Eo_UNKNOWN_BAND Eo_Band = 0
	Eo_COASTAL      Eo_Band = 2
	Eo_BLUE         Eo_Band = 4
	Eo_GREEN        Eo_Band = 8
	Eo_RED          Eo_Band = 16
	Eo_RGB          Eo_Band = 28
	Eo_NIR          Eo_Band = 32
	// special case for landsat 1-3
	Eo_NIR_2  Eo_Band = 33
	Eo_RGBIR  Eo_Band = 60
	Eo_SWIR_1 Eo_Band = 64
	Eo_SWIR_2 Eo_Band = 128
	Eo_PAN    Eo_Band = 256
	Eo_CIRRUS Eo_Band = 512
	Eo_LWIR_1 Eo_Band = 1024
	Eo_LWIR_2 Eo_Band = 2048
)

var Eo_Band_name = map[int32]string{
	0:    "UNKNOWN_BAND",
	2:    "COASTAL",
	4:    "BLUE",
	8:    "GREEN",
	16:   "RED",
	28:   "RGB",
	32:   "NIR",
	33:   "NIR_2",
	60:   "RGBIR",
	64:   "SWIR_1",
	128:  "SWIR_2",
	256:  "PAN",
	512:  "CIRRUS",
	1024: "LWIR_1",
	2048: "LWIR_2",
}
var Eo_Band_value = map[string]int32{
	"UNKNOWN_BAND": 0,
	"COASTAL":      2,
	"BLUE":         4,
	"GREEN":        8,
	"RED":          16,
	"RGB":          28,
	"NIR":          32,
	"NIR_2":        33,
	"RGBIR":        60,
	"SWIR_1":       64,
	"SWIR_2":       128,
	"PAN":          256,
	"CIRRUS":       512,
	"LWIR_1":       1024,
	"LWIR_2":       2048,
}

func (x Eo_Band) String() string {
	return proto.EnumName(Eo_Band_name, int32(x))
}
func (Eo_Band) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{7, 3}
}

type Landsat_ProcessingLevel int32

const (
	Landsat_UNKNOWN_PROCESSING_LEVEL Landsat_ProcessingLevel = 0
	Landsat_L1G                      Landsat_ProcessingLevel = 1
	Landsat_L1TP                     Landsat_ProcessingLevel = 2
	Landsat_L1T                      Landsat_ProcessingLevel = 3
	Landsat_L1GT                     Landsat_ProcessingLevel = 4
	Landsat_L1GS                     Landsat_ProcessingLevel = 5
)

var Landsat_ProcessingLevel_name = map[int32]string{
	0: "UNKNOWN_PROCESSING_LEVEL",
	1: "L1G",
	2: "L1TP",
	3: "L1T",
	4: "L1GT",
	5: "L1GS",
}
var Landsat_ProcessingLevel_value = map[string]int32{
	"UNKNOWN_PROCESSING_LEVEL": 0,
	"L1G":                      1,
	"L1TP":                     2,
	"L1T":                      3,
	"L1GT":                     4,
	"L1GS":                     5,
}

func (x Landsat_ProcessingLevel) String() string {
	return proto.EnumName(Landsat_ProcessingLevel_name, int32(x))
}
func (Landsat_ProcessingLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{9, 0}
}

// *
// Spatio-Temporal Asset Catalog Item. This data item has a spatial and temporal extent. It has a unique identifier
// downloadable assets. It may have an extension with details beyond the spatial and temporal extents. It may have
// additional properties in the properties field
type StacItem struct {
	// Provider identifier. As most geospatial assets are already defined by some identification scheme by the data provider it is recommended to simply use that ID. Data providers are advised to include sufficient information to make their IDs globally unique, including things like unique satellite IDs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the spatial shape of the item. must have a spatial reference defined.
	Geometry *GeometryData `protobuf:"bytes,3,opt,name=geometry,proto3" json:"geometry,omitempty"`
	// the bounding box of the spatial shape of the item. must have a spatial reference defined.
	Bbox *EnvelopeData `protobuf:"bytes,4,opt,name=bbox,proto3" json:"bbox,omitempty"`
	// the properties of an item that are not defined within the stac specification. Requires marshalling and un-marshalling https://developers.google.com/protocol-buffers/docs/proto3#any
	Properties *any.Any `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	// Dictionary of asset objects that can be downloaded, each with a unique key. Some pre-defined keys are listed in the chapter 'Asset types'.
	Assets map[string]*Asset `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The searchable date and time of the assets, in UTC
	Datetime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// (optional) A human readable title describing the item.
	Title string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	// (optional) The id of the STAC Collection this Item references to (see collection relation type below). This field is required if such a relation type is present. This field provides an easy way for a user to search for any Items that belong in a specified Collection.
	Collection string `protobuf:"bytes,10,opt,name=collection,proto3" json:"collection,omitempty"`
	// timestamp at which data was observed (optional if datetime set)
	Observed *timestamp.Timestamp `protobuf:"bytes,11,opt,name=observed,proto3" json:"observed,omitempty"`
	// timestamp when it was processed (when assets were generated)
	Processed *timestamp.Timestamp `protobuf:"bytes,12,opt,name=processed,proto3" json:"processed,omitempty"`
	// last timestamp when stac metadata itself was updated
	Updated *timestamp.Timestamp `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
	// electro-optical data message
	Eo *Eo `protobuf:"bytes,14,opt,name=eo,proto3" json:"eo,omitempty"`
	// Synthetic Aperture Radar data message
	Sar *Sar `protobuf:"bytes,15,opt,name=sar,proto3" json:"sar,omitempty"`
	// Date time range
	Dtr                  *Dtr     `protobuf:"bytes,16,opt,name=dtr,proto3" json:"dtr,omitempty"`
	Landsat              *Landsat `protobuf:"bytes,17,opt,name=landsat,proto3" json:"landsat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StacItem) Reset()         { *m = StacItem{} }
func (m *StacItem) String() string { return proto.CompactTextString(m) }
func (*StacItem) ProtoMessage()    {}
func (*StacItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{0}
}
func (m *StacItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacItem.Unmarshal(m, b)
}
func (m *StacItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacItem.Marshal(b, m, deterministic)
}
func (dst *StacItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacItem.Merge(dst, src)
}
func (m *StacItem) XXX_Size() int {
	return xxx_messageInfo_StacItem.Size(m)
}
func (m *StacItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StacItem.DiscardUnknown(m)
}

var xxx_messageInfo_StacItem proto.InternalMessageInfo

func (m *StacItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StacItem) GetGeometry() *GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *StacItem) GetBbox() *EnvelopeData {
	if m != nil {
		return m.Bbox
	}
	return nil
}

func (m *StacItem) GetProperties() *any.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *StacItem) GetAssets() map[string]*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *StacItem) GetDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.Datetime
	}
	return nil
}

func (m *StacItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StacItem) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *StacItem) GetObserved() *timestamp.Timestamp {
	if m != nil {
		return m.Observed
	}
	return nil
}

func (m *StacItem) GetProcessed() *timestamp.Timestamp {
	if m != nil {
		return m.Processed
	}
	return nil
}

func (m *StacItem) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *StacItem) GetEo() *Eo {
	if m != nil {
		return m.Eo
	}
	return nil
}

func (m *StacItem) GetSar() *Sar {
	if m != nil {
		return m.Sar
	}
	return nil
}

func (m *StacItem) GetDtr() *Dtr {
	if m != nil {
		return m.Dtr
	}
	return nil
}

func (m *StacItem) GetLandsat() *Landsat {
	if m != nil {
		return m.Landsat
	}
	return nil
}

// *
// message for making a request for stac items.
type StacRequest struct {
	// if id matches, return the one matching stac item
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// search by the spatial extent as defined by geometry
	Geometry *GeometryData `protobuf:"bytes,2,opt,name=geometry,proto3" json:"geometry,omitempty"`
	// search by the spatial extent as defined by the envelope bounds
	Bbox *EnvelopeData `protobuf:"bytes,3,opt,name=bbox,proto3" json:"bbox,omitempty"`
	// search by a geometry request. this sends a geometry operator to a geometry service, and the returned geometry is in turn used as the spatial extent
	GeometryRequest *GeometryRequest `protobuf:"bytes,4,opt,name=geometry_request,json=geometryRequest,proto3" json:"geometry_request,omitempty"`
	// search by properties specified by user using a request object known by user and the Any marshalling pattern
	Properties *any.Any `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	// search for the datetime that matched by bounds defined by the exact timestamp or a range of timestamp
	Datetime *TimestampField `protobuf:"bytes,6,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// search for the moment the data was observed by bounds defined by the exact timestamp or a range of timestamp
	Observed *TimestampField `protobuf:"bytes,7,opt,name=observed,proto3" json:"observed,omitempty"`
	// search for the moment the data was processed by bounds defined by the exact timestamp or a range of timestamp
	Processed *TimestampField `protobuf:"bytes,8,opt,name=processed,proto3" json:"processed,omitempty"`
	// search for the moment the stac item metadata was updated by bounds defined by the exact timestamp or a range of timestamp
	Updated *TimestampField `protobuf:"bytes,9,opt,name=updated,proto3" json:"updated,omitempty"`
	// use certain electro-optical search parameters in your query
	Eo *EoRequest `protobuf:"bytes,10,opt,name=eo,proto3" json:"eo,omitempty"`
	// limit the number of results returned
	Limit uint32 `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	// the offset from which the query should start
	Offset               uint64          `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
	Landsat              *LandsatRequest `protobuf:"bytes,13,opt,name=landsat,proto3" json:"landsat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StacRequest) Reset()         { *m = StacRequest{} }
func (m *StacRequest) String() string { return proto.CompactTextString(m) }
func (*StacRequest) ProtoMessage()    {}
func (*StacRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{1}
}
func (m *StacRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacRequest.Unmarshal(m, b)
}
func (m *StacRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacRequest.Marshal(b, m, deterministic)
}
func (dst *StacRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacRequest.Merge(dst, src)
}
func (m *StacRequest) XXX_Size() int {
	return xxx_messageInfo_StacRequest.Size(m)
}
func (m *StacRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StacRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StacRequest proto.InternalMessageInfo

func (m *StacRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StacRequest) GetGeometry() *GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *StacRequest) GetBbox() *EnvelopeData {
	if m != nil {
		return m.Bbox
	}
	return nil
}

func (m *StacRequest) GetGeometryRequest() *GeometryRequest {
	if m != nil {
		return m.GeometryRequest
	}
	return nil
}

func (m *StacRequest) GetProperties() *any.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *StacRequest) GetDatetime() *TimestampField {
	if m != nil {
		return m.Datetime
	}
	return nil
}

func (m *StacRequest) GetObserved() *TimestampField {
	if m != nil {
		return m.Observed
	}
	return nil
}

func (m *StacRequest) GetProcessed() *TimestampField {
	if m != nil {
		return m.Processed
	}
	return nil
}

func (m *StacRequest) GetUpdated() *TimestampField {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *StacRequest) GetEo() *EoRequest {
	if m != nil {
		return m.Eo
	}
	return nil
}

func (m *StacRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *StacRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *StacRequest) GetLandsat() *LandsatRequest {
	if m != nil {
		return m.Landsat
	}
	return nil
}

// Right now this isn't included in the response as it's a bit messy
type BandDetails struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommonName           string               `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Gsd                  *wrappers.FloatValue `protobuf:"bytes,4,opt,name=gsd,proto3" json:"gsd,omitempty"`
	Accuracy             *wrappers.FloatValue `protobuf:"bytes,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	CenterWavelength     *wrappers.FloatValue `protobuf:"bytes,6,opt,name=center_wavelength,json=centerWavelength,proto3" json:"center_wavelength,omitempty"`
	FullWidthHalfMax     *wrappers.FloatValue `protobuf:"bytes,7,opt,name=full_width_half_max,json=fullWidthHalfMax,proto3" json:"full_width_half_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BandDetails) Reset()         { *m = BandDetails{} }
func (m *BandDetails) String() string { return proto.CompactTextString(m) }
func (*BandDetails) ProtoMessage()    {}
func (*BandDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{2}
}
func (m *BandDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BandDetails.Unmarshal(m, b)
}
func (m *BandDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BandDetails.Marshal(b, m, deterministic)
}
func (dst *BandDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandDetails.Merge(dst, src)
}
func (m *BandDetails) XXX_Size() int {
	return xxx_messageInfo_BandDetails.Size(m)
}
func (m *BandDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BandDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BandDetails proto.InternalMessageInfo

func (m *BandDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BandDetails) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *BandDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BandDetails) GetGsd() *wrappers.FloatValue {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *BandDetails) GetAccuracy() *wrappers.FloatValue {
	if m != nil {
		return m.Accuracy
	}
	return nil
}

func (m *BandDetails) GetCenterWavelength() *wrappers.FloatValue {
	if m != nil {
		return m.CenterWavelength
	}
	return nil
}

func (m *BandDetails) GetFullWidthHalfMax() *wrappers.FloatValue {
	if m != nil {
		return m.FullWidthHalfMax
	}
	return nil
}

// *
// message for an asset of a stac item.
type Asset struct {
	// href for downloading item
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// asset type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// band(s) of data in asset. https://github.com/radiantearth/stac-spec/blob/612ee4fb4f979c049d2416e7f5374a5301b8a277/extensions/eo/README.md
	EoBands Eo_Band `protobuf:"varint,3,opt,name=eo_bands,json=eoBands,proto3,enum=epl.protobuf.Eo_Band" json:"eo_bands,omitempty"`
	// enum for asset type
	AssetType AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=epl.protobuf.AssetType" json:"asset_type,omitempty"`
	// cloud platform enum (Google cloud, Azure, etc)
	CloudPlatform CloudPlatform `protobuf:"varint,5,opt,name=cloud_platform,json=cloudPlatform,proto3,enum=epl.protobuf.CloudPlatform" json:"cloud_platform,omitempty"`
	// manager of the bucket
	BucketManager string `protobuf:"bytes,6,opt,name=bucket_manager,json=bucketManager,proto3" json:"bucket_manager,omitempty"`
	// bucket region. useful when concerned about egress
	BucketRegion string `protobuf:"bytes,7,opt,name=bucket_region,json=bucketRegion,proto3" json:"bucket_region,omitempty"`
	// bucket name
	Bucket string `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// path to the object in the bucket
	ObjectPath string `protobuf:"bytes,9,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	// requester_pays pertains to egress cost. Some buckets are hosted with the egress costs assigned to the requester. some hosts pay the regress costs for the requester.
	RequesterPays        bool     `protobuf:"varint,10,opt,name=requester_pays,json=requesterPays,proto3" json:"requester_pays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{3}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Asset.Unmarshal(m, b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
}
func (dst *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(dst, src)
}
func (m *Asset) XXX_Size() int {
	return xxx_messageInfo_Asset.Size(m)
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Asset) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Asset) GetEoBands() Eo_Band {
	if m != nil {
		return m.EoBands
	}
	return Eo_UNKNOWN_BAND
}

func (m *Asset) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_UNKNOWN_ASSET
}

func (m *Asset) GetCloudPlatform() CloudPlatform {
	if m != nil {
		return m.CloudPlatform
	}
	return CloudPlatform_UNKNOWN_CLOUD_PLATFORM
}

func (m *Asset) GetBucketManager() string {
	if m != nil {
		return m.BucketManager
	}
	return ""
}

func (m *Asset) GetBucketRegion() string {
	if m != nil {
		return m.BucketRegion
	}
	return ""
}

func (m *Asset) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Asset) GetObjectPath() string {
	if m != nil {
		return m.ObjectPath
	}
	return ""
}

func (m *Asset) GetRequesterPays() bool {
	if m != nil {
		return m.RequesterPays
	}
	return false
}

type Dtr struct {
	Start                *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Dtr) Reset()         { *m = Dtr{} }
func (m *Dtr) String() string { return proto.CompactTextString(m) }
func (*Dtr) ProtoMessage()    {}
func (*Dtr) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{4}
}
func (m *Dtr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dtr.Unmarshal(m, b)
}
func (m *Dtr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dtr.Marshal(b, m, deterministic)
}
func (dst *Dtr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dtr.Merge(dst, src)
}
func (m *Dtr) XXX_Size() int {
	return xxx_messageInfo_Dtr.Size(m)
}
func (m *Dtr) XXX_DiscardUnknown() {
	xxx_messageInfo_Dtr.DiscardUnknown(m)
}

var xxx_messageInfo_Dtr proto.InternalMessageInfo

func (m *Dtr) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Dtr) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// *
// response message for insertion and updates to stac db
type StacDbResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode           int32    `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	DataId               string   `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StacDbResponse) Reset()         { *m = StacDbResponse{} }
func (m *StacDbResponse) String() string { return proto.CompactTextString(m) }
func (*StacDbResponse) ProtoMessage()    {}
func (*StacDbResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{5}
}
func (m *StacDbResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacDbResponse.Unmarshal(m, b)
}
func (m *StacDbResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacDbResponse.Marshal(b, m, deterministic)
}
func (dst *StacDbResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacDbResponse.Merge(dst, src)
}
func (m *StacDbResponse) XXX_Size() int {
	return xxx_messageInfo_StacDbResponse.Size(m)
}
func (m *StacDbResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StacDbResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StacDbResponse proto.InternalMessageInfo

func (m *StacDbResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StacDbResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *StacDbResponse) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

// *
// place holder for SAR
type Sar struct {
	Platform             Sar_Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=epl.protobuf.Sar_Platform" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Sar) Reset()         { *m = Sar{} }
func (m *Sar) String() string { return proto.CompactTextString(m) }
func (*Sar) ProtoMessage()    {}
func (*Sar) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{6}
}
func (m *Sar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sar.Unmarshal(m, b)
}
func (m *Sar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sar.Marshal(b, m, deterministic)
}
func (dst *Sar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sar.Merge(dst, src)
}
func (m *Sar) XXX_Size() int {
	return xxx_messageInfo_Sar.Size(m)
}
func (m *Sar) XXX_DiscardUnknown() {
	xxx_messageInfo_Sar.DiscardUnknown(m)
}

var xxx_messageInfo_Sar proto.InternalMessageInfo

func (m *Sar) GetPlatform() Sar_Platform {
	if m != nil {
		return m.Platform
	}
	return Sar_UNKNOWN_PLATFORM
}

// *
// message for electro optical details of stac items.
type Eo struct {
	// epsg code for the spatial reference of the data
	Epsg uint32 `protobuf:"varint,1,opt,name=epsg,proto3" json:"epsg,omitempty"`
	// platform from which the data was collected
	Platform Eo_Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=epl.protobuf.Eo_Platform" json:"platform,omitempty"`
	// instrument which collected the data
	Instrument Eo_Instrument `protobuf:"varint,3,opt,name=instrument,proto3,enum=epl.protobuf.Eo_Instrument" json:"instrument,omitempty"`
	// constellation of data collectors
	Constellation Eo_Constellation `protobuf:"varint,4,opt,name=constellation,proto3,enum=epl.protobuf.Eo_Constellation" json:"constellation,omitempty"`
	// sun azimuth (at point of sensor?)
	SunAzimuth *wrappers.FloatValue `protobuf:"bytes,5,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// sun elevation (at point of sensor?)
	SunElevation *wrappers.FloatValue `protobuf:"bytes,6,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	// ground sampling distance
	Gsd *wrappers.FloatValue `protobuf:"bytes,7,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// off nadir angle of data
	OffNadir *wrappers.FloatValue `protobuf:"bytes,8,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// azimuth of the collection platform when sensor collected data (top of image in direction of azimuth)
	Azimuth *wrappers.FloatValue `protobuf:"bytes,9,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// percent cloud cover. 0 no clouds, 100 completely covered
	CloudCover *wrappers.FloatValue `protobuf:"bytes,10,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// bands of data
	Bands Eo_Band `protobuf:"varint,11,opt,name=bands,proto3,enum=epl.protobuf.Eo_Band" json:"bands,omitempty"`
	// spatial reference. if the data is stored with a custom projection (epsg should be removed and use sr instead)
	Sr                   *SpatialReferenceData `protobuf:"bytes,12,opt,name=sr,proto3" json:"sr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Eo) Reset()         { *m = Eo{} }
func (m *Eo) String() string { return proto.CompactTextString(m) }
func (*Eo) ProtoMessage()    {}
func (*Eo) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{7}
}
func (m *Eo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eo.Unmarshal(m, b)
}
func (m *Eo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eo.Marshal(b, m, deterministic)
}
func (dst *Eo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eo.Merge(dst, src)
}
func (m *Eo) XXX_Size() int {
	return xxx_messageInfo_Eo.Size(m)
}
func (m *Eo) XXX_DiscardUnknown() {
	xxx_messageInfo_Eo.DiscardUnknown(m)
}

var xxx_messageInfo_Eo proto.InternalMessageInfo

func (m *Eo) GetEpsg() uint32 {
	if m != nil {
		return m.Epsg
	}
	return 0
}

func (m *Eo) GetPlatform() Eo_Platform {
	if m != nil {
		return m.Platform
	}
	return Eo_UNKNOWN_PLATFORM
}

func (m *Eo) GetInstrument() Eo_Instrument {
	if m != nil {
		return m.Instrument
	}
	return Eo_UNKNOWN_INSTRUMENT
}

func (m *Eo) GetConstellation() Eo_Constellation {
	if m != nil {
		return m.Constellation
	}
	return Eo_UNKNOWN_CONSTELLATION
}

func (m *Eo) GetSunAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.SunAzimuth
	}
	return nil
}

func (m *Eo) GetSunElevation() *wrappers.FloatValue {
	if m != nil {
		return m.SunElevation
	}
	return nil
}

func (m *Eo) GetGsd() *wrappers.FloatValue {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *Eo) GetOffNadir() *wrappers.FloatValue {
	if m != nil {
		return m.OffNadir
	}
	return nil
}

func (m *Eo) GetAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.Azimuth
	}
	return nil
}

func (m *Eo) GetCloudCover() *wrappers.FloatValue {
	if m != nil {
		return m.CloudCover
	}
	return nil
}

func (m *Eo) GetBands() Eo_Band {
	if m != nil {
		return m.Bands
	}
	return Eo_UNKNOWN_BAND
}

func (m *Eo) GetSr() *SpatialReferenceData {
	if m != nil {
		return m.Sr
	}
	return nil
}

// *
// sub message request for specifying electro-optical details in stac request
type EoRequest struct {
	// epsg number of data
	Epsg int32 `protobuf:"varint,1,opt,name=epsg,proto3" json:"epsg,omitempty"`
	// only data from the platform specified
	Platform Eo_Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=epl.protobuf.Eo_Platform" json:"platform,omitempty"`
	// only data from the instrument specified
	Instrument Eo_Instrument `protobuf:"varint,3,opt,name=instrument,proto3,enum=epl.protobuf.Eo_Instrument" json:"instrument,omitempty"`
	// only data from the constellation specified
	Constellation Eo_Constellation `protobuf:"varint,4,opt,name=constellation,proto3,enum=epl.protobuf.Eo_Constellation" json:"constellation,omitempty"`
	// data with a sun_azimuth equal to or in the range specified in sun_azimuth
	SunAzimuth *FloatField `protobuf:"bytes,5,opt,name=sun_azimuth,json=sunAzimuth,proto3" json:"sun_azimuth,omitempty"`
	// data with a sun_elevation equal to or in the range specified in sun_elevation
	SunElevation *FloatField `protobuf:"bytes,6,opt,name=sun_elevation,json=sunElevation,proto3" json:"sun_elevation,omitempty"`
	// data with a gsd equal to or in the range specified in gsd
	Gsd *FloatField `protobuf:"bytes,7,opt,name=gsd,proto3" json:"gsd,omitempty"`
	// data with a off_nadir equal to or in the range specified in off_nadir
	OffNadir *FloatField `protobuf:"bytes,8,opt,name=off_nadir,json=offNadir,proto3" json:"off_nadir,omitempty"`
	// data with a azimuth equal to or in the range specified in azimuth
	Azimuth *FloatField `protobuf:"bytes,9,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// data with a cloud_cover equal to or in the range specified in cloud_cover
	CloudCover *FloatField `protobuf:"bytes,10,opt,name=cloud_cover,json=cloudCover,proto3" json:"cloud_cover,omitempty"`
	// data that possesses the bands specified in bands
	Bands                Eo_Band  `protobuf:"varint,11,opt,name=bands,proto3,enum=epl.protobuf.Eo_Band" json:"bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EoRequest) Reset()         { *m = EoRequest{} }
func (m *EoRequest) String() string { return proto.CompactTextString(m) }
func (*EoRequest) ProtoMessage()    {}
func (*EoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{8}
}
func (m *EoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EoRequest.Unmarshal(m, b)
}
func (m *EoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EoRequest.Marshal(b, m, deterministic)
}
func (dst *EoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EoRequest.Merge(dst, src)
}
func (m *EoRequest) XXX_Size() int {
	return xxx_messageInfo_EoRequest.Size(m)
}
func (m *EoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EoRequest proto.InternalMessageInfo

func (m *EoRequest) GetEpsg() int32 {
	if m != nil {
		return m.Epsg
	}
	return 0
}

func (m *EoRequest) GetPlatform() Eo_Platform {
	if m != nil {
		return m.Platform
	}
	return Eo_UNKNOWN_PLATFORM
}

func (m *EoRequest) GetInstrument() Eo_Instrument {
	if m != nil {
		return m.Instrument
	}
	return Eo_UNKNOWN_INSTRUMENT
}

func (m *EoRequest) GetConstellation() Eo_Constellation {
	if m != nil {
		return m.Constellation
	}
	return Eo_UNKNOWN_CONSTELLATION
}

func (m *EoRequest) GetSunAzimuth() *FloatField {
	if m != nil {
		return m.SunAzimuth
	}
	return nil
}

func (m *EoRequest) GetSunElevation() *FloatField {
	if m != nil {
		return m.SunElevation
	}
	return nil
}

func (m *EoRequest) GetGsd() *FloatField {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *EoRequest) GetOffNadir() *FloatField {
	if m != nil {
		return m.OffNadir
	}
	return nil
}

func (m *EoRequest) GetAzimuth() *FloatField {
	if m != nil {
		return m.Azimuth
	}
	return nil
}

func (m *EoRequest) GetCloudCover() *FloatField {
	if m != nil {
		return m.CloudCover
	}
	return nil
}

func (m *EoRequest) GetBands() Eo_Band {
	if m != nil {
		return m.Bands
	}
	return Eo_UNKNOWN_BAND
}

type Landsat struct {
	// id of scene should be id of stac item, but there may be a use case where someone does not want that
	SceneId              string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId            string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel      Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath              int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow               int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand       *wrappers.FloatValue    `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Landsat) Reset()         { *m = Landsat{} }
func (m *Landsat) String() string { return proto.CompactTextString(m) }
func (*Landsat) ProtoMessage()    {}
func (*Landsat) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{9}
}
func (m *Landsat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Landsat.Unmarshal(m, b)
}
func (m *Landsat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Landsat.Marshal(b, m, deterministic)
}
func (dst *Landsat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Landsat.Merge(dst, src)
}
func (m *Landsat) XXX_Size() int {
	return xxx_messageInfo_Landsat.Size(m)
}
func (m *Landsat) XXX_DiscardUnknown() {
	xxx_messageInfo_Landsat.DiscardUnknown(m)
}

var xxx_messageInfo_Landsat proto.InternalMessageInfo

func (m *Landsat) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *Landsat) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Landsat) GetProcessingLevel() Landsat_ProcessingLevel {
	if m != nil {
		return m.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (m *Landsat) GetWrsPath() int32 {
	if m != nil {
		return m.WrsPath
	}
	return 0
}

func (m *Landsat) GetWrsRow() int32 {
	if m != nil {
		return m.WrsRow
	}
	return 0
}

func (m *Landsat) GetCloudCoverLand() *wrappers.FloatValue {
	if m != nil {
		return m.CloudCoverLand
	}
	return nil
}

type LandsatRequest struct {
	SceneId              string                  `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	ProductId            string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProcessingLevel      Landsat_ProcessingLevel `protobuf:"varint,3,opt,name=processing_level,json=processingLevel,proto3,enum=epl.protobuf.Landsat_ProcessingLevel" json:"processing_level,omitempty"`
	WrsPath              int32                   `protobuf:"varint,4,opt,name=wrs_path,json=wrsPath,proto3" json:"wrs_path,omitempty"`
	WrsRow               int32                   `protobuf:"varint,5,opt,name=wrs_row,json=wrsRow,proto3" json:"wrs_row,omitempty"`
	CloudCoverLand       *FloatField             `protobuf:"bytes,6,opt,name=cloud_cover_land,json=cloudCoverLand,proto3" json:"cloud_cover_land,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LandsatRequest) Reset()         { *m = LandsatRequest{} }
func (m *LandsatRequest) String() string { return proto.CompactTextString(m) }
func (*LandsatRequest) ProtoMessage()    {}
func (*LandsatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_9aafe319e561e561, []int{10}
}
func (m *LandsatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LandsatRequest.Unmarshal(m, b)
}
func (m *LandsatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LandsatRequest.Marshal(b, m, deterministic)
}
func (dst *LandsatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LandsatRequest.Merge(dst, src)
}
func (m *LandsatRequest) XXX_Size() int {
	return xxx_messageInfo_LandsatRequest.Size(m)
}
func (m *LandsatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LandsatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LandsatRequest proto.InternalMessageInfo

func (m *LandsatRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *LandsatRequest) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *LandsatRequest) GetProcessingLevel() Landsat_ProcessingLevel {
	if m != nil {
		return m.ProcessingLevel
	}
	return Landsat_UNKNOWN_PROCESSING_LEVEL
}

func (m *LandsatRequest) GetWrsPath() int32 {
	if m != nil {
		return m.WrsPath
	}
	return 0
}

func (m *LandsatRequest) GetWrsRow() int32 {
	if m != nil {
		return m.WrsRow
	}
	return 0
}

func (m *LandsatRequest) GetCloudCoverLand() *FloatField {
	if m != nil {
		return m.CloudCoverLand
	}
	return nil
}

func init() {
	proto.RegisterType((*StacItem)(nil), "epl.protobuf.StacItem")
	proto.RegisterMapType((map[string]*Asset)(nil), "epl.protobuf.StacItem.AssetsEntry")
	proto.RegisterType((*StacRequest)(nil), "epl.protobuf.StacRequest")
	proto.RegisterType((*BandDetails)(nil), "epl.protobuf.BandDetails")
	proto.RegisterType((*Asset)(nil), "epl.protobuf.Asset")
	proto.RegisterType((*Dtr)(nil), "epl.protobuf.Dtr")
	proto.RegisterType((*StacDbResponse)(nil), "epl.protobuf.StacDbResponse")
	proto.RegisterType((*Sar)(nil), "epl.protobuf.Sar")
	proto.RegisterType((*Eo)(nil), "epl.protobuf.Eo")
	proto.RegisterType((*EoRequest)(nil), "epl.protobuf.EoRequest")
	proto.RegisterType((*Landsat)(nil), "epl.protobuf.Landsat")
	proto.RegisterType((*LandsatRequest)(nil), "epl.protobuf.LandsatRequest")
	proto.RegisterEnum("epl.protobuf.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("epl.protobuf.CloudPlatform", CloudPlatform_name, CloudPlatform_value)
	proto.RegisterEnum("epl.protobuf.Sar_Platform", Sar_Platform_name, Sar_Platform_value)
	proto.RegisterEnum("epl.protobuf.Sar_Instrument", Sar_Instrument_name, Sar_Instrument_value)
	proto.RegisterEnum("epl.protobuf.Eo_Platform", Eo_Platform_name, Eo_Platform_value)
	proto.RegisterEnum("epl.protobuf.Eo_Instrument", Eo_Instrument_name, Eo_Instrument_value)
	proto.RegisterEnum("epl.protobuf.Eo_Constellation", Eo_Constellation_name, Eo_Constellation_value)
	proto.RegisterEnum("epl.protobuf.Eo_Band", Eo_Band_name, Eo_Band_value)
	proto.RegisterEnum("epl.protobuf.Landsat_ProcessingLevel", Landsat_ProcessingLevel_name, Landsat_ProcessingLevel_value)
}

func init() { proto.RegisterFile("epl/protobuf/stac.proto", fileDescriptor_stac_9aafe319e561e561) }

var fileDescriptor_stac_9aafe319e561e561 = []byte{
	// 2124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x0e, 0x41, 0x52, 0x24, 0x0f, 0x45, 0x6a, 0xbd, 0x71, 0x62, 0x5a, 0x4e, 0x1c, 0x95, 0x69,
	0xa6, 0xae, 0xd3, 0xe8, 0xcf, 0x76, 0xa2, 0xb8, 0x69, 0xc7, 0x94, 0x04, 0x49, 0x70, 0x49, 0x90,
	0xb3, 0x80, 0x24, 0x4f, 0x6e, 0x30, 0x2b, 0x60, 0x49, 0x31, 0x01, 0x01, 0x04, 0x58, 0x4a, 0x56,
	0xaf, 0x74, 0xdb, 0xfb, 0x3e, 0x41, 0xfb, 0x0c, 0xbd, 0xe8, 0x23, 0xf4, 0xb6, 0x4f, 0xd0, 0xe9,
	0x1b, 0xf4, 0xbe, 0x9d, 0xe9, 0xec, 0xe2, 0x47, 0xa0, 0xfe, 0xac, 0xf1, 0x5d, 0xae, 0xb4, 0xe7,
	0xec, 0xf7, 0xed, 0x1e, 0x9e, 0x3d, 0xe7, 0xdb, 0x85, 0xe0, 0x01, 0x0b, 0xdc, 0x95, 0x20, 0xf4,
	0xb9, 0x7f, 0x34, 0x1d, 0xae, 0x44, 0x9c, 0xda, 0xcb, 0xd2, 0xc2, 0xf3, 0x2c, 0x70, 0x97, 0xd3,
	0x89, 0xc5, 0xcf, 0x46, 0xbe, 0x3f, 0x72, 0xd9, 0x05, 0x92, 0x8f, 0x27, 0x2c, 0xe2, 0x74, 0x12,
	0xc4, 0x98, 0xc5, 0xc7, 0x97, 0x01, 0xa7, 0x21, 0x0d, 0x02, 0x16, 0x46, 0xc9, 0xfc, 0xc3, 0xcb,
	0xf3, 0xd4, 0x3b, 0x4b, 0xa6, 0x1e, 0xcd, 0x84, 0x30, 0x62, 0xfe, 0x84, 0xf1, 0x30, 0x9d, 0x6c,
	0xcd, 0x4c, 0xfe, 0x34, 0x65, 0xe9, 0x4c, 0xfb, 0x7f, 0x65, 0xa8, 0x1a, 0x9c, 0xda, 0x1a, 0x67,
	0x13, 0xdc, 0x04, 0x65, 0xec, 0xb4, 0x0a, 0x4b, 0x85, 0x27, 0x35, 0xa2, 0x8c, 0x1d, 0xfc, 0x35,
	0x54, 0xd3, 0x85, 0x5a, 0xc5, 0xa5, 0xc2, 0x93, 0xfa, 0xfa, 0xe2, 0x72, 0xfe, 0x07, 0x2d, 0xef,
	0x26, 0xb3, 0xdb, 0x94, 0x53, 0x92, 0x61, 0xf1, 0x32, 0x94, 0x8e, 0x8e, 0xfc, 0xb7, 0xad, 0xd2,
	0x75, 0x1c, 0xd5, 0x3b, 0x61, 0xae, 0x1f, 0x30, 0xc9, 0x91, 0x38, 0xfc, 0x1c, 0x20, 0x08, 0xfd,
	0x80, 0x85, 0x7c, 0xcc, 0xa2, 0x56, 0x59, 0xb2, 0xee, 0x2f, 0xc7, 0xbf, 0xf5, 0x82, 0xd8, 0xf1,
	0xce, 0x48, 0x0e, 0x87, 0x5f, 0xc2, 0x1c, 0x8d, 0x22, 0xc6, 0xa3, 0x56, 0x65, 0xa9, 0xf8, 0xa4,
	0xbe, 0xde, 0x9e, 0xdd, 0x27, 0xfd, 0x55, 0xcb, 0x1d, 0x09, 0x52, 0x3d, 0x1e, 0x9e, 0x91, 0x84,
	0x21, 0x7e, 0x99, 0x43, 0x39, 0x13, 0xf9, 0x6f, 0x55, 0x93, 0x28, 0x2f, 0xef, 0x67, 0xa6, 0x87,
	0x43, 0x32, 0x2c, 0xbe, 0x0f, 0x65, 0x3e, 0xe6, 0x2e, 0x6b, 0xd5, 0x64, 0x92, 0x62, 0x03, 0x3f,
	0x06, 0xb0, 0x7d, 0xd7, 0x65, 0x36, 0x1f, 0xfb, 0x5e, 0x0b, 0xe4, 0x54, 0xce, 0x23, 0x76, 0xf3,
	0x8f, 0x22, 0x16, 0x9e, 0x30, 0xa7, 0x55, 0x7f, 0xf7, 0x6e, 0x29, 0x16, 0x6f, 0x40, 0x2d, 0x08,
	0x7d, 0x9b, 0x45, 0x11, 0x73, 0x5a, 0xf3, 0xef, 0x24, 0x5e, 0x80, 0xf1, 0x73, 0xa8, 0x4c, 0x03,
	0x11, 0xb5, 0xd3, 0x6a, 0xbc, 0x93, 0x97, 0x42, 0xf1, 0x12, 0x28, 0xcc, 0x6f, 0x35, 0x25, 0x01,
	0x5d, 0x3a, 0x35, 0x9f, 0x28, 0xcc, 0xc7, 0x9f, 0x43, 0x31, 0xa2, 0x61, 0x6b, 0x41, 0x42, 0xee,
	0x5d, 0x4a, 0x38, 0x0d, 0x89, 0x98, 0x15, 0x20, 0x87, 0x87, 0x2d, 0x74, 0x1d, 0x68, 0x9b, 0x87,
	0x44, 0xcc, 0xe2, 0x15, 0xa8, 0xb8, 0xd4, 0x73, 0x22, 0xca, 0x5b, 0xf7, 0x24, 0xf0, 0xa3, 0x59,
	0x60, 0x37, 0x9e, 0x24, 0x29, 0x6a, 0x51, 0x87, 0x7a, 0xee, 0x24, 0x31, 0x82, 0xe2, 0x8f, 0xec,
	0x2c, 0x29, 0x56, 0x31, 0xc4, 0xbf, 0x86, 0xf2, 0x09, 0x75, 0xa7, 0xac, 0xa5, 0xc8, 0xf5, 0x3e,
	0x9c, 0x5d, 0x4f, 0x72, 0x49, 0x8c, 0x78, 0xa9, 0x6c, 0x14, 0x5e, 0x97, 0xaa, 0x73, 0xa8, 0xd2,
	0xfe, 0x6f, 0x09, 0xea, 0xa2, 0x52, 0x08, 0xfb, 0x69, 0xca, 0x22, 0x7e, 0x6b, 0x0b, 0x28, 0xef,
	0xd1, 0x02, 0xc5, 0x3b, 0xb6, 0xc0, 0x1e, 0xa0, 0x94, 0x6b, 0x85, 0x71, 0x2c, 0x49, 0xfb, 0x7c,
	0x7a, 0xfd, 0x7e, 0x49, 0xc0, 0x64, 0x61, 0x34, 0xeb, 0x78, 0xcf, 0x66, 0xda, 0xc8, 0x35, 0xc4,
	0x9c, 0xe4, 0x7c, 0x32, 0xbb, 0x6f, 0x56, 0x2e, 0x3b, 0x63, 0xe6, 0x3a, 0xb9, 0x96, 0xd8, 0xc8,
	0x15, 0x77, 0xe5, 0x2e, 0xcc, 0xac, 0xbc, 0x5f, 0xe6, 0xcb, 0xbb, 0x7a, 0x07, 0x6a, 0xae, 0xc0,
	0xbf, 0xbe, 0x28, 0xf0, 0xda, 0x1d, 0x98, 0x59, 0x89, 0xff, 0x4a, 0x96, 0x38, 0x48, 0xca, 0x83,
	0x2b, 0x25, 0x9e, 0xe4, 0x54, 0x54, 0xfa, 0x7d, 0x28, 0xbb, 0xe3, 0xc9, 0x98, 0xcb, 0x86, 0x6d,
	0x90, 0xd8, 0xc0, 0x1f, 0xc3, 0x9c, 0x3f, 0x1c, 0x46, 0x8c, 0xcb, 0x76, 0x2c, 0x91, 0xc4, 0x12,
	0xe1, 0xa4, 0xd5, 0xdc, 0xb8, 0x2e, 0x9c, 0xb4, 0x9a, 0x93, 0x0d, 0x52, 0x70, 0xfb, 0xdf, 0x0a,
	0xd4, 0x37, 0xa9, 0xe7, 0x6c, 0x33, 0x4e, 0xc7, 0x6e, 0x84, 0x31, 0x94, 0x3c, 0x3a, 0x61, 0x49,
	0x01, 0xca, 0x31, 0xfe, 0x0c, 0xea, 0xb6, 0x3f, 0x99, 0xf8, 0x9e, 0x25, 0xa7, 0x94, 0x54, 0x5e,
	0x84, 0x4b, 0x17, 0x80, 0x25, 0xa8, 0x3b, 0x2c, 0xb2, 0xc3, 0x71, 0x20, 0xf5, 0xa7, 0x28, 0x01,
	0x79, 0x17, 0xfe, 0x0a, 0x8a, 0xa3, 0xc8, 0x49, 0x0a, 0xea, 0xd1, 0x95, 0x62, 0xd8, 0x71, 0x7d,
	0xca, 0x0f, 0x44, 0x67, 0x10, 0x81, 0xc3, 0xdf, 0x40, 0x95, 0xda, 0xf6, 0x34, 0xa4, 0xf6, 0x59,
	0x52, 0x40, 0xb7, 0x72, 0x32, 0x30, 0xde, 0x83, 0x7b, 0x36, 0xf3, 0x38, 0x0b, 0xad, 0x53, 0x7a,
	0xc2, 0x5c, 0xe6, 0x8d, 0xf8, 0x71, 0x52, 0x4e, 0xb7, 0xae, 0x80, 0x62, 0xd6, 0x61, 0x46, 0xc2,
	0xaf, 0xe1, 0xc3, 0xe1, 0xd4, 0x75, 0xad, 0xd3, 0xb1, 0xc3, 0x8f, 0xad, 0x63, 0xea, 0x0e, 0xad,
	0x09, 0x7d, 0x9b, 0x14, 0xd8, 0xed, 0x6b, 0x09, 0xde, 0xa1, 0xa0, 0xed, 0x51, 0x77, 0xd8, 0xa3,
	0x6f, 0xdb, 0x7f, 0x2a, 0x42, 0x59, 0xb6, 0xbf, 0x48, 0xef, 0x71, 0xc8, 0x86, 0x69, 0x7a, 0xc5,
	0x58, 0xf8, 0xf8, 0x59, 0x90, 0xe6, 0x55, 0x8e, 0xf1, 0x2a, 0x54, 0x99, 0x6f, 0x1d, 0x89, 0x43,
	0x92, 0xe9, 0x6c, 0x5e, 0x56, 0x27, 0xd5, 0x5f, 0x16, 0xc7, 0x46, 0x2a, 0xcc, 0x17, 0x7f, 0xc5,
	0x85, 0x02, 0xf2, 0x6a, 0xb1, 0xe4, 0x5a, 0x25, 0xc9, 0x79, 0x70, 0x8d, 0x02, 0x99, 0x67, 0x01,
	0x23, 0x35, 0x9a, 0x0e, 0xf1, 0x26, 0x34, 0x6d, 0xd7, 0x9f, 0x3a, 0x56, 0xe0, 0x52, 0x3e, 0xf4,
	0xc3, 0x89, 0x4c, 0x78, 0x73, 0xfd, 0xd1, 0x2c, 0x77, 0x4b, 0x60, 0x06, 0x09, 0x84, 0x34, 0xec,
	0xbc, 0x89, 0xbf, 0x80, 0xe6, 0xd1, 0xd4, 0xfe, 0x91, 0x71, 0x6b, 0x42, 0x3d, 0x3a, 0x62, 0xa1,
	0x4c, 0x79, 0x8d, 0x34, 0x62, 0x6f, 0x2f, 0x76, 0xe2, 0xcf, 0x21, 0x71, 0x58, 0x21, 0x1b, 0x89,
	0x42, 0xa9, 0x48, 0xd4, 0x7c, 0xec, 0x24, 0xd2, 0x27, 0x0a, 0x3c, 0xb6, 0x65, 0x43, 0xd6, 0x48,
	0x62, 0x89, 0x22, 0xf4, 0x8f, 0x7e, 0x60, 0x36, 0xb7, 0x02, 0xca, 0x8f, 0x93, 0xeb, 0x0f, 0x62,
	0xd7, 0x80, 0xf2, 0x63, 0x11, 0x44, 0xa2, 0x5b, 0x2c, 0xb4, 0x02, 0x7a, 0x16, 0xc9, 0x26, 0xab,
	0x92, 0x46, 0xe6, 0x1d, 0xd0, 0xb3, 0xa8, 0xcd, 0xa0, 0xb8, 0xcd, 0x43, 0xbc, 0x0a, 0xe5, 0x88,
	0xd3, 0x90, 0xcb, 0x93, 0xb8, 0xfd, 0x76, 0x8a, 0x81, 0xf8, 0x37, 0x50, 0x64, 0x9e, 0x93, 0x69,
	0xf0, 0xcd, 0x78, 0x01, 0x6b, 0x1f, 0x41, 0x53, 0xa8, 0xfa, 0xf6, 0x11, 0x61, 0x51, 0xe0, 0x7b,
	0x11, 0x13, 0x3f, 0x2c, 0xe2, 0x94, 0x4f, 0xa3, 0xe4, 0xf0, 0x13, 0x4b, 0xfc, 0xb0, 0x78, 0x64,
	0xd9, 0xbe, 0x13, 0x57, 0x41, 0x99, 0x40, 0xec, 0xda, 0xf2, 0x1d, 0x86, 0x1f, 0x40, 0xc5, 0xa1,
	0x9c, 0x5a, 0x63, 0x27, 0xe9, 0xac, 0x39, 0x61, 0x6a, 0x4e, 0xfb, 0xaf, 0x05, 0x28, 0x1a, 0x34,
	0x14, 0x57, 0x44, 0x76, 0x78, 0x05, 0x79, 0x78, 0x8b, 0x57, 0x2e, 0xc6, 0xe5, 0xec, 0xec, 0x32,
	0x6c, 0xfb, 0xf7, 0x50, 0xcd, 0x8e, 0xf0, 0x3e, 0xa0, 0x7d, 0xfd, 0x0f, 0x7a, 0xff, 0x50, 0xb7,
	0x06, 0xdd, 0x8e, 0xb9, 0xd3, 0x27, 0x3d, 0xf4, 0x01, 0xae, 0x43, 0x45, 0xd5, 0x0f, 0x34, 0xa3,
	0x63, 0xa2, 0x02, 0x5e, 0x80, 0xba, 0xa1, 0xea, 0xa6, 0xa6, 0xab, 0x5d, 0x6b, 0xad, 0x83, 0x94,
	0xf6, 0x2f, 0x01, 0x34, 0x2f, 0xe2, 0xe1, 0x74, 0xc2, 0x3c, 0xa1, 0x4c, 0x38, 0x5d, 0x41, 0xd3,
	0x0d, 0x93, 0xec, 0xf7, 0x54, 0xdd, 0x44, 0x1f, 0xb4, 0xff, 0x51, 0x03, 0x45, 0xf5, 0x45, 0x95,
	0xb3, 0x20, 0x1a, 0xc9, 0x00, 0x1b, 0x44, 0x8e, 0xf1, 0x8b, 0x5c, 0xe0, 0x8a, 0x0c, 0xfc, 0xe1,
	0x95, 0x2a, 0xbf, 0x1a, 0x37, 0xfe, 0x2d, 0xc0, 0x38, 0xdb, 0x37, 0x69, 0x8f, 0x47, 0x57, 0x88,
	0x17, 0xa1, 0x91, 0x1c, 0x1c, 0x6f, 0x43, 0xc3, 0xf6, 0xbd, 0x88, 0x33, 0xd7, 0xa5, 0x52, 0xad,
	0xe2, 0x56, 0x79, 0x7c, 0x85, 0xbf, 0x95, 0x47, 0x91, 0x59, 0x12, 0xfe, 0x0e, 0xea, 0xd1, 0xd4,
	0xb3, 0xe8, 0x1f, 0xc7, 0x93, 0x29, 0x3f, 0xbe, 0x8b, 0x46, 0x41, 0x34, 0xf5, 0x3a, 0x31, 0x1c,
	0xbf, 0x82, 0x86, 0x60, 0x33, 0x97, 0x9d, 0xc4, 0x31, 0xdc, 0x41, 0xa1, 0xe6, 0xa3, 0xa9, 0xa7,
	0xa6, 0x84, 0x54, 0x4f, 0x2b, 0x77, 0xd4, 0xd3, 0x0d, 0xa8, 0xf9, 0xc3, 0xa1, 0xe5, 0x51, 0x67,
	0x1c, 0x26, 0x17, 0xdd, 0xed, 0x82, 0xea, 0x0f, 0x87, 0xba, 0x00, 0xe3, 0x17, 0x50, 0x49, 0x7f,
	0x64, 0xed, 0xdd, 0xbc, 0x14, 0x2b, 0xf2, 0x13, 0xab, 0x8a, 0xed, 0x9f, 0xb0, 0x30, 0xb9, 0xee,
	0x6e, 0xcf, 0x8f, 0xc4, 0x6f, 0x09, 0x38, 0xfe, 0x12, 0xca, 0xb1, 0xf4, 0xd5, 0x6f, 0x93, 0xbe,
	0x18, 0x83, 0xd7, 0x41, 0x89, 0xc2, 0xe4, 0x71, 0x7a, 0xf9, 0x05, 0x1e, 0x50, 0x3e, 0xa6, 0x2e,
	0x61, 0x43, 0x16, 0x32, 0xcf, 0x8e, 0x9f, 0x3b, 0x4a, 0x14, 0xb6, 0xff, 0x5e, 0x78, 0x67, 0xe9,
	0x37, 0xa0, 0xd6, 0xed, 0xe8, 0xdb, 0x46, 0xc7, 0xb4, 0xd6, 0x90, 0x92, 0x37, 0xd7, 0x51, 0x29,
	0x6f, 0x3e, 0x43, 0x55, 0xd1, 0x1a, 0x19, 0x78, 0xfd, 0x19, 0x6a, 0xe6, 0xe7, 0x9f, 0x23, 0x94,
	0x37, 0x5f, 0xa0, 0x25, 0xdc, 0x04, 0xc8, 0x66, 0x5f, 0xa0, 0xd5, 0xfc, 0xf4, 0x37, 0xe8, 0x15,
	0x6e, 0x5e, 0x98, 0x1b, 0xe8, 0xbc, 0x80, 0xe7, 0xa1, 0x62, 0x1c, 0x6a, 0x3b, 0x62, 0xe7, 0x73,
	0xa5, 0xfd, 0xc3, 0x5d, 0xba, 0x0e, 0x57, 0xa0, 0xd8, 0xef, 0x6a, 0x48, 0xc1, 0x55, 0x28, 0x99,
	0x1a, 0x31, 0x50, 0x09, 0xcf, 0x43, 0xb5, 0xdf, 0xd5, 0x2c, 0x69, 0xcd, 0xe1, 0x1a, 0x94, 0x07,
	0xfd, 0x9e, 0xb5, 0x86, 0xaa, 0x78, 0x0e, 0x14, 0xb3, 0x87, 0x90, 0xe0, 0xa8, 0x66, 0x0f, 0x2d,
	0x89, 0x41, 0xcf, 0x30, 0xd0, 0xab, 0xf6, 0x01, 0x34, 0x66, 0xda, 0x00, 0x3f, 0x84, 0x8f, 0xd2,
	0xed, 0xb6, 0xfa, 0xba, 0x61, 0xaa, 0xdd, 0x6e, 0xc7, 0xd4, 0xfa, 0x7a, 0xac, 0x15, 0x49, 0xd4,
	0xf1, 0xae, 0x7a, 0x47, 0x1b, 0xa0, 0x92, 0x18, 0x0d, 0xf4, 0x7e, 0x07, 0x55, 0xc5, 0x8e, 0xf2,
	0x67, 0x20, 0xd4, 0xfe, 0x5b, 0x01, 0x4a, 0xe2, 0x0c, 0x31, 0x82, 0xf9, 0x74, 0xbd, 0xcd, 0x8e,
	0xbe, 0x1d, 0x2f, 0xb3, 0xd5, 0xef, 0x18, 0x66, 0xa7, 0x1b, 0x2f, 0xb3, 0xd9, 0xdd, 0x57, 0x51,
	0x49, 0x90, 0x77, 0x89, 0xaa, 0xea, 0xa8, 0x2a, 0xa2, 0x23, 0xea, 0x76, 0x1c, 0x2f, 0xd9, 0xdd,
	0x44, 0x9f, 0x88, 0x81, 0xae, 0x11, 0xb4, 0x24, 0x50, 0xba, 0x46, 0xac, 0x75, 0xf4, 0x0b, 0x31,
	0x24, 0xbb, 0x9b, 0x1a, 0x41, 0xdf, 0x61, 0x80, 0x39, 0xe3, 0x50, 0x23, 0xd6, 0x1a, 0x7a, 0x85,
	0xeb, 0xc9, 0x78, 0x5d, 0x24, 0xb6, 0x0a, 0xc5, 0x41, 0x47, 0x47, 0xe7, 0x8a, 0x70, 0x6f, 0x69,
	0x84, 0xec, 0x1b, 0xe8, 0xbc, 0x24, 0x8c, 0x6e, 0x8c, 0x3f, 0xaf, 0x66, 0xc6, 0x3a, 0x3a, 0x47,
	0xed, 0x7f, 0x96, 0xa0, 0x96, 0xbd, 0xd2, 0x66, 0x24, 0xad, 0xfc, 0xb3, 0x97, 0xb4, 0x6f, 0xaf,
	0x93, 0xb4, 0xd6, 0xec, 0x1a, 0xb2, 0x5f, 0xe3, 0x07, 0x6d, 0x5e, 0xcf, 0x7e, 0x77, 0xbd, 0x9e,
	0xdd, 0x4c, 0x9e, 0x15, 0xb3, 0xa7, 0x79, 0x31, 0xbb, 0x99, 0x24, 0x95, 0xec, 0xc5, 0x55, 0x25,
	0xbb, 0x99, 0x71, 0x21, 0x63, 0xeb, 0x97, 0x65, 0xec, 0x66, 0x52, 0xa6, 0x61, 0xdf, 0x5e, 0xa7,
	0x61, 0xb7, 0x24, 0xe4, 0x3d, 0x05, 0xac, 0xfd, 0x1f, 0x05, 0x2a, 0xc9, 0xf3, 0x1c, 0x3f, 0x84,
	0x6a, 0x64, 0x33, 0x8f, 0x59, 0xd9, 0x37, 0x60, 0x45, 0xda, 0x9a, 0x83, 0x3f, 0x95, 0x9f, 0x55,
	0xce, 0xd4, 0xe6, 0x62, 0x32, 0x7e, 0x2c, 0xd6, 0x12, 0x8f, 0xe6, 0xe0, 0x01, 0xa0, 0xe4, 0xe3,
	0x64, 0xec, 0x8d, 0x2c, 0x97, 0x9d, 0x30, 0x37, 0xa9, 0xa3, 0x2f, 0xae, 0xfd, 0x12, 0x58, 0x1e,
	0x64, 0xe8, 0xae, 0x00, 0x93, 0x85, 0x60, 0xd6, 0x21, 0x62, 0x39, 0x0d, 0xa3, 0xf8, 0xb9, 0x55,
	0x92, 0x25, 0x5e, 0x39, 0x0d, 0x23, 0xf9, 0xd6, 0x7a, 0x00, 0x62, 0x68, 0x85, 0xfe, 0xa9, 0xac,
	0x93, 0x32, 0x99, 0x3b, 0x0d, 0x23, 0xe2, 0x9f, 0x62, 0x15, 0x50, 0x2e, 0x67, 0x96, 0xf8, 0xca,
	0xb8, 0xcb, 0xe5, 0xd6, 0xbc, 0xc8, 0x9d, 0x08, 0xaf, 0x6d, 0xc1, 0xc2, 0xa5, 0xf0, 0xf0, 0x27,
	0xd0, 0xca, 0x54, 0x9a, 0xf4, 0xb7, 0x54, 0xc3, 0xd0, 0xf4, 0x5d, 0xab, 0xab, 0x1e, 0xa8, 0xdd,
	0x58, 0xee, 0xba, 0x6b, 0xbb, 0x48, 0xb4, 0x74, 0xa9, 0xbb, 0x66, 0x0e, 0x90, 0x12, 0xbb, 0x4c,
	0x54, 0x8c, 0x5d, 0xbb, 0x66, 0xac, 0x45, 0xdd, 0xb5, 0x5d, 0x03, 0x95, 0xdb, 0x7f, 0x56, 0xa0,
	0x39, 0xfb, 0x49, 0xf4, 0xb3, 0x4f, 0xfd, 0xe6, 0x8d, 0xa9, 0xbf, 0xb9, 0x66, 0x2f, 0xe5, 0xfd,
	0xe9, 0xbf, 0x0a, 0x50, 0xcb, 0xbe, 0x12, 0xf0, 0x3d, 0x68, 0xa4, 0x29, 0xef, 0x18, 0x86, 0x2a,
	0xae, 0x95, 0x2a, 0x94, 0x5e, 0x0f, 0x54, 0x91, 0xe8, 0x3a, 0x54, 0x76, 0xd5, 0xbe, 0xa9, 0xed,
	0xec, 0xc4, 0x3a, 0xdd, 0x55, 0xc9, 0x16, 0x2a, 0xca, 0xab, 0x83, 0xec, 0x20, 0x21, 0xa2, 0x95,
	0x1e, 0xd9, 0xb1, 0xb4, 0xed, 0x37, 0xa8, 0x9c, 0x1a, 0x6f, 0x7a, 0x5d, 0x34, 0x27, 0x6e, 0xbf,
	0xad, 0xbe, 0x95, 0x92, 0x2b, 0x52, 0xc6, 0x3b, 0x87, 0xa8, 0x2a, 0xae, 0x41, 0x73, 0x6f, 0xbf,
	0xb7, 0xa9, 0x77, 0xb4, 0x2e, 0xaa, 0xc5, 0x37, 0xd7, 0xce, 0x0e, 0x02, 0x31, 0x21, 0x76, 0xb5,
	0xd6, 0x57, 0x57, 0x57, 0x51, 0x5d, 0x10, 0xc4, 0x4a, 0xf3, 0x62, 0x60, 0xbe, 0x31, 0x51, 0x43,
	0x0c, 0x06, 0xfa, 0x2e, 0x6a, 0xca, 0x3b, 0xee, 0x40, 0x25, 0x07, 0x9a, 0x7a, 0x88, 0x16, 0x64,
	0xb4, 0x46, 0x5f, 0x47, 0x48, 0x8c, 0xf6, 0xcc, 0x5e, 0x17, 0xdd, 0x7b, 0xba, 0x07, 0x8d, 0x99,
	0x6f, 0x19, 0xbc, 0x08, 0x1f, 0x67, 0x57, 0x5a, 0xb7, 0xbf, 0xbf, 0x9d, 0x7f, 0x04, 0x54, 0xa0,
	0xd8, 0x39, 0x34, 0x50, 0x41, 0x0c, 0x76, 0xb7, 0x44, 0x55, 0xd5, 0xa0, 0xdc, 0xf9, 0x7e, 0x9f,
	0xa8, 0xa8, 0xb8, 0x69, 0x00, 0xb2, 0xfd, 0xc9, 0x4c, 0x6e, 0x37, 0x6b, 0xe2, 0xd1, 0x3f, 0x10,
	0xd6, 0xa0, 0xf0, 0xfd, 0x97, 0xa3, 0x31, 0x3f, 0x9e, 0x1e, 0x2d, 0xdb, 0xfe, 0x64, 0x65, 0xc4,
	0xfc, 0xaf, 0x46, 0x61, 0x60, 0xaf, 0xd0, 0x60, 0xbc, 0x32, 0xf2, 0x5d, 0xea, 0x8d, 0x56, 0xf2,
	0xff, 0x13, 0xfd, 0x8b, 0x52, 0x32, 0xcc, 0xc1, 0xe6, 0xd1, 0x9c, 0x74, 0x3c, 0xfb, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x78, 0x4f, 0x68, 0x11, 0xd1, 0x15, 0x00, 0x00,
}
