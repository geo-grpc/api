// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/stac_service.proto

package protobuf // import "github.com/geo-grpc/api/golang/epl/protobuf"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StacServiceClient is the client API for StacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StacServiceClient interface {
	Search(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchClient, error)
	Insert(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateClient, error)
	DeleteOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	SearchOne(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error)
	InsertOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
	UpdateOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error)
}

type stacServiceClient struct {
	cc *grpc.ClientConn
}

func NewStacServiceClient(cc *grpc.ClientConn) StacServiceClient {
	return &stacServiceClient{cc}
}

func (c *stacServiceClient) Search(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (StacService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[0], "/epl.protobuf.StacService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StacService_SearchClient interface {
	Recv() (*StacItem, error)
	grpc.ClientStream
}

type stacServiceSearchClient struct {
	grpc.ClientStream
}

func (x *stacServiceSearchClient) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) Insert(ctx context.Context, opts ...grpc.CallOption) (StacService_InsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[1], "/epl.protobuf.StacService/Insert", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceInsertClient{stream}
	return x, nil
}

type StacService_InsertClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceInsertClient struct {
	grpc.ClientStream
}

func (x *stacServiceInsertClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceInsertClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (StacService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StacService_serviceDesc.Streams[2], "/epl.protobuf.StacService/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &stacServiceUpdateClient{stream}
	return x, nil
}

type StacService_UpdateClient interface {
	Send(*StacItem) error
	Recv() (*StacDbResponse, error)
	grpc.ClientStream
}

type stacServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *stacServiceUpdateClient) Send(m *StacItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stacServiceUpdateClient) Recv() (*StacDbResponse, error) {
	m := new(StacDbResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stacServiceClient) DeleteOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.StacService/DeleteOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) SearchOne(ctx context.Context, in *StacRequest, opts ...grpc.CallOption) (*StacItem, error) {
	out := new(StacItem)
	err := c.cc.Invoke(ctx, "/epl.protobuf.StacService/SearchOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) InsertOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.StacService/InsertOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stacServiceClient) UpdateOne(ctx context.Context, in *StacItem, opts ...grpc.CallOption) (*StacDbResponse, error) {
	out := new(StacDbResponse)
	err := c.cc.Invoke(ctx, "/epl.protobuf.StacService/UpdateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StacServiceServer is the server API for StacService service.
type StacServiceServer interface {
	Search(*StacRequest, StacService_SearchServer) error
	Insert(StacService_InsertServer) error
	Update(StacService_UpdateServer) error
	DeleteOne(context.Context, *StacItem) (*StacDbResponse, error)
	SearchOne(context.Context, *StacRequest) (*StacItem, error)
	InsertOne(context.Context, *StacItem) (*StacDbResponse, error)
	UpdateOne(context.Context, *StacItem) (*StacDbResponse, error)
}

func RegisterStacServiceServer(s *grpc.Server, srv StacServiceServer) {
	s.RegisterService(&_StacService_serviceDesc, srv)
}

func _StacService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StacRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StacServiceServer).Search(m, &stacServiceSearchServer{stream})
}

type StacService_SearchServer interface {
	Send(*StacItem) error
	grpc.ServerStream
}

type stacServiceSearchServer struct {
	grpc.ServerStream
}

func (x *stacServiceSearchServer) Send(m *StacItem) error {
	return x.ServerStream.SendMsg(m)
}

func _StacService_Insert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).Insert(&stacServiceInsertServer{stream})
}

type StacService_InsertServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceInsertServer struct {
	grpc.ServerStream
}

func (x *stacServiceInsertServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceInsertServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StacServiceServer).Update(&stacServiceUpdateServer{stream})
}

type StacService_UpdateServer interface {
	Send(*StacDbResponse) error
	Recv() (*StacItem, error)
	grpc.ServerStream
}

type stacServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *stacServiceUpdateServer) Send(m *StacDbResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stacServiceUpdateServer) Recv() (*StacItem, error) {
	m := new(StacItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StacService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.StacService/DeleteOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).DeleteOne(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_SearchOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).SearchOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.StacService/SearchOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).SearchOne(ctx, req.(*StacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.StacService/InsertOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).InsertOne(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StacService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StacServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.protobuf.StacService/UpdateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StacServiceServer).UpdateOne(ctx, req.(*StacItem))
	}
	return interceptor(ctx, in, info, handler)
}

var _StacService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.protobuf.StacService",
	HandlerType: (*StacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOne",
			Handler:    _StacService_DeleteOne_Handler,
		},
		{
			MethodName: "SearchOne",
			Handler:    _StacService_SearchOne_Handler,
		},
		{
			MethodName: "InsertOne",
			Handler:    _StacService_InsertOne_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _StacService_UpdateOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _StacService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Insert",
			Handler:       _StacService_Insert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _StacService_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/protobuf/stac_service.proto",
}

func init() {
	proto.RegisterFile("epl/protobuf/stac_service.proto", fileDescriptor_stac_service_c41e093f849751c9)
}

var fileDescriptor_stac_service_c41e093f849751c9 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x57, 0x07, 0x85, 0x46, 0x0f, 0x23, 0x07, 0xc5, 0x22, 0x08, 0x3b, 0x09, 0x62, 0x22,
	0xfa, 0x00, 0xca, 0xd6, 0xcb, 0x4e, 0x8e, 0x45, 0x0f, 0x7a, 0x91, 0x34, 0x7e, 0x66, 0x85, 0xb6,
	0x89, 0xc9, 0x57, 0x1f, 0xc8, 0xd7, 0xf3, 0x25, 0x24, 0x0b, 0x42, 0xa5, 0x78, 0x59, 0x8f, 0xf9,
	0x7f, 0xbf, 0xfc, 0xf8, 0xf8, 0x27, 0xe4, 0x1c, 0x6c, 0xcd, 0xad, 0x33, 0x68, 0xca, 0xee, 0x9d,
	0x7b, 0x94, 0xea, 0xd5, 0x83, 0xfb, 0xac, 0x14, 0xb0, 0x5d, 0x4a, 0x8f, 0xc0, 0xd6, 0xec, 0x17,
	0xc8, 0x4f, 0x06, 0x78, 0x9c, 0xdd, 0x7c, 0x4f, 0xc9, 0xa1, 0x40, 0xa9, 0x44, 0xbc, 0x4c, 0xef,
	0x48, 0x2a, 0x40, 0x3a, 0xb5, 0xa5, 0xa7, 0xac, 0x6f, 0x60, 0x01, 0xda, 0xc0, 0x47, 0x07, 0x1e,
	0xf3, 0xe3, 0xe1, 0x68, 0x85, 0xd0, 0xcc, 0x27, 0xd7, 0x09, 0x2d, 0x48, 0xba, 0x6a, 0x3d, 0x38,
	0xa4, 0xff, 0x50, 0xf9, 0xd9, 0x30, 0x2f, 0xca, 0x0d, 0x78, 0x6b, 0x5a, 0x0f, 0xf3, 0xc9, 0x45,
	0x12, 0x2d, 0x4f, 0xf6, 0x4d, 0x22, 0x8c, 0xb2, 0x2c, 0x49, 0x56, 0x40, 0x0d, 0x08, 0x0f, 0xed,
	0xde, 0x22, 0x7a, 0x4f, 0xb2, 0xd8, 0x48, 0x90, 0xec, 0x53, 0x4a, 0x58, 0x23, 0x56, 0x32, 0x66,
	0x8d, 0x25, 0xc9, 0x62, 0x23, 0x23, 0x24, 0x8b, 0x67, 0x32, 0x53, 0xa6, 0xf9, 0x03, 0x2d, 0x66,
	0xbd, 0xe7, 0x5f, 0x87, 0x70, 0x9d, 0xbc, 0x5c, 0xea, 0x0a, 0xb7, 0x5d, 0xc9, 0x94, 0x69, 0xb8,
	0x06, 0x73, 0xa5, 0x9d, 0x55, 0x5c, 0xda, 0x8a, 0x6b, 0x53, 0xcb, 0x56, 0xf3, 0xfe, 0x6f, 0xfa,
	0x3a, 0x98, 0x8a, 0x47, 0x51, 0xa6, 0xbb, 0xf3, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1,
	0xc0, 0x8a, 0x06, 0x99, 0x02, 0x00, 0x00,
}
