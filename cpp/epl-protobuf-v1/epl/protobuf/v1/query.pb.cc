// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/query.proto

#include "epl/protobuf/v1/query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace epl {
namespace protobuf {
namespace v1 {
constexpr FloatFilter::FloatFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_()
  , _set_cached_byte_size_()
  , rel_type_(0)

  , end_(0)
  , sort_direction_(0)

  , _oneof_case_{}{}
struct FloatFilterDefaultTypeInternal {
  constexpr FloatFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatFilterDefaultTypeInternal() {}
  union {
    FloatFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatFilterDefaultTypeInternal _FloatFilter_default_instance_;
constexpr DoubleFilter::DoubleFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_()
  , _set_cached_byte_size_()
  , rel_type_(0)

  , sort_direction_(0)

  , end_(0)
  , _oneof_case_{}{}
struct DoubleFilterDefaultTypeInternal {
  constexpr DoubleFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleFilterDefaultTypeInternal() {}
  union {
    DoubleFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleFilterDefaultTypeInternal _DoubleFilter_default_instance_;
constexpr TimestampFilter::TimestampFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : end_(nullptr)
  , rel_type_(0)

  , sort_direction_(0)

  , _oneof_case_{}{}
struct TimestampFilterDefaultTypeInternal {
  constexpr TimestampFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampFilterDefaultTypeInternal() {}
  union {
    TimestampFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampFilterDefaultTypeInternal _TimestampFilter_default_instance_;
constexpr UInt32Filter::UInt32Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_()
  , _set_cached_byte_size_()
  , rel_type_(0)

  , end_(0u)
  , sort_direction_(0)

  , _oneof_case_{}{}
struct UInt32FilterDefaultTypeInternal {
  constexpr UInt32FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UInt32FilterDefaultTypeInternal() {}
  union {
    UInt32Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UInt32FilterDefaultTypeInternal _UInt32Filter_default_instance_;
constexpr StringFilter::StringFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_()
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rel_type_(0)
{}
struct StringFilterDefaultTypeInternal {
  constexpr StringFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringFilterDefaultTypeInternal() {}
  union {
    StringFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringFilterDefaultTypeInternal _StringFilter_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_epl_2fprotobuf_2fv1_2fquery_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, rel_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, end_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, sort_direction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, set_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FloatFilter, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, rel_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, end_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, sort_direction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, set_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DoubleFilter, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, rel_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, end_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, sort_direction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::TimestampFilter, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, rel_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, end_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, sort_direction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, set_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::UInt32Filter, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StringFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StringFilter, value_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StringFilter, rel_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StringFilter, set_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::epl::protobuf::v1::FloatFilter)},
  { 12, -1, sizeof(::epl::protobuf::v1::DoubleFilter)},
  { 24, -1, sizeof(::epl::protobuf::v1::TimestampFilter)},
  { 35, -1, sizeof(::epl::protobuf::v1::UInt32Filter)},
  { 47, -1, sizeof(::epl::protobuf::v1::StringFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_FloatFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_DoubleFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_TimestampFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_UInt32Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_StringFilter_default_instance_),
};

const char descriptor_table_protodef_epl_2fprotobuf_2fv1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033epl/protobuf/v1/query.proto\022\017epl.proto"
  "buf.v1\032\037google/protobuf/timestamp.proto\""
  "\300\001\n\013FloatFilter\0225\n\010rel_type\030\002 \001(\0162#.epl."
  "protobuf.v1.FilterRelationship\022\017\n\005value\030"
  "\001 \001(\002H\000\022\017\n\005start\030\003 \001(\002H\000\022\013\n\003end\030\004 \001(\002\0226\n"
  "\016sort_direction\030\005 \001(\0162\036.epl.protobuf.v1."
  "SortDirection\022\013\n\003set\030\006 \003(\002B\006\n\004data\"\301\001\n\014D"
  "oubleFilter\0225\n\010rel_type\030\002 \001(\0162#.epl.prot"
  "obuf.v1.FilterRelationship\022\017\n\005value\030\001 \001("
  "\001H\000\022\017\n\005start\030\003 \001(\001H\000\022\013\n\003end\030\004 \001(\001\0226\n\016sor"
  "t_direction\030\005 \001(\0162\036.epl.protobuf.v1.Sort"
  "Direction\022\013\n\003set\030\006 \003(\001B\006\n\004data\"\213\002\n\017Times"
  "tampFilter\0225\n\010rel_type\030\002 \001(\0162#.epl.proto"
  "buf.v1.FilterRelationship\022+\n\005value\030\001 \001(\013"
  "2\032.google.protobuf.TimestampH\000\022+\n\005start\030"
  "\003 \001(\0132\032.google.protobuf.TimestampH\000\022\'\n\003e"
  "nd\030\004 \001(\0132\032.google.protobuf.Timestamp\0226\n\016"
  "sort_direction\030\005 \001(\0162\036.epl.protobuf.v1.S"
  "ortDirectionB\006\n\004data\"\301\001\n\014UInt32Filter\0225\n"
  "\010rel_type\030\002 \001(\0162#.epl.protobuf.v1.Filter"
  "Relationship\022\017\n\005value\030\001 \001(\rH\000\022\017\n\005start\030\003"
  " \001(\rH\000\022\013\n\003end\030\004 \001(\r\0226\n\016sort_direction\030\005 "
  "\001(\0162\036.epl.protobuf.v1.SortDirection\022\013\n\003s"
  "et\030\006 \003(\rB\006\n\004data\"a\n\014StringFilter\022\r\n\005valu"
  "e\030\001 \001(\t\0225\n\010rel_type\030\002 \001(\0162#.epl.protobuf"
  ".v1.FilterRelationship\022\013\n\003set\030\006 \003(\t*2\n\rS"
  "ortDirection\022\016\n\nNOT_SORTED\020\000\022\010\n\004DESC\020\001\022\007"
  "\n\003ASC\020\002*\226\001\n\022FilterRelationship\022\006\n\002EQ\020\000\022\007"
  "\n\003LTE\020\002\022\007\n\003GTE\020\004\022\006\n\002LT\020\010\022\006\n\002GT\020\020\022\013\n\007BETW"
  "EEN\020 \022\017\n\013NOT_BETWEEN\020@\022\010\n\003NEQ\020\200\001\022\007\n\002IN\020\200"
  "\002\022\013\n\006NOT_IN\020\200\004\022\t\n\004LIKE\020\200\010\022\r\n\010NOT_LIKE\020\200\020"
  "Bo\n\023com.epl.protobuf.v1B\nQueryProtoP\001Z.g"
  "ithub.com/geo-grpc/api/golang/epl/protob"
  "uf/v1\242\002\003QPB\252\002\023com.epl.protobuf.v1b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto = {
  false, false, 1361, descriptor_table_protodef_epl_2fprotobuf_2fv1_2fquery_2eproto, "epl/protobuf/v1/query.proto", 
  &descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_once, descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto::offsets,
  file_level_metadata_epl_2fprotobuf_2fv1_2fquery_2eproto, file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto, file_level_service_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto);
  return descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_epl_2fprotobuf_2fv1_2fquery_2eproto(&descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto);
namespace epl {
namespace protobuf {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto[0];
}
bool SortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fquery_2eproto[1];
}
bool FilterRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FloatFilter::_Internal {
 public:
};

FloatFilter::FloatFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.FloatFilter)
}
FloatFilter::FloatFilter(const FloatFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      set_(from.set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rel_type_, &from.rel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_has_data();
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.FloatFilter)
}

void FloatFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
clear_has_data();
}

FloatFilter::~FloatFilter() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.FloatFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void FloatFilter::ArenaDtor(void* object) {
  FloatFilter* _this = reinterpret_cast< FloatFilter* >(object);
  (void)_this;
}
void FloatFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatFilter::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.FloatFilter)
  switch (data_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case kStart: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void FloatFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.FloatFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  ::memset(&rel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_direction_) -
      reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _internal_set_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FilterRelationship rel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rel_type(static_cast<::epl::protobuf::v1::FilterRelationship>(val));
        } else goto handle_unusual;
        continue;
      // float start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_start(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.SortDirection sort_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_direction(static_cast<::epl::protobuf::v1::SortDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated float set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_set(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_set(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.FloatFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rel_type(), target);
  }

  // float start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start(), target);
  }

  // float end = 4;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_end(), target);
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_direction(), target);
  }

  // repeated float set = 6;
  if (this->_internal_set_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.FloatFilter)
  return target;
}

size_t FloatFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.FloatFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float set = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_set_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _set_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rel_type());
  }

  // float end = 4;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 4;
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_direction());
  }

  switch (data_case()) {
    // float value = 1;
    case kValue: {
      total_size += 1 + 4;
      break;
    }
    // float start = 3;
    case kStart: {
      total_size += 1 + 4;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.FloatFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.FloatFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.FloatFilter)
    MergeFrom(*source);
  }
}

void FloatFilter::MergeFrom(const FloatFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.FloatFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  if (from.rel_type() != 0) {
    _internal_set_rel_type(from._internal_rel_type());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
  if (from.sort_direction() != 0) {
    _internal_set_sort_direction(from._internal_sort_direction());
  }
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void FloatFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.FloatFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatFilter::CopyFrom(const FloatFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.FloatFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatFilter::IsInitialized() const {
  return true;
}

void FloatFilter::InternalSwap(FloatFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  set_.InternalSwap(&other->set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatFilter, sort_direction_)
      + sizeof(FloatFilter::sort_direction_)
      - PROTOBUF_FIELD_OFFSET(FloatFilter, rel_type_)>(
          reinterpret_cast<char*>(&rel_type_),
          reinterpret_cast<char*>(&other->rel_type_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleFilter::_Internal {
 public:
};

DoubleFilter::DoubleFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.DoubleFilter)
}
DoubleFilter::DoubleFilter(const DoubleFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      set_(from.set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rel_type_, &from.rel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(end_));
  clear_has_data();
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.DoubleFilter)
}

void DoubleFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(end_));
clear_has_data();
}

DoubleFilter::~DoubleFilter() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.DoubleFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void DoubleFilter::ArenaDtor(void* object) {
  DoubleFilter* _this = reinterpret_cast< DoubleFilter* >(object);
  (void)_this;
}
void DoubleFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleFilter::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.DoubleFilter)
  switch (data_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case kStart: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DoubleFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.DoubleFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  ::memset(&rel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&rel_type_)) + sizeof(end_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FilterRelationship rel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rel_type(static_cast<::epl::protobuf::v1::FilterRelationship>(val));
        } else goto handle_unusual;
        continue;
      // double start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_start(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.SortDirection sort_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_direction(static_cast<::epl::protobuf::v1::SortDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated double set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_set(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_set(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.DoubleFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rel_type(), target);
  }

  // double start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_start(), target);
  }

  // double end = 4;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_end(), target);
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_direction(), target);
  }

  // repeated double set = 6;
  if (this->_internal_set_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.DoubleFilter)
  return target;
}

size_t DoubleFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.DoubleFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double set = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_set_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _set_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rel_type());
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_direction());
  }

  // double end = 4;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 8;
  }

  switch (data_case()) {
    // double value = 1;
    case kValue: {
      total_size += 1 + 8;
      break;
    }
    // double start = 3;
    case kStart: {
      total_size += 1 + 8;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.DoubleFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.DoubleFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.DoubleFilter)
    MergeFrom(*source);
  }
}

void DoubleFilter::MergeFrom(const DoubleFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.DoubleFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  if (from.rel_type() != 0) {
    _internal_set_rel_type(from._internal_rel_type());
  }
  if (from.sort_direction() != 0) {
    _internal_set_sort_direction(from._internal_sort_direction());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void DoubleFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.DoubleFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleFilter::CopyFrom(const DoubleFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.DoubleFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleFilter::IsInitialized() const {
  return true;
}

void DoubleFilter::InternalSwap(DoubleFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  set_.InternalSwap(&other->set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleFilter, end_)
      + sizeof(DoubleFilter::end_)
      - PROTOBUF_FIELD_OFFSET(DoubleFilter, rel_type_)>(
          reinterpret_cast<char*>(&rel_type_),
          reinterpret_cast<char*>(&other->rel_type_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimestampFilter::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& value(const TimestampFilter* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const TimestampFilter* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const TimestampFilter* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimestampFilter::_Internal::value(const TimestampFilter* msg) {
  return *msg->data_.value_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimestampFilter::_Internal::start(const TimestampFilter* msg) {
  return *msg->data_.start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimestampFilter::_Internal::end(const TimestampFilter* msg) {
  return *msg->end_;
}
void TimestampFilter::set_allocated_value(PROTOBUF_NAMESPACE_ID::Timestamp* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    data_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.TimestampFilter.value)
}
void TimestampFilter::clear_value() {
  if (_internal_has_value()) {
    if (GetArena() == nullptr) {
      delete data_.value_;
    }
    clear_has_data();
  }
}
void TimestampFilter::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    data_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.TimestampFilter.start)
}
void TimestampFilter::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete data_.start_;
    }
    clear_has_data();
  }
}
void TimestampFilter::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
TimestampFilter::TimestampFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.TimestampFilter)
}
TimestampFilter::TimestampFilter(const TimestampFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&rel_type_, &from.rel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_has_data();
  switch (from.data_case()) {
    case kValue: {
      _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_value());
      break;
    }
    case kStart: {
      _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.TimestampFilter)
}

void TimestampFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&end_)) + sizeof(sort_direction_));
clear_has_data();
}

TimestampFilter::~TimestampFilter() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.TimestampFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimestampFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_;
  if (has_data()) {
    clear_data();
  }
}

void TimestampFilter::ArenaDtor(void* object) {
  TimestampFilter* _this = reinterpret_cast< TimestampFilter* >(object);
  (void)_this;
}
void TimestampFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimestampFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimestampFilter::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.TimestampFilter)
  switch (data_case()) {
    case kValue: {
      if (GetArena() == nullptr) {
        delete data_.value_;
      }
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete data_.start_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void TimestampFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.TimestampFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  ::memset(&rel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_direction_) -
      reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FilterRelationship rel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rel_type(static_cast<::epl::protobuf::v1::FilterRelationship>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.SortDirection sort_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_direction(static_cast<::epl::protobuf::v1::SortDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.TimestampFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rel_type(), target);
  }

  // .google.protobuf.Timestamp start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 4;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.TimestampFilter)
  return target;
}

size_t TimestampFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.TimestampFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp end = 4;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rel_type());
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_direction());
  }

  switch (data_case()) {
    // .google.protobuf.Timestamp value = 1;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.value_);
      break;
    }
    // .google.protobuf.Timestamp start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.start_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimestampFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.TimestampFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimestampFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.TimestampFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.TimestampFilter)
    MergeFrom(*source);
  }
}

void TimestampFilter::MergeFrom(const TimestampFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.TimestampFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
  if (from.rel_type() != 0) {
    _internal_set_rel_type(from._internal_rel_type());
  }
  if (from.sort_direction() != 0) {
    _internal_set_sort_direction(from._internal_sort_direction());
  }
  switch (from.data_case()) {
    case kValue: {
      _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_value());
      break;
    }
    case kStart: {
      _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void TimestampFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.TimestampFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampFilter::CopyFrom(const TimestampFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.TimestampFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampFilter::IsInitialized() const {
  return true;
}

void TimestampFilter::InternalSwap(TimestampFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimestampFilter, sort_direction_)
      + sizeof(TimestampFilter::sort_direction_)
      - PROTOBUF_FIELD_OFFSET(TimestampFilter, end_)>(
          reinterpret_cast<char*>(&end_),
          reinterpret_cast<char*>(&other->end_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UInt32Filter::_Internal {
 public:
};

UInt32Filter::UInt32Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.UInt32Filter)
}
UInt32Filter::UInt32Filter(const UInt32Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      set_(from.set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rel_type_, &from.rel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_has_data();
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.UInt32Filter)
}

void UInt32Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_direction_) -
    reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
clear_has_data();
}

UInt32Filter::~UInt32Filter() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.UInt32Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UInt32Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void UInt32Filter::ArenaDtor(void* object) {
  UInt32Filter* _this = reinterpret_cast< UInt32Filter* >(object);
  (void)_this;
}
void UInt32Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UInt32Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UInt32Filter::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.UInt32Filter)
  switch (data_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case kStart: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void UInt32Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.UInt32Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  ::memset(&rel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_direction_) -
      reinterpret_cast<char*>(&rel_type_)) + sizeof(sort_direction_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UInt32Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FilterRelationship rel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rel_type(static_cast<::epl::protobuf::v1::FilterRelationship>(val));
        } else goto handle_unusual;
        continue;
      // uint32 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_start(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.SortDirection sort_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_direction(static_cast<::epl::protobuf::v1::SortDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_set(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_set(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt32Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.UInt32Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rel_type(), target);
  }

  // uint32 start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start(), target);
  }

  // uint32 end = 4;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_end(), target);
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_direction(), target);
  }

  // repeated uint32 set = 6;
  {
    int byte_size = _set_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_set(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.UInt32Filter)
  return target;
}

size_t UInt32Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.UInt32Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 set = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->set_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _set_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rel_type());
  }

  // uint32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end());
  }

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  if (this->sort_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_direction());
  }

  switch (data_case()) {
    // uint32 value = 1;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
      break;
    }
    // uint32 start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt32Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.UInt32Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UInt32Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.UInt32Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.UInt32Filter)
    MergeFrom(*source);
  }
}

void UInt32Filter::MergeFrom(const UInt32Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.UInt32Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  if (from.rel_type() != 0) {
    _internal_set_rel_type(from._internal_rel_type());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.sort_direction() != 0) {
    _internal_set_sort_direction(from._internal_sort_direction());
  }
  switch (from.data_case()) {
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void UInt32Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.UInt32Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Filter::CopyFrom(const UInt32Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.UInt32Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Filter::IsInitialized() const {
  return true;
}

void UInt32Filter::InternalSwap(UInt32Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  set_.InternalSwap(&other->set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UInt32Filter, sort_direction_)
      + sizeof(UInt32Filter::sort_direction_)
      - PROTOBUF_FIELD_OFFSET(UInt32Filter, rel_type_)>(
          reinterpret_cast<char*>(&rel_type_),
          reinterpret_cast<char*>(&other->rel_type_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UInt32Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringFilter::_Internal {
 public:
};

StringFilter::StringFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.StringFilter)
}
StringFilter::StringFilter(const StringFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      set_(from.set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  rel_type_ = from.rel_type_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.StringFilter)
}

void StringFilter::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rel_type_ = 0;
}

StringFilter::~StringFilter() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.StringFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringFilter::ArenaDtor(void* object) {
  StringFilter* _this = reinterpret_cast< StringFilter* >(object);
  (void)_this;
}
void StringFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.StringFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  value_.ClearToEmpty();
  rel_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StringFilter.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FilterRelationship rel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rel_type(static_cast<::epl::protobuf::v1::FilterRelationship>(val));
        } else goto handle_unusual;
        continue;
      // repeated string set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StringFilter.set"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.StringFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StringFilter.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rel_type(), target);
  }

  // repeated string set = 6;
  for (int i = 0, n = this->_internal_set_size(); i < n; i++) {
    const auto& s = this->_internal_set(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StringFilter.set");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.StringFilter)
  return target;
}

size_t StringFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.StringFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string set = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(set_.size());
  for (int i = 0, n = set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      set_.Get(i));
  }

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  if (this->rel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rel_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.StringFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const StringFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.StringFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.StringFilter)
    MergeFrom(*source);
  }
}

void StringFilter::MergeFrom(const StringFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.StringFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.rel_type() != 0) {
    _internal_set_rel_type(from._internal_rel_type());
  }
}

void StringFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.StringFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringFilter::CopyFrom(const StringFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.StringFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringFilter::IsInitialized() const {
  return true;
}

void StringFilter::InternalSwap(StringFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  set_.InternalSwap(&other->set_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rel_type_, other->rel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::FloatFilter* Arena::CreateMaybeMessage< ::epl::protobuf::v1::FloatFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::FloatFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::DoubleFilter* Arena::CreateMaybeMessage< ::epl::protobuf::v1::DoubleFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::DoubleFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::TimestampFilter* Arena::CreateMaybeMessage< ::epl::protobuf::v1::TimestampFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::TimestampFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::UInt32Filter* Arena::CreateMaybeMessage< ::epl::protobuf::v1::UInt32Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::UInt32Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::StringFilter* Arena::CreateMaybeMessage< ::epl::protobuf::v1::StringFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::StringFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
