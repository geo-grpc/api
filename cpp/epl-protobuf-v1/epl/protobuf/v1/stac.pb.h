// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/stac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fstac_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fstac_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/any.pb.h>
#include "epl/protobuf/v1/geometry.pb.h"
#include "epl/protobuf/v1/query.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fv1_2fstac_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(int index);
namespace epl {
namespace protobuf {
namespace v1 {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Collection;
struct CollectionDefaultTypeInternal;
extern CollectionDefaultTypeInternal _Collection_default_instance_;
class CollectionRequest;
struct CollectionRequestDefaultTypeInternal;
extern CollectionRequestDefaultTypeInternal _CollectionRequest_default_instance_;
class Collection_SummariesEntry_DoNotUse;
struct Collection_SummariesEntry_DoNotUseDefaultTypeInternal;
extern Collection_SummariesEntry_DoNotUseDefaultTypeInternal _Collection_SummariesEntry_DoNotUse_default_instance_;
class DatetimeRange;
struct DatetimeRangeDefaultTypeInternal;
extern DatetimeRangeDefaultTypeInternal _DatetimeRange_default_instance_;
class Eo;
struct EoDefaultTypeInternal;
extern EoDefaultTypeInternal _Eo_default_instance_;
class EoRequest;
struct EoRequestDefaultTypeInternal;
extern EoRequestDefaultTypeInternal _EoRequest_default_instance_;
class Extent;
struct ExtentDefaultTypeInternal;
extern ExtentDefaultTypeInternal _Extent_default_instance_;
class Interval;
struct IntervalDefaultTypeInternal;
extern IntervalDefaultTypeInternal _Interval_default_instance_;
class Landsat;
struct LandsatDefaultTypeInternal;
extern LandsatDefaultTypeInternal _Landsat_default_instance_;
class LandsatRequest;
struct LandsatRequestDefaultTypeInternal;
extern LandsatRequestDefaultTypeInternal _LandsatRequest_default_instance_;
class Mosaic;
struct MosaicDefaultTypeInternal;
extern MosaicDefaultTypeInternal _Mosaic_default_instance_;
class MosaicRequest;
struct MosaicRequestDefaultTypeInternal;
extern MosaicRequestDefaultTypeInternal _MosaicRequest_default_instance_;
class Provider;
struct ProviderDefaultTypeInternal;
extern ProviderDefaultTypeInternal _Provider_default_instance_;
class Sar;
struct SarDefaultTypeInternal;
extern SarDefaultTypeInternal _Sar_default_instance_;
class Sat;
struct SatDefaultTypeInternal;
extern SatDefaultTypeInternal _Sat_default_instance_;
class SatRequest;
struct SatRequestDefaultTypeInternal;
extern SatRequestDefaultTypeInternal _SatRequest_default_instance_;
class StacDbResponse;
struct StacDbResponseDefaultTypeInternal;
extern StacDbResponseDefaultTypeInternal _StacDbResponse_default_instance_;
class StacItem;
struct StacItemDefaultTypeInternal;
extern StacItemDefaultTypeInternal _StacItem_default_instance_;
class StacItem_AssetsEntry_DoNotUse;
struct StacItem_AssetsEntry_DoNotUseDefaultTypeInternal;
extern StacItem_AssetsEntry_DoNotUseDefaultTypeInternal _StacItem_AssetsEntry_DoNotUse_default_instance_;
class StacRequest;
struct StacRequestDefaultTypeInternal;
extern StacRequestDefaultTypeInternal _StacRequest_default_instance_;
class Stats;
struct StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class View;
struct ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
class ViewRequest;
struct ViewRequestDefaultTypeInternal;
extern ViewRequestDefaultTypeInternal _ViewRequest_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> ::epl::protobuf::v1::Asset* Arena::CreateMaybeMessage<::epl::protobuf::v1::Asset>(Arena*);
template<> ::epl::protobuf::v1::Collection* Arena::CreateMaybeMessage<::epl::protobuf::v1::Collection>(Arena*);
template<> ::epl::protobuf::v1::CollectionRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::CollectionRequest>(Arena*);
template<> ::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse* Arena::CreateMaybeMessage<::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse>(Arena*);
template<> ::epl::protobuf::v1::DatetimeRange* Arena::CreateMaybeMessage<::epl::protobuf::v1::DatetimeRange>(Arena*);
template<> ::epl::protobuf::v1::Eo* Arena::CreateMaybeMessage<::epl::protobuf::v1::Eo>(Arena*);
template<> ::epl::protobuf::v1::EoRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::EoRequest>(Arena*);
template<> ::epl::protobuf::v1::Extent* Arena::CreateMaybeMessage<::epl::protobuf::v1::Extent>(Arena*);
template<> ::epl::protobuf::v1::Interval* Arena::CreateMaybeMessage<::epl::protobuf::v1::Interval>(Arena*);
template<> ::epl::protobuf::v1::Landsat* Arena::CreateMaybeMessage<::epl::protobuf::v1::Landsat>(Arena*);
template<> ::epl::protobuf::v1::LandsatRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::LandsatRequest>(Arena*);
template<> ::epl::protobuf::v1::Mosaic* Arena::CreateMaybeMessage<::epl::protobuf::v1::Mosaic>(Arena*);
template<> ::epl::protobuf::v1::MosaicRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::MosaicRequest>(Arena*);
template<> ::epl::protobuf::v1::Provider* Arena::CreateMaybeMessage<::epl::protobuf::v1::Provider>(Arena*);
template<> ::epl::protobuf::v1::Sar* Arena::CreateMaybeMessage<::epl::protobuf::v1::Sar>(Arena*);
template<> ::epl::protobuf::v1::Sat* Arena::CreateMaybeMessage<::epl::protobuf::v1::Sat>(Arena*);
template<> ::epl::protobuf::v1::SatRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::SatRequest>(Arena*);
template<> ::epl::protobuf::v1::StacDbResponse* Arena::CreateMaybeMessage<::epl::protobuf::v1::StacDbResponse>(Arena*);
template<> ::epl::protobuf::v1::StacItem* Arena::CreateMaybeMessage<::epl::protobuf::v1::StacItem>(Arena*);
template<> ::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse* Arena::CreateMaybeMessage<::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse>(Arena*);
template<> ::epl::protobuf::v1::StacRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::StacRequest>(Arena*);
template<> ::epl::protobuf::v1::Stats* Arena::CreateMaybeMessage<::epl::protobuf::v1::Stats>(Arena*);
template<> ::epl::protobuf::v1::View* Arena::CreateMaybeMessage<::epl::protobuf::v1::View>(Arena*);
template<> ::epl::protobuf::v1::ViewRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::ViewRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epl {
namespace protobuf {
namespace v1 {

enum Sat_OrbitState : int {
  Sat_OrbitState_UKNOWN_ORBIT_STATE = 0,
  Sat_OrbitState_ASCENDING_ORBIT = 1,
  Sat_OrbitState_DESCENDING_ORBIT = 2,
  Sat_OrbitState_GEOSTATIONARY_ORBIT = 3,
  Sat_OrbitState_Sat_OrbitState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sat_OrbitState_Sat_OrbitState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sat_OrbitState_IsValid(int value);
constexpr Sat_OrbitState Sat_OrbitState_OrbitState_MIN = Sat_OrbitState_UKNOWN_ORBIT_STATE;
constexpr Sat_OrbitState Sat_OrbitState_OrbitState_MAX = Sat_OrbitState_GEOSTATIONARY_ORBIT;
constexpr int Sat_OrbitState_OrbitState_ARRAYSIZE = Sat_OrbitState_OrbitState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sat_OrbitState_descriptor();
template<typename T>
inline const std::string& Sat_OrbitState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sat_OrbitState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sat_OrbitState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sat_OrbitState_descriptor(), enum_t_value);
}
inline bool Sat_OrbitState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sat_OrbitState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sat_OrbitState>(
    Sat_OrbitState_descriptor(), name, value);
}
enum Eo_Band : int {
  Eo_Band_UNKNOWN_BAND = 0,
  Eo_Band_COASTAL = 2,
  Eo_Band_BLUE = 4,
  Eo_Band_GREEN = 8,
  Eo_Band_RED = 16,
  Eo_Band_RGB = 28,
  Eo_Band_NIR = 32,
  Eo_Band_NIR_2 = 33,
  Eo_Band_RGBIR = 60,
  Eo_Band_SWIR_1 = 64,
  Eo_Band_SWIR_2 = 128,
  Eo_Band_PAN = 256,
  Eo_Band_CIRRUS = 512,
  Eo_Band_LWIR_1 = 1024,
  Eo_Band_LWIR_2 = 2048,
  Eo_Band_Eo_Band_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Eo_Band_Eo_Band_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Eo_Band_IsValid(int value);
constexpr Eo_Band Eo_Band_Band_MIN = Eo_Band_UNKNOWN_BAND;
constexpr Eo_Band Eo_Band_Band_MAX = Eo_Band_LWIR_2;
constexpr int Eo_Band_Band_ARRAYSIZE = Eo_Band_Band_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Eo_Band_descriptor();
template<typename T>
inline const std::string& Eo_Band_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Eo_Band>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Eo_Band_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Eo_Band_descriptor(), enum_t_value);
}
inline bool Eo_Band_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Eo_Band* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Eo_Band>(
    Eo_Band_descriptor(), name, value);
}
enum Sar_Platform : int {
  Sar_Platform_UNKNOWN_PLATFORM = 0,
  Sar_Platform_ENVISAT = 1,
  Sar_Platform_SENTINEL_1A = 2,
  Sar_Platform_Sar_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sar_Platform_Sar_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sar_Platform_IsValid(int value);
constexpr Sar_Platform Sar_Platform_Platform_MIN = Sar_Platform_UNKNOWN_PLATFORM;
constexpr Sar_Platform Sar_Platform_Platform_MAX = Sar_Platform_SENTINEL_1A;
constexpr int Sar_Platform_Platform_ARRAYSIZE = Sar_Platform_Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sar_Platform_descriptor();
template<typename T>
inline const std::string& Sar_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sar_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sar_Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sar_Platform_descriptor(), enum_t_value);
}
inline bool Sar_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sar_Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sar_Platform>(
    Sar_Platform_descriptor(), name, value);
}
enum Sar_Instrument : int {
  Sar_Instrument_UNKNOWN_INSTRUMENT = 0,
  Sar_Instrument_Sar_Instrument_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sar_Instrument_Sar_Instrument_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sar_Instrument_IsValid(int value);
constexpr Sar_Instrument Sar_Instrument_Instrument_MIN = Sar_Instrument_UNKNOWN_INSTRUMENT;
constexpr Sar_Instrument Sar_Instrument_Instrument_MAX = Sar_Instrument_UNKNOWN_INSTRUMENT;
constexpr int Sar_Instrument_Instrument_ARRAYSIZE = Sar_Instrument_Instrument_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sar_Instrument_descriptor();
template<typename T>
inline const std::string& Sar_Instrument_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sar_Instrument>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sar_Instrument_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sar_Instrument_descriptor(), enum_t_value);
}
inline bool Sar_Instrument_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sar_Instrument* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sar_Instrument>(
    Sar_Instrument_descriptor(), name, value);
}
enum Landsat_CollectionCategory : int {
  Landsat_CollectionCategory_UNKNOWN_COLLECTION_CATEGORY = 0,
  Landsat_CollectionCategory_A1 = 1,
  Landsat_CollectionCategory_A2 = 2,
  Landsat_CollectionCategory_T1 = 3,
  Landsat_CollectionCategory_T2 = 4,
  Landsat_CollectionCategory_RT = 5,
  Landsat_CollectionCategory_Landsat_CollectionCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Landsat_CollectionCategory_Landsat_CollectionCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Landsat_CollectionCategory_IsValid(int value);
constexpr Landsat_CollectionCategory Landsat_CollectionCategory_CollectionCategory_MIN = Landsat_CollectionCategory_UNKNOWN_COLLECTION_CATEGORY;
constexpr Landsat_CollectionCategory Landsat_CollectionCategory_CollectionCategory_MAX = Landsat_CollectionCategory_RT;
constexpr int Landsat_CollectionCategory_CollectionCategory_ARRAYSIZE = Landsat_CollectionCategory_CollectionCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_CollectionCategory_descriptor();
template<typename T>
inline const std::string& Landsat_CollectionCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Landsat_CollectionCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Landsat_CollectionCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Landsat_CollectionCategory_descriptor(), enum_t_value);
}
inline bool Landsat_CollectionCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Landsat_CollectionCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Landsat_CollectionCategory>(
    Landsat_CollectionCategory_descriptor(), name, value);
}
enum Landsat_WRSType : int {
  Landsat_WRSType_UKNOWN_WRS = 0,
  Landsat_WRSType_WRS1 = 1,
  Landsat_WRSType_WRS2 = 2,
  Landsat_WRSType_Landsat_WRSType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Landsat_WRSType_Landsat_WRSType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Landsat_WRSType_IsValid(int value);
constexpr Landsat_WRSType Landsat_WRSType_WRSType_MIN = Landsat_WRSType_UKNOWN_WRS;
constexpr Landsat_WRSType Landsat_WRSType_WRSType_MAX = Landsat_WRSType_WRS2;
constexpr int Landsat_WRSType_WRSType_ARRAYSIZE = Landsat_WRSType_WRSType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_WRSType_descriptor();
template<typename T>
inline const std::string& Landsat_WRSType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Landsat_WRSType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Landsat_WRSType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Landsat_WRSType_descriptor(), enum_t_value);
}
inline bool Landsat_WRSType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Landsat_WRSType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Landsat_WRSType>(
    Landsat_WRSType_descriptor(), name, value);
}
enum Landsat_ProcessingLevel : int {
  Landsat_ProcessingLevel_UNKNOWN_PROCESSING_LEVEL = 0,
  Landsat_ProcessingLevel_L1G = 1,
  Landsat_ProcessingLevel_L1TP = 2,
  Landsat_ProcessingLevel_L1T = 3,
  Landsat_ProcessingLevel_L1GT = 4,
  Landsat_ProcessingLevel_L1GS = 5,
  Landsat_ProcessingLevel_Landsat_ProcessingLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Landsat_ProcessingLevel_Landsat_ProcessingLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Landsat_ProcessingLevel_IsValid(int value);
constexpr Landsat_ProcessingLevel Landsat_ProcessingLevel_ProcessingLevel_MIN = Landsat_ProcessingLevel_UNKNOWN_PROCESSING_LEVEL;
constexpr Landsat_ProcessingLevel Landsat_ProcessingLevel_ProcessingLevel_MAX = Landsat_ProcessingLevel_L1GS;
constexpr int Landsat_ProcessingLevel_ProcessingLevel_ARRAYSIZE = Landsat_ProcessingLevel_ProcessingLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_ProcessingLevel_descriptor();
template<typename T>
inline const std::string& Landsat_ProcessingLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Landsat_ProcessingLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Landsat_ProcessingLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Landsat_ProcessingLevel_descriptor(), enum_t_value);
}
inline bool Landsat_ProcessingLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Landsat_ProcessingLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Landsat_ProcessingLevel>(
    Landsat_ProcessingLevel_descriptor(), name, value);
}
enum AssetType : int {
  UNKNOWN_ASSET = 0,
  JPEG = 1,
  GEOTIFF = 2,
  LERC = 3,
  MRF = 4,
  MRF_IDX = 5,
  MRF_XML = 6,
  CO_GEOTIFF = 7,
  RAW = 8,
  THUMBNAIL = 9,
  TIFF = 10,
  JPEG_2000 = 11,
  XML = 12,
  TXT = 13,
  PNG = 14,
  OVERVIEW = 15,
  JSON = 16,
  HTML = 17,
  WEBP = 18,
  AssetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AssetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AssetType_IsValid(int value);
constexpr AssetType AssetType_MIN = UNKNOWN_ASSET;
constexpr AssetType AssetType_MAX = WEBP;
constexpr int AssetType_ARRAYSIZE = AssetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssetType_descriptor();
template<typename T>
inline const std::string& AssetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AssetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AssetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AssetType_descriptor(), enum_t_value);
}
inline bool AssetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AssetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AssetType>(
    AssetType_descriptor(), name, value);
}
enum CloudPlatform : int {
  UNKNOWN_CLOUD_PLATFORM = 0,
  AWS = 1,
  GCP = 2,
  AZURE = 3,
  IBM = 4,
  CloudPlatform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CloudPlatform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CloudPlatform_IsValid(int value);
constexpr CloudPlatform CloudPlatform_MIN = UNKNOWN_CLOUD_PLATFORM;
constexpr CloudPlatform CloudPlatform_MAX = IBM;
constexpr int CloudPlatform_ARRAYSIZE = CloudPlatform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudPlatform_descriptor();
template<typename T>
inline const std::string& CloudPlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloudPlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloudPlatform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloudPlatform_descriptor(), enum_t_value);
}
inline bool CloudPlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CloudPlatform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloudPlatform>(
    CloudPlatform_descriptor(), name, value);
}
enum Platform : int {
  UNKNOWN_PLATFORM = 0,
  LANDSAT_1 = 2,
  LANDSAT_2 = 4,
  LANDSAT_3 = 8,
  LANDSAT_123 = 14,
  LANDSAT_4 = 16,
  LANDSAT_5 = 32,
  LANDSAT_45 = 48,
  LANDSAT_7 = 64,
  LANDSAT_8 = 128,
  SWIFT_2 = 256,
  SWIFT_3 = 512,
  Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Platform_IsValid(int value);
constexpr Platform Platform_MIN = UNKNOWN_PLATFORM;
constexpr Platform Platform_MAX = SWIFT_3;
constexpr int Platform_ARRAYSIZE = Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor();
template<typename T>
inline const std::string& Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Platform_descriptor(), enum_t_value);
}
inline bool Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Platform>(
    Platform_descriptor(), name, value);
}
enum Instrument : int {
  UNKNOWN_INSTRUMENT = 0,
  OLI = 2,
  TIRS = 4,
  OLI_TIRS = 6,
  POM_1 = 8,
  TM = 16,
  ETM = 32,
  MSS = 64,
  POM_2 = 128,
  Instrument_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Instrument_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Instrument_IsValid(int value);
constexpr Instrument Instrument_MIN = UNKNOWN_INSTRUMENT;
constexpr Instrument Instrument_MAX = POM_2;
constexpr int Instrument_ARRAYSIZE = Instrument_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instrument_descriptor();
template<typename T>
inline const std::string& Instrument_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Instrument>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Instrument_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Instrument_descriptor(), enum_t_value);
}
inline bool Instrument_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Instrument* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Instrument>(
    Instrument_descriptor(), name, value);
}
enum Constellation : int {
  UNKNOWN_CONSTELLATION = 0,
  Constellation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Constellation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Constellation_IsValid(int value);
constexpr Constellation Constellation_MIN = UNKNOWN_CONSTELLATION;
constexpr Constellation Constellation_MAX = UNKNOWN_CONSTELLATION;
constexpr int Constellation_ARRAYSIZE = Constellation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constellation_descriptor();
template<typename T>
inline const std::string& Constellation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constellation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constellation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Constellation_descriptor(), enum_t_value);
}
inline bool Constellation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Constellation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Constellation>(
    Constellation_descriptor(), name, value);
}
enum Mission : int {
  UNKNOWN_MISSION = 0,
  LANDSAT = 2,
  NAIP = 4,
  PNOA = 8,
  SWIFT = 16,
  Mission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Mission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Mission_IsValid(int value);
constexpr Mission Mission_MIN = UNKNOWN_MISSION;
constexpr Mission Mission_MAX = SWIFT;
constexpr int Mission_ARRAYSIZE = Mission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mission_descriptor();
template<typename T>
inline const std::string& Mission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mission_descriptor(), enum_t_value);
}
inline bool Mission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mission>(
    Mission_descriptor(), name, value);
}
// ===================================================================

class Collection_SummariesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Collection_SummariesEntry_DoNotUse, 
    std::string, ::epl::protobuf::v1::Stats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Collection_SummariesEntry_DoNotUse, 
    std::string, ::epl::protobuf::v1::Stats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Collection_SummariesEntry_DoNotUse();
  explicit constexpr Collection_SummariesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Collection_SummariesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Collection_SummariesEntry_DoNotUse& other);
  static const Collection_SummariesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Collection_SummariesEntry_DoNotUse*>(&_Collection_SummariesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "epl.protobuf.v1.Collection.SummariesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Collection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Collection) */ {
 public:
  inline Collection() : Collection(nullptr) {}
  virtual ~Collection();
  explicit constexpr Collection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Collection(const Collection& from);
  Collection(Collection&& from) noexcept
    : Collection() {
    *this = ::std::move(from);
  }

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collection& operator=(Collection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Collection* internal_default_instance() {
    return reinterpret_cast<const Collection*>(
               &_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Collection& a, Collection& b) {
    a.Swap(&b);
  }
  inline void Swap(Collection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collection* New() const final {
    return CreateMaybeMessage<Collection>(nullptr);
  }

  Collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collection& from);
  void MergeFrom(const Collection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Collection";
  }
  protected:
  explicit Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 6,
    kProvidersFieldNumber = 8,
    kSummariesFieldNumber = 10,
    kStacVersionFieldNumber = 1,
    kIdFieldNumber = 3,
    kTitleFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kLicenseFieldNumber = 7,
    kExtentFieldNumber = 9,
  };
  // repeated string keywords = 6;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // repeated .epl.protobuf.v1.Provider providers = 8;
  int providers_size() const;
  private:
  int _internal_providers_size() const;
  public:
  void clear_providers();
  ::epl::protobuf::v1::Provider* mutable_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Provider >*
      mutable_providers();
  private:
  const ::epl::protobuf::v1::Provider& _internal_providers(int index) const;
  ::epl::protobuf::v1::Provider* _internal_add_providers();
  public:
  const ::epl::protobuf::v1::Provider& providers(int index) const;
  ::epl::protobuf::v1::Provider* add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Provider >&
      providers() const;

  // map<string, .epl.protobuf.v1.Stats> summaries = 10;
  int summaries_size() const;
  private:
  int _internal_summaries_size() const;
  public:
  void clear_summaries();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >&
      _internal_summaries() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >*
      _internal_mutable_summaries();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >&
      summaries() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >*
      mutable_summaries();

  // string stac_version = 1;
  void clear_stac_version();
  const std::string& stac_version() const;
  void set_stac_version(const std::string& value);
  void set_stac_version(std::string&& value);
  void set_stac_version(const char* value);
  void set_stac_version(const char* value, size_t size);
  std::string* mutable_stac_version();
  std::string* release_stac_version();
  void set_allocated_stac_version(std::string* stac_version);
  private:
  const std::string& _internal_stac_version() const;
  void _internal_set_stac_version(const std::string& value);
  std::string* _internal_mutable_stac_version();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string license = 7;
  void clear_license();
  const std::string& license() const;
  void set_license(const std::string& value);
  void set_license(std::string&& value);
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  std::string* mutable_license();
  std::string* release_license();
  void set_allocated_license(std::string* license);
  private:
  const std::string& _internal_license() const;
  void _internal_set_license(const std::string& value);
  std::string* _internal_mutable_license();
  public:

  // .epl.protobuf.v1.Extent extent = 9;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::epl::protobuf::v1::Extent& extent() const;
  ::epl::protobuf::v1::Extent* release_extent();
  ::epl::protobuf::v1::Extent* mutable_extent();
  void set_allocated_extent(::epl::protobuf::v1::Extent* extent);
  private:
  const ::epl::protobuf::v1::Extent& _internal_extent() const;
  ::epl::protobuf::v1::Extent* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::epl::protobuf::v1::Extent* extent);
  ::epl::protobuf::v1::Extent* unsafe_arena_release_extent();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Collection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Provider > providers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Collection_SummariesEntry_DoNotUse,
      std::string, ::epl::protobuf::v1::Stats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> summaries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stac_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_;
  ::epl::protobuf::v1::Extent* extent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class CollectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.CollectionRequest) */ {
 public:
  inline CollectionRequest() : CollectionRequest(nullptr) {}
  virtual ~CollectionRequest();
  explicit constexpr CollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionRequest(const CollectionRequest& from);
  CollectionRequest(CollectionRequest&& from) noexcept
    : CollectionRequest() {
    *this = ::std::move(from);
  }

  inline CollectionRequest& operator=(const CollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionRequest& operator=(CollectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SpatialCase {
    kBbox = 2,
    kIntersects = 3,
    SPATIAL_NOT_SET = 0,
  };

  static inline const CollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CollectionRequest*>(
               &_CollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CollectionRequest& a, CollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionRequest* New() const final {
    return CreateMaybeMessage<CollectionRequest>(nullptr);
  }

  CollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionRequest& from);
  void MergeFrom(const CollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.CollectionRequest";
  }
  protected:
  explicit CollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBboxFieldNumber = 2,
    kIntersectsFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .epl.protobuf.v1.EnvelopeData bbox = 2;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::epl::protobuf::v1::EnvelopeData& bbox() const;
  ::epl::protobuf::v1::EnvelopeData* release_bbox();
  ::epl::protobuf::v1::EnvelopeData* mutable_bbox();
  void set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_bbox() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::epl::protobuf::v1::EnvelopeData* bbox);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_bbox();

  // .epl.protobuf.v1.GeometryData intersects = 3;
  bool has_intersects() const;
  private:
  bool _internal_has_intersects() const;
  public:
  void clear_intersects();
  const ::epl::protobuf::v1::GeometryData& intersects() const;
  ::epl::protobuf::v1::GeometryData* release_intersects();
  ::epl::protobuf::v1::GeometryData* mutable_intersects();
  void set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_intersects() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_intersects();
  public:
  void unsafe_arena_set_allocated_intersects(
      ::epl::protobuf::v1::GeometryData* intersects);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_intersects();

  void clear_spatial();
  SpatialCase spatial_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.CollectionRequest)
 private:
  class _Internal;
  void set_has_bbox();
  void set_has_intersects();

  inline bool has_spatial() const;
  inline void clear_has_spatial();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union SpatialUnion {
    constexpr SpatialUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::EnvelopeData* bbox_;
    ::epl::protobuf::v1::GeometryData* intersects_;
  } spatial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {}
  virtual ~Stats();
  explicit constexpr Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Extent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Extent) */ {
 public:
  inline Extent() : Extent(nullptr) {}
  virtual ~Extent();
  explicit constexpr Extent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extent(const Extent& from);
  Extent(Extent&& from) noexcept
    : Extent() {
    *this = ::std::move(from);
  }

  inline Extent& operator=(const Extent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extent& operator=(Extent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extent* internal_default_instance() {
    return reinterpret_cast<const Extent*>(
               &_Extent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Extent& a, Extent& b) {
    a.Swap(&b);
  }
  inline void Swap(Extent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extent* New() const final {
    return CreateMaybeMessage<Extent>(nullptr);
  }

  Extent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extent& from);
  void MergeFrom(const Extent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Extent";
  }
  protected:
  explicit Extent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialFieldNumber = 1,
    kTemporalFieldNumber = 2,
  };
  // repeated .epl.protobuf.v1.EnvelopeData spatial = 1;
  int spatial_size() const;
  private:
  int _internal_spatial_size() const;
  public:
  void clear_spatial();
  ::epl::protobuf::v1::EnvelopeData* mutable_spatial(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::EnvelopeData >*
      mutable_spatial();
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_spatial(int index) const;
  ::epl::protobuf::v1::EnvelopeData* _internal_add_spatial();
  public:
  const ::epl::protobuf::v1::EnvelopeData& spatial(int index) const;
  ::epl::protobuf::v1::EnvelopeData* add_spatial();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::EnvelopeData >&
      spatial() const;

  // repeated .epl.protobuf.v1.Interval temporal = 2;
  int temporal_size() const;
  private:
  int _internal_temporal_size() const;
  public:
  void clear_temporal();
  ::epl::protobuf::v1::Interval* mutable_temporal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Interval >*
      mutable_temporal();
  private:
  const ::epl::protobuf::v1::Interval& _internal_temporal(int index) const;
  ::epl::protobuf::v1::Interval* _internal_add_temporal();
  public:
  const ::epl::protobuf::v1::Interval& temporal(int index) const;
  ::epl::protobuf::v1::Interval* add_temporal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Interval >&
      temporal() const;

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Extent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::EnvelopeData > spatial_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Interval > temporal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Interval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Interval) */ {
 public:
  inline Interval() : Interval(nullptr) {}
  virtual ~Interval();
  explicit constexpr Interval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interval(const Interval& from);
  Interval(Interval&& from) noexcept
    : Interval() {
    *this = ::std::move(from);
  }

  inline Interval& operator=(const Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interval& operator=(Interval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interval& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interval* internal_default_instance() {
    return reinterpret_cast<const Interval*>(
               &_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Interval& a, Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Interval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interval* New() const final {
    return CreateMaybeMessage<Interval>(nullptr);
  }

  Interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interval& from);
  void MergeFrom(const Interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Interval";
  }
  protected:
  explicit Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Interval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Provider PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Provider) */ {
 public:
  inline Provider() : Provider(nullptr) {}
  virtual ~Provider();
  explicit constexpr Provider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Provider(const Provider& from);
  Provider(Provider&& from) noexcept
    : Provider() {
    *this = ::std::move(from);
  }

  inline Provider& operator=(const Provider& from) {
    CopyFrom(from);
    return *this;
  }
  inline Provider& operator=(Provider&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Provider& default_instance() {
    return *internal_default_instance();
  }
  static inline const Provider* internal_default_instance() {
    return reinterpret_cast<const Provider*>(
               &_Provider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Provider& a, Provider& b) {
    a.Swap(&b);
  }
  inline void Swap(Provider* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Provider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Provider* New() const final {
    return CreateMaybeMessage<Provider>(nullptr);
  }

  Provider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Provider>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Provider& from);
  void MergeFrom(const Provider& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Provider* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Provider";
  }
  protected:
  explicit Provider(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUrlFieldNumber = 4,
  };
  // repeated string roles = 3;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();
  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Provider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class StacItem_AssetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StacItem_AssetsEntry_DoNotUse, 
    std::string, ::epl::protobuf::v1::Asset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StacItem_AssetsEntry_DoNotUse, 
    std::string, ::epl::protobuf::v1::Asset,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StacItem_AssetsEntry_DoNotUse();
  explicit constexpr StacItem_AssetsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StacItem_AssetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StacItem_AssetsEntry_DoNotUse& other);
  static const StacItem_AssetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StacItem_AssetsEntry_DoNotUse*>(&_StacItem_AssetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "epl.protobuf.v1.StacItem.AssetsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class StacItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.StacItem) */ {
 public:
  inline StacItem() : StacItem(nullptr) {}
  virtual ~StacItem();
  explicit constexpr StacItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StacItem(const StacItem& from);
  StacItem(StacItem&& from) noexcept
    : StacItem() {
    *this = ::std::move(from);
  }

  inline StacItem& operator=(const StacItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StacItem& operator=(StacItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StacItem& default_instance() {
    return *internal_default_instance();
  }
  enum TemporalDeprecatedCase {
    kDatetime = 8,
    kStartDatetime = 10,
    TEMPORAL_DEPRECATED_NOT_SET = 0,
  };

  enum TemporalCase {
    kObserved = 9,
    kStartObservation = 11,
    TEMPORAL_NOT_SET = 0,
  };

  static inline const StacItem* internal_default_instance() {
    return reinterpret_cast<const StacItem*>(
               &_StacItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StacItem& a, StacItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StacItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StacItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StacItem* New() const final {
    return CreateMaybeMessage<StacItem>(nullptr);
  }

  StacItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StacItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StacItem& from);
  void MergeFrom(const StacItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StacItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.StacItem";
  }
  protected:
  explicit StacItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 5,
    kStacExtensionsFieldNumber = 28,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kCollectionFieldNumber = 3,
    kPlatformFieldNumber = 18,
    kInstrumentFieldNumber = 20,
    kConstellationFieldNumber = 22,
    kMissionFieldNumber = 24,
    kStacVersionFieldNumber = 26,
    kStacPbVersionFieldNumber = 27,
    kPropertiesFieldNumber = 4,
    kGeometryFieldNumber = 6,
    kBboxFieldNumber = 7,
    kEndDatetimeFieldNumber = 12,
    kEndObservationFieldNumber = 13,
    kCreatedFieldNumber = 14,
    kUpdatedFieldNumber = 15,
    kProjFieldNumber = 16,
    kGsdFieldNumber = 25,
    kEoFieldNumber = 29,
    kLandsatFieldNumber = 31,
    kMosaicFieldNumber = 32,
    kViewFieldNumber = 34,
    kPlatformEnumFieldNumber = 17,
    kInstrumentEnumFieldNumber = 19,
    kConstellationEnumFieldNumber = 21,
    kMissionEnumFieldNumber = 23,
    kDatetimeFieldNumber = 8,
    kStartDatetimeFieldNumber = 10,
    kObservedFieldNumber = 9,
    kStartObservationFieldNumber = 11,
  };
  // map<string, .epl.protobuf.v1.Asset> assets = 5;
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >&
      _internal_assets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >*
      _internal_mutable_assets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >&
      assets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >*
      mutable_assets();

  // repeated string stac_extensions = 28;
  int stac_extensions_size() const;
  private:
  int _internal_stac_extensions_size() const;
  public:
  void clear_stac_extensions();
  const std::string& stac_extensions(int index) const;
  std::string* mutable_stac_extensions(int index);
  void set_stac_extensions(int index, const std::string& value);
  void set_stac_extensions(int index, std::string&& value);
  void set_stac_extensions(int index, const char* value);
  void set_stac_extensions(int index, const char* value, size_t size);
  std::string* add_stac_extensions();
  void add_stac_extensions(const std::string& value);
  void add_stac_extensions(std::string&& value);
  void add_stac_extensions(const char* value);
  void add_stac_extensions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stac_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stac_extensions();
  private:
  const std::string& _internal_stac_extensions(int index) const;
  std::string* _internal_add_stac_extensions();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string collection = 3;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string platform = 18;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string instrument = 20;
  void clear_instrument();
  const std::string& instrument() const;
  void set_instrument(const std::string& value);
  void set_instrument(std::string&& value);
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  std::string* mutable_instrument();
  std::string* release_instrument();
  void set_allocated_instrument(std::string* instrument);
  private:
  const std::string& _internal_instrument() const;
  void _internal_set_instrument(const std::string& value);
  std::string* _internal_mutable_instrument();
  public:

  // string constellation = 22;
  void clear_constellation();
  const std::string& constellation() const;
  void set_constellation(const std::string& value);
  void set_constellation(std::string&& value);
  void set_constellation(const char* value);
  void set_constellation(const char* value, size_t size);
  std::string* mutable_constellation();
  std::string* release_constellation();
  void set_allocated_constellation(std::string* constellation);
  private:
  const std::string& _internal_constellation() const;
  void _internal_set_constellation(const std::string& value);
  std::string* _internal_mutable_constellation();
  public:

  // string mission = 24;
  void clear_mission();
  const std::string& mission() const;
  void set_mission(const std::string& value);
  void set_mission(std::string&& value);
  void set_mission(const char* value);
  void set_mission(const char* value, size_t size);
  std::string* mutable_mission();
  std::string* release_mission();
  void set_allocated_mission(std::string* mission);
  private:
  const std::string& _internal_mission() const;
  void _internal_set_mission(const std::string& value);
  std::string* _internal_mutable_mission();
  public:

  // string stac_version = 26;
  void clear_stac_version();
  const std::string& stac_version() const;
  void set_stac_version(const std::string& value);
  void set_stac_version(std::string&& value);
  void set_stac_version(const char* value);
  void set_stac_version(const char* value, size_t size);
  std::string* mutable_stac_version();
  std::string* release_stac_version();
  void set_allocated_stac_version(std::string* stac_version);
  private:
  const std::string& _internal_stac_version() const;
  void _internal_set_stac_version(const std::string& value);
  std::string* _internal_mutable_stac_version();
  public:

  // string stac_pb_version = 27;
  void clear_stac_pb_version();
  const std::string& stac_pb_version() const;
  void set_stac_pb_version(const std::string& value);
  void set_stac_pb_version(std::string&& value);
  void set_stac_pb_version(const char* value);
  void set_stac_pb_version(const char* value, size_t size);
  std::string* mutable_stac_pb_version();
  std::string* release_stac_pb_version();
  void set_allocated_stac_pb_version(std::string* stac_pb_version);
  private:
  const std::string& _internal_stac_pb_version() const;
  void _internal_set_stac_pb_version(const std::string& value);
  std::string* _internal_mutable_stac_pb_version();
  public:

  // .google.protobuf.Any properties = 4;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const PROTOBUF_NAMESPACE_ID::Any& properties() const;
  PROTOBUF_NAMESPACE_ID::Any* release_properties();
  PROTOBUF_NAMESPACE_ID::Any* mutable_properties();
  void set_allocated_properties(PROTOBUF_NAMESPACE_ID::Any* properties);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_properties() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      PROTOBUF_NAMESPACE_ID::Any* properties);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_properties();

  // .epl.protobuf.v1.GeometryData geometry = 6;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::epl::protobuf::v1::GeometryData& geometry() const;
  ::epl::protobuf::v1::GeometryData* release_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::epl::protobuf::v1::GeometryData* geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_geometry();

  // .epl.protobuf.v1.EnvelopeData bbox = 7;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::epl::protobuf::v1::EnvelopeData& bbox() const;
  ::epl::protobuf::v1::EnvelopeData* release_bbox();
  ::epl::protobuf::v1::EnvelopeData* mutable_bbox();
  void set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_bbox() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::epl::protobuf::v1::EnvelopeData* bbox);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_bbox();

  // .google.protobuf.Timestamp end_datetime = 12;
  bool has_end_datetime() const;
  private:
  bool _internal_has_end_datetime() const;
  public:
  void clear_end_datetime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_datetime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_datetime();
  void set_allocated_end_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* end_datetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_datetime();
  public:
  void unsafe_arena_set_allocated_end_datetime(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_datetime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_datetime();

  // .google.protobuf.Timestamp end_observation = 13;
  bool has_end_observation() const;
  private:
  bool _internal_has_end_observation() const;
  public:
  void clear_end_observation();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_observation() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_observation();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_observation();
  void set_allocated_end_observation(PROTOBUF_NAMESPACE_ID::Timestamp* end_observation);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_observation() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_observation();
  public:
  void unsafe_arena_set_allocated_end_observation(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_observation);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_observation();

  // .google.protobuf.Timestamp created = 14;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      PROTOBUF_NAMESPACE_ID::Timestamp* created);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // .google.protobuf.Timestamp updated = 15;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated();

  // .epl.protobuf.v1.ProjectionData proj = 16;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  const ::epl::protobuf::v1::ProjectionData& proj() const;
  ::epl::protobuf::v1::ProjectionData* release_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_proj();
  void set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_proj();
  public:
  void unsafe_arena_set_allocated_proj(
      ::epl::protobuf::v1::ProjectionData* proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_proj();

  // .google.protobuf.FloatValue gsd = 25;
  bool has_gsd() const;
  private:
  bool _internal_has_gsd() const;
  public:
  void clear_gsd();
  const PROTOBUF_NAMESPACE_ID::FloatValue& gsd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_gsd();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gsd();
  void set_allocated_gsd(PROTOBUF_NAMESPACE_ID::FloatValue* gsd);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gsd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gsd();
  public:
  void unsafe_arena_set_allocated_gsd(
      PROTOBUF_NAMESPACE_ID::FloatValue* gsd);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gsd();

  // .epl.protobuf.v1.Eo eo = 29;
  bool has_eo() const;
  private:
  bool _internal_has_eo() const;
  public:
  void clear_eo();
  const ::epl::protobuf::v1::Eo& eo() const;
  ::epl::protobuf::v1::Eo* release_eo();
  ::epl::protobuf::v1::Eo* mutable_eo();
  void set_allocated_eo(::epl::protobuf::v1::Eo* eo);
  private:
  const ::epl::protobuf::v1::Eo& _internal_eo() const;
  ::epl::protobuf::v1::Eo* _internal_mutable_eo();
  public:
  void unsafe_arena_set_allocated_eo(
      ::epl::protobuf::v1::Eo* eo);
  ::epl::protobuf::v1::Eo* unsafe_arena_release_eo();

  // .epl.protobuf.v1.Landsat landsat = 31;
  bool has_landsat() const;
  private:
  bool _internal_has_landsat() const;
  public:
  void clear_landsat();
  const ::epl::protobuf::v1::Landsat& landsat() const;
  ::epl::protobuf::v1::Landsat* release_landsat();
  ::epl::protobuf::v1::Landsat* mutable_landsat();
  void set_allocated_landsat(::epl::protobuf::v1::Landsat* landsat);
  private:
  const ::epl::protobuf::v1::Landsat& _internal_landsat() const;
  ::epl::protobuf::v1::Landsat* _internal_mutable_landsat();
  public:
  void unsafe_arena_set_allocated_landsat(
      ::epl::protobuf::v1::Landsat* landsat);
  ::epl::protobuf::v1::Landsat* unsafe_arena_release_landsat();

  // .epl.protobuf.v1.Mosaic mosaic = 32;
  bool has_mosaic() const;
  private:
  bool _internal_has_mosaic() const;
  public:
  void clear_mosaic();
  const ::epl::protobuf::v1::Mosaic& mosaic() const;
  ::epl::protobuf::v1::Mosaic* release_mosaic();
  ::epl::protobuf::v1::Mosaic* mutable_mosaic();
  void set_allocated_mosaic(::epl::protobuf::v1::Mosaic* mosaic);
  private:
  const ::epl::protobuf::v1::Mosaic& _internal_mosaic() const;
  ::epl::protobuf::v1::Mosaic* _internal_mutable_mosaic();
  public:
  void unsafe_arena_set_allocated_mosaic(
      ::epl::protobuf::v1::Mosaic* mosaic);
  ::epl::protobuf::v1::Mosaic* unsafe_arena_release_mosaic();

  // .epl.protobuf.v1.View view = 34;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::epl::protobuf::v1::View& view() const;
  ::epl::protobuf::v1::View* release_view();
  ::epl::protobuf::v1::View* mutable_view();
  void set_allocated_view(::epl::protobuf::v1::View* view);
  private:
  const ::epl::protobuf::v1::View& _internal_view() const;
  ::epl::protobuf::v1::View* _internal_mutable_view();
  public:
  void unsafe_arena_set_allocated_view(
      ::epl::protobuf::v1::View* view);
  ::epl::protobuf::v1::View* unsafe_arena_release_view();

  // .epl.protobuf.v1.Platform platform_enum = 17;
  void clear_platform_enum();
  ::epl::protobuf::v1::Platform platform_enum() const;
  void set_platform_enum(::epl::protobuf::v1::Platform value);
  private:
  ::epl::protobuf::v1::Platform _internal_platform_enum() const;
  void _internal_set_platform_enum(::epl::protobuf::v1::Platform value);
  public:

  // .epl.protobuf.v1.Instrument instrument_enum = 19;
  void clear_instrument_enum();
  ::epl::protobuf::v1::Instrument instrument_enum() const;
  void set_instrument_enum(::epl::protobuf::v1::Instrument value);
  private:
  ::epl::protobuf::v1::Instrument _internal_instrument_enum() const;
  void _internal_set_instrument_enum(::epl::protobuf::v1::Instrument value);
  public:

  // .epl.protobuf.v1.Constellation constellation_enum = 21;
  void clear_constellation_enum();
  ::epl::protobuf::v1::Constellation constellation_enum() const;
  void set_constellation_enum(::epl::protobuf::v1::Constellation value);
  private:
  ::epl::protobuf::v1::Constellation _internal_constellation_enum() const;
  void _internal_set_constellation_enum(::epl::protobuf::v1::Constellation value);
  public:

  // .epl.protobuf.v1.Mission mission_enum = 23;
  void clear_mission_enum();
  ::epl::protobuf::v1::Mission mission_enum() const;
  void set_mission_enum(::epl::protobuf::v1::Mission value);
  private:
  ::epl::protobuf::v1::Mission _internal_mission_enum() const;
  void _internal_set_mission_enum(::epl::protobuf::v1::Mission value);
  public:

  // .google.protobuf.Timestamp datetime = 8;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_datetime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_datetime();
  void set_allocated_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* datetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_datetime();
  public:
  void unsafe_arena_set_allocated_datetime(
      PROTOBUF_NAMESPACE_ID::Timestamp* datetime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_datetime();

  // .google.protobuf.Timestamp start_datetime = 10;
  bool has_start_datetime() const;
  private:
  bool _internal_has_start_datetime() const;
  public:
  void clear_start_datetime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_datetime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_datetime();
  void set_allocated_start_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_datetime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_datetime();
  public:
  void unsafe_arena_set_allocated_start_datetime(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_datetime();

  // .google.protobuf.Timestamp observed = 9;
  bool has_observed() const;
  private:
  bool _internal_has_observed() const;
  public:
  void clear_observed();
  const PROTOBUF_NAMESPACE_ID::Timestamp& observed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_observed();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observed();
  void set_allocated_observed(PROTOBUF_NAMESPACE_ID::Timestamp* observed);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observed();
  public:
  void unsafe_arena_set_allocated_observed(
      PROTOBUF_NAMESPACE_ID::Timestamp* observed);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observed();

  // .google.protobuf.Timestamp start_observation = 11;
  bool has_start_observation() const;
  private:
  bool _internal_has_start_observation() const;
  public:
  void clear_start_observation();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_observation() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_observation();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_observation();
  void set_allocated_start_observation(PROTOBUF_NAMESPACE_ID::Timestamp* start_observation);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_observation() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_observation();
  public:
  void unsafe_arena_set_allocated_start_observation(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_observation);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_observation();

  void clear_temporal_deprecated();
  TemporalDeprecatedCase temporal_deprecated_case() const;
  void clear_temporal();
  TemporalCase temporal_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.StacItem)
 private:
  class _Internal;
  void set_has_datetime();
  void set_has_start_datetime();
  void set_has_observed();
  void set_has_start_observation();

  inline bool has_temporal_deprecated() const;
  inline void clear_has_temporal_deprecated();

  inline bool has_temporal() const;
  inline void clear_has_temporal();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StacItem_AssetsEntry_DoNotUse,
      std::string, ::epl::protobuf::v1::Asset,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> assets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stac_extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constellation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stac_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stac_pb_version_;
  PROTOBUF_NAMESPACE_ID::Any* properties_;
  ::epl::protobuf::v1::GeometryData* geometry_;
  ::epl::protobuf::v1::EnvelopeData* bbox_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_datetime_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_observation_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  ::epl::protobuf::v1::ProjectionData* proj_;
  PROTOBUF_NAMESPACE_ID::FloatValue* gsd_;
  ::epl::protobuf::v1::Eo* eo_;
  ::epl::protobuf::v1::Landsat* landsat_;
  ::epl::protobuf::v1::Mosaic* mosaic_;
  ::epl::protobuf::v1::View* view_;
  int platform_enum_;
  int instrument_enum_;
  int constellation_enum_;
  int mission_enum_;
  union TemporalDeprecatedUnion {
    constexpr TemporalDeprecatedUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Timestamp* datetime_;
    PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime_;
  } temporal_deprecated_;
  union TemporalUnion {
    constexpr TemporalUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Timestamp* observed_;
    PROTOBUF_NAMESPACE_ID::Timestamp* start_observation_;
  } temporal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class StacRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.StacRequest) */ {
 public:
  inline StacRequest() : StacRequest(nullptr) {}
  virtual ~StacRequest();
  explicit constexpr StacRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StacRequest(const StacRequest& from);
  StacRequest(StacRequest&& from) noexcept
    : StacRequest() {
    *this = ::std::move(from);
  }

  inline StacRequest& operator=(const StacRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StacRequest& operator=(StacRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StacRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdentityCase {
    kId = 3,
    kIdComplex = 4,
    IDENTITY_NOT_SET = 0,
  };

  enum SpatialCase {
    kIntersects = 7,
    kBbox = 8,
    kGeometryRequest = 9,
    SPATIAL_NOT_SET = 0,
  };

  enum TemporalCase {
    kDatetime = 10,
    kObserved = 11,
    TEMPORAL_NOT_SET = 0,
  };

  static inline const StacRequest* internal_default_instance() {
    return reinterpret_cast<const StacRequest*>(
               &_StacRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StacRequest& a, StacRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StacRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StacRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StacRequest* New() const final {
    return CreateMaybeMessage<StacRequest>(nullptr);
  }

  StacRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StacRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StacRequest& from);
  void MergeFrom(const StacRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StacRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.StacRequest";
  }
  protected:
  explicit StacRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 5,
    kPropertiesFieldNumber = 6,
    kCreatedFieldNumber = 12,
    kUpdatedFieldNumber = 13,
    kProjFieldNumber = 14,
    kGsdFieldNumber = 23,
    kEoFieldNumber = 24,
    kViewFieldNumber = 25,
    kLandsatFieldNumber = 26,
    kMosaicFieldNumber = 27,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 1,
    kPlatformEnumFieldNumber = 15,
    kMissionEnumFieldNumber = 21,
    kInstrumentEnumFieldNumber = 17,
    kConstellationEnumFieldNumber = 19,
    kIdFieldNumber = 3,
    kIdComplexFieldNumber = 4,
    kIntersectsFieldNumber = 7,
    kBboxFieldNumber = 8,
    kGeometryRequestFieldNumber = 9,
    kDatetimeFieldNumber = 10,
    kObservedFieldNumber = 11,
  };
  // string collection = 5;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .google.protobuf.Any properties = 6;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const PROTOBUF_NAMESPACE_ID::Any& properties() const;
  PROTOBUF_NAMESPACE_ID::Any* release_properties();
  PROTOBUF_NAMESPACE_ID::Any* mutable_properties();
  void set_allocated_properties(PROTOBUF_NAMESPACE_ID::Any* properties);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_properties() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      PROTOBUF_NAMESPACE_ID::Any* properties);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_properties();

  // .epl.protobuf.v1.TimestampFilter created = 12;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::epl::protobuf::v1::TimestampFilter& created() const;
  ::epl::protobuf::v1::TimestampFilter* release_created();
  ::epl::protobuf::v1::TimestampFilter* mutable_created();
  void set_allocated_created(::epl::protobuf::v1::TimestampFilter* created);
  private:
  const ::epl::protobuf::v1::TimestampFilter& _internal_created() const;
  ::epl::protobuf::v1::TimestampFilter* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::epl::protobuf::v1::TimestampFilter* created);
  ::epl::protobuf::v1::TimestampFilter* unsafe_arena_release_created();

  // .epl.protobuf.v1.TimestampFilter updated = 13;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::epl::protobuf::v1::TimestampFilter& updated() const;
  ::epl::protobuf::v1::TimestampFilter* release_updated();
  ::epl::protobuf::v1::TimestampFilter* mutable_updated();
  void set_allocated_updated(::epl::protobuf::v1::TimestampFilter* updated);
  private:
  const ::epl::protobuf::v1::TimestampFilter& _internal_updated() const;
  ::epl::protobuf::v1::TimestampFilter* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::epl::protobuf::v1::TimestampFilter* updated);
  ::epl::protobuf::v1::TimestampFilter* unsafe_arena_release_updated();

  // .epl.protobuf.v1.ProjectionData proj = 14;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  const ::epl::protobuf::v1::ProjectionData& proj() const;
  ::epl::protobuf::v1::ProjectionData* release_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_proj();
  void set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_proj();
  public:
  void unsafe_arena_set_allocated_proj(
      ::epl::protobuf::v1::ProjectionData* proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_proj();

  // .epl.protobuf.v1.FloatFilter gsd = 23;
  bool has_gsd() const;
  private:
  bool _internal_has_gsd() const;
  public:
  void clear_gsd();
  const ::epl::protobuf::v1::FloatFilter& gsd() const;
  ::epl::protobuf::v1::FloatFilter* release_gsd();
  ::epl::protobuf::v1::FloatFilter* mutable_gsd();
  void set_allocated_gsd(::epl::protobuf::v1::FloatFilter* gsd);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_gsd() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_gsd();
  public:
  void unsafe_arena_set_allocated_gsd(
      ::epl::protobuf::v1::FloatFilter* gsd);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_gsd();

  // .epl.protobuf.v1.EoRequest eo = 24;
  bool has_eo() const;
  private:
  bool _internal_has_eo() const;
  public:
  void clear_eo();
  const ::epl::protobuf::v1::EoRequest& eo() const;
  ::epl::protobuf::v1::EoRequest* release_eo();
  ::epl::protobuf::v1::EoRequest* mutable_eo();
  void set_allocated_eo(::epl::protobuf::v1::EoRequest* eo);
  private:
  const ::epl::protobuf::v1::EoRequest& _internal_eo() const;
  ::epl::protobuf::v1::EoRequest* _internal_mutable_eo();
  public:
  void unsafe_arena_set_allocated_eo(
      ::epl::protobuf::v1::EoRequest* eo);
  ::epl::protobuf::v1::EoRequest* unsafe_arena_release_eo();

  // .epl.protobuf.v1.ViewRequest view = 25;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::epl::protobuf::v1::ViewRequest& view() const;
  ::epl::protobuf::v1::ViewRequest* release_view();
  ::epl::protobuf::v1::ViewRequest* mutable_view();
  void set_allocated_view(::epl::protobuf::v1::ViewRequest* view);
  private:
  const ::epl::protobuf::v1::ViewRequest& _internal_view() const;
  ::epl::protobuf::v1::ViewRequest* _internal_mutable_view();
  public:
  void unsafe_arena_set_allocated_view(
      ::epl::protobuf::v1::ViewRequest* view);
  ::epl::protobuf::v1::ViewRequest* unsafe_arena_release_view();

  // .epl.protobuf.v1.LandsatRequest landsat = 26;
  bool has_landsat() const;
  private:
  bool _internal_has_landsat() const;
  public:
  void clear_landsat();
  const ::epl::protobuf::v1::LandsatRequest& landsat() const;
  ::epl::protobuf::v1::LandsatRequest* release_landsat();
  ::epl::protobuf::v1::LandsatRequest* mutable_landsat();
  void set_allocated_landsat(::epl::protobuf::v1::LandsatRequest* landsat);
  private:
  const ::epl::protobuf::v1::LandsatRequest& _internal_landsat() const;
  ::epl::protobuf::v1::LandsatRequest* _internal_mutable_landsat();
  public:
  void unsafe_arena_set_allocated_landsat(
      ::epl::protobuf::v1::LandsatRequest* landsat);
  ::epl::protobuf::v1::LandsatRequest* unsafe_arena_release_landsat();

  // .epl.protobuf.v1.MosaicRequest mosaic = 27;
  bool has_mosaic() const;
  private:
  bool _internal_has_mosaic() const;
  public:
  void clear_mosaic();
  const ::epl::protobuf::v1::MosaicRequest& mosaic() const;
  ::epl::protobuf::v1::MosaicRequest* release_mosaic();
  ::epl::protobuf::v1::MosaicRequest* mutable_mosaic();
  void set_allocated_mosaic(::epl::protobuf::v1::MosaicRequest* mosaic);
  private:
  const ::epl::protobuf::v1::MosaicRequest& _internal_mosaic() const;
  ::epl::protobuf::v1::MosaicRequest* _internal_mutable_mosaic();
  public:
  void unsafe_arena_set_allocated_mosaic(
      ::epl::protobuf::v1::MosaicRequest* mosaic);
  ::epl::protobuf::v1::MosaicRequest* unsafe_arena_release_mosaic();

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .epl.protobuf.v1.Platform platform_enum = 15;
  void clear_platform_enum();
  ::epl::protobuf::v1::Platform platform_enum() const;
  void set_platform_enum(::epl::protobuf::v1::Platform value);
  private:
  ::epl::protobuf::v1::Platform _internal_platform_enum() const;
  void _internal_set_platform_enum(::epl::protobuf::v1::Platform value);
  public:

  // .epl.protobuf.v1.Mission mission_enum = 21;
  void clear_mission_enum();
  ::epl::protobuf::v1::Mission mission_enum() const;
  void set_mission_enum(::epl::protobuf::v1::Mission value);
  private:
  ::epl::protobuf::v1::Mission _internal_mission_enum() const;
  void _internal_set_mission_enum(::epl::protobuf::v1::Mission value);
  public:

  // .epl.protobuf.v1.Instrument instrument_enum = 17;
  void clear_instrument_enum();
  ::epl::protobuf::v1::Instrument instrument_enum() const;
  void set_instrument_enum(::epl::protobuf::v1::Instrument value);
  private:
  ::epl::protobuf::v1::Instrument _internal_instrument_enum() const;
  void _internal_set_instrument_enum(::epl::protobuf::v1::Instrument value);
  public:

  // .epl.protobuf.v1.Constellation constellation_enum = 19;
  void clear_constellation_enum();
  ::epl::protobuf::v1::Constellation constellation_enum() const;
  void set_constellation_enum(::epl::protobuf::v1::Constellation value);
  private:
  ::epl::protobuf::v1::Constellation _internal_constellation_enum() const;
  void _internal_set_constellation_enum(::epl::protobuf::v1::Constellation value);
  public:

  // string id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .epl.protobuf.v1.StringFilter id_complex = 4;
  bool has_id_complex() const;
  private:
  bool _internal_has_id_complex() const;
  public:
  void clear_id_complex();
  const ::epl::protobuf::v1::StringFilter& id_complex() const;
  ::epl::protobuf::v1::StringFilter* release_id_complex();
  ::epl::protobuf::v1::StringFilter* mutable_id_complex();
  void set_allocated_id_complex(::epl::protobuf::v1::StringFilter* id_complex);
  private:
  const ::epl::protobuf::v1::StringFilter& _internal_id_complex() const;
  ::epl::protobuf::v1::StringFilter* _internal_mutable_id_complex();
  public:
  void unsafe_arena_set_allocated_id_complex(
      ::epl::protobuf::v1::StringFilter* id_complex);
  ::epl::protobuf::v1::StringFilter* unsafe_arena_release_id_complex();

  // .epl.protobuf.v1.GeometryData intersects = 7;
  bool has_intersects() const;
  private:
  bool _internal_has_intersects() const;
  public:
  void clear_intersects();
  const ::epl::protobuf::v1::GeometryData& intersects() const;
  ::epl::protobuf::v1::GeometryData* release_intersects();
  ::epl::protobuf::v1::GeometryData* mutable_intersects();
  void set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_intersects() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_intersects();
  public:
  void unsafe_arena_set_allocated_intersects(
      ::epl::protobuf::v1::GeometryData* intersects);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_intersects();

  // .epl.protobuf.v1.EnvelopeData bbox = 8;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::epl::protobuf::v1::EnvelopeData& bbox() const;
  ::epl::protobuf::v1::EnvelopeData* release_bbox();
  ::epl::protobuf::v1::EnvelopeData* mutable_bbox();
  void set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_bbox() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::epl::protobuf::v1::EnvelopeData* bbox);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_bbox();

  // .epl.protobuf.v1.GeometryRequest geometry_request = 9;
  bool has_geometry_request() const;
  private:
  bool _internal_has_geometry_request() const;
  public:
  void clear_geometry_request();
  const ::epl::protobuf::v1::GeometryRequest& geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* release_geometry_request();
  ::epl::protobuf::v1::GeometryRequest* mutable_geometry_request();
  void set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request);
  private:
  const ::epl::protobuf::v1::GeometryRequest& _internal_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* _internal_mutable_geometry_request();
  public:
  void unsafe_arena_set_allocated_geometry_request(
      ::epl::protobuf::v1::GeometryRequest* geometry_request);
  ::epl::protobuf::v1::GeometryRequest* unsafe_arena_release_geometry_request();

  // .epl.protobuf.v1.TimestampFilter datetime = 10;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const ::epl::protobuf::v1::TimestampFilter& datetime() const;
  ::epl::protobuf::v1::TimestampFilter* release_datetime();
  ::epl::protobuf::v1::TimestampFilter* mutable_datetime();
  void set_allocated_datetime(::epl::protobuf::v1::TimestampFilter* datetime);
  private:
  const ::epl::protobuf::v1::TimestampFilter& _internal_datetime() const;
  ::epl::protobuf::v1::TimestampFilter* _internal_mutable_datetime();
  public:
  void unsafe_arena_set_allocated_datetime(
      ::epl::protobuf::v1::TimestampFilter* datetime);
  ::epl::protobuf::v1::TimestampFilter* unsafe_arena_release_datetime();

  // .epl.protobuf.v1.TimestampFilter observed = 11;
  bool has_observed() const;
  private:
  bool _internal_has_observed() const;
  public:
  void clear_observed();
  const ::epl::protobuf::v1::TimestampFilter& observed() const;
  ::epl::protobuf::v1::TimestampFilter* release_observed();
  ::epl::protobuf::v1::TimestampFilter* mutable_observed();
  void set_allocated_observed(::epl::protobuf::v1::TimestampFilter* observed);
  private:
  const ::epl::protobuf::v1::TimestampFilter& _internal_observed() const;
  ::epl::protobuf::v1::TimestampFilter* _internal_mutable_observed();
  public:
  void unsafe_arena_set_allocated_observed(
      ::epl::protobuf::v1::TimestampFilter* observed);
  ::epl::protobuf::v1::TimestampFilter* unsafe_arena_release_observed();

  void clear_identity();
  IdentityCase identity_case() const;
  void clear_spatial();
  SpatialCase spatial_case() const;
  void clear_temporal();
  TemporalCase temporal_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.StacRequest)
 private:
  class _Internal;
  void set_has_id();
  void set_has_id_complex();
  void set_has_intersects();
  void set_has_bbox();
  void set_has_geometry_request();
  void set_has_datetime();
  void set_has_observed();

  inline bool has_identity() const;
  inline void clear_has_identity();

  inline bool has_spatial() const;
  inline void clear_has_spatial();

  inline bool has_temporal() const;
  inline void clear_has_temporal();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  PROTOBUF_NAMESPACE_ID::Any* properties_;
  ::epl::protobuf::v1::TimestampFilter* created_;
  ::epl::protobuf::v1::TimestampFilter* updated_;
  ::epl::protobuf::v1::ProjectionData* proj_;
  ::epl::protobuf::v1::FloatFilter* gsd_;
  ::epl::protobuf::v1::EoRequest* eo_;
  ::epl::protobuf::v1::ViewRequest* view_;
  ::epl::protobuf::v1::LandsatRequest* landsat_;
  ::epl::protobuf::v1::MosaicRequest* mosaic_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  int platform_enum_;
  int mission_enum_;
  int instrument_enum_;
  int constellation_enum_;
  union IdentityUnion {
    constexpr IdentityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::epl::protobuf::v1::StringFilter* id_complex_;
  } identity_;
  union SpatialUnion {
    constexpr SpatialUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::GeometryData* intersects_;
    ::epl::protobuf::v1::EnvelopeData* bbox_;
    ::epl::protobuf::v1::GeometryRequest* geometry_request_;
  } spatial_;
  union TemporalUnion {
    constexpr TemporalUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::TimestampFilter* datetime_;
    ::epl::protobuf::v1::TimestampFilter* observed_;
  } temporal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class View PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.View) */ {
 public:
  inline View() : View(nullptr) {}
  virtual ~View();
  explicit constexpr View(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance() {
    return *internal_default_instance();
  }
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(View* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.View";
  }
  protected:
  explicit View(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffNadirFieldNumber = 1,
    kIncidenceAngleFieldNumber = 2,
    kAzimuthFieldNumber = 3,
    kSunAzimuthFieldNumber = 4,
    kSunElevationFieldNumber = 5,
  };
  // .google.protobuf.FloatValue off_nadir = 1;
  bool has_off_nadir() const;
  private:
  bool _internal_has_off_nadir() const;
  public:
  void clear_off_nadir();
  const PROTOBUF_NAMESPACE_ID::FloatValue& off_nadir() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_off_nadir();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_off_nadir();
  void set_allocated_off_nadir(PROTOBUF_NAMESPACE_ID::FloatValue* off_nadir);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_off_nadir() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_off_nadir();
  public:
  void unsafe_arena_set_allocated_off_nadir(
      PROTOBUF_NAMESPACE_ID::FloatValue* off_nadir);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_off_nadir();

  // .google.protobuf.FloatValue incidence_angle = 2;
  bool has_incidence_angle() const;
  private:
  bool _internal_has_incidence_angle() const;
  public:
  void clear_incidence_angle();
  const PROTOBUF_NAMESPACE_ID::FloatValue& incidence_angle() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_incidence_angle();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_incidence_angle();
  void set_allocated_incidence_angle(PROTOBUF_NAMESPACE_ID::FloatValue* incidence_angle);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_incidence_angle() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_incidence_angle();
  public:
  void unsafe_arena_set_allocated_incidence_angle(
      PROTOBUF_NAMESPACE_ID::FloatValue* incidence_angle);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_incidence_angle();

  // .google.protobuf.FloatValue azimuth = 3;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  const PROTOBUF_NAMESPACE_ID::FloatValue& azimuth() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_azimuth();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_azimuth();
  void set_allocated_azimuth(PROTOBUF_NAMESPACE_ID::FloatValue* azimuth);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_azimuth() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_azimuth();
  public:
  void unsafe_arena_set_allocated_azimuth(
      PROTOBUF_NAMESPACE_ID::FloatValue* azimuth);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_azimuth();

  // .google.protobuf.FloatValue sun_azimuth = 4;
  bool has_sun_azimuth() const;
  private:
  bool _internal_has_sun_azimuth() const;
  public:
  void clear_sun_azimuth();
  const PROTOBUF_NAMESPACE_ID::FloatValue& sun_azimuth() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_sun_azimuth();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_sun_azimuth();
  void set_allocated_sun_azimuth(PROTOBUF_NAMESPACE_ID::FloatValue* sun_azimuth);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_sun_azimuth() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_sun_azimuth();
  public:
  void unsafe_arena_set_allocated_sun_azimuth(
      PROTOBUF_NAMESPACE_ID::FloatValue* sun_azimuth);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_sun_azimuth();

  // .google.protobuf.FloatValue sun_elevation = 5;
  bool has_sun_elevation() const;
  private:
  bool _internal_has_sun_elevation() const;
  public:
  void clear_sun_elevation();
  const PROTOBUF_NAMESPACE_ID::FloatValue& sun_elevation() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_sun_elevation();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_sun_elevation();
  void set_allocated_sun_elevation(PROTOBUF_NAMESPACE_ID::FloatValue* sun_elevation);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_sun_elevation() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_sun_elevation();
  public:
  void unsafe_arena_set_allocated_sun_elevation(
      PROTOBUF_NAMESPACE_ID::FloatValue* sun_elevation);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_sun_elevation();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.View)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* off_nadir_;
  PROTOBUF_NAMESPACE_ID::FloatValue* incidence_angle_;
  PROTOBUF_NAMESPACE_ID::FloatValue* azimuth_;
  PROTOBUF_NAMESPACE_ID::FloatValue* sun_azimuth_;
  PROTOBUF_NAMESPACE_ID::FloatValue* sun_elevation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class ViewRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.ViewRequest) */ {
 public:
  inline ViewRequest() : ViewRequest(nullptr) {}
  virtual ~ViewRequest();
  explicit constexpr ViewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewRequest(const ViewRequest& from);
  ViewRequest(ViewRequest&& from) noexcept
    : ViewRequest() {
    *this = ::std::move(from);
  }

  inline ViewRequest& operator=(const ViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewRequest& operator=(ViewRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewRequest* internal_default_instance() {
    return reinterpret_cast<const ViewRequest*>(
               &_ViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ViewRequest& a, ViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewRequest* New() const final {
    return CreateMaybeMessage<ViewRequest>(nullptr);
  }

  ViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewRequest& from);
  void MergeFrom(const ViewRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.ViewRequest";
  }
  protected:
  explicit ViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffNadirFieldNumber = 1,
    kIncidenceAngleFieldNumber = 2,
    kAzimuthFieldNumber = 3,
    kSunAzimuthFieldNumber = 4,
    kSunElevationFieldNumber = 5,
  };
  // .epl.protobuf.v1.FloatFilter off_nadir = 1;
  bool has_off_nadir() const;
  private:
  bool _internal_has_off_nadir() const;
  public:
  void clear_off_nadir();
  const ::epl::protobuf::v1::FloatFilter& off_nadir() const;
  ::epl::protobuf::v1::FloatFilter* release_off_nadir();
  ::epl::protobuf::v1::FloatFilter* mutable_off_nadir();
  void set_allocated_off_nadir(::epl::protobuf::v1::FloatFilter* off_nadir);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_off_nadir() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_off_nadir();
  public:
  void unsafe_arena_set_allocated_off_nadir(
      ::epl::protobuf::v1::FloatFilter* off_nadir);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_off_nadir();

  // .epl.protobuf.v1.FloatFilter incidence_angle = 2;
  bool has_incidence_angle() const;
  private:
  bool _internal_has_incidence_angle() const;
  public:
  void clear_incidence_angle();
  const ::epl::protobuf::v1::FloatFilter& incidence_angle() const;
  ::epl::protobuf::v1::FloatFilter* release_incidence_angle();
  ::epl::protobuf::v1::FloatFilter* mutable_incidence_angle();
  void set_allocated_incidence_angle(::epl::protobuf::v1::FloatFilter* incidence_angle);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_incidence_angle() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_incidence_angle();
  public:
  void unsafe_arena_set_allocated_incidence_angle(
      ::epl::protobuf::v1::FloatFilter* incidence_angle);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_incidence_angle();

  // .epl.protobuf.v1.FloatFilter azimuth = 3;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  const ::epl::protobuf::v1::FloatFilter& azimuth() const;
  ::epl::protobuf::v1::FloatFilter* release_azimuth();
  ::epl::protobuf::v1::FloatFilter* mutable_azimuth();
  void set_allocated_azimuth(::epl::protobuf::v1::FloatFilter* azimuth);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_azimuth() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_azimuth();
  public:
  void unsafe_arena_set_allocated_azimuth(
      ::epl::protobuf::v1::FloatFilter* azimuth);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_azimuth();

  // .epl.protobuf.v1.FloatFilter sun_azimuth = 4;
  bool has_sun_azimuth() const;
  private:
  bool _internal_has_sun_azimuth() const;
  public:
  void clear_sun_azimuth();
  const ::epl::protobuf::v1::FloatFilter& sun_azimuth() const;
  ::epl::protobuf::v1::FloatFilter* release_sun_azimuth();
  ::epl::protobuf::v1::FloatFilter* mutable_sun_azimuth();
  void set_allocated_sun_azimuth(::epl::protobuf::v1::FloatFilter* sun_azimuth);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_sun_azimuth() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_sun_azimuth();
  public:
  void unsafe_arena_set_allocated_sun_azimuth(
      ::epl::protobuf::v1::FloatFilter* sun_azimuth);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_sun_azimuth();

  // .epl.protobuf.v1.FloatFilter sun_elevation = 5;
  bool has_sun_elevation() const;
  private:
  bool _internal_has_sun_elevation() const;
  public:
  void clear_sun_elevation();
  const ::epl::protobuf::v1::FloatFilter& sun_elevation() const;
  ::epl::protobuf::v1::FloatFilter* release_sun_elevation();
  ::epl::protobuf::v1::FloatFilter* mutable_sun_elevation();
  void set_allocated_sun_elevation(::epl::protobuf::v1::FloatFilter* sun_elevation);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_sun_elevation() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_sun_elevation();
  public:
  void unsafe_arena_set_allocated_sun_elevation(
      ::epl::protobuf::v1::FloatFilter* sun_elevation);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_sun_elevation();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.ViewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::epl::protobuf::v1::FloatFilter* off_nadir_;
  ::epl::protobuf::v1::FloatFilter* incidence_angle_;
  ::epl::protobuf::v1::FloatFilter* azimuth_;
  ::epl::protobuf::v1::FloatFilter* sun_azimuth_;
  ::epl::protobuf::v1::FloatFilter* sun_elevation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Sat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Sat) */ {
 public:
  inline Sat() : Sat(nullptr) {}
  virtual ~Sat();
  explicit constexpr Sat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sat(const Sat& from);
  Sat(Sat&& from) noexcept
    : Sat() {
    *this = ::std::move(from);
  }

  inline Sat& operator=(const Sat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sat& operator=(Sat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sat* internal_default_instance() {
    return reinterpret_cast<const Sat*>(
               &_Sat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Sat& a, Sat& b) {
    a.Swap(&b);
  }
  inline void Swap(Sat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sat* New() const final {
    return CreateMaybeMessage<Sat>(nullptr);
  }

  Sat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sat& from);
  void MergeFrom(const Sat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Sat";
  }
  protected:
  explicit Sat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sat_OrbitState OrbitState;
  static constexpr OrbitState UKNOWN_ORBIT_STATE =
    Sat_OrbitState_UKNOWN_ORBIT_STATE;
  static constexpr OrbitState ASCENDING_ORBIT =
    Sat_OrbitState_ASCENDING_ORBIT;
  static constexpr OrbitState DESCENDING_ORBIT =
    Sat_OrbitState_DESCENDING_ORBIT;
  static constexpr OrbitState GEOSTATIONARY_ORBIT =
    Sat_OrbitState_GEOSTATIONARY_ORBIT;
  static inline bool OrbitState_IsValid(int value) {
    return Sat_OrbitState_IsValid(value);
  }
  static constexpr OrbitState OrbitState_MIN =
    Sat_OrbitState_OrbitState_MIN;
  static constexpr OrbitState OrbitState_MAX =
    Sat_OrbitState_OrbitState_MAX;
  static constexpr int OrbitState_ARRAYSIZE =
    Sat_OrbitState_OrbitState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrbitState_descriptor() {
    return Sat_OrbitState_descriptor();
  }
  template<typename T>
  static inline const std::string& OrbitState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrbitState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrbitState_Name.");
    return Sat_OrbitState_Name(enum_t_value);
  }
  static inline bool OrbitState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrbitState* value) {
    return Sat_OrbitState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeOrbitFieldNumber = 6,
    kOrbitStateFieldNumber = 1,
  };
  // .google.protobuf.UInt32Value relative_orbit = 6;
  bool has_relative_orbit() const;
  private:
  bool _internal_has_relative_orbit() const;
  public:
  void clear_relative_orbit();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& relative_orbit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_relative_orbit();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_relative_orbit();
  void set_allocated_relative_orbit(PROTOBUF_NAMESPACE_ID::UInt32Value* relative_orbit);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_relative_orbit() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_relative_orbit();
  public:
  void unsafe_arena_set_allocated_relative_orbit(
      PROTOBUF_NAMESPACE_ID::UInt32Value* relative_orbit);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_relative_orbit();

  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  void clear_orbit_state();
  ::epl::protobuf::v1::Sat_OrbitState orbit_state() const;
  void set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value);
  private:
  ::epl::protobuf::v1::Sat_OrbitState _internal_orbit_state() const;
  void _internal_set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Sat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* relative_orbit_;
  int orbit_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class SatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.SatRequest) */ {
 public:
  inline SatRequest() : SatRequest(nullptr) {}
  virtual ~SatRequest();
  explicit constexpr SatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SatRequest(const SatRequest& from);
  SatRequest(SatRequest&& from) noexcept
    : SatRequest() {
    *this = ::std::move(from);
  }

  inline SatRequest& operator=(const SatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatRequest& operator=(SatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SatRequest* internal_default_instance() {
    return reinterpret_cast<const SatRequest*>(
               &_SatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SatRequest& a, SatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SatRequest* New() const final {
    return CreateMaybeMessage<SatRequest>(nullptr);
  }

  SatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SatRequest& from);
  void MergeFrom(const SatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.SatRequest";
  }
  protected:
  explicit SatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrbitStateFieldNumber = 1,
    kRelativeOrbitFieldNumber = 6,
  };
  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  void clear_orbit_state();
  ::epl::protobuf::v1::Sat_OrbitState orbit_state() const;
  void set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value);
  private:
  ::epl::protobuf::v1::Sat_OrbitState _internal_orbit_state() const;
  void _internal_set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value);
  public:

  // uint32 relative_orbit = 6;
  void clear_relative_orbit();
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_orbit() const;
  void set_relative_orbit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relative_orbit() const;
  void _internal_set_relative_orbit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.SatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int orbit_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_orbit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Eo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Eo) */ {
 public:
  inline Eo() : Eo(nullptr) {}
  virtual ~Eo();
  explicit constexpr Eo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Eo(const Eo& from);
  Eo(Eo&& from) noexcept
    : Eo() {
    *this = ::std::move(from);
  }

  inline Eo& operator=(const Eo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Eo& operator=(Eo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Eo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Eo* internal_default_instance() {
    return reinterpret_cast<const Eo*>(
               &_Eo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Eo& a, Eo& b) {
    a.Swap(&b);
  }
  inline void Swap(Eo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Eo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Eo* New() const final {
    return CreateMaybeMessage<Eo>(nullptr);
  }

  Eo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Eo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Eo& from);
  void MergeFrom(const Eo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Eo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Eo";
  }
  protected:
  explicit Eo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Eo_Band Band;
  static constexpr Band UNKNOWN_BAND =
    Eo_Band_UNKNOWN_BAND;
  static constexpr Band COASTAL =
    Eo_Band_COASTAL;
  static constexpr Band BLUE =
    Eo_Band_BLUE;
  static constexpr Band GREEN =
    Eo_Band_GREEN;
  static constexpr Band RED =
    Eo_Band_RED;
  static constexpr Band RGB =
    Eo_Band_RGB;
  static constexpr Band NIR =
    Eo_Band_NIR;
  static constexpr Band NIR_2 =
    Eo_Band_NIR_2;
  static constexpr Band RGBIR =
    Eo_Band_RGBIR;
  static constexpr Band SWIR_1 =
    Eo_Band_SWIR_1;
  static constexpr Band SWIR_2 =
    Eo_Band_SWIR_2;
  static constexpr Band PAN =
    Eo_Band_PAN;
  static constexpr Band CIRRUS =
    Eo_Band_CIRRUS;
  static constexpr Band LWIR_1 =
    Eo_Band_LWIR_1;
  static constexpr Band LWIR_2 =
    Eo_Band_LWIR_2;
  static inline bool Band_IsValid(int value) {
    return Eo_Band_IsValid(value);
  }
  static constexpr Band Band_MIN =
    Eo_Band_Band_MIN;
  static constexpr Band Band_MAX =
    Eo_Band_Band_MAX;
  static constexpr int Band_ARRAYSIZE =
    Eo_Band_Band_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Band_descriptor() {
    return Eo_Band_descriptor();
  }
  template<typename T>
  static inline const std::string& Band_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Band>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Band_Name.");
    return Eo_Band_Name(enum_t_value);
  }
  static inline bool Band_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Band* value) {
    return Eo_Band_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCloudCoverFieldNumber = 1,
    kBandsFieldNumber = 2,
  };
  // .google.protobuf.FloatValue cloud_cover = 1;
  bool has_cloud_cover() const;
  private:
  bool _internal_has_cloud_cover() const;
  public:
  void clear_cloud_cover();
  const PROTOBUF_NAMESPACE_ID::FloatValue& cloud_cover() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_cloud_cover();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_cloud_cover();
  void set_allocated_cloud_cover(PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_cloud_cover() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_cloud_cover();
  public:
  void unsafe_arena_set_allocated_cloud_cover(
      PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_cloud_cover();

  // .epl.protobuf.v1.Eo.Band bands = 2;
  void clear_bands();
  ::epl::protobuf::v1::Eo_Band bands() const;
  void set_bands(::epl::protobuf::v1::Eo_Band value);
  private:
  ::epl::protobuf::v1::Eo_Band _internal_bands() const;
  void _internal_set_bands(::epl::protobuf::v1::Eo_Band value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Eo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_;
  int bands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class EoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.EoRequest) */ {
 public:
  inline EoRequest() : EoRequest(nullptr) {}
  virtual ~EoRequest();
  explicit constexpr EoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EoRequest(const EoRequest& from);
  EoRequest(EoRequest&& from) noexcept
    : EoRequest() {
    *this = ::std::move(from);
  }

  inline EoRequest& operator=(const EoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EoRequest& operator=(EoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EoRequest* internal_default_instance() {
    return reinterpret_cast<const EoRequest*>(
               &_EoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EoRequest& a, EoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EoRequest* New() const final {
    return CreateMaybeMessage<EoRequest>(nullptr);
  }

  EoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EoRequest& from);
  void MergeFrom(const EoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.EoRequest";
  }
  protected:
  explicit EoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudCoverFieldNumber = 1,
    kBandsFieldNumber = 2,
  };
  // .epl.protobuf.v1.FloatFilter cloud_cover = 1;
  bool has_cloud_cover() const;
  private:
  bool _internal_has_cloud_cover() const;
  public:
  void clear_cloud_cover();
  const ::epl::protobuf::v1::FloatFilter& cloud_cover() const;
  ::epl::protobuf::v1::FloatFilter* release_cloud_cover();
  ::epl::protobuf::v1::FloatFilter* mutable_cloud_cover();
  void set_allocated_cloud_cover(::epl::protobuf::v1::FloatFilter* cloud_cover);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_cloud_cover() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_cloud_cover();
  public:
  void unsafe_arena_set_allocated_cloud_cover(
      ::epl::protobuf::v1::FloatFilter* cloud_cover);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_cloud_cover();

  // .epl.protobuf.v1.Eo.Band bands = 2;
  void clear_bands();
  ::epl::protobuf::v1::Eo_Band bands() const;
  void set_bands(::epl::protobuf::v1::Eo_Band value);
  private:
  ::epl::protobuf::v1::Eo_Band _internal_bands() const;
  void _internal_set_bands(::epl::protobuf::v1::Eo_Band value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.EoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::epl::protobuf::v1::FloatFilter* cloud_cover_;
  int bands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  virtual ~Asset();
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHrefFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBucketManagerFieldNumber = 6,
    kBucketRegionFieldNumber = 7,
    kBucketFieldNumber = 8,
    kObjectPathFieldNumber = 9,
    kEoBandsFieldNumber = 3,
    kAssetTypeFieldNumber = 4,
    kCloudPlatformFieldNumber = 5,
    kRequesterPaysFieldNumber = 10,
  };
  // string href = 1;
  void clear_href();
  const std::string& href() const;
  void set_href(const std::string& value);
  void set_href(std::string&& value);
  void set_href(const char* value);
  void set_href(const char* value, size_t size);
  std::string* mutable_href();
  std::string* release_href();
  void set_allocated_href(std::string* href);
  private:
  const std::string& _internal_href() const;
  void _internal_set_href(const std::string& value);
  std::string* _internal_mutable_href();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string bucket_manager = 6;
  void clear_bucket_manager();
  const std::string& bucket_manager() const;
  void set_bucket_manager(const std::string& value);
  void set_bucket_manager(std::string&& value);
  void set_bucket_manager(const char* value);
  void set_bucket_manager(const char* value, size_t size);
  std::string* mutable_bucket_manager();
  std::string* release_bucket_manager();
  void set_allocated_bucket_manager(std::string* bucket_manager);
  private:
  const std::string& _internal_bucket_manager() const;
  void _internal_set_bucket_manager(const std::string& value);
  std::string* _internal_mutable_bucket_manager();
  public:

  // string bucket_region = 7;
  void clear_bucket_region();
  const std::string& bucket_region() const;
  void set_bucket_region(const std::string& value);
  void set_bucket_region(std::string&& value);
  void set_bucket_region(const char* value);
  void set_bucket_region(const char* value, size_t size);
  std::string* mutable_bucket_region();
  std::string* release_bucket_region();
  void set_allocated_bucket_region(std::string* bucket_region);
  private:
  const std::string& _internal_bucket_region() const;
  void _internal_set_bucket_region(const std::string& value);
  std::string* _internal_mutable_bucket_region();
  public:

  // string bucket = 8;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object_path = 9;
  void clear_object_path();
  const std::string& object_path() const;
  void set_object_path(const std::string& value);
  void set_object_path(std::string&& value);
  void set_object_path(const char* value);
  void set_object_path(const char* value, size_t size);
  std::string* mutable_object_path();
  std::string* release_object_path();
  void set_allocated_object_path(std::string* object_path);
  private:
  const std::string& _internal_object_path() const;
  void _internal_set_object_path(const std::string& value);
  std::string* _internal_mutable_object_path();
  public:

  // .epl.protobuf.v1.Eo.Band eo_bands = 3;
  void clear_eo_bands();
  ::epl::protobuf::v1::Eo_Band eo_bands() const;
  void set_eo_bands(::epl::protobuf::v1::Eo_Band value);
  private:
  ::epl::protobuf::v1::Eo_Band _internal_eo_bands() const;
  void _internal_set_eo_bands(::epl::protobuf::v1::Eo_Band value);
  public:

  // .epl.protobuf.v1.AssetType asset_type = 4;
  void clear_asset_type();
  ::epl::protobuf::v1::AssetType asset_type() const;
  void set_asset_type(::epl::protobuf::v1::AssetType value);
  private:
  ::epl::protobuf::v1::AssetType _internal_asset_type() const;
  void _internal_set_asset_type(::epl::protobuf::v1::AssetType value);
  public:

  // .epl.protobuf.v1.CloudPlatform cloud_platform = 5;
  void clear_cloud_platform();
  ::epl::protobuf::v1::CloudPlatform cloud_platform() const;
  void set_cloud_platform(::epl::protobuf::v1::CloudPlatform value);
  private:
  ::epl::protobuf::v1::CloudPlatform _internal_cloud_platform() const;
  void _internal_set_cloud_platform(::epl::protobuf::v1::CloudPlatform value);
  public:

  // bool requester_pays = 10;
  void clear_requester_pays();
  bool requester_pays() const;
  void set_requester_pays(bool value);
  private:
  bool _internal_requester_pays() const;
  void _internal_set_requester_pays(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr href_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_manager_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_path_;
  int eo_bands_;
  int asset_type_;
  int cloud_platform_;
  bool requester_pays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class DatetimeRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.DatetimeRange) */ {
 public:
  inline DatetimeRange() : DatetimeRange(nullptr) {}
  virtual ~DatetimeRange();
  explicit constexpr DatetimeRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatetimeRange(const DatetimeRange& from);
  DatetimeRange(DatetimeRange&& from) noexcept
    : DatetimeRange() {
    *this = ::std::move(from);
  }

  inline DatetimeRange& operator=(const DatetimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatetimeRange& operator=(DatetimeRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatetimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatetimeRange* internal_default_instance() {
    return reinterpret_cast<const DatetimeRange*>(
               &_DatetimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DatetimeRange& a, DatetimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DatetimeRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatetimeRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatetimeRange* New() const final {
    return CreateMaybeMessage<DatetimeRange>(nullptr);
  }

  DatetimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatetimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatetimeRange& from);
  void MergeFrom(const DatetimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatetimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.DatetimeRange";
  }
  protected:
  explicit DatetimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.DatetimeRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class StacDbResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.StacDbResponse) */ {
 public:
  inline StacDbResponse() : StacDbResponse(nullptr) {}
  virtual ~StacDbResponse();
  explicit constexpr StacDbResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StacDbResponse(const StacDbResponse& from);
  StacDbResponse(StacDbResponse&& from) noexcept
    : StacDbResponse() {
    *this = ::std::move(from);
  }

  inline StacDbResponse& operator=(const StacDbResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StacDbResponse& operator=(StacDbResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StacDbResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StacDbResponse* internal_default_instance() {
    return reinterpret_cast<const StacDbResponse*>(
               &_StacDbResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StacDbResponse& a, StacDbResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StacDbResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StacDbResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StacDbResponse* New() const final {
    return CreateMaybeMessage<StacDbResponse>(nullptr);
  }

  StacDbResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StacDbResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StacDbResponse& from);
  void MergeFrom(const StacDbResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StacDbResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.StacDbResponse";
  }
  protected:
  explicit StacDbResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataIdFieldNumber = 3,
    kCountFieldNumber = 4,
    kStatusCodeFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string data_id = 3;
  void clear_data_id();
  const std::string& data_id() const;
  void set_data_id(const std::string& value);
  void set_data_id(std::string&& value);
  void set_data_id(const char* value);
  void set_data_id(const char* value, size_t size);
  std::string* mutable_data_id();
  std::string* release_data_id();
  void set_allocated_data_id(std::string* data_id);
  private:
  const std::string& _internal_data_id() const;
  void _internal_set_data_id(const std::string& value);
  std::string* _internal_mutable_data_id();
  public:

  // uint64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 status_code = 2;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.StacDbResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Sar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Sar) */ {
 public:
  inline Sar() : Sar(nullptr) {}
  virtual ~Sar();
  explicit constexpr Sar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sar(const Sar& from);
  Sar(Sar&& from) noexcept
    : Sar() {
    *this = ::std::move(from);
  }

  inline Sar& operator=(const Sar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sar& operator=(Sar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sar* internal_default_instance() {
    return reinterpret_cast<const Sar*>(
               &_Sar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Sar& a, Sar& b) {
    a.Swap(&b);
  }
  inline void Swap(Sar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sar* New() const final {
    return CreateMaybeMessage<Sar>(nullptr);
  }

  Sar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sar& from);
  void MergeFrom(const Sar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Sar";
  }
  protected:
  explicit Sar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sar_Platform Platform;
  static constexpr Platform UNKNOWN_PLATFORM =
    Sar_Platform_UNKNOWN_PLATFORM;
  static constexpr Platform ENVISAT =
    Sar_Platform_ENVISAT;
  static constexpr Platform SENTINEL_1A =
    Sar_Platform_SENTINEL_1A;
  static inline bool Platform_IsValid(int value) {
    return Sar_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    Sar_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    Sar_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    Sar_Platform_Platform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Platform_descriptor() {
    return Sar_Platform_descriptor();
  }
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return Sar_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return Sar_Platform_Parse(name, value);
  }

  typedef Sar_Instrument Instrument;
  static constexpr Instrument UNKNOWN_INSTRUMENT =
    Sar_Instrument_UNKNOWN_INSTRUMENT;
  static inline bool Instrument_IsValid(int value) {
    return Sar_Instrument_IsValid(value);
  }
  static constexpr Instrument Instrument_MIN =
    Sar_Instrument_Instrument_MIN;
  static constexpr Instrument Instrument_MAX =
    Sar_Instrument_Instrument_MAX;
  static constexpr int Instrument_ARRAYSIZE =
    Sar_Instrument_Instrument_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Instrument_descriptor() {
    return Sar_Instrument_descriptor();
  }
  template<typename T>
  static inline const std::string& Instrument_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Instrument>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Instrument_Name.");
    return Sar_Instrument_Name(enum_t_value);
  }
  static inline bool Instrument_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Instrument* value) {
    return Sar_Instrument_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 1,
  };
  // .epl.protobuf.v1.Sar.Platform platform = 1;
  void clear_platform();
  ::epl::protobuf::v1::Sar_Platform platform() const;
  void set_platform(::epl::protobuf::v1::Sar_Platform value);
  private:
  ::epl::protobuf::v1::Sar_Platform _internal_platform() const;
  void _internal_set_platform(::epl::protobuf::v1::Sar_Platform value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Sar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Landsat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Landsat) */ {
 public:
  inline Landsat() : Landsat(nullptr) {}
  virtual ~Landsat();
  explicit constexpr Landsat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Landsat(const Landsat& from);
  Landsat(Landsat&& from) noexcept
    : Landsat() {
    *this = ::std::move(from);
  }

  inline Landsat& operator=(const Landsat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Landsat& operator=(Landsat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Landsat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Landsat* internal_default_instance() {
    return reinterpret_cast<const Landsat*>(
               &_Landsat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Landsat& a, Landsat& b) {
    a.Swap(&b);
  }
  inline void Swap(Landsat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Landsat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Landsat* New() const final {
    return CreateMaybeMessage<Landsat>(nullptr);
  }

  Landsat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Landsat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Landsat& from);
  void MergeFrom(const Landsat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landsat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Landsat";
  }
  protected:
  explicit Landsat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Landsat_CollectionCategory CollectionCategory;
  static constexpr CollectionCategory UNKNOWN_COLLECTION_CATEGORY =
    Landsat_CollectionCategory_UNKNOWN_COLLECTION_CATEGORY;
  static constexpr CollectionCategory A1 =
    Landsat_CollectionCategory_A1;
  static constexpr CollectionCategory A2 =
    Landsat_CollectionCategory_A2;
  static constexpr CollectionCategory T1 =
    Landsat_CollectionCategory_T1;
  static constexpr CollectionCategory T2 =
    Landsat_CollectionCategory_T2;
  static constexpr CollectionCategory RT =
    Landsat_CollectionCategory_RT;
  static inline bool CollectionCategory_IsValid(int value) {
    return Landsat_CollectionCategory_IsValid(value);
  }
  static constexpr CollectionCategory CollectionCategory_MIN =
    Landsat_CollectionCategory_CollectionCategory_MIN;
  static constexpr CollectionCategory CollectionCategory_MAX =
    Landsat_CollectionCategory_CollectionCategory_MAX;
  static constexpr int CollectionCategory_ARRAYSIZE =
    Landsat_CollectionCategory_CollectionCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CollectionCategory_descriptor() {
    return Landsat_CollectionCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& CollectionCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CollectionCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CollectionCategory_Name.");
    return Landsat_CollectionCategory_Name(enum_t_value);
  }
  static inline bool CollectionCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CollectionCategory* value) {
    return Landsat_CollectionCategory_Parse(name, value);
  }

  typedef Landsat_WRSType WRSType;
  static constexpr WRSType UKNOWN_WRS =
    Landsat_WRSType_UKNOWN_WRS;
  static constexpr WRSType WRS1 =
    Landsat_WRSType_WRS1;
  static constexpr WRSType WRS2 =
    Landsat_WRSType_WRS2;
  static inline bool WRSType_IsValid(int value) {
    return Landsat_WRSType_IsValid(value);
  }
  static constexpr WRSType WRSType_MIN =
    Landsat_WRSType_WRSType_MIN;
  static constexpr WRSType WRSType_MAX =
    Landsat_WRSType_WRSType_MAX;
  static constexpr int WRSType_ARRAYSIZE =
    Landsat_WRSType_WRSType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WRSType_descriptor() {
    return Landsat_WRSType_descriptor();
  }
  template<typename T>
  static inline const std::string& WRSType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WRSType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WRSType_Name.");
    return Landsat_WRSType_Name(enum_t_value);
  }
  static inline bool WRSType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WRSType* value) {
    return Landsat_WRSType_Parse(name, value);
  }

  typedef Landsat_ProcessingLevel ProcessingLevel;
  static constexpr ProcessingLevel UNKNOWN_PROCESSING_LEVEL =
    Landsat_ProcessingLevel_UNKNOWN_PROCESSING_LEVEL;
  static constexpr ProcessingLevel L1G =
    Landsat_ProcessingLevel_L1G;
  static constexpr ProcessingLevel L1TP =
    Landsat_ProcessingLevel_L1TP;
  static constexpr ProcessingLevel L1T =
    Landsat_ProcessingLevel_L1T;
  static constexpr ProcessingLevel L1GT =
    Landsat_ProcessingLevel_L1GT;
  static constexpr ProcessingLevel L1GS =
    Landsat_ProcessingLevel_L1GS;
  static inline bool ProcessingLevel_IsValid(int value) {
    return Landsat_ProcessingLevel_IsValid(value);
  }
  static constexpr ProcessingLevel ProcessingLevel_MIN =
    Landsat_ProcessingLevel_ProcessingLevel_MIN;
  static constexpr ProcessingLevel ProcessingLevel_MAX =
    Landsat_ProcessingLevel_ProcessingLevel_MAX;
  static constexpr int ProcessingLevel_ARRAYSIZE =
    Landsat_ProcessingLevel_ProcessingLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessingLevel_descriptor() {
    return Landsat_ProcessingLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessingLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessingLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessingLevel_Name.");
    return Landsat_ProcessingLevel_Name(enum_t_value);
  }
  static inline bool ProcessingLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProcessingLevel* value) {
    return Landsat_ProcessingLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
    kCloudCoverLandFieldNumber = 6,
    kProcessingLevelFieldNumber = 3,
    kWrsPathFieldNumber = 4,
    kWrsRowFieldNumber = 5,
    kWrsTypeFieldNumber = 7,
  };
  // string scene_id = 1;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string product_id = 2;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // .google.protobuf.FloatValue cloud_cover_land = 6;
  bool has_cloud_cover_land() const;
  private:
  bool _internal_has_cloud_cover_land() const;
  public:
  void clear_cloud_cover_land();
  const PROTOBUF_NAMESPACE_ID::FloatValue& cloud_cover_land() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_cloud_cover_land();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_cloud_cover_land();
  void set_allocated_cloud_cover_land(PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_land);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_cloud_cover_land() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_cloud_cover_land();
  public:
  void unsafe_arena_set_allocated_cloud_cover_land(
      PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_land);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_cloud_cover_land();

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  void clear_processing_level();
  ::epl::protobuf::v1::Landsat_ProcessingLevel processing_level() const;
  void set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value);
  private:
  ::epl::protobuf::v1::Landsat_ProcessingLevel _internal_processing_level() const;
  void _internal_set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value);
  public:

  // int32 wrs_path = 4;
  void clear_wrs_path();
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_path() const;
  void set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrs_path() const;
  void _internal_set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wrs_row = 5;
  void clear_wrs_row();
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_row() const;
  void set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrs_row() const;
  void _internal_set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .epl.protobuf.v1.Landsat.WRSType wrs_type = 7;
  void clear_wrs_type();
  ::epl::protobuf::v1::Landsat_WRSType wrs_type() const;
  void set_wrs_type(::epl::protobuf::v1::Landsat_WRSType value);
  private:
  ::epl::protobuf::v1::Landsat_WRSType _internal_wrs_type() const;
  void _internal_set_wrs_type(::epl::protobuf::v1::Landsat_WRSType value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Landsat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_land_;
  int processing_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_row_;
  int wrs_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class LandsatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.LandsatRequest) */ {
 public:
  inline LandsatRequest() : LandsatRequest(nullptr) {}
  virtual ~LandsatRequest();
  explicit constexpr LandsatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandsatRequest(const LandsatRequest& from);
  LandsatRequest(LandsatRequest&& from) noexcept
    : LandsatRequest() {
    *this = ::std::move(from);
  }

  inline LandsatRequest& operator=(const LandsatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandsatRequest& operator=(LandsatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandsatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandsatRequest* internal_default_instance() {
    return reinterpret_cast<const LandsatRequest*>(
               &_LandsatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LandsatRequest& a, LandsatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LandsatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandsatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandsatRequest* New() const final {
    return CreateMaybeMessage<LandsatRequest>(nullptr);
  }

  LandsatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandsatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandsatRequest& from);
  void MergeFrom(const LandsatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandsatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.LandsatRequest";
  }
  protected:
  explicit LandsatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
    kCloudCoverLandFieldNumber = 6,
    kProcessingLevelFieldNumber = 3,
    kWrsPathFieldNumber = 4,
    kWrsRowFieldNumber = 5,
  };
  // string scene_id = 1;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string product_id = 2;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // .epl.protobuf.v1.FloatFilter cloud_cover_land = 6;
  bool has_cloud_cover_land() const;
  private:
  bool _internal_has_cloud_cover_land() const;
  public:
  void clear_cloud_cover_land();
  const ::epl::protobuf::v1::FloatFilter& cloud_cover_land() const;
  ::epl::protobuf::v1::FloatFilter* release_cloud_cover_land();
  ::epl::protobuf::v1::FloatFilter* mutable_cloud_cover_land();
  void set_allocated_cloud_cover_land(::epl::protobuf::v1::FloatFilter* cloud_cover_land);
  private:
  const ::epl::protobuf::v1::FloatFilter& _internal_cloud_cover_land() const;
  ::epl::protobuf::v1::FloatFilter* _internal_mutable_cloud_cover_land();
  public:
  void unsafe_arena_set_allocated_cloud_cover_land(
      ::epl::protobuf::v1::FloatFilter* cloud_cover_land);
  ::epl::protobuf::v1::FloatFilter* unsafe_arena_release_cloud_cover_land();

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  void clear_processing_level();
  ::epl::protobuf::v1::Landsat_ProcessingLevel processing_level() const;
  void set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value);
  private:
  ::epl::protobuf::v1::Landsat_ProcessingLevel _internal_processing_level() const;
  void _internal_set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value);
  public:

  // int32 wrs_path = 4;
  void clear_wrs_path();
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_path() const;
  void set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrs_path() const;
  void _internal_set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wrs_row = 5;
  void clear_wrs_row();
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_row() const;
  void set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrs_row() const;
  void _internal_set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.LandsatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::epl::protobuf::v1::FloatFilter* cloud_cover_land_;
  int processing_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrs_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class Mosaic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Mosaic) */ {
 public:
  inline Mosaic() : Mosaic(nullptr) {}
  virtual ~Mosaic();
  explicit constexpr Mosaic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mosaic(const Mosaic& from);
  Mosaic(Mosaic&& from) noexcept
    : Mosaic() {
    *this = ::std::move(from);
  }

  inline Mosaic& operator=(const Mosaic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mosaic& operator=(Mosaic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mosaic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mosaic* internal_default_instance() {
    return reinterpret_cast<const Mosaic*>(
               &_Mosaic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Mosaic& a, Mosaic& b) {
    a.Swap(&b);
  }
  inline void Swap(Mosaic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mosaic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mosaic* New() const final {
    return CreateMaybeMessage<Mosaic>(nullptr);
  }

  Mosaic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mosaic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mosaic& from);
  void MergeFrom(const Mosaic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mosaic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Mosaic";
  }
  protected:
  explicit Mosaic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoomsFieldNumber = 3,
    kProvenanceIdsFieldNumber = 5,
    kNameFieldNumber = 1,
    kQuadKeyFieldNumber = 2,
    kObservationRangeFieldNumber = 4,
  };
  // repeated int32 zooms = 3;
  int zooms_size() const;
  private:
  int _internal_zooms_size() const;
  public:
  void clear_zooms();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zooms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_zooms() const;
  void _internal_add_zooms(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_zooms();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 zooms(int index) const;
  void set_zooms(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_zooms(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      zooms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_zooms();

  // repeated string provenance_ids = 5;
  int provenance_ids_size() const;
  private:
  int _internal_provenance_ids_size() const;
  public:
  void clear_provenance_ids();
  const std::string& provenance_ids(int index) const;
  std::string* mutable_provenance_ids(int index);
  void set_provenance_ids(int index, const std::string& value);
  void set_provenance_ids(int index, std::string&& value);
  void set_provenance_ids(int index, const char* value);
  void set_provenance_ids(int index, const char* value, size_t size);
  std::string* add_provenance_ids();
  void add_provenance_ids(const std::string& value);
  void add_provenance_ids(std::string&& value);
  void add_provenance_ids(const char* value);
  void add_provenance_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& provenance_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_provenance_ids();
  private:
  const std::string& _internal_provenance_ids(int index) const;
  std::string* _internal_add_provenance_ids();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string quad_key = 2;
  void clear_quad_key();
  const std::string& quad_key() const;
  void set_quad_key(const std::string& value);
  void set_quad_key(std::string&& value);
  void set_quad_key(const char* value);
  void set_quad_key(const char* value, size_t size);
  std::string* mutable_quad_key();
  std::string* release_quad_key();
  void set_allocated_quad_key(std::string* quad_key);
  private:
  const std::string& _internal_quad_key() const;
  void _internal_set_quad_key(const std::string& value);
  std::string* _internal_mutable_quad_key();
  public:

  // .epl.protobuf.v1.DatetimeRange observation_range = 4;
  bool has_observation_range() const;
  private:
  bool _internal_has_observation_range() const;
  public:
  void clear_observation_range();
  const ::epl::protobuf::v1::DatetimeRange& observation_range() const;
  ::epl::protobuf::v1::DatetimeRange* release_observation_range();
  ::epl::protobuf::v1::DatetimeRange* mutable_observation_range();
  void set_allocated_observation_range(::epl::protobuf::v1::DatetimeRange* observation_range);
  private:
  const ::epl::protobuf::v1::DatetimeRange& _internal_observation_range() const;
  ::epl::protobuf::v1::DatetimeRange* _internal_mutable_observation_range();
  public:
  void unsafe_arena_set_allocated_observation_range(
      ::epl::protobuf::v1::DatetimeRange* observation_range);
  ::epl::protobuf::v1::DatetimeRange* unsafe_arena_release_observation_range();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Mosaic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > zooms_;
  mutable std::atomic<int> _zooms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> provenance_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quad_key_;
  ::epl::protobuf::v1::DatetimeRange* observation_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// -------------------------------------------------------------------

class MosaicRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.MosaicRequest) */ {
 public:
  inline MosaicRequest() : MosaicRequest(nullptr) {}
  virtual ~MosaicRequest();
  explicit constexpr MosaicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MosaicRequest(const MosaicRequest& from);
  MosaicRequest(MosaicRequest&& from) noexcept
    : MosaicRequest() {
    *this = ::std::move(from);
  }

  inline MosaicRequest& operator=(const MosaicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MosaicRequest& operator=(MosaicRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MosaicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MosaicRequest* internal_default_instance() {
    return reinterpret_cast<const MosaicRequest*>(
               &_MosaicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MosaicRequest& a, MosaicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MosaicRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MosaicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MosaicRequest* New() const final {
    return CreateMaybeMessage<MosaicRequest>(nullptr);
  }

  MosaicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MosaicRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MosaicRequest& from);
  void MergeFrom(const MosaicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MosaicRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.MosaicRequest";
  }
  protected:
  explicit MosaicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kQuadKeyFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string quad_key = 2;
  void clear_quad_key();
  const std::string& quad_key() const;
  void set_quad_key(const std::string& value);
  void set_quad_key(std::string&& value);
  void set_quad_key(const char* value);
  void set_quad_key(const char* value, size_t size);
  std::string* mutable_quad_key();
  std::string* release_quad_key();
  void set_allocated_quad_key(std::string* quad_key);
  private:
  const std::string& _internal_quad_key() const;
  void _internal_set_quad_key(const std::string& value);
  std::string* _internal_mutable_quad_key();
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.MosaicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quad_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Collection

// string stac_version = 1;
inline void Collection::clear_stac_version() {
  stac_version_.ClearToEmpty();
}
inline const std::string& Collection::stac_version() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.stac_version)
  return _internal_stac_version();
}
inline void Collection::set_stac_version(const std::string& value) {
  _internal_set_stac_version(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.stac_version)
}
inline std::string* Collection::mutable_stac_version() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.stac_version)
  return _internal_mutable_stac_version();
}
inline const std::string& Collection::_internal_stac_version() const {
  return stac_version_.Get();
}
inline void Collection::_internal_set_stac_version(const std::string& value) {
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Collection::set_stac_version(std::string&& value) {
  
  stac_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Collection.stac_version)
}
inline void Collection::set_stac_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.stac_version)
}
inline void Collection::set_stac_version(const char* value,
    size_t size) {
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.stac_version)
}
inline std::string* Collection::_internal_mutable_stac_version() {
  
  return stac_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Collection::release_stac_version() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.stac_version)
  return stac_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collection::set_allocated_stac_version(std::string* stac_version) {
  if (stac_version != nullptr) {
    
  } else {
    
  }
  stac_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stac_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.stac_version)
}

// string id = 3;
inline void Collection::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Collection::id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.id)
  return _internal_id();
}
inline void Collection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.id)
}
inline std::string* Collection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.id)
  return _internal_mutable_id();
}
inline const std::string& Collection::_internal_id() const {
  return id_.Get();
}
inline void Collection::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Collection::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Collection.id)
}
inline void Collection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.id)
}
inline void Collection::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.id)
}
inline std::string* Collection::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Collection::release_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.id)
}

// string title = 4;
inline void Collection::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Collection::title() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.title)
  return _internal_title();
}
inline void Collection::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.title)
}
inline std::string* Collection::mutable_title() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.title)
  return _internal_mutable_title();
}
inline const std::string& Collection::_internal_title() const {
  return title_.Get();
}
inline void Collection::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Collection::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Collection.title)
}
inline void Collection::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.title)
}
inline void Collection::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.title)
}
inline std::string* Collection::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Collection::release_title() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collection::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.title)
}

// string description = 5;
inline void Collection::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Collection::description() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.description)
  return _internal_description();
}
inline void Collection::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.description)
}
inline std::string* Collection::mutable_description() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.description)
  return _internal_mutable_description();
}
inline const std::string& Collection::_internal_description() const {
  return description_.Get();
}
inline void Collection::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Collection::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Collection.description)
}
inline void Collection::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.description)
}
inline void Collection::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.description)
}
inline std::string* Collection::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Collection::release_description() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collection::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.description)
}

// repeated string keywords = 6;
inline int Collection::_internal_keywords_size() const {
  return keywords_.size();
}
inline int Collection::keywords_size() const {
  return _internal_keywords_size();
}
inline void Collection::clear_keywords() {
  keywords_.Clear();
}
inline std::string* Collection::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:epl.protobuf.v1.Collection.keywords)
  return _internal_add_keywords();
}
inline const std::string& Collection::_internal_keywords(int index) const {
  return keywords_.Get(index);
}
inline const std::string& Collection::keywords(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.keywords)
  return _internal_keywords(index);
}
inline std::string* Collection::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.keywords)
  return keywords_.Mutable(index);
}
inline void Collection::set_keywords(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void Collection::set_keywords(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
inline void Collection::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.keywords)
}
inline void Collection::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.keywords)
}
inline std::string* Collection::_internal_add_keywords() {
  return keywords_.Add();
}
inline void Collection::add_keywords(const std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Collection.keywords)
}
inline void Collection::add_keywords(std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Collection.keywords)
}
inline void Collection::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:epl.protobuf.v1.Collection.keywords)
}
inline void Collection::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:epl.protobuf.v1.Collection.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Collection::keywords() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Collection.keywords)
  return keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Collection::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Collection.keywords)
  return &keywords_;
}

// string license = 7;
inline void Collection::clear_license() {
  license_.ClearToEmpty();
}
inline const std::string& Collection::license() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.license)
  return _internal_license();
}
inline void Collection::set_license(const std::string& value) {
  _internal_set_license(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Collection.license)
}
inline std::string* Collection::mutable_license() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.license)
  return _internal_mutable_license();
}
inline const std::string& Collection::_internal_license() const {
  return license_.Get();
}
inline void Collection::_internal_set_license(const std::string& value) {
  
  license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Collection::set_license(std::string&& value) {
  
  license_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Collection.license)
}
inline void Collection::set_license(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Collection.license)
}
inline void Collection::set_license(const char* value,
    size_t size) {
  
  license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Collection.license)
}
inline std::string* Collection::_internal_mutable_license() {
  
  return license_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Collection::release_license() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.license)
  return license_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Collection::set_allocated_license(std::string* license) {
  if (license != nullptr) {
    
  } else {
    
  }
  license_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.license)
}

// repeated .epl.protobuf.v1.Provider providers = 8;
inline int Collection::_internal_providers_size() const {
  return providers_.size();
}
inline int Collection::providers_size() const {
  return _internal_providers_size();
}
inline void Collection::clear_providers() {
  providers_.Clear();
}
inline ::epl::protobuf::v1::Provider* Collection::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.providers)
  return providers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Provider >*
Collection::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Collection.providers)
  return &providers_;
}
inline const ::epl::protobuf::v1::Provider& Collection::_internal_providers(int index) const {
  return providers_.Get(index);
}
inline const ::epl::protobuf::v1::Provider& Collection::providers(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.providers)
  return _internal_providers(index);
}
inline ::epl::protobuf::v1::Provider* Collection::_internal_add_providers() {
  return providers_.Add();
}
inline ::epl::protobuf::v1::Provider* Collection::add_providers() {
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Collection.providers)
  return _internal_add_providers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Provider >&
Collection::providers() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Collection.providers)
  return providers_;
}

// .epl.protobuf.v1.Extent extent = 9;
inline bool Collection::_internal_has_extent() const {
  return this != internal_default_instance() && extent_ != nullptr;
}
inline bool Collection::has_extent() const {
  return _internal_has_extent();
}
inline void Collection::clear_extent() {
  if (GetArena() == nullptr && extent_ != nullptr) {
    delete extent_;
  }
  extent_ = nullptr;
}
inline const ::epl::protobuf::v1::Extent& Collection::_internal_extent() const {
  const ::epl::protobuf::v1::Extent* p = extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::Extent&>(
      ::epl::protobuf::v1::_Extent_default_instance_);
}
inline const ::epl::protobuf::v1::Extent& Collection::extent() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Collection.extent)
  return _internal_extent();
}
inline void Collection::unsafe_arena_set_allocated_extent(
    ::epl::protobuf::v1::Extent* extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Collection.extent)
}
inline ::epl::protobuf::v1::Extent* Collection::release_extent() {
  
  ::epl::protobuf::v1::Extent* temp = extent_;
  extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::Extent* Collection::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Collection.extent)
  
  ::epl::protobuf::v1::Extent* temp = extent_;
  extent_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::Extent* Collection::_internal_mutable_extent() {
  
  if (extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::Extent>(GetArena());
    extent_ = p;
  }
  return extent_;
}
inline ::epl::protobuf::v1::Extent* Collection::mutable_extent() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Collection.extent)
  return _internal_mutable_extent();
}
inline void Collection::set_allocated_extent(::epl::protobuf::v1::Extent* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extent_;
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extent);
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Collection.extent)
}

// map<string, .epl.protobuf.v1.Stats> summaries = 10;
inline int Collection::_internal_summaries_size() const {
  return summaries_.size();
}
inline int Collection::summaries_size() const {
  return _internal_summaries_size();
}
inline void Collection::clear_summaries() {
  summaries_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >&
Collection::_internal_summaries() const {
  return summaries_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >&
Collection::summaries() const {
  // @@protoc_insertion_point(field_map:epl.protobuf.v1.Collection.summaries)
  return _internal_summaries();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >*
Collection::_internal_mutable_summaries() {
  return summaries_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >*
Collection::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_map:epl.protobuf.v1.Collection.summaries)
  return _internal_mutable_summaries();
}

// -------------------------------------------------------------------

// CollectionRequest

// string id = 1;
inline void CollectionRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CollectionRequest::id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.CollectionRequest.id)
  return _internal_id();
}
inline void CollectionRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.CollectionRequest.id)
}
inline std::string* CollectionRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.CollectionRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CollectionRequest::_internal_id() const {
  return id_.Get();
}
inline void CollectionRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CollectionRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.CollectionRequest.id)
}
inline void CollectionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.CollectionRequest.id)
}
inline void CollectionRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.CollectionRequest.id)
}
inline std::string* CollectionRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CollectionRequest::release_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.CollectionRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CollectionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.CollectionRequest.id)
}

// .epl.protobuf.v1.EnvelopeData bbox = 2;
inline bool CollectionRequest::_internal_has_bbox() const {
  return spatial_case() == kBbox;
}
inline bool CollectionRequest::has_bbox() const {
  return _internal_has_bbox();
}
inline void CollectionRequest::set_has_bbox() {
  _oneof_case_[0] = kBbox;
}
inline ::epl::protobuf::v1::EnvelopeData* CollectionRequest::release_bbox() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.CollectionRequest.bbox)
  if (_internal_has_bbox()) {
    clear_has_spatial();
      ::epl::protobuf::v1::EnvelopeData* temp = spatial_.bbox_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    spatial_.bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::EnvelopeData& CollectionRequest::_internal_bbox() const {
  return _internal_has_bbox()
      ? *spatial_.bbox_
      : reinterpret_cast< ::epl::protobuf::v1::EnvelopeData&>(::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& CollectionRequest::bbox() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.CollectionRequest.bbox)
  return _internal_bbox();
}
inline ::epl::protobuf::v1::EnvelopeData* CollectionRequest::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.CollectionRequest.bbox)
  if (_internal_has_bbox()) {
    clear_has_spatial();
    ::epl::protobuf::v1::EnvelopeData* temp = spatial_.bbox_;
    spatial_.bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CollectionRequest::unsafe_arena_set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  clear_spatial();
  if (bbox) {
    set_has_bbox();
    spatial_.bbox_ = bbox;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.CollectionRequest.bbox)
}
inline ::epl::protobuf::v1::EnvelopeData* CollectionRequest::_internal_mutable_bbox() {
  if (!_internal_has_bbox()) {
    clear_spatial();
    set_has_bbox();
    spatial_.bbox_ = CreateMaybeMessage< ::epl::protobuf::v1::EnvelopeData >(GetArena());
  }
  return spatial_.bbox_;
}
inline ::epl::protobuf::v1::EnvelopeData* CollectionRequest::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.CollectionRequest.bbox)
  return _internal_mutable_bbox();
}

// .epl.protobuf.v1.GeometryData intersects = 3;
inline bool CollectionRequest::_internal_has_intersects() const {
  return spatial_case() == kIntersects;
}
inline bool CollectionRequest::has_intersects() const {
  return _internal_has_intersects();
}
inline void CollectionRequest::set_has_intersects() {
  _oneof_case_[0] = kIntersects;
}
inline ::epl::protobuf::v1::GeometryData* CollectionRequest::release_intersects() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.CollectionRequest.intersects)
  if (_internal_has_intersects()) {
    clear_has_spatial();
      ::epl::protobuf::v1::GeometryData* temp = spatial_.intersects_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    spatial_.intersects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& CollectionRequest::_internal_intersects() const {
  return _internal_has_intersects()
      ? *spatial_.intersects_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& CollectionRequest::intersects() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.CollectionRequest.intersects)
  return _internal_intersects();
}
inline ::epl::protobuf::v1::GeometryData* CollectionRequest::unsafe_arena_release_intersects() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.CollectionRequest.intersects)
  if (_internal_has_intersects()) {
    clear_has_spatial();
    ::epl::protobuf::v1::GeometryData* temp = spatial_.intersects_;
    spatial_.intersects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CollectionRequest::unsafe_arena_set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects) {
  clear_spatial();
  if (intersects) {
    set_has_intersects();
    spatial_.intersects_ = intersects;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.CollectionRequest.intersects)
}
inline ::epl::protobuf::v1::GeometryData* CollectionRequest::_internal_mutable_intersects() {
  if (!_internal_has_intersects()) {
    clear_spatial();
    set_has_intersects();
    spatial_.intersects_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return spatial_.intersects_;
}
inline ::epl::protobuf::v1::GeometryData* CollectionRequest::mutable_intersects() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.CollectionRequest.intersects)
  return _internal_mutable_intersects();
}

inline bool CollectionRequest::has_spatial() const {
  return spatial_case() != SPATIAL_NOT_SET;
}
inline void CollectionRequest::clear_has_spatial() {
  _oneof_case_[0] = SPATIAL_NOT_SET;
}
inline CollectionRequest::SpatialCase CollectionRequest::spatial_case() const {
  return CollectionRequest::SpatialCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Stats

// -------------------------------------------------------------------

// Extent

// repeated .epl.protobuf.v1.EnvelopeData spatial = 1;
inline int Extent::_internal_spatial_size() const {
  return spatial_.size();
}
inline int Extent::spatial_size() const {
  return _internal_spatial_size();
}
inline ::epl::protobuf::v1::EnvelopeData* Extent::mutable_spatial(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Extent.spatial)
  return spatial_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::EnvelopeData >*
Extent::mutable_spatial() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Extent.spatial)
  return &spatial_;
}
inline const ::epl::protobuf::v1::EnvelopeData& Extent::_internal_spatial(int index) const {
  return spatial_.Get(index);
}
inline const ::epl::protobuf::v1::EnvelopeData& Extent::spatial(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Extent.spatial)
  return _internal_spatial(index);
}
inline ::epl::protobuf::v1::EnvelopeData* Extent::_internal_add_spatial() {
  return spatial_.Add();
}
inline ::epl::protobuf::v1::EnvelopeData* Extent::add_spatial() {
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Extent.spatial)
  return _internal_add_spatial();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::EnvelopeData >&
Extent::spatial() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Extent.spatial)
  return spatial_;
}

// repeated .epl.protobuf.v1.Interval temporal = 2;
inline int Extent::_internal_temporal_size() const {
  return temporal_.size();
}
inline int Extent::temporal_size() const {
  return _internal_temporal_size();
}
inline void Extent::clear_temporal() {
  temporal_.Clear();
}
inline ::epl::protobuf::v1::Interval* Extent::mutable_temporal(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Extent.temporal)
  return temporal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Interval >*
Extent::mutable_temporal() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Extent.temporal)
  return &temporal_;
}
inline const ::epl::protobuf::v1::Interval& Extent::_internal_temporal(int index) const {
  return temporal_.Get(index);
}
inline const ::epl::protobuf::v1::Interval& Extent::temporal(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Extent.temporal)
  return _internal_temporal(index);
}
inline ::epl::protobuf::v1::Interval* Extent::_internal_add_temporal() {
  return temporal_.Add();
}
inline ::epl::protobuf::v1::Interval* Extent::add_temporal() {
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Extent.temporal)
  return _internal_add_temporal();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::epl::protobuf::v1::Interval >&
Extent::temporal() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Extent.temporal)
  return temporal_;
}

// -------------------------------------------------------------------

// Interval

// .google.protobuf.Timestamp start = 1;
inline bool Interval::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Interval::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interval::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interval::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Interval.start)
  return _internal_start();
}
inline void Interval::unsafe_arena_set_allocated_start(
    PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Interval.start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::release_start() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Interval.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::mutable_start() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Interval.start)
  return _internal_mutable_start();
}
inline void Interval::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Interval.start)
}

// .google.protobuf.Timestamp end = 2;
inline bool Interval::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Interval::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interval::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Interval::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Interval.end)
  return _internal_end();
}
inline void Interval::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Interval.end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::release_end() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Interval.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Interval::mutable_end() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Interval.end)
  return _internal_mutable_end();
}
inline void Interval::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Interval.end)
}

// -------------------------------------------------------------------

// Provider

// string name = 1;
inline void Provider::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Provider::name() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Provider.name)
  return _internal_name();
}
inline void Provider::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Provider.name)
}
inline std::string* Provider::mutable_name() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Provider.name)
  return _internal_mutable_name();
}
inline const std::string& Provider::_internal_name() const {
  return name_.Get();
}
inline void Provider::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Provider::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Provider.name)
}
inline void Provider::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Provider.name)
}
inline void Provider::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Provider.name)
}
inline std::string* Provider::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Provider::release_name() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Provider.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Provider::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Provider.name)
}

// string description = 2;
inline void Provider::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Provider::description() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Provider.description)
  return _internal_description();
}
inline void Provider::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Provider.description)
}
inline std::string* Provider::mutable_description() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Provider.description)
  return _internal_mutable_description();
}
inline const std::string& Provider::_internal_description() const {
  return description_.Get();
}
inline void Provider::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Provider::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Provider.description)
}
inline void Provider::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Provider.description)
}
inline void Provider::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Provider.description)
}
inline std::string* Provider::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Provider::release_description() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Provider.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Provider::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Provider.description)
}

// repeated string roles = 3;
inline int Provider::_internal_roles_size() const {
  return roles_.size();
}
inline int Provider::roles_size() const {
  return _internal_roles_size();
}
inline void Provider::clear_roles() {
  roles_.Clear();
}
inline std::string* Provider::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:epl.protobuf.v1.Provider.roles)
  return _internal_add_roles();
}
inline const std::string& Provider::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const std::string& Provider::roles(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Provider.roles)
  return _internal_roles(index);
}
inline std::string* Provider::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Provider.roles)
  return roles_.Mutable(index);
}
inline void Provider::set_roles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Provider.roles)
  roles_.Mutable(index)->assign(value);
}
inline void Provider::set_roles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Provider.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
inline void Provider::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Provider.roles)
}
inline void Provider::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Provider.roles)
}
inline std::string* Provider::_internal_add_roles() {
  return roles_.Add();
}
inline void Provider::add_roles(const std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Provider.roles)
}
inline void Provider::add_roles(std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Provider.roles)
}
inline void Provider::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:epl.protobuf.v1.Provider.roles)
}
inline void Provider::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:epl.protobuf.v1.Provider.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Provider::roles() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Provider.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Provider::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Provider.roles)
  return &roles_;
}

// string url = 4;
inline void Provider::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Provider::url() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Provider.url)
  return _internal_url();
}
inline void Provider::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Provider.url)
}
inline std::string* Provider::mutable_url() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Provider.url)
  return _internal_mutable_url();
}
inline const std::string& Provider::_internal_url() const {
  return url_.Get();
}
inline void Provider::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Provider::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Provider.url)
}
inline void Provider::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Provider.url)
}
inline void Provider::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Provider.url)
}
inline std::string* Provider::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Provider::release_url() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Provider.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Provider::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Provider.url)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StacItem

// string id = 1;
inline void StacItem::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StacItem::id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.id)
  return _internal_id();
}
inline void StacItem::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.id)
}
inline std::string* StacItem::mutable_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.id)
  return _internal_mutable_id();
}
inline const std::string& StacItem::_internal_id() const {
  return id_.Get();
}
inline void StacItem::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.id)
}
inline void StacItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.id)
}
inline void StacItem::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.id)
}
inline std::string* StacItem::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.id)
}

// string title = 2;
inline void StacItem::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& StacItem::title() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.title)
  return _internal_title();
}
inline void StacItem::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.title)
}
inline std::string* StacItem::mutable_title() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.title)
  return _internal_mutable_title();
}
inline const std::string& StacItem::_internal_title() const {
  return title_.Get();
}
inline void StacItem::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.title)
}
inline void StacItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.title)
}
inline void StacItem::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.title)
}
inline std::string* StacItem::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_title() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.title)
}

// string collection = 3;
inline void StacItem::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& StacItem::collection() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.collection)
  return _internal_collection();
}
inline void StacItem::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.collection)
}
inline std::string* StacItem::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.collection)
  return _internal_mutable_collection();
}
inline const std::string& StacItem::_internal_collection() const {
  return collection_.Get();
}
inline void StacItem::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.collection)
}
inline void StacItem::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.collection)
}
inline void StacItem::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.collection)
}
inline std::string* StacItem::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_collection() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.collection)
}

// .google.protobuf.Any properties = 4;
inline bool StacItem::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool StacItem::has_properties() const {
  return _internal_has_properties();
}
inline const PROTOBUF_NAMESPACE_ID::Any& StacItem::_internal_properties() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& StacItem::properties() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.properties)
  return _internal_properties();
}
inline void StacItem::unsafe_arena_set_allocated_properties(
    PROTOBUF_NAMESPACE_ID::Any* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.properties)
}
inline PROTOBUF_NAMESPACE_ID::Any* StacItem::release_properties() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacItem::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.properties)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacItem::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacItem::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.properties)
  return _internal_mutable_properties();
}
inline void StacItem::set_allocated_properties(PROTOBUF_NAMESPACE_ID::Any* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.properties)
}

// map<string, .epl.protobuf.v1.Asset> assets = 5;
inline int StacItem::_internal_assets_size() const {
  return assets_.size();
}
inline int StacItem::assets_size() const {
  return _internal_assets_size();
}
inline void StacItem::clear_assets() {
  assets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >&
StacItem::_internal_assets() const {
  return assets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >&
StacItem::assets() const {
  // @@protoc_insertion_point(field_map:epl.protobuf.v1.StacItem.assets)
  return _internal_assets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >*
StacItem::_internal_mutable_assets() {
  return assets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >*
StacItem::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_map:epl.protobuf.v1.StacItem.assets)
  return _internal_mutable_assets();
}

// .epl.protobuf.v1.GeometryData geometry = 6;
inline bool StacItem::_internal_has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline bool StacItem::has_geometry() const {
  return _internal_has_geometry();
}
inline const ::epl::protobuf::v1::GeometryData& StacItem::_internal_geometry() const {
  const ::epl::protobuf::v1::GeometryData* p = geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::GeometryData&>(
      ::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& StacItem::geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.geometry)
  return _internal_geometry();
}
inline void StacItem::unsafe_arena_set_allocated_geometry(
    ::epl::protobuf::v1::GeometryData* geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_);
  }
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.geometry)
}
inline ::epl::protobuf::v1::GeometryData* StacItem::release_geometry() {
  
  ::epl::protobuf::v1::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* StacItem::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.geometry)
  
  ::epl::protobuf::v1::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* StacItem::_internal_mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::GeometryData>(GetArena());
    geometry_ = p;
  }
  return geometry_;
}
inline ::epl::protobuf::v1::GeometryData* StacItem::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.geometry)
  return _internal_mutable_geometry();
}
inline void StacItem::set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry)->GetArena();
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.geometry)
}

// .epl.protobuf.v1.EnvelopeData bbox = 7;
inline bool StacItem::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool StacItem::has_bbox() const {
  return _internal_has_bbox();
}
inline const ::epl::protobuf::v1::EnvelopeData& StacItem::_internal_bbox() const {
  const ::epl::protobuf::v1::EnvelopeData* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::EnvelopeData&>(
      ::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& StacItem::bbox() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.bbox)
  return _internal_bbox();
}
inline void StacItem::unsafe_arena_set_allocated_bbox(
    ::epl::protobuf::v1::EnvelopeData* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.bbox)
}
inline ::epl::protobuf::v1::EnvelopeData* StacItem::release_bbox() {
  
  ::epl::protobuf::v1::EnvelopeData* temp = bbox_;
  bbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* StacItem::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.bbox)
  
  ::epl::protobuf::v1::EnvelopeData* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* StacItem::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::EnvelopeData>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::epl::protobuf::v1::EnvelopeData* StacItem::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.bbox)
  return _internal_mutable_bbox();
}
inline void StacItem::set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox)->GetArena();
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.bbox)
}

// .google.protobuf.Timestamp datetime = 8;
inline bool StacItem::_internal_has_datetime() const {
  return temporal_deprecated_case() == kDatetime;
}
inline bool StacItem::has_datetime() const {
  return _internal_has_datetime();
}
inline void StacItem::set_has_datetime() {
  _oneof_case_[0] = kDatetime;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_datetime() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.datetime)
  if (_internal_has_datetime()) {
    clear_has_temporal_deprecated();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_deprecated_.datetime_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_deprecated_.datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_datetime() const {
  return _internal_has_datetime()
      ? *temporal_deprecated_.datetime_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::datetime() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.datetime)
  return _internal_datetime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacItem.datetime)
  if (_internal_has_datetime()) {
    clear_has_temporal_deprecated();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_deprecated_.datetime_;
    temporal_deprecated_.datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacItem::unsafe_arena_set_allocated_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* datetime) {
  clear_temporal_deprecated();
  if (datetime) {
    set_has_datetime();
    temporal_deprecated_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.datetime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_datetime() {
  if (!_internal_has_datetime()) {
    clear_temporal_deprecated();
    set_has_datetime();
    temporal_deprecated_.datetime_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return temporal_deprecated_.datetime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.datetime)
  return _internal_mutable_datetime();
}

// .google.protobuf.Timestamp start_datetime = 10;
inline bool StacItem::_internal_has_start_datetime() const {
  return temporal_deprecated_case() == kStartDatetime;
}
inline bool StacItem::has_start_datetime() const {
  return _internal_has_start_datetime();
}
inline void StacItem::set_has_start_datetime() {
  _oneof_case_[0] = kStartDatetime;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_start_datetime() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.start_datetime)
  if (_internal_has_start_datetime()) {
    clear_has_temporal_deprecated();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_deprecated_.start_datetime_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_deprecated_.start_datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_start_datetime() const {
  return _internal_has_start_datetime()
      ? *temporal_deprecated_.start_datetime_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::start_datetime() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.start_datetime)
  return _internal_start_datetime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_start_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacItem.start_datetime)
  if (_internal_has_start_datetime()) {
    clear_has_temporal_deprecated();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_deprecated_.start_datetime_;
    temporal_deprecated_.start_datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacItem::unsafe_arena_set_allocated_start_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime) {
  clear_temporal_deprecated();
  if (start_datetime) {
    set_has_start_datetime();
    temporal_deprecated_.start_datetime_ = start_datetime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.start_datetime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_start_datetime() {
  if (!_internal_has_start_datetime()) {
    clear_temporal_deprecated();
    set_has_start_datetime();
    temporal_deprecated_.start_datetime_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return temporal_deprecated_.start_datetime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_start_datetime() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.start_datetime)
  return _internal_mutable_start_datetime();
}

// .google.protobuf.Timestamp observed = 9;
inline bool StacItem::_internal_has_observed() const {
  return temporal_case() == kObserved;
}
inline bool StacItem::has_observed() const {
  return _internal_has_observed();
}
inline void StacItem::set_has_observed() {
  _oneof_case_[1] = kObserved;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_observed() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.observed)
  if (_internal_has_observed()) {
    clear_has_temporal();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_.observed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_.observed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_observed() const {
  return _internal_has_observed()
      ? *temporal_.observed_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::observed() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.observed)
  return _internal_observed();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_observed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacItem.observed)
  if (_internal_has_observed()) {
    clear_has_temporal();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_.observed_;
    temporal_.observed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacItem::unsafe_arena_set_allocated_observed(PROTOBUF_NAMESPACE_ID::Timestamp* observed) {
  clear_temporal();
  if (observed) {
    set_has_observed();
    temporal_.observed_ = observed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.observed)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_observed() {
  if (!_internal_has_observed()) {
    clear_temporal();
    set_has_observed();
    temporal_.observed_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return temporal_.observed_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_observed() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.observed)
  return _internal_mutable_observed();
}

// .google.protobuf.Timestamp start_observation = 11;
inline bool StacItem::_internal_has_start_observation() const {
  return temporal_case() == kStartObservation;
}
inline bool StacItem::has_start_observation() const {
  return _internal_has_start_observation();
}
inline void StacItem::set_has_start_observation() {
  _oneof_case_[1] = kStartObservation;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_start_observation() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.start_observation)
  if (_internal_has_start_observation()) {
    clear_has_temporal();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_.start_observation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_.start_observation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_start_observation() const {
  return _internal_has_start_observation()
      ? *temporal_.start_observation_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::start_observation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.start_observation)
  return _internal_start_observation();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_start_observation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacItem.start_observation)
  if (_internal_has_start_observation()) {
    clear_has_temporal();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = temporal_.start_observation_;
    temporal_.start_observation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacItem::unsafe_arena_set_allocated_start_observation(PROTOBUF_NAMESPACE_ID::Timestamp* start_observation) {
  clear_temporal();
  if (start_observation) {
    set_has_start_observation();
    temporal_.start_observation_ = start_observation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.start_observation)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_start_observation() {
  if (!_internal_has_start_observation()) {
    clear_temporal();
    set_has_start_observation();
    temporal_.start_observation_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return temporal_.start_observation_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_start_observation() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.start_observation)
  return _internal_mutable_start_observation();
}

// .google.protobuf.Timestamp end_datetime = 12;
inline bool StacItem::_internal_has_end_datetime() const {
  return this != internal_default_instance() && end_datetime_ != nullptr;
}
inline bool StacItem::has_end_datetime() const {
  return _internal_has_end_datetime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_end_datetime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::end_datetime() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.end_datetime)
  return _internal_end_datetime();
}
inline void StacItem::unsafe_arena_set_allocated_end_datetime(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_datetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_datetime_);
  }
  end_datetime_ = end_datetime;
  if (end_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.end_datetime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_end_datetime() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_datetime_;
  end_datetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_end_datetime() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.end_datetime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_datetime_;
  end_datetime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_end_datetime() {
  
  if (end_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_datetime_ = p;
  }
  return end_datetime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_end_datetime() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.end_datetime)
  return _internal_mutable_end_datetime();
}
inline void StacItem::set_allocated_end_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* end_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_datetime_);
  }
  if (end_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_datetime)->GetArena();
    if (message_arena != submessage_arena) {
      end_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_datetime, submessage_arena);
    }
    
  } else {
    
  }
  end_datetime_ = end_datetime;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.end_datetime)
}

// .google.protobuf.Timestamp end_observation = 13;
inline bool StacItem::_internal_has_end_observation() const {
  return this != internal_default_instance() && end_observation_ != nullptr;
}
inline bool StacItem::has_end_observation() const {
  return _internal_has_end_observation();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_end_observation() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_observation_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::end_observation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.end_observation)
  return _internal_end_observation();
}
inline void StacItem::unsafe_arena_set_allocated_end_observation(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_observation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_observation_);
  }
  end_observation_ = end_observation;
  if (end_observation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.end_observation)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_end_observation() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_observation_;
  end_observation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_end_observation() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.end_observation)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_observation_;
  end_observation_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_end_observation() {
  
  if (end_observation_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_observation_ = p;
  }
  return end_observation_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_end_observation() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.end_observation)
  return _internal_mutable_end_observation();
}
inline void StacItem::set_allocated_end_observation(PROTOBUF_NAMESPACE_ID::Timestamp* end_observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_observation_);
  }
  if (end_observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_observation)->GetArena();
    if (message_arena != submessage_arena) {
      end_observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_observation, submessage_arena);
    }
    
  } else {
    
  }
  end_observation_ = end_observation;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.end_observation)
}

// .google.protobuf.Timestamp created = 14;
inline bool StacItem::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool StacItem::has_created() const {
  return _internal_has_created();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::created() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.created)
  return _internal_created();
}
inline void StacItem::unsafe_arena_set_allocated_created(
    PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.created)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_created() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_ = p;
  }
  return created_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_created() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.created)
  return _internal_mutable_created();
}
inline void StacItem::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.created)
}

// .google.protobuf.Timestamp updated = 15;
inline bool StacItem::_internal_has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline bool StacItem::has_updated() const {
  return _internal_has_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::_internal_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StacItem::updated() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.updated)
  return _internal_updated();
}
inline void StacItem::unsafe_arena_set_allocated_updated(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.updated)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::release_updated() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::_internal_mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StacItem::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.updated)
  return _internal_mutable_updated();
}
inline void StacItem::set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.updated)
}

// .epl.protobuf.v1.ProjectionData proj = 16;
inline bool StacItem::_internal_has_proj() const {
  return this != internal_default_instance() && proj_ != nullptr;
}
inline bool StacItem::has_proj() const {
  return _internal_has_proj();
}
inline const ::epl::protobuf::v1::ProjectionData& StacItem::_internal_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& StacItem::proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.proj)
  return _internal_proj();
}
inline void StacItem::unsafe_arena_set_allocated_proj(
    ::epl::protobuf::v1::ProjectionData* proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  proj_ = proj;
  if (proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.proj)
}
inline ::epl::protobuf::v1::ProjectionData* StacItem::release_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* StacItem::unsafe_arena_release_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* StacItem::_internal_mutable_proj() {
  
  if (proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    proj_ = p;
  }
  return proj_;
}
inline ::epl::protobuf::v1::ProjectionData* StacItem::mutable_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.proj)
  return _internal_mutable_proj();
}
inline void StacItem::set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  if (proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj)->GetArena();
    if (message_arena != submessage_arena) {
      proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj, submessage_arena);
    }
    
  } else {
    
  }
  proj_ = proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.proj)
}

// .epl.protobuf.v1.Platform platform_enum = 17;
inline void StacItem::clear_platform_enum() {
  platform_enum_ = 0;
}
inline ::epl::protobuf::v1::Platform StacItem::_internal_platform_enum() const {
  return static_cast< ::epl::protobuf::v1::Platform >(platform_enum_);
}
inline ::epl::protobuf::v1::Platform StacItem::platform_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.platform_enum)
  return _internal_platform_enum();
}
inline void StacItem::_internal_set_platform_enum(::epl::protobuf::v1::Platform value) {
  
  platform_enum_ = value;
}
inline void StacItem::set_platform_enum(::epl::protobuf::v1::Platform value) {
  _internal_set_platform_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.platform_enum)
}

// string platform = 18;
inline void StacItem::clear_platform() {
  platform_.ClearToEmpty();
}
inline const std::string& StacItem::platform() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.platform)
  return _internal_platform();
}
inline void StacItem::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.platform)
}
inline std::string* StacItem::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.platform)
  return _internal_mutable_platform();
}
inline const std::string& StacItem::_internal_platform() const {
  return platform_.Get();
}
inline void StacItem::_internal_set_platform(const std::string& value) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_platform(std::string&& value) {
  
  platform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.platform)
}
inline void StacItem::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.platform)
}
inline void StacItem::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.platform)
}
inline std::string* StacItem::_internal_mutable_platform() {
  
  return platform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_platform() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.platform)
}

// .epl.protobuf.v1.Instrument instrument_enum = 19;
inline void StacItem::clear_instrument_enum() {
  instrument_enum_ = 0;
}
inline ::epl::protobuf::v1::Instrument StacItem::_internal_instrument_enum() const {
  return static_cast< ::epl::protobuf::v1::Instrument >(instrument_enum_);
}
inline ::epl::protobuf::v1::Instrument StacItem::instrument_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.instrument_enum)
  return _internal_instrument_enum();
}
inline void StacItem::_internal_set_instrument_enum(::epl::protobuf::v1::Instrument value) {
  
  instrument_enum_ = value;
}
inline void StacItem::set_instrument_enum(::epl::protobuf::v1::Instrument value) {
  _internal_set_instrument_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.instrument_enum)
}

// string instrument = 20;
inline void StacItem::clear_instrument() {
  instrument_.ClearToEmpty();
}
inline const std::string& StacItem::instrument() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.instrument)
  return _internal_instrument();
}
inline void StacItem::set_instrument(const std::string& value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.instrument)
}
inline std::string* StacItem::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.instrument)
  return _internal_mutable_instrument();
}
inline const std::string& StacItem::_internal_instrument() const {
  return instrument_.Get();
}
inline void StacItem::_internal_set_instrument(const std::string& value) {
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_instrument(std::string&& value) {
  
  instrument_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.instrument)
}
inline void StacItem::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.instrument)
}
inline void StacItem::set_instrument(const char* value,
    size_t size) {
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.instrument)
}
inline std::string* StacItem::_internal_mutable_instrument() {
  
  return instrument_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_instrument() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.instrument)
  return instrument_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_instrument(std::string* instrument) {
  if (instrument != nullptr) {
    
  } else {
    
  }
  instrument_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.instrument)
}

// .epl.protobuf.v1.Constellation constellation_enum = 21;
inline void StacItem::clear_constellation_enum() {
  constellation_enum_ = 0;
}
inline ::epl::protobuf::v1::Constellation StacItem::_internal_constellation_enum() const {
  return static_cast< ::epl::protobuf::v1::Constellation >(constellation_enum_);
}
inline ::epl::protobuf::v1::Constellation StacItem::constellation_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.constellation_enum)
  return _internal_constellation_enum();
}
inline void StacItem::_internal_set_constellation_enum(::epl::protobuf::v1::Constellation value) {
  
  constellation_enum_ = value;
}
inline void StacItem::set_constellation_enum(::epl::protobuf::v1::Constellation value) {
  _internal_set_constellation_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.constellation_enum)
}

// string constellation = 22;
inline void StacItem::clear_constellation() {
  constellation_.ClearToEmpty();
}
inline const std::string& StacItem::constellation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.constellation)
  return _internal_constellation();
}
inline void StacItem::set_constellation(const std::string& value) {
  _internal_set_constellation(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.constellation)
}
inline std::string* StacItem::mutable_constellation() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.constellation)
  return _internal_mutable_constellation();
}
inline const std::string& StacItem::_internal_constellation() const {
  return constellation_.Get();
}
inline void StacItem::_internal_set_constellation(const std::string& value) {
  
  constellation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_constellation(std::string&& value) {
  
  constellation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.constellation)
}
inline void StacItem::set_constellation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  constellation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.constellation)
}
inline void StacItem::set_constellation(const char* value,
    size_t size) {
  
  constellation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.constellation)
}
inline std::string* StacItem::_internal_mutable_constellation() {
  
  return constellation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_constellation() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.constellation)
  return constellation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_constellation(std::string* constellation) {
  if (constellation != nullptr) {
    
  } else {
    
  }
  constellation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), constellation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.constellation)
}

// .epl.protobuf.v1.Mission mission_enum = 23;
inline void StacItem::clear_mission_enum() {
  mission_enum_ = 0;
}
inline ::epl::protobuf::v1::Mission StacItem::_internal_mission_enum() const {
  return static_cast< ::epl::protobuf::v1::Mission >(mission_enum_);
}
inline ::epl::protobuf::v1::Mission StacItem::mission_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.mission_enum)
  return _internal_mission_enum();
}
inline void StacItem::_internal_set_mission_enum(::epl::protobuf::v1::Mission value) {
  
  mission_enum_ = value;
}
inline void StacItem::set_mission_enum(::epl::protobuf::v1::Mission value) {
  _internal_set_mission_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.mission_enum)
}

// string mission = 24;
inline void StacItem::clear_mission() {
  mission_.ClearToEmpty();
}
inline const std::string& StacItem::mission() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.mission)
  return _internal_mission();
}
inline void StacItem::set_mission(const std::string& value) {
  _internal_set_mission(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.mission)
}
inline std::string* StacItem::mutable_mission() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.mission)
  return _internal_mutable_mission();
}
inline const std::string& StacItem::_internal_mission() const {
  return mission_.Get();
}
inline void StacItem::_internal_set_mission(const std::string& value) {
  
  mission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_mission(std::string&& value) {
  
  mission_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.mission)
}
inline void StacItem::set_mission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.mission)
}
inline void StacItem::set_mission(const char* value,
    size_t size) {
  
  mission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.mission)
}
inline std::string* StacItem::_internal_mutable_mission() {
  
  return mission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_mission() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.mission)
  return mission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_mission(std::string* mission) {
  if (mission != nullptr) {
    
  } else {
    
  }
  mission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.mission)
}

// .google.protobuf.FloatValue gsd = 25;
inline bool StacItem::_internal_has_gsd() const {
  return this != internal_default_instance() && gsd_ != nullptr;
}
inline bool StacItem::has_gsd() const {
  return _internal_has_gsd();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& StacItem::_internal_gsd() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = gsd_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& StacItem::gsd() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.gsd)
  return _internal_gsd();
}
inline void StacItem::unsafe_arena_set_allocated_gsd(
    PROTOBUF_NAMESPACE_ID::FloatValue* gsd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd_);
  }
  gsd_ = gsd;
  if (gsd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.gsd)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* StacItem::release_gsd() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gsd_;
  gsd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* StacItem::unsafe_arena_release_gsd() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.gsd)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gsd_;
  gsd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* StacItem::_internal_mutable_gsd() {
  
  if (gsd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    gsd_ = p;
  }
  return gsd_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* StacItem::mutable_gsd() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.gsd)
  return _internal_mutable_gsd();
}
inline void StacItem::set_allocated_gsd(PROTOBUF_NAMESPACE_ID::FloatValue* gsd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd_);
  }
  if (gsd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd)->GetArena();
    if (message_arena != submessage_arena) {
      gsd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gsd, submessage_arena);
    }
    
  } else {
    
  }
  gsd_ = gsd;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.gsd)
}

// string stac_version = 26;
inline void StacItem::clear_stac_version() {
  stac_version_.ClearToEmpty();
}
inline const std::string& StacItem::stac_version() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.stac_version)
  return _internal_stac_version();
}
inline void StacItem::set_stac_version(const std::string& value) {
  _internal_set_stac_version(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.stac_version)
}
inline std::string* StacItem::mutable_stac_version() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.stac_version)
  return _internal_mutable_stac_version();
}
inline const std::string& StacItem::_internal_stac_version() const {
  return stac_version_.Get();
}
inline void StacItem::_internal_set_stac_version(const std::string& value) {
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_stac_version(std::string&& value) {
  
  stac_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.stac_version)
}
inline void StacItem::set_stac_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.stac_version)
}
inline void StacItem::set_stac_version(const char* value,
    size_t size) {
  
  stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.stac_version)
}
inline std::string* StacItem::_internal_mutable_stac_version() {
  
  return stac_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_stac_version() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.stac_version)
  return stac_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_stac_version(std::string* stac_version) {
  if (stac_version != nullptr) {
    
  } else {
    
  }
  stac_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stac_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.stac_version)
}

// string stac_pb_version = 27;
inline void StacItem::clear_stac_pb_version() {
  stac_pb_version_.ClearToEmpty();
}
inline const std::string& StacItem::stac_pb_version() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.stac_pb_version)
  return _internal_stac_pb_version();
}
inline void StacItem::set_stac_pb_version(const std::string& value) {
  _internal_set_stac_pb_version(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.stac_pb_version)
}
inline std::string* StacItem::mutable_stac_pb_version() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.stac_pb_version)
  return _internal_mutable_stac_pb_version();
}
inline const std::string& StacItem::_internal_stac_pb_version() const {
  return stac_pb_version_.Get();
}
inline void StacItem::_internal_set_stac_pb_version(const std::string& value) {
  
  stac_pb_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacItem::set_stac_pb_version(std::string&& value) {
  
  stac_pb_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacItem.stac_pb_version)
}
inline void StacItem::set_stac_pb_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stac_pb_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.stac_pb_version)
}
inline void StacItem::set_stac_pb_version(const char* value,
    size_t size) {
  
  stac_pb_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.stac_pb_version)
}
inline std::string* StacItem::_internal_mutable_stac_pb_version() {
  
  return stac_pb_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacItem::release_stac_pb_version() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.stac_pb_version)
  return stac_pb_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacItem::set_allocated_stac_pb_version(std::string* stac_pb_version) {
  if (stac_pb_version != nullptr) {
    
  } else {
    
  }
  stac_pb_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stac_pb_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.stac_pb_version)
}

// repeated string stac_extensions = 28;
inline int StacItem::_internal_stac_extensions_size() const {
  return stac_extensions_.size();
}
inline int StacItem::stac_extensions_size() const {
  return _internal_stac_extensions_size();
}
inline void StacItem::clear_stac_extensions() {
  stac_extensions_.Clear();
}
inline std::string* StacItem::add_stac_extensions() {
  // @@protoc_insertion_point(field_add_mutable:epl.protobuf.v1.StacItem.stac_extensions)
  return _internal_add_stac_extensions();
}
inline const std::string& StacItem::_internal_stac_extensions(int index) const {
  return stac_extensions_.Get(index);
}
inline const std::string& StacItem::stac_extensions(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.stac_extensions)
  return _internal_stac_extensions(index);
}
inline std::string* StacItem::mutable_stac_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.stac_extensions)
  return stac_extensions_.Mutable(index);
}
inline void StacItem::set_stac_extensions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.stac_extensions)
  stac_extensions_.Mutable(index)->assign(value);
}
inline void StacItem::set_stac_extensions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacItem.stac_extensions)
  stac_extensions_.Mutable(index)->assign(std::move(value));
}
inline void StacItem::set_stac_extensions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stac_extensions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacItem.stac_extensions)
}
inline void StacItem::set_stac_extensions(int index, const char* value, size_t size) {
  stac_extensions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacItem.stac_extensions)
}
inline std::string* StacItem::_internal_add_stac_extensions() {
  return stac_extensions_.Add();
}
inline void StacItem::add_stac_extensions(const std::string& value) {
  stac_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.StacItem.stac_extensions)
}
inline void StacItem::add_stac_extensions(std::string&& value) {
  stac_extensions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.StacItem.stac_extensions)
}
inline void StacItem::add_stac_extensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stac_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:epl.protobuf.v1.StacItem.stac_extensions)
}
inline void StacItem::add_stac_extensions(const char* value, size_t size) {
  stac_extensions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:epl.protobuf.v1.StacItem.stac_extensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StacItem::stac_extensions() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.StacItem.stac_extensions)
  return stac_extensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StacItem::mutable_stac_extensions() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.StacItem.stac_extensions)
  return &stac_extensions_;
}

// .epl.protobuf.v1.Eo eo = 29;
inline bool StacItem::_internal_has_eo() const {
  return this != internal_default_instance() && eo_ != nullptr;
}
inline bool StacItem::has_eo() const {
  return _internal_has_eo();
}
inline void StacItem::clear_eo() {
  if (GetArena() == nullptr && eo_ != nullptr) {
    delete eo_;
  }
  eo_ = nullptr;
}
inline const ::epl::protobuf::v1::Eo& StacItem::_internal_eo() const {
  const ::epl::protobuf::v1::Eo* p = eo_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::Eo&>(
      ::epl::protobuf::v1::_Eo_default_instance_);
}
inline const ::epl::protobuf::v1::Eo& StacItem::eo() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.eo)
  return _internal_eo();
}
inline void StacItem::unsafe_arena_set_allocated_eo(
    ::epl::protobuf::v1::Eo* eo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eo_);
  }
  eo_ = eo;
  if (eo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.eo)
}
inline ::epl::protobuf::v1::Eo* StacItem::release_eo() {
  
  ::epl::protobuf::v1::Eo* temp = eo_;
  eo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::Eo* StacItem::unsafe_arena_release_eo() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.eo)
  
  ::epl::protobuf::v1::Eo* temp = eo_;
  eo_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::Eo* StacItem::_internal_mutable_eo() {
  
  if (eo_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::Eo>(GetArena());
    eo_ = p;
  }
  return eo_;
}
inline ::epl::protobuf::v1::Eo* StacItem::mutable_eo() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.eo)
  return _internal_mutable_eo();
}
inline void StacItem::set_allocated_eo(::epl::protobuf::v1::Eo* eo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eo_;
  }
  if (eo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eo);
    if (message_arena != submessage_arena) {
      eo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eo, submessage_arena);
    }
    
  } else {
    
  }
  eo_ = eo;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.eo)
}

// .epl.protobuf.v1.View view = 34;
inline bool StacItem::_internal_has_view() const {
  return this != internal_default_instance() && view_ != nullptr;
}
inline bool StacItem::has_view() const {
  return _internal_has_view();
}
inline void StacItem::clear_view() {
  if (GetArena() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
}
inline const ::epl::protobuf::v1::View& StacItem::_internal_view() const {
  const ::epl::protobuf::v1::View* p = view_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::View&>(
      ::epl::protobuf::v1::_View_default_instance_);
}
inline const ::epl::protobuf::v1::View& StacItem::view() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.view)
  return _internal_view();
}
inline void StacItem::unsafe_arena_set_allocated_view(
    ::epl::protobuf::v1::View* view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_);
  }
  view_ = view;
  if (view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.view)
}
inline ::epl::protobuf::v1::View* StacItem::release_view() {
  
  ::epl::protobuf::v1::View* temp = view_;
  view_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::View* StacItem::unsafe_arena_release_view() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.view)
  
  ::epl::protobuf::v1::View* temp = view_;
  view_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::View* StacItem::_internal_mutable_view() {
  
  if (view_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::View>(GetArena());
    view_ = p;
  }
  return view_;
}
inline ::epl::protobuf::v1::View* StacItem::mutable_view() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.view)
  return _internal_mutable_view();
}
inline void StacItem::set_allocated_view(::epl::protobuf::v1::View* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete view_;
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.view)
}

// .epl.protobuf.v1.Landsat landsat = 31;
inline bool StacItem::_internal_has_landsat() const {
  return this != internal_default_instance() && landsat_ != nullptr;
}
inline bool StacItem::has_landsat() const {
  return _internal_has_landsat();
}
inline void StacItem::clear_landsat() {
  if (GetArena() == nullptr && landsat_ != nullptr) {
    delete landsat_;
  }
  landsat_ = nullptr;
}
inline const ::epl::protobuf::v1::Landsat& StacItem::_internal_landsat() const {
  const ::epl::protobuf::v1::Landsat* p = landsat_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::Landsat&>(
      ::epl::protobuf::v1::_Landsat_default_instance_);
}
inline const ::epl::protobuf::v1::Landsat& StacItem::landsat() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.landsat)
  return _internal_landsat();
}
inline void StacItem::unsafe_arena_set_allocated_landsat(
    ::epl::protobuf::v1::Landsat* landsat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landsat_);
  }
  landsat_ = landsat;
  if (landsat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.landsat)
}
inline ::epl::protobuf::v1::Landsat* StacItem::release_landsat() {
  
  ::epl::protobuf::v1::Landsat* temp = landsat_;
  landsat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::Landsat* StacItem::unsafe_arena_release_landsat() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.landsat)
  
  ::epl::protobuf::v1::Landsat* temp = landsat_;
  landsat_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::Landsat* StacItem::_internal_mutable_landsat() {
  
  if (landsat_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::Landsat>(GetArena());
    landsat_ = p;
  }
  return landsat_;
}
inline ::epl::protobuf::v1::Landsat* StacItem::mutable_landsat() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.landsat)
  return _internal_mutable_landsat();
}
inline void StacItem::set_allocated_landsat(::epl::protobuf::v1::Landsat* landsat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landsat_;
  }
  if (landsat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landsat);
    if (message_arena != submessage_arena) {
      landsat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landsat, submessage_arena);
    }
    
  } else {
    
  }
  landsat_ = landsat;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.landsat)
}

// .epl.protobuf.v1.Mosaic mosaic = 32;
inline bool StacItem::_internal_has_mosaic() const {
  return this != internal_default_instance() && mosaic_ != nullptr;
}
inline bool StacItem::has_mosaic() const {
  return _internal_has_mosaic();
}
inline void StacItem::clear_mosaic() {
  if (GetArena() == nullptr && mosaic_ != nullptr) {
    delete mosaic_;
  }
  mosaic_ = nullptr;
}
inline const ::epl::protobuf::v1::Mosaic& StacItem::_internal_mosaic() const {
  const ::epl::protobuf::v1::Mosaic* p = mosaic_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::Mosaic&>(
      ::epl::protobuf::v1::_Mosaic_default_instance_);
}
inline const ::epl::protobuf::v1::Mosaic& StacItem::mosaic() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacItem.mosaic)
  return _internal_mosaic();
}
inline void StacItem::unsafe_arena_set_allocated_mosaic(
    ::epl::protobuf::v1::Mosaic* mosaic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mosaic_);
  }
  mosaic_ = mosaic;
  if (mosaic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacItem.mosaic)
}
inline ::epl::protobuf::v1::Mosaic* StacItem::release_mosaic() {
  
  ::epl::protobuf::v1::Mosaic* temp = mosaic_;
  mosaic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::Mosaic* StacItem::unsafe_arena_release_mosaic() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacItem.mosaic)
  
  ::epl::protobuf::v1::Mosaic* temp = mosaic_;
  mosaic_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::Mosaic* StacItem::_internal_mutable_mosaic() {
  
  if (mosaic_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::Mosaic>(GetArena());
    mosaic_ = p;
  }
  return mosaic_;
}
inline ::epl::protobuf::v1::Mosaic* StacItem::mutable_mosaic() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacItem.mosaic)
  return _internal_mutable_mosaic();
}
inline void StacItem::set_allocated_mosaic(::epl::protobuf::v1::Mosaic* mosaic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mosaic_;
  }
  if (mosaic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mosaic);
    if (message_arena != submessage_arena) {
      mosaic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mosaic, submessage_arena);
    }
    
  } else {
    
  }
  mosaic_ = mosaic;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.mosaic)
}

inline bool StacItem::has_temporal_deprecated() const {
  return temporal_deprecated_case() != TEMPORAL_DEPRECATED_NOT_SET;
}
inline void StacItem::clear_has_temporal_deprecated() {
  _oneof_case_[0] = TEMPORAL_DEPRECATED_NOT_SET;
}
inline bool StacItem::has_temporal() const {
  return temporal_case() != TEMPORAL_NOT_SET;
}
inline void StacItem::clear_has_temporal() {
  _oneof_case_[1] = TEMPORAL_NOT_SET;
}
inline StacItem::TemporalDeprecatedCase StacItem::temporal_deprecated_case() const {
  return StacItem::TemporalDeprecatedCase(_oneof_case_[0]);
}
inline StacItem::TemporalCase StacItem::temporal_case() const {
  return StacItem::TemporalCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// StacRequest

// uint32 limit = 1;
inline void StacRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StacRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StacRequest::limit() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.limit)
  return _internal_limit();
}
inline void StacRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void StacRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.limit)
}

// uint64 offset = 2;
inline void StacRequest::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StacRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StacRequest::offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.offset)
  return _internal_offset();
}
inline void StacRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void StacRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.offset)
}

// string id = 3;
inline bool StacRequest::_internal_has_id() const {
  return identity_case() == kId;
}
inline bool StacRequest::has_id() const {
  return _internal_has_id();
}
inline void StacRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void StacRequest::clear_id() {
  if (_internal_has_id()) {
    identity_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_identity();
  }
}
inline const std::string& StacRequest::id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.id)
  return _internal_id();
}
inline void StacRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.id)
}
inline std::string* StacRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.id)
  return _internal_mutable_id();
}
inline const std::string& StacRequest::_internal_id() const {
  if (_internal_has_id()) {
    return identity_.id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StacRequest::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_identity();
    set_has_id();
    identity_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identity_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacRequest::set_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.id)
  if (!_internal_has_id()) {
    clear_identity();
    set_has_id();
    identity_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identity_.id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacRequest.id)
}
inline void StacRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_id()) {
    clear_identity();
    set_has_id();
    identity_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identity_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacRequest.id)
}
inline void StacRequest::set_id(const char* value,
                             size_t size) {
  if (!_internal_has_id()) {
    clear_identity();
    set_has_id();
    identity_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identity_.id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacRequest.id)
}
inline std::string* StacRequest::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_identity();
    set_has_id();
    identity_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identity_.id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacRequest::release_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.id)
  if (_internal_has_id()) {
    clear_has_identity();
    return identity_.id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StacRequest::set_allocated_id(std::string* id) {
  if (has_identity()) {
    clear_identity();
  }
  if (id != nullptr) {
    set_has_id();
    identity_.id_.UnsafeSetDefault(id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.id)
}

// .epl.protobuf.v1.StringFilter id_complex = 4;
inline bool StacRequest::_internal_has_id_complex() const {
  return identity_case() == kIdComplex;
}
inline bool StacRequest::has_id_complex() const {
  return _internal_has_id_complex();
}
inline void StacRequest::set_has_id_complex() {
  _oneof_case_[0] = kIdComplex;
}
inline ::epl::protobuf::v1::StringFilter* StacRequest::release_id_complex() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.id_complex)
  if (_internal_has_id_complex()) {
    clear_has_identity();
      ::epl::protobuf::v1::StringFilter* temp = identity_.id_complex_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    identity_.id_complex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::StringFilter& StacRequest::_internal_id_complex() const {
  return _internal_has_id_complex()
      ? *identity_.id_complex_
      : reinterpret_cast< ::epl::protobuf::v1::StringFilter&>(::epl::protobuf::v1::_StringFilter_default_instance_);
}
inline const ::epl::protobuf::v1::StringFilter& StacRequest::id_complex() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.id_complex)
  return _internal_id_complex();
}
inline ::epl::protobuf::v1::StringFilter* StacRequest::unsafe_arena_release_id_complex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.id_complex)
  if (_internal_has_id_complex()) {
    clear_has_identity();
    ::epl::protobuf::v1::StringFilter* temp = identity_.id_complex_;
    identity_.id_complex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_id_complex(::epl::protobuf::v1::StringFilter* id_complex) {
  clear_identity();
  if (id_complex) {
    set_has_id_complex();
    identity_.id_complex_ = id_complex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.id_complex)
}
inline ::epl::protobuf::v1::StringFilter* StacRequest::_internal_mutable_id_complex() {
  if (!_internal_has_id_complex()) {
    clear_identity();
    set_has_id_complex();
    identity_.id_complex_ = CreateMaybeMessage< ::epl::protobuf::v1::StringFilter >(GetArena());
  }
  return identity_.id_complex_;
}
inline ::epl::protobuf::v1::StringFilter* StacRequest::mutable_id_complex() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.id_complex)
  return _internal_mutable_id_complex();
}

// string collection = 5;
inline void StacRequest::clear_collection() {
  collection_.ClearToEmpty();
}
inline const std::string& StacRequest::collection() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.collection)
  return _internal_collection();
}
inline void StacRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.collection)
}
inline std::string* StacRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& StacRequest::_internal_collection() const {
  return collection_.Get();
}
inline void StacRequest::_internal_set_collection(const std::string& value) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacRequest::set_collection(std::string&& value) {
  
  collection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacRequest.collection)
}
inline void StacRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacRequest.collection)
}
inline void StacRequest::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacRequest.collection)
}
inline std::string* StacRequest::_internal_mutable_collection() {
  
  return collection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacRequest::release_collection() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.collection)
}

// .google.protobuf.Any properties = 6;
inline bool StacRequest::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool StacRequest::has_properties() const {
  return _internal_has_properties();
}
inline const PROTOBUF_NAMESPACE_ID::Any& StacRequest::_internal_properties() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& StacRequest::properties() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.properties)
  return _internal_properties();
}
inline void StacRequest::unsafe_arena_set_allocated_properties(
    PROTOBUF_NAMESPACE_ID::Any* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.properties)
}
inline PROTOBUF_NAMESPACE_ID::Any* StacRequest::release_properties() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacRequest::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.properties)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacRequest::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline PROTOBUF_NAMESPACE_ID::Any* StacRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.properties)
  return _internal_mutable_properties();
}
inline void StacRequest::set_allocated_properties(PROTOBUF_NAMESPACE_ID::Any* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.properties)
}

// .epl.protobuf.v1.GeometryData intersects = 7;
inline bool StacRequest::_internal_has_intersects() const {
  return spatial_case() == kIntersects;
}
inline bool StacRequest::has_intersects() const {
  return _internal_has_intersects();
}
inline void StacRequest::set_has_intersects() {
  _oneof_case_[1] = kIntersects;
}
inline ::epl::protobuf::v1::GeometryData* StacRequest::release_intersects() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.intersects)
  if (_internal_has_intersects()) {
    clear_has_spatial();
      ::epl::protobuf::v1::GeometryData* temp = spatial_.intersects_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    spatial_.intersects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& StacRequest::_internal_intersects() const {
  return _internal_has_intersects()
      ? *spatial_.intersects_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& StacRequest::intersects() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.intersects)
  return _internal_intersects();
}
inline ::epl::protobuf::v1::GeometryData* StacRequest::unsafe_arena_release_intersects() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.intersects)
  if (_internal_has_intersects()) {
    clear_has_spatial();
    ::epl::protobuf::v1::GeometryData* temp = spatial_.intersects_;
    spatial_.intersects_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects) {
  clear_spatial();
  if (intersects) {
    set_has_intersects();
    spatial_.intersects_ = intersects;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.intersects)
}
inline ::epl::protobuf::v1::GeometryData* StacRequest::_internal_mutable_intersects() {
  if (!_internal_has_intersects()) {
    clear_spatial();
    set_has_intersects();
    spatial_.intersects_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return spatial_.intersects_;
}
inline ::epl::protobuf::v1::GeometryData* StacRequest::mutable_intersects() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.intersects)
  return _internal_mutable_intersects();
}

// .epl.protobuf.v1.EnvelopeData bbox = 8;
inline bool StacRequest::_internal_has_bbox() const {
  return spatial_case() == kBbox;
}
inline bool StacRequest::has_bbox() const {
  return _internal_has_bbox();
}
inline void StacRequest::set_has_bbox() {
  _oneof_case_[1] = kBbox;
}
inline ::epl::protobuf::v1::EnvelopeData* StacRequest::release_bbox() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.bbox)
  if (_internal_has_bbox()) {
    clear_has_spatial();
      ::epl::protobuf::v1::EnvelopeData* temp = spatial_.bbox_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    spatial_.bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::EnvelopeData& StacRequest::_internal_bbox() const {
  return _internal_has_bbox()
      ? *spatial_.bbox_
      : reinterpret_cast< ::epl::protobuf::v1::EnvelopeData&>(::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& StacRequest::bbox() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.bbox)
  return _internal_bbox();
}
inline ::epl::protobuf::v1::EnvelopeData* StacRequest::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.bbox)
  if (_internal_has_bbox()) {
    clear_has_spatial();
    ::epl::protobuf::v1::EnvelopeData* temp = spatial_.bbox_;
    spatial_.bbox_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  clear_spatial();
  if (bbox) {
    set_has_bbox();
    spatial_.bbox_ = bbox;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.bbox)
}
inline ::epl::protobuf::v1::EnvelopeData* StacRequest::_internal_mutable_bbox() {
  if (!_internal_has_bbox()) {
    clear_spatial();
    set_has_bbox();
    spatial_.bbox_ = CreateMaybeMessage< ::epl::protobuf::v1::EnvelopeData >(GetArena());
  }
  return spatial_.bbox_;
}
inline ::epl::protobuf::v1::EnvelopeData* StacRequest::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.bbox)
  return _internal_mutable_bbox();
}

// .epl.protobuf.v1.GeometryRequest geometry_request = 9;
inline bool StacRequest::_internal_has_geometry_request() const {
  return spatial_case() == kGeometryRequest;
}
inline bool StacRequest::has_geometry_request() const {
  return _internal_has_geometry_request();
}
inline void StacRequest::set_has_geometry_request() {
  _oneof_case_[1] = kGeometryRequest;
}
inline ::epl::protobuf::v1::GeometryRequest* StacRequest::release_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.geometry_request)
  if (_internal_has_geometry_request()) {
    clear_has_spatial();
      ::epl::protobuf::v1::GeometryRequest* temp = spatial_.geometry_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    spatial_.geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryRequest& StacRequest::_internal_geometry_request() const {
  return _internal_has_geometry_request()
      ? *spatial_.geometry_request_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryRequest&>(::epl::protobuf::v1::_GeometryRequest_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryRequest& StacRequest::geometry_request() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.geometry_request)
  return _internal_geometry_request();
}
inline ::epl::protobuf::v1::GeometryRequest* StacRequest::unsafe_arena_release_geometry_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.geometry_request)
  if (_internal_has_geometry_request()) {
    clear_has_spatial();
    ::epl::protobuf::v1::GeometryRequest* temp = spatial_.geometry_request_;
    spatial_.geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request) {
  clear_spatial();
  if (geometry_request) {
    set_has_geometry_request();
    spatial_.geometry_request_ = geometry_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.geometry_request)
}
inline ::epl::protobuf::v1::GeometryRequest* StacRequest::_internal_mutable_geometry_request() {
  if (!_internal_has_geometry_request()) {
    clear_spatial();
    set_has_geometry_request();
    spatial_.geometry_request_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryRequest >(GetArena());
  }
  return spatial_.geometry_request_;
}
inline ::epl::protobuf::v1::GeometryRequest* StacRequest::mutable_geometry_request() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.geometry_request)
  return _internal_mutable_geometry_request();
}

// .epl.protobuf.v1.TimestampFilter datetime = 10;
inline bool StacRequest::_internal_has_datetime() const {
  return temporal_case() == kDatetime;
}
inline bool StacRequest::has_datetime() const {
  return _internal_has_datetime();
}
inline void StacRequest::set_has_datetime() {
  _oneof_case_[2] = kDatetime;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::release_datetime() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.datetime)
  if (_internal_has_datetime()) {
    clear_has_temporal();
      ::epl::protobuf::v1::TimestampFilter* temp = temporal_.datetime_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_.datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::_internal_datetime() const {
  return _internal_has_datetime()
      ? *temporal_.datetime_
      : reinterpret_cast< ::epl::protobuf::v1::TimestampFilter&>(::epl::protobuf::v1::_TimestampFilter_default_instance_);
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::datetime() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.datetime)
  return _internal_datetime();
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.datetime)
  if (_internal_has_datetime()) {
    clear_has_temporal();
    ::epl::protobuf::v1::TimestampFilter* temp = temporal_.datetime_;
    temporal_.datetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_datetime(::epl::protobuf::v1::TimestampFilter* datetime) {
  clear_temporal();
  if (datetime) {
    set_has_datetime();
    temporal_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.datetime)
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::_internal_mutable_datetime() {
  if (!_internal_has_datetime()) {
    clear_temporal();
    set_has_datetime();
    temporal_.datetime_ = CreateMaybeMessage< ::epl::protobuf::v1::TimestampFilter >(GetArena());
  }
  return temporal_.datetime_;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.datetime)
  return _internal_mutable_datetime();
}

// .epl.protobuf.v1.TimestampFilter observed = 11;
inline bool StacRequest::_internal_has_observed() const {
  return temporal_case() == kObserved;
}
inline bool StacRequest::has_observed() const {
  return _internal_has_observed();
}
inline void StacRequest::set_has_observed() {
  _oneof_case_[2] = kObserved;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::release_observed() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.observed)
  if (_internal_has_observed()) {
    clear_has_temporal();
      ::epl::protobuf::v1::TimestampFilter* temp = temporal_.observed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temporal_.observed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::_internal_observed() const {
  return _internal_has_observed()
      ? *temporal_.observed_
      : reinterpret_cast< ::epl::protobuf::v1::TimestampFilter&>(::epl::protobuf::v1::_TimestampFilter_default_instance_);
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::observed() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.observed)
  return _internal_observed();
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::unsafe_arena_release_observed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.StacRequest.observed)
  if (_internal_has_observed()) {
    clear_has_temporal();
    ::epl::protobuf::v1::TimestampFilter* temp = temporal_.observed_;
    temporal_.observed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StacRequest::unsafe_arena_set_allocated_observed(::epl::protobuf::v1::TimestampFilter* observed) {
  clear_temporal();
  if (observed) {
    set_has_observed();
    temporal_.observed_ = observed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.observed)
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::_internal_mutable_observed() {
  if (!_internal_has_observed()) {
    clear_temporal();
    set_has_observed();
    temporal_.observed_ = CreateMaybeMessage< ::epl::protobuf::v1::TimestampFilter >(GetArena());
  }
  return temporal_.observed_;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::mutable_observed() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.observed)
  return _internal_mutable_observed();
}

// .epl.protobuf.v1.TimestampFilter created = 12;
inline bool StacRequest::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool StacRequest::has_created() const {
  return _internal_has_created();
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::_internal_created() const {
  const ::epl::protobuf::v1::TimestampFilter* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::TimestampFilter&>(
      ::epl::protobuf::v1::_TimestampFilter_default_instance_);
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::created() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.created)
  return _internal_created();
}
inline void StacRequest::unsafe_arena_set_allocated_created(
    ::epl::protobuf::v1::TimestampFilter* created) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.created)
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::release_created() {
  
  ::epl::protobuf::v1::TimestampFilter* temp = created_;
  created_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.created)
  
  ::epl::protobuf::v1::TimestampFilter* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::TimestampFilter>(GetArena());
    created_ = p;
  }
  return created_;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::mutable_created() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.created)
  return _internal_mutable_created();
}
inline void StacRequest::set_allocated_created(::epl::protobuf::v1::TimestampFilter* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.created)
}

// .epl.protobuf.v1.TimestampFilter updated = 13;
inline bool StacRequest::_internal_has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline bool StacRequest::has_updated() const {
  return _internal_has_updated();
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::_internal_updated() const {
  const ::epl::protobuf::v1::TimestampFilter* p = updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::TimestampFilter&>(
      ::epl::protobuf::v1::_TimestampFilter_default_instance_);
}
inline const ::epl::protobuf::v1::TimestampFilter& StacRequest::updated() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.updated)
  return _internal_updated();
}
inline void StacRequest::unsafe_arena_set_allocated_updated(
    ::epl::protobuf::v1::TimestampFilter* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.updated)
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::release_updated() {
  
  ::epl::protobuf::v1::TimestampFilter* temp = updated_;
  updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.updated)
  
  ::epl::protobuf::v1::TimestampFilter* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::_internal_mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::TimestampFilter>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline ::epl::protobuf::v1::TimestampFilter* StacRequest::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.updated)
  return _internal_mutable_updated();
}
inline void StacRequest::set_allocated_updated(::epl::protobuf::v1::TimestampFilter* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.updated)
}

// .epl.protobuf.v1.ProjectionData proj = 14;
inline bool StacRequest::_internal_has_proj() const {
  return this != internal_default_instance() && proj_ != nullptr;
}
inline bool StacRequest::has_proj() const {
  return _internal_has_proj();
}
inline const ::epl::protobuf::v1::ProjectionData& StacRequest::_internal_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& StacRequest::proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.proj)
  return _internal_proj();
}
inline void StacRequest::unsafe_arena_set_allocated_proj(
    ::epl::protobuf::v1::ProjectionData* proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  proj_ = proj;
  if (proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.proj)
}
inline ::epl::protobuf::v1::ProjectionData* StacRequest::release_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* StacRequest::unsafe_arena_release_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* StacRequest::_internal_mutable_proj() {
  
  if (proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    proj_ = p;
  }
  return proj_;
}
inline ::epl::protobuf::v1::ProjectionData* StacRequest::mutable_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.proj)
  return _internal_mutable_proj();
}
inline void StacRequest::set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  if (proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj)->GetArena();
    if (message_arena != submessage_arena) {
      proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj, submessage_arena);
    }
    
  } else {
    
  }
  proj_ = proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.proj)
}

// .epl.protobuf.v1.Platform platform_enum = 15;
inline void StacRequest::clear_platform_enum() {
  platform_enum_ = 0;
}
inline ::epl::protobuf::v1::Platform StacRequest::_internal_platform_enum() const {
  return static_cast< ::epl::protobuf::v1::Platform >(platform_enum_);
}
inline ::epl::protobuf::v1::Platform StacRequest::platform_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.platform_enum)
  return _internal_platform_enum();
}
inline void StacRequest::_internal_set_platform_enum(::epl::protobuf::v1::Platform value) {
  
  platform_enum_ = value;
}
inline void StacRequest::set_platform_enum(::epl::protobuf::v1::Platform value) {
  _internal_set_platform_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.platform_enum)
}

// .epl.protobuf.v1.Instrument instrument_enum = 17;
inline void StacRequest::clear_instrument_enum() {
  instrument_enum_ = 0;
}
inline ::epl::protobuf::v1::Instrument StacRequest::_internal_instrument_enum() const {
  return static_cast< ::epl::protobuf::v1::Instrument >(instrument_enum_);
}
inline ::epl::protobuf::v1::Instrument StacRequest::instrument_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.instrument_enum)
  return _internal_instrument_enum();
}
inline void StacRequest::_internal_set_instrument_enum(::epl::protobuf::v1::Instrument value) {
  
  instrument_enum_ = value;
}
inline void StacRequest::set_instrument_enum(::epl::protobuf::v1::Instrument value) {
  _internal_set_instrument_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.instrument_enum)
}

// .epl.protobuf.v1.Constellation constellation_enum = 19;
inline void StacRequest::clear_constellation_enum() {
  constellation_enum_ = 0;
}
inline ::epl::protobuf::v1::Constellation StacRequest::_internal_constellation_enum() const {
  return static_cast< ::epl::protobuf::v1::Constellation >(constellation_enum_);
}
inline ::epl::protobuf::v1::Constellation StacRequest::constellation_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.constellation_enum)
  return _internal_constellation_enum();
}
inline void StacRequest::_internal_set_constellation_enum(::epl::protobuf::v1::Constellation value) {
  
  constellation_enum_ = value;
}
inline void StacRequest::set_constellation_enum(::epl::protobuf::v1::Constellation value) {
  _internal_set_constellation_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.constellation_enum)
}

// .epl.protobuf.v1.Mission mission_enum = 21;
inline void StacRequest::clear_mission_enum() {
  mission_enum_ = 0;
}
inline ::epl::protobuf::v1::Mission StacRequest::_internal_mission_enum() const {
  return static_cast< ::epl::protobuf::v1::Mission >(mission_enum_);
}
inline ::epl::protobuf::v1::Mission StacRequest::mission_enum() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.mission_enum)
  return _internal_mission_enum();
}
inline void StacRequest::_internal_set_mission_enum(::epl::protobuf::v1::Mission value) {
  
  mission_enum_ = value;
}
inline void StacRequest::set_mission_enum(::epl::protobuf::v1::Mission value) {
  _internal_set_mission_enum(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacRequest.mission_enum)
}

// .epl.protobuf.v1.FloatFilter gsd = 23;
inline bool StacRequest::_internal_has_gsd() const {
  return this != internal_default_instance() && gsd_ != nullptr;
}
inline bool StacRequest::has_gsd() const {
  return _internal_has_gsd();
}
inline const ::epl::protobuf::v1::FloatFilter& StacRequest::_internal_gsd() const {
  const ::epl::protobuf::v1::FloatFilter* p = gsd_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& StacRequest::gsd() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.gsd)
  return _internal_gsd();
}
inline void StacRequest::unsafe_arena_set_allocated_gsd(
    ::epl::protobuf::v1::FloatFilter* gsd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd_);
  }
  gsd_ = gsd;
  if (gsd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.gsd)
}
inline ::epl::protobuf::v1::FloatFilter* StacRequest::release_gsd() {
  
  ::epl::protobuf::v1::FloatFilter* temp = gsd_;
  gsd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* StacRequest::unsafe_arena_release_gsd() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.gsd)
  
  ::epl::protobuf::v1::FloatFilter* temp = gsd_;
  gsd_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* StacRequest::_internal_mutable_gsd() {
  
  if (gsd_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    gsd_ = p;
  }
  return gsd_;
}
inline ::epl::protobuf::v1::FloatFilter* StacRequest::mutable_gsd() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.gsd)
  return _internal_mutable_gsd();
}
inline void StacRequest::set_allocated_gsd(::epl::protobuf::v1::FloatFilter* gsd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd_);
  }
  if (gsd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gsd)->GetArena();
    if (message_arena != submessage_arena) {
      gsd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gsd, submessage_arena);
    }
    
  } else {
    
  }
  gsd_ = gsd;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.gsd)
}

// .epl.protobuf.v1.EoRequest eo = 24;
inline bool StacRequest::_internal_has_eo() const {
  return this != internal_default_instance() && eo_ != nullptr;
}
inline bool StacRequest::has_eo() const {
  return _internal_has_eo();
}
inline void StacRequest::clear_eo() {
  if (GetArena() == nullptr && eo_ != nullptr) {
    delete eo_;
  }
  eo_ = nullptr;
}
inline const ::epl::protobuf::v1::EoRequest& StacRequest::_internal_eo() const {
  const ::epl::protobuf::v1::EoRequest* p = eo_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::EoRequest&>(
      ::epl::protobuf::v1::_EoRequest_default_instance_);
}
inline const ::epl::protobuf::v1::EoRequest& StacRequest::eo() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.eo)
  return _internal_eo();
}
inline void StacRequest::unsafe_arena_set_allocated_eo(
    ::epl::protobuf::v1::EoRequest* eo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eo_);
  }
  eo_ = eo;
  if (eo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.eo)
}
inline ::epl::protobuf::v1::EoRequest* StacRequest::release_eo() {
  
  ::epl::protobuf::v1::EoRequest* temp = eo_;
  eo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::EoRequest* StacRequest::unsafe_arena_release_eo() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.eo)
  
  ::epl::protobuf::v1::EoRequest* temp = eo_;
  eo_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::EoRequest* StacRequest::_internal_mutable_eo() {
  
  if (eo_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::EoRequest>(GetArena());
    eo_ = p;
  }
  return eo_;
}
inline ::epl::protobuf::v1::EoRequest* StacRequest::mutable_eo() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.eo)
  return _internal_mutable_eo();
}
inline void StacRequest::set_allocated_eo(::epl::protobuf::v1::EoRequest* eo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eo_;
  }
  if (eo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eo);
    if (message_arena != submessage_arena) {
      eo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eo, submessage_arena);
    }
    
  } else {
    
  }
  eo_ = eo;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.eo)
}

// .epl.protobuf.v1.ViewRequest view = 25;
inline bool StacRequest::_internal_has_view() const {
  return this != internal_default_instance() && view_ != nullptr;
}
inline bool StacRequest::has_view() const {
  return _internal_has_view();
}
inline void StacRequest::clear_view() {
  if (GetArena() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
}
inline const ::epl::protobuf::v1::ViewRequest& StacRequest::_internal_view() const {
  const ::epl::protobuf::v1::ViewRequest* p = view_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ViewRequest&>(
      ::epl::protobuf::v1::_ViewRequest_default_instance_);
}
inline const ::epl::protobuf::v1::ViewRequest& StacRequest::view() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.view)
  return _internal_view();
}
inline void StacRequest::unsafe_arena_set_allocated_view(
    ::epl::protobuf::v1::ViewRequest* view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_);
  }
  view_ = view;
  if (view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.view)
}
inline ::epl::protobuf::v1::ViewRequest* StacRequest::release_view() {
  
  ::epl::protobuf::v1::ViewRequest* temp = view_;
  view_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ViewRequest* StacRequest::unsafe_arena_release_view() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.view)
  
  ::epl::protobuf::v1::ViewRequest* temp = view_;
  view_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ViewRequest* StacRequest::_internal_mutable_view() {
  
  if (view_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ViewRequest>(GetArena());
    view_ = p;
  }
  return view_;
}
inline ::epl::protobuf::v1::ViewRequest* StacRequest::mutable_view() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.view)
  return _internal_mutable_view();
}
inline void StacRequest::set_allocated_view(::epl::protobuf::v1::ViewRequest* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete view_;
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.view)
}

// .epl.protobuf.v1.LandsatRequest landsat = 26;
inline bool StacRequest::_internal_has_landsat() const {
  return this != internal_default_instance() && landsat_ != nullptr;
}
inline bool StacRequest::has_landsat() const {
  return _internal_has_landsat();
}
inline void StacRequest::clear_landsat() {
  if (GetArena() == nullptr && landsat_ != nullptr) {
    delete landsat_;
  }
  landsat_ = nullptr;
}
inline const ::epl::protobuf::v1::LandsatRequest& StacRequest::_internal_landsat() const {
  const ::epl::protobuf::v1::LandsatRequest* p = landsat_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::LandsatRequest&>(
      ::epl::protobuf::v1::_LandsatRequest_default_instance_);
}
inline const ::epl::protobuf::v1::LandsatRequest& StacRequest::landsat() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.landsat)
  return _internal_landsat();
}
inline void StacRequest::unsafe_arena_set_allocated_landsat(
    ::epl::protobuf::v1::LandsatRequest* landsat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landsat_);
  }
  landsat_ = landsat;
  if (landsat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.landsat)
}
inline ::epl::protobuf::v1::LandsatRequest* StacRequest::release_landsat() {
  
  ::epl::protobuf::v1::LandsatRequest* temp = landsat_;
  landsat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::LandsatRequest* StacRequest::unsafe_arena_release_landsat() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.landsat)
  
  ::epl::protobuf::v1::LandsatRequest* temp = landsat_;
  landsat_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::LandsatRequest* StacRequest::_internal_mutable_landsat() {
  
  if (landsat_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::LandsatRequest>(GetArena());
    landsat_ = p;
  }
  return landsat_;
}
inline ::epl::protobuf::v1::LandsatRequest* StacRequest::mutable_landsat() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.landsat)
  return _internal_mutable_landsat();
}
inline void StacRequest::set_allocated_landsat(::epl::protobuf::v1::LandsatRequest* landsat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landsat_;
  }
  if (landsat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landsat);
    if (message_arena != submessage_arena) {
      landsat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landsat, submessage_arena);
    }
    
  } else {
    
  }
  landsat_ = landsat;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.landsat)
}

// .epl.protobuf.v1.MosaicRequest mosaic = 27;
inline bool StacRequest::_internal_has_mosaic() const {
  return this != internal_default_instance() && mosaic_ != nullptr;
}
inline bool StacRequest::has_mosaic() const {
  return _internal_has_mosaic();
}
inline void StacRequest::clear_mosaic() {
  if (GetArena() == nullptr && mosaic_ != nullptr) {
    delete mosaic_;
  }
  mosaic_ = nullptr;
}
inline const ::epl::protobuf::v1::MosaicRequest& StacRequest::_internal_mosaic() const {
  const ::epl::protobuf::v1::MosaicRequest* p = mosaic_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::MosaicRequest&>(
      ::epl::protobuf::v1::_MosaicRequest_default_instance_);
}
inline const ::epl::protobuf::v1::MosaicRequest& StacRequest::mosaic() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacRequest.mosaic)
  return _internal_mosaic();
}
inline void StacRequest::unsafe_arena_set_allocated_mosaic(
    ::epl::protobuf::v1::MosaicRequest* mosaic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mosaic_);
  }
  mosaic_ = mosaic;
  if (mosaic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.StacRequest.mosaic)
}
inline ::epl::protobuf::v1::MosaicRequest* StacRequest::release_mosaic() {
  
  ::epl::protobuf::v1::MosaicRequest* temp = mosaic_;
  mosaic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::MosaicRequest* StacRequest::unsafe_arena_release_mosaic() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacRequest.mosaic)
  
  ::epl::protobuf::v1::MosaicRequest* temp = mosaic_;
  mosaic_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::MosaicRequest* StacRequest::_internal_mutable_mosaic() {
  
  if (mosaic_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::MosaicRequest>(GetArena());
    mosaic_ = p;
  }
  return mosaic_;
}
inline ::epl::protobuf::v1::MosaicRequest* StacRequest::mutable_mosaic() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacRequest.mosaic)
  return _internal_mutable_mosaic();
}
inline void StacRequest::set_allocated_mosaic(::epl::protobuf::v1::MosaicRequest* mosaic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mosaic_;
  }
  if (mosaic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mosaic);
    if (message_arena != submessage_arena) {
      mosaic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mosaic, submessage_arena);
    }
    
  } else {
    
  }
  mosaic_ = mosaic;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.mosaic)
}

inline bool StacRequest::has_identity() const {
  return identity_case() != IDENTITY_NOT_SET;
}
inline void StacRequest::clear_has_identity() {
  _oneof_case_[0] = IDENTITY_NOT_SET;
}
inline bool StacRequest::has_spatial() const {
  return spatial_case() != SPATIAL_NOT_SET;
}
inline void StacRequest::clear_has_spatial() {
  _oneof_case_[1] = SPATIAL_NOT_SET;
}
inline bool StacRequest::has_temporal() const {
  return temporal_case() != TEMPORAL_NOT_SET;
}
inline void StacRequest::clear_has_temporal() {
  _oneof_case_[2] = TEMPORAL_NOT_SET;
}
inline StacRequest::IdentityCase StacRequest::identity_case() const {
  return StacRequest::IdentityCase(_oneof_case_[0]);
}
inline StacRequest::SpatialCase StacRequest::spatial_case() const {
  return StacRequest::SpatialCase(_oneof_case_[1]);
}
inline StacRequest::TemporalCase StacRequest::temporal_case() const {
  return StacRequest::TemporalCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// View

// .google.protobuf.FloatValue off_nadir = 1;
inline bool View::_internal_has_off_nadir() const {
  return this != internal_default_instance() && off_nadir_ != nullptr;
}
inline bool View::has_off_nadir() const {
  return _internal_has_off_nadir();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::_internal_off_nadir() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = off_nadir_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::off_nadir() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.View.off_nadir)
  return _internal_off_nadir();
}
inline void View::unsafe_arena_set_allocated_off_nadir(
    PROTOBUF_NAMESPACE_ID::FloatValue* off_nadir) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir_);
  }
  off_nadir_ = off_nadir;
  if (off_nadir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.View.off_nadir)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::release_off_nadir() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = off_nadir_;
  off_nadir_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::unsafe_arena_release_off_nadir() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.View.off_nadir)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = off_nadir_;
  off_nadir_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::_internal_mutable_off_nadir() {
  
  if (off_nadir_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    off_nadir_ = p;
  }
  return off_nadir_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::mutable_off_nadir() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.View.off_nadir)
  return _internal_mutable_off_nadir();
}
inline void View::set_allocated_off_nadir(PROTOBUF_NAMESPACE_ID::FloatValue* off_nadir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir_);
  }
  if (off_nadir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir)->GetArena();
    if (message_arena != submessage_arena) {
      off_nadir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, off_nadir, submessage_arena);
    }
    
  } else {
    
  }
  off_nadir_ = off_nadir;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.View.off_nadir)
}

// .google.protobuf.FloatValue incidence_angle = 2;
inline bool View::_internal_has_incidence_angle() const {
  return this != internal_default_instance() && incidence_angle_ != nullptr;
}
inline bool View::has_incidence_angle() const {
  return _internal_has_incidence_angle();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::_internal_incidence_angle() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = incidence_angle_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::incidence_angle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.View.incidence_angle)
  return _internal_incidence_angle();
}
inline void View::unsafe_arena_set_allocated_incidence_angle(
    PROTOBUF_NAMESPACE_ID::FloatValue* incidence_angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle_);
  }
  incidence_angle_ = incidence_angle;
  if (incidence_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.View.incidence_angle)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::release_incidence_angle() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = incidence_angle_;
  incidence_angle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::unsafe_arena_release_incidence_angle() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.View.incidence_angle)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = incidence_angle_;
  incidence_angle_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::_internal_mutable_incidence_angle() {
  
  if (incidence_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    incidence_angle_ = p;
  }
  return incidence_angle_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::mutable_incidence_angle() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.View.incidence_angle)
  return _internal_mutable_incidence_angle();
}
inline void View::set_allocated_incidence_angle(PROTOBUF_NAMESPACE_ID::FloatValue* incidence_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle_);
  }
  if (incidence_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle)->GetArena();
    if (message_arena != submessage_arena) {
      incidence_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incidence_angle, submessage_arena);
    }
    
  } else {
    
  }
  incidence_angle_ = incidence_angle;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.View.incidence_angle)
}

// .google.protobuf.FloatValue azimuth = 3;
inline bool View::_internal_has_azimuth() const {
  return this != internal_default_instance() && azimuth_ != nullptr;
}
inline bool View::has_azimuth() const {
  return _internal_has_azimuth();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::_internal_azimuth() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = azimuth_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::azimuth() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.View.azimuth)
  return _internal_azimuth();
}
inline void View::unsafe_arena_set_allocated_azimuth(
    PROTOBUF_NAMESPACE_ID::FloatValue* azimuth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth_);
  }
  azimuth_ = azimuth;
  if (azimuth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.View.azimuth)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::release_azimuth() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = azimuth_;
  azimuth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::unsafe_arena_release_azimuth() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.View.azimuth)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = azimuth_;
  azimuth_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::_internal_mutable_azimuth() {
  
  if (azimuth_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    azimuth_ = p;
  }
  return azimuth_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::mutable_azimuth() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.View.azimuth)
  return _internal_mutable_azimuth();
}
inline void View::set_allocated_azimuth(PROTOBUF_NAMESPACE_ID::FloatValue* azimuth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth_);
  }
  if (azimuth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth)->GetArena();
    if (message_arena != submessage_arena) {
      azimuth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azimuth, submessage_arena);
    }
    
  } else {
    
  }
  azimuth_ = azimuth;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.View.azimuth)
}

// .google.protobuf.FloatValue sun_azimuth = 4;
inline bool View::_internal_has_sun_azimuth() const {
  return this != internal_default_instance() && sun_azimuth_ != nullptr;
}
inline bool View::has_sun_azimuth() const {
  return _internal_has_sun_azimuth();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::_internal_sun_azimuth() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = sun_azimuth_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::sun_azimuth() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.View.sun_azimuth)
  return _internal_sun_azimuth();
}
inline void View::unsafe_arena_set_allocated_sun_azimuth(
    PROTOBUF_NAMESPACE_ID::FloatValue* sun_azimuth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth_);
  }
  sun_azimuth_ = sun_azimuth;
  if (sun_azimuth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.View.sun_azimuth)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::release_sun_azimuth() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sun_azimuth_;
  sun_azimuth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::unsafe_arena_release_sun_azimuth() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.View.sun_azimuth)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sun_azimuth_;
  sun_azimuth_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::_internal_mutable_sun_azimuth() {
  
  if (sun_azimuth_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    sun_azimuth_ = p;
  }
  return sun_azimuth_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::mutable_sun_azimuth() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.View.sun_azimuth)
  return _internal_mutable_sun_azimuth();
}
inline void View::set_allocated_sun_azimuth(PROTOBUF_NAMESPACE_ID::FloatValue* sun_azimuth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth_);
  }
  if (sun_azimuth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth)->GetArena();
    if (message_arena != submessage_arena) {
      sun_azimuth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun_azimuth, submessage_arena);
    }
    
  } else {
    
  }
  sun_azimuth_ = sun_azimuth;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.View.sun_azimuth)
}

// .google.protobuf.FloatValue sun_elevation = 5;
inline bool View::_internal_has_sun_elevation() const {
  return this != internal_default_instance() && sun_elevation_ != nullptr;
}
inline bool View::has_sun_elevation() const {
  return _internal_has_sun_elevation();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::_internal_sun_elevation() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = sun_elevation_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& View::sun_elevation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.View.sun_elevation)
  return _internal_sun_elevation();
}
inline void View::unsafe_arena_set_allocated_sun_elevation(
    PROTOBUF_NAMESPACE_ID::FloatValue* sun_elevation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation_);
  }
  sun_elevation_ = sun_elevation;
  if (sun_elevation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.View.sun_elevation)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::release_sun_elevation() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sun_elevation_;
  sun_elevation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::unsafe_arena_release_sun_elevation() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.View.sun_elevation)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = sun_elevation_;
  sun_elevation_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::_internal_mutable_sun_elevation() {
  
  if (sun_elevation_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    sun_elevation_ = p;
  }
  return sun_elevation_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* View::mutable_sun_elevation() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.View.sun_elevation)
  return _internal_mutable_sun_elevation();
}
inline void View::set_allocated_sun_elevation(PROTOBUF_NAMESPACE_ID::FloatValue* sun_elevation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation_);
  }
  if (sun_elevation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation)->GetArena();
    if (message_arena != submessage_arena) {
      sun_elevation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun_elevation, submessage_arena);
    }
    
  } else {
    
  }
  sun_elevation_ = sun_elevation;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.View.sun_elevation)
}

// -------------------------------------------------------------------

// ViewRequest

// .epl.protobuf.v1.FloatFilter off_nadir = 1;
inline bool ViewRequest::_internal_has_off_nadir() const {
  return this != internal_default_instance() && off_nadir_ != nullptr;
}
inline bool ViewRequest::has_off_nadir() const {
  return _internal_has_off_nadir();
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::_internal_off_nadir() const {
  const ::epl::protobuf::v1::FloatFilter* p = off_nadir_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::off_nadir() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ViewRequest.off_nadir)
  return _internal_off_nadir();
}
inline void ViewRequest::unsafe_arena_set_allocated_off_nadir(
    ::epl::protobuf::v1::FloatFilter* off_nadir) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir_);
  }
  off_nadir_ = off_nadir;
  if (off_nadir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ViewRequest.off_nadir)
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::release_off_nadir() {
  
  ::epl::protobuf::v1::FloatFilter* temp = off_nadir_;
  off_nadir_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::unsafe_arena_release_off_nadir() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ViewRequest.off_nadir)
  
  ::epl::protobuf::v1::FloatFilter* temp = off_nadir_;
  off_nadir_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::_internal_mutable_off_nadir() {
  
  if (off_nadir_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    off_nadir_ = p;
  }
  return off_nadir_;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::mutable_off_nadir() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ViewRequest.off_nadir)
  return _internal_mutable_off_nadir();
}
inline void ViewRequest::set_allocated_off_nadir(::epl::protobuf::v1::FloatFilter* off_nadir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir_);
  }
  if (off_nadir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_nadir)->GetArena();
    if (message_arena != submessage_arena) {
      off_nadir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, off_nadir, submessage_arena);
    }
    
  } else {
    
  }
  off_nadir_ = off_nadir;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ViewRequest.off_nadir)
}

// .epl.protobuf.v1.FloatFilter incidence_angle = 2;
inline bool ViewRequest::_internal_has_incidence_angle() const {
  return this != internal_default_instance() && incidence_angle_ != nullptr;
}
inline bool ViewRequest::has_incidence_angle() const {
  return _internal_has_incidence_angle();
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::_internal_incidence_angle() const {
  const ::epl::protobuf::v1::FloatFilter* p = incidence_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::incidence_angle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ViewRequest.incidence_angle)
  return _internal_incidence_angle();
}
inline void ViewRequest::unsafe_arena_set_allocated_incidence_angle(
    ::epl::protobuf::v1::FloatFilter* incidence_angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle_);
  }
  incidence_angle_ = incidence_angle;
  if (incidence_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ViewRequest.incidence_angle)
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::release_incidence_angle() {
  
  ::epl::protobuf::v1::FloatFilter* temp = incidence_angle_;
  incidence_angle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::unsafe_arena_release_incidence_angle() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ViewRequest.incidence_angle)
  
  ::epl::protobuf::v1::FloatFilter* temp = incidence_angle_;
  incidence_angle_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::_internal_mutable_incidence_angle() {
  
  if (incidence_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    incidence_angle_ = p;
  }
  return incidence_angle_;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::mutable_incidence_angle() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ViewRequest.incidence_angle)
  return _internal_mutable_incidence_angle();
}
inline void ViewRequest::set_allocated_incidence_angle(::epl::protobuf::v1::FloatFilter* incidence_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle_);
  }
  if (incidence_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_angle)->GetArena();
    if (message_arena != submessage_arena) {
      incidence_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incidence_angle, submessage_arena);
    }
    
  } else {
    
  }
  incidence_angle_ = incidence_angle;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ViewRequest.incidence_angle)
}

// .epl.protobuf.v1.FloatFilter azimuth = 3;
inline bool ViewRequest::_internal_has_azimuth() const {
  return this != internal_default_instance() && azimuth_ != nullptr;
}
inline bool ViewRequest::has_azimuth() const {
  return _internal_has_azimuth();
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::_internal_azimuth() const {
  const ::epl::protobuf::v1::FloatFilter* p = azimuth_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::azimuth() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ViewRequest.azimuth)
  return _internal_azimuth();
}
inline void ViewRequest::unsafe_arena_set_allocated_azimuth(
    ::epl::protobuf::v1::FloatFilter* azimuth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth_);
  }
  azimuth_ = azimuth;
  if (azimuth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ViewRequest.azimuth)
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::release_azimuth() {
  
  ::epl::protobuf::v1::FloatFilter* temp = azimuth_;
  azimuth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::unsafe_arena_release_azimuth() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ViewRequest.azimuth)
  
  ::epl::protobuf::v1::FloatFilter* temp = azimuth_;
  azimuth_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::_internal_mutable_azimuth() {
  
  if (azimuth_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    azimuth_ = p;
  }
  return azimuth_;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::mutable_azimuth() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ViewRequest.azimuth)
  return _internal_mutable_azimuth();
}
inline void ViewRequest::set_allocated_azimuth(::epl::protobuf::v1::FloatFilter* azimuth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth_);
  }
  if (azimuth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(azimuth)->GetArena();
    if (message_arena != submessage_arena) {
      azimuth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azimuth, submessage_arena);
    }
    
  } else {
    
  }
  azimuth_ = azimuth;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ViewRequest.azimuth)
}

// .epl.protobuf.v1.FloatFilter sun_azimuth = 4;
inline bool ViewRequest::_internal_has_sun_azimuth() const {
  return this != internal_default_instance() && sun_azimuth_ != nullptr;
}
inline bool ViewRequest::has_sun_azimuth() const {
  return _internal_has_sun_azimuth();
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::_internal_sun_azimuth() const {
  const ::epl::protobuf::v1::FloatFilter* p = sun_azimuth_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::sun_azimuth() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ViewRequest.sun_azimuth)
  return _internal_sun_azimuth();
}
inline void ViewRequest::unsafe_arena_set_allocated_sun_azimuth(
    ::epl::protobuf::v1::FloatFilter* sun_azimuth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth_);
  }
  sun_azimuth_ = sun_azimuth;
  if (sun_azimuth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ViewRequest.sun_azimuth)
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::release_sun_azimuth() {
  
  ::epl::protobuf::v1::FloatFilter* temp = sun_azimuth_;
  sun_azimuth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::unsafe_arena_release_sun_azimuth() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ViewRequest.sun_azimuth)
  
  ::epl::protobuf::v1::FloatFilter* temp = sun_azimuth_;
  sun_azimuth_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::_internal_mutable_sun_azimuth() {
  
  if (sun_azimuth_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    sun_azimuth_ = p;
  }
  return sun_azimuth_;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::mutable_sun_azimuth() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ViewRequest.sun_azimuth)
  return _internal_mutable_sun_azimuth();
}
inline void ViewRequest::set_allocated_sun_azimuth(::epl::protobuf::v1::FloatFilter* sun_azimuth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth_);
  }
  if (sun_azimuth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_azimuth)->GetArena();
    if (message_arena != submessage_arena) {
      sun_azimuth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun_azimuth, submessage_arena);
    }
    
  } else {
    
  }
  sun_azimuth_ = sun_azimuth;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ViewRequest.sun_azimuth)
}

// .epl.protobuf.v1.FloatFilter sun_elevation = 5;
inline bool ViewRequest::_internal_has_sun_elevation() const {
  return this != internal_default_instance() && sun_elevation_ != nullptr;
}
inline bool ViewRequest::has_sun_elevation() const {
  return _internal_has_sun_elevation();
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::_internal_sun_elevation() const {
  const ::epl::protobuf::v1::FloatFilter* p = sun_elevation_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& ViewRequest::sun_elevation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ViewRequest.sun_elevation)
  return _internal_sun_elevation();
}
inline void ViewRequest::unsafe_arena_set_allocated_sun_elevation(
    ::epl::protobuf::v1::FloatFilter* sun_elevation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation_);
  }
  sun_elevation_ = sun_elevation;
  if (sun_elevation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ViewRequest.sun_elevation)
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::release_sun_elevation() {
  
  ::epl::protobuf::v1::FloatFilter* temp = sun_elevation_;
  sun_elevation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::unsafe_arena_release_sun_elevation() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ViewRequest.sun_elevation)
  
  ::epl::protobuf::v1::FloatFilter* temp = sun_elevation_;
  sun_elevation_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::_internal_mutable_sun_elevation() {
  
  if (sun_elevation_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    sun_elevation_ = p;
  }
  return sun_elevation_;
}
inline ::epl::protobuf::v1::FloatFilter* ViewRequest::mutable_sun_elevation() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ViewRequest.sun_elevation)
  return _internal_mutable_sun_elevation();
}
inline void ViewRequest::set_allocated_sun_elevation(::epl::protobuf::v1::FloatFilter* sun_elevation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation_);
  }
  if (sun_elevation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sun_elevation)->GetArena();
    if (message_arena != submessage_arena) {
      sun_elevation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun_elevation, submessage_arena);
    }
    
  } else {
    
  }
  sun_elevation_ = sun_elevation;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ViewRequest.sun_elevation)
}

// -------------------------------------------------------------------

// Sat

// .google.protobuf.UInt32Value relative_orbit = 6;
inline bool Sat::_internal_has_relative_orbit() const {
  return this != internal_default_instance() && relative_orbit_ != nullptr;
}
inline bool Sat::has_relative_orbit() const {
  return _internal_has_relative_orbit();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Sat::_internal_relative_orbit() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = relative_orbit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Sat::relative_orbit() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Sat.relative_orbit)
  return _internal_relative_orbit();
}
inline void Sat::unsafe_arena_set_allocated_relative_orbit(
    PROTOBUF_NAMESPACE_ID::UInt32Value* relative_orbit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_orbit_);
  }
  relative_orbit_ = relative_orbit;
  if (relative_orbit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Sat.relative_orbit)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Sat::release_relative_orbit() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = relative_orbit_;
  relative_orbit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Sat::unsafe_arena_release_relative_orbit() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Sat.relative_orbit)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = relative_orbit_;
  relative_orbit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Sat::_internal_mutable_relative_orbit() {
  
  if (relative_orbit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    relative_orbit_ = p;
  }
  return relative_orbit_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Sat::mutable_relative_orbit() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Sat.relative_orbit)
  return _internal_mutable_relative_orbit();
}
inline void Sat::set_allocated_relative_orbit(PROTOBUF_NAMESPACE_ID::UInt32Value* relative_orbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_orbit_);
  }
  if (relative_orbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_orbit)->GetArena();
    if (message_arena != submessage_arena) {
      relative_orbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_orbit, submessage_arena);
    }
    
  } else {
    
  }
  relative_orbit_ = relative_orbit;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Sat.relative_orbit)
}

// .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
inline void Sat::clear_orbit_state() {
  orbit_state_ = 0;
}
inline ::epl::protobuf::v1::Sat_OrbitState Sat::_internal_orbit_state() const {
  return static_cast< ::epl::protobuf::v1::Sat_OrbitState >(orbit_state_);
}
inline ::epl::protobuf::v1::Sat_OrbitState Sat::orbit_state() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Sat.orbit_state)
  return _internal_orbit_state();
}
inline void Sat::_internal_set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value) {
  
  orbit_state_ = value;
}
inline void Sat::set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value) {
  _internal_set_orbit_state(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Sat.orbit_state)
}

// -------------------------------------------------------------------

// SatRequest

// uint32 relative_orbit = 6;
inline void SatRequest::clear_relative_orbit() {
  relative_orbit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatRequest::_internal_relative_orbit() const {
  return relative_orbit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatRequest::relative_orbit() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.SatRequest.relative_orbit)
  return _internal_relative_orbit();
}
inline void SatRequest::_internal_set_relative_orbit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  relative_orbit_ = value;
}
inline void SatRequest::set_relative_orbit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relative_orbit(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.SatRequest.relative_orbit)
}

// .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
inline void SatRequest::clear_orbit_state() {
  orbit_state_ = 0;
}
inline ::epl::protobuf::v1::Sat_OrbitState SatRequest::_internal_orbit_state() const {
  return static_cast< ::epl::protobuf::v1::Sat_OrbitState >(orbit_state_);
}
inline ::epl::protobuf::v1::Sat_OrbitState SatRequest::orbit_state() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.SatRequest.orbit_state)
  return _internal_orbit_state();
}
inline void SatRequest::_internal_set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value) {
  
  orbit_state_ = value;
}
inline void SatRequest::set_orbit_state(::epl::protobuf::v1::Sat_OrbitState value) {
  _internal_set_orbit_state(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.SatRequest.orbit_state)
}

// -------------------------------------------------------------------

// Eo

// .google.protobuf.FloatValue cloud_cover = 1;
inline bool Eo::_internal_has_cloud_cover() const {
  return this != internal_default_instance() && cloud_cover_ != nullptr;
}
inline bool Eo::has_cloud_cover() const {
  return _internal_has_cloud_cover();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& Eo::_internal_cloud_cover() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = cloud_cover_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& Eo::cloud_cover() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Eo.cloud_cover)
  return _internal_cloud_cover();
}
inline void Eo::unsafe_arena_set_allocated_cloud_cover(
    PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_);
  }
  cloud_cover_ = cloud_cover;
  if (cloud_cover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Eo.cloud_cover)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Eo::release_cloud_cover() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = cloud_cover_;
  cloud_cover_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Eo::unsafe_arena_release_cloud_cover() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Eo.cloud_cover)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = cloud_cover_;
  cloud_cover_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Eo::_internal_mutable_cloud_cover() {
  
  if (cloud_cover_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    cloud_cover_ = p;
  }
  return cloud_cover_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Eo::mutable_cloud_cover() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Eo.cloud_cover)
  return _internal_mutable_cloud_cover();
}
inline void Eo::set_allocated_cloud_cover(PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_);
  }
  if (cloud_cover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover)->GetArena();
    if (message_arena != submessage_arena) {
      cloud_cover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_cover, submessage_arena);
    }
    
  } else {
    
  }
  cloud_cover_ = cloud_cover;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Eo.cloud_cover)
}

// .epl.protobuf.v1.Eo.Band bands = 2;
inline void Eo::clear_bands() {
  bands_ = 0;
}
inline ::epl::protobuf::v1::Eo_Band Eo::_internal_bands() const {
  return static_cast< ::epl::protobuf::v1::Eo_Band >(bands_);
}
inline ::epl::protobuf::v1::Eo_Band Eo::bands() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Eo.bands)
  return _internal_bands();
}
inline void Eo::_internal_set_bands(::epl::protobuf::v1::Eo_Band value) {
  
  bands_ = value;
}
inline void Eo::set_bands(::epl::protobuf::v1::Eo_Band value) {
  _internal_set_bands(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Eo.bands)
}

// -------------------------------------------------------------------

// EoRequest

// .epl.protobuf.v1.FloatFilter cloud_cover = 1;
inline bool EoRequest::_internal_has_cloud_cover() const {
  return this != internal_default_instance() && cloud_cover_ != nullptr;
}
inline bool EoRequest::has_cloud_cover() const {
  return _internal_has_cloud_cover();
}
inline const ::epl::protobuf::v1::FloatFilter& EoRequest::_internal_cloud_cover() const {
  const ::epl::protobuf::v1::FloatFilter* p = cloud_cover_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& EoRequest::cloud_cover() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EoRequest.cloud_cover)
  return _internal_cloud_cover();
}
inline void EoRequest::unsafe_arena_set_allocated_cloud_cover(
    ::epl::protobuf::v1::FloatFilter* cloud_cover) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_);
  }
  cloud_cover_ = cloud_cover;
  if (cloud_cover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.EoRequest.cloud_cover)
}
inline ::epl::protobuf::v1::FloatFilter* EoRequest::release_cloud_cover() {
  
  ::epl::protobuf::v1::FloatFilter* temp = cloud_cover_;
  cloud_cover_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* EoRequest::unsafe_arena_release_cloud_cover() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.EoRequest.cloud_cover)
  
  ::epl::protobuf::v1::FloatFilter* temp = cloud_cover_;
  cloud_cover_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* EoRequest::_internal_mutable_cloud_cover() {
  
  if (cloud_cover_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    cloud_cover_ = p;
  }
  return cloud_cover_;
}
inline ::epl::protobuf::v1::FloatFilter* EoRequest::mutable_cloud_cover() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.EoRequest.cloud_cover)
  return _internal_mutable_cloud_cover();
}
inline void EoRequest::set_allocated_cloud_cover(::epl::protobuf::v1::FloatFilter* cloud_cover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_);
  }
  if (cloud_cover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover)->GetArena();
    if (message_arena != submessage_arena) {
      cloud_cover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_cover, submessage_arena);
    }
    
  } else {
    
  }
  cloud_cover_ = cloud_cover;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.EoRequest.cloud_cover)
}

// .epl.protobuf.v1.Eo.Band bands = 2;
inline void EoRequest::clear_bands() {
  bands_ = 0;
}
inline ::epl::protobuf::v1::Eo_Band EoRequest::_internal_bands() const {
  return static_cast< ::epl::protobuf::v1::Eo_Band >(bands_);
}
inline ::epl::protobuf::v1::Eo_Band EoRequest::bands() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EoRequest.bands)
  return _internal_bands();
}
inline void EoRequest::_internal_set_bands(::epl::protobuf::v1::Eo_Band value) {
  
  bands_ = value;
}
inline void EoRequest::set_bands(::epl::protobuf::v1::Eo_Band value) {
  _internal_set_bands(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EoRequest.bands)
}

// -------------------------------------------------------------------

// Asset

// string href = 1;
inline void Asset::clear_href() {
  href_.ClearToEmpty();
}
inline const std::string& Asset::href() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.href)
  return _internal_href();
}
inline void Asset::set_href(const std::string& value) {
  _internal_set_href(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.href)
}
inline std::string* Asset::mutable_href() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.href)
  return _internal_mutable_href();
}
inline const std::string& Asset::_internal_href() const {
  return href_.Get();
}
inline void Asset::_internal_set_href(const std::string& value) {
  
  href_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_href(std::string&& value) {
  
  href_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.href)
}
inline void Asset::set_href(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  href_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.href)
}
inline void Asset::set_href(const char* value,
    size_t size) {
  
  href_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.href)
}
inline std::string* Asset::_internal_mutable_href() {
  
  return href_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_href() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.href)
  return href_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_href(std::string* href) {
  if (href != nullptr) {
    
  } else {
    
  }
  href_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), href,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.href)
}

// string type = 2;
inline void Asset::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Asset::type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.type)
  return _internal_type();
}
inline void Asset::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.type)
}
inline std::string* Asset::mutable_type() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.type)
  return _internal_mutable_type();
}
inline const std::string& Asset::_internal_type() const {
  return type_.Get();
}
inline void Asset::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.type)
}
inline void Asset::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.type)
}
inline void Asset::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.type)
}
inline std::string* Asset::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_type() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.type)
}

// .epl.protobuf.v1.Eo.Band eo_bands = 3;
inline void Asset::clear_eo_bands() {
  eo_bands_ = 0;
}
inline ::epl::protobuf::v1::Eo_Band Asset::_internal_eo_bands() const {
  return static_cast< ::epl::protobuf::v1::Eo_Band >(eo_bands_);
}
inline ::epl::protobuf::v1::Eo_Band Asset::eo_bands() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.eo_bands)
  return _internal_eo_bands();
}
inline void Asset::_internal_set_eo_bands(::epl::protobuf::v1::Eo_Band value) {
  
  eo_bands_ = value;
}
inline void Asset::set_eo_bands(::epl::protobuf::v1::Eo_Band value) {
  _internal_set_eo_bands(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.eo_bands)
}

// .epl.protobuf.v1.AssetType asset_type = 4;
inline void Asset::clear_asset_type() {
  asset_type_ = 0;
}
inline ::epl::protobuf::v1::AssetType Asset::_internal_asset_type() const {
  return static_cast< ::epl::protobuf::v1::AssetType >(asset_type_);
}
inline ::epl::protobuf::v1::AssetType Asset::asset_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.asset_type)
  return _internal_asset_type();
}
inline void Asset::_internal_set_asset_type(::epl::protobuf::v1::AssetType value) {
  
  asset_type_ = value;
}
inline void Asset::set_asset_type(::epl::protobuf::v1::AssetType value) {
  _internal_set_asset_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.asset_type)
}

// .epl.protobuf.v1.CloudPlatform cloud_platform = 5;
inline void Asset::clear_cloud_platform() {
  cloud_platform_ = 0;
}
inline ::epl::protobuf::v1::CloudPlatform Asset::_internal_cloud_platform() const {
  return static_cast< ::epl::protobuf::v1::CloudPlatform >(cloud_platform_);
}
inline ::epl::protobuf::v1::CloudPlatform Asset::cloud_platform() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.cloud_platform)
  return _internal_cloud_platform();
}
inline void Asset::_internal_set_cloud_platform(::epl::protobuf::v1::CloudPlatform value) {
  
  cloud_platform_ = value;
}
inline void Asset::set_cloud_platform(::epl::protobuf::v1::CloudPlatform value) {
  _internal_set_cloud_platform(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.cloud_platform)
}

// string bucket_manager = 6;
inline void Asset::clear_bucket_manager() {
  bucket_manager_.ClearToEmpty();
}
inline const std::string& Asset::bucket_manager() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.bucket_manager)
  return _internal_bucket_manager();
}
inline void Asset::set_bucket_manager(const std::string& value) {
  _internal_set_bucket_manager(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.bucket_manager)
}
inline std::string* Asset::mutable_bucket_manager() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.bucket_manager)
  return _internal_mutable_bucket_manager();
}
inline const std::string& Asset::_internal_bucket_manager() const {
  return bucket_manager_.Get();
}
inline void Asset::_internal_set_bucket_manager(const std::string& value) {
  
  bucket_manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_bucket_manager(std::string&& value) {
  
  bucket_manager_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.bucket_manager)
}
inline void Asset::set_bucket_manager(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.bucket_manager)
}
inline void Asset::set_bucket_manager(const char* value,
    size_t size) {
  
  bucket_manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.bucket_manager)
}
inline std::string* Asset::_internal_mutable_bucket_manager() {
  
  return bucket_manager_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_bucket_manager() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.bucket_manager)
  return bucket_manager_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_bucket_manager(std::string* bucket_manager) {
  if (bucket_manager != nullptr) {
    
  } else {
    
  }
  bucket_manager_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket_manager,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.bucket_manager)
}

// string bucket_region = 7;
inline void Asset::clear_bucket_region() {
  bucket_region_.ClearToEmpty();
}
inline const std::string& Asset::bucket_region() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.bucket_region)
  return _internal_bucket_region();
}
inline void Asset::set_bucket_region(const std::string& value) {
  _internal_set_bucket_region(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.bucket_region)
}
inline std::string* Asset::mutable_bucket_region() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.bucket_region)
  return _internal_mutable_bucket_region();
}
inline const std::string& Asset::_internal_bucket_region() const {
  return bucket_region_.Get();
}
inline void Asset::_internal_set_bucket_region(const std::string& value) {
  
  bucket_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_bucket_region(std::string&& value) {
  
  bucket_region_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.bucket_region)
}
inline void Asset::set_bucket_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.bucket_region)
}
inline void Asset::set_bucket_region(const char* value,
    size_t size) {
  
  bucket_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.bucket_region)
}
inline std::string* Asset::_internal_mutable_bucket_region() {
  
  return bucket_region_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_bucket_region() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.bucket_region)
  return bucket_region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_bucket_region(std::string* bucket_region) {
  if (bucket_region != nullptr) {
    
  } else {
    
  }
  bucket_region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket_region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.bucket_region)
}

// string bucket = 8;
inline void Asset::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& Asset::bucket() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.bucket)
  return _internal_bucket();
}
inline void Asset::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.bucket)
}
inline std::string* Asset::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& Asset::_internal_bucket() const {
  return bucket_.Get();
}
inline void Asset::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_bucket(std::string&& value) {
  
  bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.bucket)
}
inline void Asset::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.bucket)
}
inline void Asset::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.bucket)
}
inline std::string* Asset::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_bucket() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.bucket)
}

// string object_path = 9;
inline void Asset::clear_object_path() {
  object_path_.ClearToEmpty();
}
inline const std::string& Asset::object_path() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.object_path)
  return _internal_object_path();
}
inline void Asset::set_object_path(const std::string& value) {
  _internal_set_object_path(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.object_path)
}
inline std::string* Asset::mutable_object_path() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Asset.object_path)
  return _internal_mutable_object_path();
}
inline const std::string& Asset::_internal_object_path() const {
  return object_path_.Get();
}
inline void Asset::_internal_set_object_path(const std::string& value) {
  
  object_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_object_path(std::string&& value) {
  
  object_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Asset.object_path)
}
inline void Asset::set_object_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Asset.object_path)
}
inline void Asset::set_object_path(const char* value,
    size_t size) {
  
  object_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Asset.object_path)
}
inline std::string* Asset::_internal_mutable_object_path() {
  
  return object_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_object_path() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Asset.object_path)
  return object_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_object_path(std::string* object_path) {
  if (object_path != nullptr) {
    
  } else {
    
  }
  object_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Asset.object_path)
}

// bool requester_pays = 10;
inline void Asset::clear_requester_pays() {
  requester_pays_ = false;
}
inline bool Asset::_internal_requester_pays() const {
  return requester_pays_;
}
inline bool Asset::requester_pays() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Asset.requester_pays)
  return _internal_requester_pays();
}
inline void Asset::_internal_set_requester_pays(bool value) {
  
  requester_pays_ = value;
}
inline void Asset::set_requester_pays(bool value) {
  _internal_set_requester_pays(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Asset.requester_pays)
}

// -------------------------------------------------------------------

// DatetimeRange

// .google.protobuf.Timestamp start = 1;
inline bool DatetimeRange::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool DatetimeRange::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DatetimeRange::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DatetimeRange::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DatetimeRange.start)
  return _internal_start();
}
inline void DatetimeRange::unsafe_arena_set_allocated_start(
    PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.DatetimeRange.start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::release_start() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.DatetimeRange.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::mutable_start() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.DatetimeRange.start)
  return _internal_mutable_start();
}
inline void DatetimeRange::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.DatetimeRange.start)
}

// .google.protobuf.Timestamp end = 2;
inline bool DatetimeRange::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool DatetimeRange::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DatetimeRange::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DatetimeRange::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DatetimeRange.end)
  return _internal_end();
}
inline void DatetimeRange::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.DatetimeRange.end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::release_end() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.DatetimeRange.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DatetimeRange::mutable_end() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.DatetimeRange.end)
  return _internal_mutable_end();
}
inline void DatetimeRange::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.DatetimeRange.end)
}

// -------------------------------------------------------------------

// StacDbResponse

// string status = 1;
inline void StacDbResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& StacDbResponse::status() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacDbResponse.status)
  return _internal_status();
}
inline void StacDbResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacDbResponse.status)
}
inline std::string* StacDbResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacDbResponse.status)
  return _internal_mutable_status();
}
inline const std::string& StacDbResponse::_internal_status() const {
  return status_.Get();
}
inline void StacDbResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacDbResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacDbResponse.status)
}
inline void StacDbResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacDbResponse.status)
}
inline void StacDbResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacDbResponse.status)
}
inline std::string* StacDbResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacDbResponse::release_status() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacDbResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacDbResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacDbResponse.status)
}

// int32 status_code = 2;
inline void StacDbResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StacDbResponse::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StacDbResponse::status_code() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacDbResponse.status_code)
  return _internal_status_code();
}
inline void StacDbResponse::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void StacDbResponse::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacDbResponse.status_code)
}

// string data_id = 3;
inline void StacDbResponse::clear_data_id() {
  data_id_.ClearToEmpty();
}
inline const std::string& StacDbResponse::data_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacDbResponse.data_id)
  return _internal_data_id();
}
inline void StacDbResponse::set_data_id(const std::string& value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacDbResponse.data_id)
}
inline std::string* StacDbResponse::mutable_data_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StacDbResponse.data_id)
  return _internal_mutable_data_id();
}
inline const std::string& StacDbResponse::_internal_data_id() const {
  return data_id_.Get();
}
inline void StacDbResponse::_internal_set_data_id(const std::string& value) {
  
  data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StacDbResponse::set_data_id(std::string&& value) {
  
  data_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StacDbResponse.data_id)
}
inline void StacDbResponse::set_data_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StacDbResponse.data_id)
}
inline void StacDbResponse::set_data_id(const char* value,
    size_t size) {
  
  data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StacDbResponse.data_id)
}
inline std::string* StacDbResponse::_internal_mutable_data_id() {
  
  return data_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StacDbResponse::release_data_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StacDbResponse.data_id)
  return data_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StacDbResponse::set_allocated_data_id(std::string* data_id) {
  if (data_id != nullptr) {
    
  } else {
    
  }
  data_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacDbResponse.data_id)
}

// uint64 count = 4;
inline void StacDbResponse::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StacDbResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StacDbResponse::count() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StacDbResponse.count)
  return _internal_count();
}
inline void StacDbResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void StacDbResponse::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StacDbResponse.count)
}

// -------------------------------------------------------------------

// Sar

// .epl.protobuf.v1.Sar.Platform platform = 1;
inline void Sar::clear_platform() {
  platform_ = 0;
}
inline ::epl::protobuf::v1::Sar_Platform Sar::_internal_platform() const {
  return static_cast< ::epl::protobuf::v1::Sar_Platform >(platform_);
}
inline ::epl::protobuf::v1::Sar_Platform Sar::platform() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Sar.platform)
  return _internal_platform();
}
inline void Sar::_internal_set_platform(::epl::protobuf::v1::Sar_Platform value) {
  
  platform_ = value;
}
inline void Sar::set_platform(::epl::protobuf::v1::Sar_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Sar.platform)
}

// -------------------------------------------------------------------

// Landsat

// string scene_id = 1;
inline void Landsat::clear_scene_id() {
  scene_id_.ClearToEmpty();
}
inline const std::string& Landsat::scene_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.scene_id)
  return _internal_scene_id();
}
inline void Landsat::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.scene_id)
}
inline std::string* Landsat::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Landsat.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& Landsat::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void Landsat::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Landsat::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Landsat.scene_id)
}
inline void Landsat::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Landsat.scene_id)
}
inline void Landsat::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Landsat.scene_id)
}
inline std::string* Landsat::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Landsat::release_scene_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Landsat.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Landsat::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Landsat.scene_id)
}

// string product_id = 2;
inline void Landsat::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& Landsat::product_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.product_id)
  return _internal_product_id();
}
inline void Landsat::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.product_id)
}
inline std::string* Landsat::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Landsat.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& Landsat::_internal_product_id() const {
  return product_id_.Get();
}
inline void Landsat::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Landsat::set_product_id(std::string&& value) {
  
  product_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Landsat.product_id)
}
inline void Landsat::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Landsat.product_id)
}
inline void Landsat::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Landsat.product_id)
}
inline std::string* Landsat::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Landsat::release_product_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Landsat.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Landsat::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Landsat.product_id)
}

// .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
inline void Landsat::clear_processing_level() {
  processing_level_ = 0;
}
inline ::epl::protobuf::v1::Landsat_ProcessingLevel Landsat::_internal_processing_level() const {
  return static_cast< ::epl::protobuf::v1::Landsat_ProcessingLevel >(processing_level_);
}
inline ::epl::protobuf::v1::Landsat_ProcessingLevel Landsat::processing_level() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.processing_level)
  return _internal_processing_level();
}
inline void Landsat::_internal_set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value) {
  
  processing_level_ = value;
}
inline void Landsat::set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value) {
  _internal_set_processing_level(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.processing_level)
}

// int32 wrs_path = 4;
inline void Landsat::clear_wrs_path() {
  wrs_path_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Landsat::_internal_wrs_path() const {
  return wrs_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Landsat::wrs_path() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.wrs_path)
  return _internal_wrs_path();
}
inline void Landsat::_internal_set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrs_path_ = value;
}
inline void Landsat::set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrs_path(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.wrs_path)
}

// int32 wrs_row = 5;
inline void Landsat::clear_wrs_row() {
  wrs_row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Landsat::_internal_wrs_row() const {
  return wrs_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Landsat::wrs_row() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.wrs_row)
  return _internal_wrs_row();
}
inline void Landsat::_internal_set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrs_row_ = value;
}
inline void Landsat::set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrs_row(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.wrs_row)
}

// .google.protobuf.FloatValue cloud_cover_land = 6;
inline bool Landsat::_internal_has_cloud_cover_land() const {
  return this != internal_default_instance() && cloud_cover_land_ != nullptr;
}
inline bool Landsat::has_cloud_cover_land() const {
  return _internal_has_cloud_cover_land();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& Landsat::_internal_cloud_cover_land() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = cloud_cover_land_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue&>(
      PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& Landsat::cloud_cover_land() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.cloud_cover_land)
  return _internal_cloud_cover_land();
}
inline void Landsat::unsafe_arena_set_allocated_cloud_cover_land(
    PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_land) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land_);
  }
  cloud_cover_land_ = cloud_cover_land;
  if (cloud_cover_land) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Landsat.cloud_cover_land)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Landsat::release_cloud_cover_land() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = cloud_cover_land_;
  cloud_cover_land_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Landsat::unsafe_arena_release_cloud_cover_land() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Landsat.cloud_cover_land)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = cloud_cover_land_;
  cloud_cover_land_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Landsat::_internal_mutable_cloud_cover_land() {
  
  if (cloud_cover_land_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    cloud_cover_land_ = p;
  }
  return cloud_cover_land_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* Landsat::mutable_cloud_cover_land() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Landsat.cloud_cover_land)
  return _internal_mutable_cloud_cover_land();
}
inline void Landsat::set_allocated_cloud_cover_land(PROTOBUF_NAMESPACE_ID::FloatValue* cloud_cover_land) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land_);
  }
  if (cloud_cover_land) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land)->GetArena();
    if (message_arena != submessage_arena) {
      cloud_cover_land = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_cover_land, submessage_arena);
    }
    
  } else {
    
  }
  cloud_cover_land_ = cloud_cover_land;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Landsat.cloud_cover_land)
}

// .epl.protobuf.v1.Landsat.WRSType wrs_type = 7;
inline void Landsat::clear_wrs_type() {
  wrs_type_ = 0;
}
inline ::epl::protobuf::v1::Landsat_WRSType Landsat::_internal_wrs_type() const {
  return static_cast< ::epl::protobuf::v1::Landsat_WRSType >(wrs_type_);
}
inline ::epl::protobuf::v1::Landsat_WRSType Landsat::wrs_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Landsat.wrs_type)
  return _internal_wrs_type();
}
inline void Landsat::_internal_set_wrs_type(::epl::protobuf::v1::Landsat_WRSType value) {
  
  wrs_type_ = value;
}
inline void Landsat::set_wrs_type(::epl::protobuf::v1::Landsat_WRSType value) {
  _internal_set_wrs_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Landsat.wrs_type)
}

// -------------------------------------------------------------------

// LandsatRequest

// string scene_id = 1;
inline void LandsatRequest::clear_scene_id() {
  scene_id_.ClearToEmpty();
}
inline const std::string& LandsatRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.scene_id)
  return _internal_scene_id();
}
inline void LandsatRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.LandsatRequest.scene_id)
}
inline std::string* LandsatRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.LandsatRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& LandsatRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void LandsatRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LandsatRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.LandsatRequest.scene_id)
}
inline void LandsatRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.LandsatRequest.scene_id)
}
inline void LandsatRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.LandsatRequest.scene_id)
}
inline std::string* LandsatRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LandsatRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.LandsatRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LandsatRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.LandsatRequest.scene_id)
}

// string product_id = 2;
inline void LandsatRequest::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& LandsatRequest::product_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.product_id)
  return _internal_product_id();
}
inline void LandsatRequest::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.LandsatRequest.product_id)
}
inline std::string* LandsatRequest::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.LandsatRequest.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& LandsatRequest::_internal_product_id() const {
  return product_id_.Get();
}
inline void LandsatRequest::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LandsatRequest::set_product_id(std::string&& value) {
  
  product_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.LandsatRequest.product_id)
}
inline void LandsatRequest::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.LandsatRequest.product_id)
}
inline void LandsatRequest::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.LandsatRequest.product_id)
}
inline std::string* LandsatRequest::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LandsatRequest::release_product_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.LandsatRequest.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LandsatRequest::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.LandsatRequest.product_id)
}

// .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
inline void LandsatRequest::clear_processing_level() {
  processing_level_ = 0;
}
inline ::epl::protobuf::v1::Landsat_ProcessingLevel LandsatRequest::_internal_processing_level() const {
  return static_cast< ::epl::protobuf::v1::Landsat_ProcessingLevel >(processing_level_);
}
inline ::epl::protobuf::v1::Landsat_ProcessingLevel LandsatRequest::processing_level() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.processing_level)
  return _internal_processing_level();
}
inline void LandsatRequest::_internal_set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value) {
  
  processing_level_ = value;
}
inline void LandsatRequest::set_processing_level(::epl::protobuf::v1::Landsat_ProcessingLevel value) {
  _internal_set_processing_level(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.LandsatRequest.processing_level)
}

// int32 wrs_path = 4;
inline void LandsatRequest::clear_wrs_path() {
  wrs_path_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandsatRequest::_internal_wrs_path() const {
  return wrs_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandsatRequest::wrs_path() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.wrs_path)
  return _internal_wrs_path();
}
inline void LandsatRequest::_internal_set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrs_path_ = value;
}
inline void LandsatRequest::set_wrs_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrs_path(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.LandsatRequest.wrs_path)
}

// int32 wrs_row = 5;
inline void LandsatRequest::clear_wrs_row() {
  wrs_row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandsatRequest::_internal_wrs_row() const {
  return wrs_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LandsatRequest::wrs_row() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.wrs_row)
  return _internal_wrs_row();
}
inline void LandsatRequest::_internal_set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrs_row_ = value;
}
inline void LandsatRequest::set_wrs_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrs_row(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.LandsatRequest.wrs_row)
}

// .epl.protobuf.v1.FloatFilter cloud_cover_land = 6;
inline bool LandsatRequest::_internal_has_cloud_cover_land() const {
  return this != internal_default_instance() && cloud_cover_land_ != nullptr;
}
inline bool LandsatRequest::has_cloud_cover_land() const {
  return _internal_has_cloud_cover_land();
}
inline const ::epl::protobuf::v1::FloatFilter& LandsatRequest::_internal_cloud_cover_land() const {
  const ::epl::protobuf::v1::FloatFilter* p = cloud_cover_land_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::FloatFilter&>(
      ::epl::protobuf::v1::_FloatFilter_default_instance_);
}
inline const ::epl::protobuf::v1::FloatFilter& LandsatRequest::cloud_cover_land() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.LandsatRequest.cloud_cover_land)
  return _internal_cloud_cover_land();
}
inline void LandsatRequest::unsafe_arena_set_allocated_cloud_cover_land(
    ::epl::protobuf::v1::FloatFilter* cloud_cover_land) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land_);
  }
  cloud_cover_land_ = cloud_cover_land;
  if (cloud_cover_land) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.LandsatRequest.cloud_cover_land)
}
inline ::epl::protobuf::v1::FloatFilter* LandsatRequest::release_cloud_cover_land() {
  
  ::epl::protobuf::v1::FloatFilter* temp = cloud_cover_land_;
  cloud_cover_land_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* LandsatRequest::unsafe_arena_release_cloud_cover_land() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.LandsatRequest.cloud_cover_land)
  
  ::epl::protobuf::v1::FloatFilter* temp = cloud_cover_land_;
  cloud_cover_land_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::FloatFilter* LandsatRequest::_internal_mutable_cloud_cover_land() {
  
  if (cloud_cover_land_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(GetArena());
    cloud_cover_land_ = p;
  }
  return cloud_cover_land_;
}
inline ::epl::protobuf::v1::FloatFilter* LandsatRequest::mutable_cloud_cover_land() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.LandsatRequest.cloud_cover_land)
  return _internal_mutable_cloud_cover_land();
}
inline void LandsatRequest::set_allocated_cloud_cover_land(::epl::protobuf::v1::FloatFilter* cloud_cover_land) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land_);
  }
  if (cloud_cover_land) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_cover_land)->GetArena();
    if (message_arena != submessage_arena) {
      cloud_cover_land = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_cover_land, submessage_arena);
    }
    
  } else {
    
  }
  cloud_cover_land_ = cloud_cover_land;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.LandsatRequest.cloud_cover_land)
}

// -------------------------------------------------------------------

// Mosaic

// string name = 1;
inline void Mosaic::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Mosaic::name() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Mosaic.name)
  return _internal_name();
}
inline void Mosaic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Mosaic.name)
}
inline std::string* Mosaic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Mosaic.name)
  return _internal_mutable_name();
}
inline const std::string& Mosaic::_internal_name() const {
  return name_.Get();
}
inline void Mosaic::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mosaic::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Mosaic.name)
}
inline void Mosaic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Mosaic.name)
}
inline void Mosaic::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Mosaic.name)
}
inline std::string* Mosaic::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mosaic::release_name() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Mosaic.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mosaic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Mosaic.name)
}

// string quad_key = 2;
inline void Mosaic::clear_quad_key() {
  quad_key_.ClearToEmpty();
}
inline const std::string& Mosaic::quad_key() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Mosaic.quad_key)
  return _internal_quad_key();
}
inline void Mosaic::set_quad_key(const std::string& value) {
  _internal_set_quad_key(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Mosaic.quad_key)
}
inline std::string* Mosaic::mutable_quad_key() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Mosaic.quad_key)
  return _internal_mutable_quad_key();
}
inline const std::string& Mosaic::_internal_quad_key() const {
  return quad_key_.Get();
}
inline void Mosaic::_internal_set_quad_key(const std::string& value) {
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mosaic::set_quad_key(std::string&& value) {
  
  quad_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Mosaic.quad_key)
}
inline void Mosaic::set_quad_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Mosaic.quad_key)
}
inline void Mosaic::set_quad_key(const char* value,
    size_t size) {
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Mosaic.quad_key)
}
inline std::string* Mosaic::_internal_mutable_quad_key() {
  
  return quad_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mosaic::release_quad_key() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Mosaic.quad_key)
  return quad_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mosaic::set_allocated_quad_key(std::string* quad_key) {
  if (quad_key != nullptr) {
    
  } else {
    
  }
  quad_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quad_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Mosaic.quad_key)
}

// repeated int32 zooms = 3;
inline int Mosaic::_internal_zooms_size() const {
  return zooms_.size();
}
inline int Mosaic::zooms_size() const {
  return _internal_zooms_size();
}
inline void Mosaic::clear_zooms() {
  zooms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mosaic::_internal_zooms(int index) const {
  return zooms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mosaic::zooms(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Mosaic.zooms)
  return _internal_zooms(index);
}
inline void Mosaic::set_zooms(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  zooms_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Mosaic.zooms)
}
inline void Mosaic::_internal_add_zooms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  zooms_.Add(value);
}
inline void Mosaic::add_zooms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_zooms(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Mosaic.zooms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mosaic::_internal_zooms() const {
  return zooms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mosaic::zooms() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Mosaic.zooms)
  return _internal_zooms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mosaic::_internal_mutable_zooms() {
  return &zooms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mosaic::mutable_zooms() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Mosaic.zooms)
  return _internal_mutable_zooms();
}

// .epl.protobuf.v1.DatetimeRange observation_range = 4;
inline bool Mosaic::_internal_has_observation_range() const {
  return this != internal_default_instance() && observation_range_ != nullptr;
}
inline bool Mosaic::has_observation_range() const {
  return _internal_has_observation_range();
}
inline void Mosaic::clear_observation_range() {
  if (GetArena() == nullptr && observation_range_ != nullptr) {
    delete observation_range_;
  }
  observation_range_ = nullptr;
}
inline const ::epl::protobuf::v1::DatetimeRange& Mosaic::_internal_observation_range() const {
  const ::epl::protobuf::v1::DatetimeRange* p = observation_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::DatetimeRange&>(
      ::epl::protobuf::v1::_DatetimeRange_default_instance_);
}
inline const ::epl::protobuf::v1::DatetimeRange& Mosaic::observation_range() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Mosaic.observation_range)
  return _internal_observation_range();
}
inline void Mosaic::unsafe_arena_set_allocated_observation_range(
    ::epl::protobuf::v1::DatetimeRange* observation_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_range_);
  }
  observation_range_ = observation_range;
  if (observation_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Mosaic.observation_range)
}
inline ::epl::protobuf::v1::DatetimeRange* Mosaic::release_observation_range() {
  
  ::epl::protobuf::v1::DatetimeRange* temp = observation_range_;
  observation_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::DatetimeRange* Mosaic::unsafe_arena_release_observation_range() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Mosaic.observation_range)
  
  ::epl::protobuf::v1::DatetimeRange* temp = observation_range_;
  observation_range_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::DatetimeRange* Mosaic::_internal_mutable_observation_range() {
  
  if (observation_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::DatetimeRange>(GetArena());
    observation_range_ = p;
  }
  return observation_range_;
}
inline ::epl::protobuf::v1::DatetimeRange* Mosaic::mutable_observation_range() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Mosaic.observation_range)
  return _internal_mutable_observation_range();
}
inline void Mosaic::set_allocated_observation_range(::epl::protobuf::v1::DatetimeRange* observation_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete observation_range_;
  }
  if (observation_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(observation_range);
    if (message_arena != submessage_arena) {
      observation_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_range, submessage_arena);
    }
    
  } else {
    
  }
  observation_range_ = observation_range;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Mosaic.observation_range)
}

// repeated string provenance_ids = 5;
inline int Mosaic::_internal_provenance_ids_size() const {
  return provenance_ids_.size();
}
inline int Mosaic::provenance_ids_size() const {
  return _internal_provenance_ids_size();
}
inline void Mosaic::clear_provenance_ids() {
  provenance_ids_.Clear();
}
inline std::string* Mosaic::add_provenance_ids() {
  // @@protoc_insertion_point(field_add_mutable:epl.protobuf.v1.Mosaic.provenance_ids)
  return _internal_add_provenance_ids();
}
inline const std::string& Mosaic::_internal_provenance_ids(int index) const {
  return provenance_ids_.Get(index);
}
inline const std::string& Mosaic::provenance_ids(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Mosaic.provenance_ids)
  return _internal_provenance_ids(index);
}
inline std::string* Mosaic::mutable_provenance_ids(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Mosaic.provenance_ids)
  return provenance_ids_.Mutable(index);
}
inline void Mosaic::set_provenance_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Mosaic.provenance_ids)
  provenance_ids_.Mutable(index)->assign(value);
}
inline void Mosaic::set_provenance_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Mosaic.provenance_ids)
  provenance_ids_.Mutable(index)->assign(std::move(value));
}
inline void Mosaic::set_provenance_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  provenance_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline void Mosaic::set_provenance_ids(int index, const char* value, size_t size) {
  provenance_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline std::string* Mosaic::_internal_add_provenance_ids() {
  return provenance_ids_.Add();
}
inline void Mosaic::add_provenance_ids(const std::string& value) {
  provenance_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline void Mosaic::add_provenance_ids(std::string&& value) {
  provenance_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline void Mosaic::add_provenance_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  provenance_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline void Mosaic::add_provenance_ids(const char* value, size_t size) {
  provenance_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:epl.protobuf.v1.Mosaic.provenance_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mosaic::provenance_ids() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.Mosaic.provenance_ids)
  return provenance_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mosaic::mutable_provenance_ids() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.Mosaic.provenance_ids)
  return &provenance_ids_;
}

// -------------------------------------------------------------------

// MosaicRequest

// string name = 1;
inline void MosaicRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MosaicRequest::name() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.MosaicRequest.name)
  return _internal_name();
}
inline void MosaicRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.MosaicRequest.name)
}
inline std::string* MosaicRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.MosaicRequest.name)
  return _internal_mutable_name();
}
inline const std::string& MosaicRequest::_internal_name() const {
  return name_.Get();
}
inline void MosaicRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MosaicRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.MosaicRequest.name)
}
inline void MosaicRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.MosaicRequest.name)
}
inline void MosaicRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.MosaicRequest.name)
}
inline std::string* MosaicRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MosaicRequest::release_name() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.MosaicRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MosaicRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.MosaicRequest.name)
}

// string quad_key = 2;
inline void MosaicRequest::clear_quad_key() {
  quad_key_.ClearToEmpty();
}
inline const std::string& MosaicRequest::quad_key() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.MosaicRequest.quad_key)
  return _internal_quad_key();
}
inline void MosaicRequest::set_quad_key(const std::string& value) {
  _internal_set_quad_key(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.MosaicRequest.quad_key)
}
inline std::string* MosaicRequest::mutable_quad_key() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.MosaicRequest.quad_key)
  return _internal_mutable_quad_key();
}
inline const std::string& MosaicRequest::_internal_quad_key() const {
  return quad_key_.Get();
}
inline void MosaicRequest::_internal_set_quad_key(const std::string& value) {
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MosaicRequest::set_quad_key(std::string&& value) {
  
  quad_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.MosaicRequest.quad_key)
}
inline void MosaicRequest::set_quad_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.MosaicRequest.quad_key)
}
inline void MosaicRequest::set_quad_key(const char* value,
    size_t size) {
  
  quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.MosaicRequest.quad_key)
}
inline std::string* MosaicRequest::_internal_mutable_quad_key() {
  
  return quad_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MosaicRequest::release_quad_key() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.MosaicRequest.quad_key)
  return quad_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MosaicRequest::set_allocated_quad_key(std::string* quad_key) {
  if (quad_key != nullptr) {
    
  } else {
    
  }
  quad_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quad_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.MosaicRequest.quad_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace epl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::epl::protobuf::v1::Sat_OrbitState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Sat_OrbitState>() {
  return ::epl::protobuf::v1::Sat_OrbitState_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Eo_Band> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Eo_Band>() {
  return ::epl::protobuf::v1::Eo_Band_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Sar_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Sar_Platform>() {
  return ::epl::protobuf::v1::Sar_Platform_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Sar_Instrument> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Sar_Instrument>() {
  return ::epl::protobuf::v1::Sar_Instrument_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Landsat_CollectionCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Landsat_CollectionCategory>() {
  return ::epl::protobuf::v1::Landsat_CollectionCategory_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Landsat_WRSType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Landsat_WRSType>() {
  return ::epl::protobuf::v1::Landsat_WRSType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Landsat_ProcessingLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Landsat_ProcessingLevel>() {
  return ::epl::protobuf::v1::Landsat_ProcessingLevel_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::AssetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::AssetType>() {
  return ::epl::protobuf::v1::AssetType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::CloudPlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::CloudPlatform>() {
  return ::epl::protobuf::v1::CloudPlatform_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Platform>() {
  return ::epl::protobuf::v1::Platform_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Instrument> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Instrument>() {
  return ::epl::protobuf::v1::Instrument_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Constellation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Constellation>() {
  return ::epl::protobuf::v1::Constellation_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Mission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Mission>() {
  return ::epl::protobuf::v1::Mission_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fstac_2eproto
