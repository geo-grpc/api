// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fv1_2fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(int index);
namespace epl {
namespace protobuf {
namespace v1 {
class DoubleFilter;
struct DoubleFilterDefaultTypeInternal;
extern DoubleFilterDefaultTypeInternal _DoubleFilter_default_instance_;
class FloatFilter;
struct FloatFilterDefaultTypeInternal;
extern FloatFilterDefaultTypeInternal _FloatFilter_default_instance_;
class StringFilter;
struct StringFilterDefaultTypeInternal;
extern StringFilterDefaultTypeInternal _StringFilter_default_instance_;
class TimestampFilter;
struct TimestampFilterDefaultTypeInternal;
extern TimestampFilterDefaultTypeInternal _TimestampFilter_default_instance_;
class UInt32Filter;
struct UInt32FilterDefaultTypeInternal;
extern UInt32FilterDefaultTypeInternal _UInt32Filter_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> ::epl::protobuf::v1::DoubleFilter* Arena::CreateMaybeMessage<::epl::protobuf::v1::DoubleFilter>(Arena*);
template<> ::epl::protobuf::v1::FloatFilter* Arena::CreateMaybeMessage<::epl::protobuf::v1::FloatFilter>(Arena*);
template<> ::epl::protobuf::v1::StringFilter* Arena::CreateMaybeMessage<::epl::protobuf::v1::StringFilter>(Arena*);
template<> ::epl::protobuf::v1::TimestampFilter* Arena::CreateMaybeMessage<::epl::protobuf::v1::TimestampFilter>(Arena*);
template<> ::epl::protobuf::v1::UInt32Filter* Arena::CreateMaybeMessage<::epl::protobuf::v1::UInt32Filter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epl {
namespace protobuf {
namespace v1 {

enum SortDirection : int {
  NOT_SORTED = 0,
  DESC = 1,
  ASC = 2,
  SortDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SortDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SortDirection_IsValid(int value);
constexpr SortDirection SortDirection_MIN = NOT_SORTED;
constexpr SortDirection SortDirection_MAX = ASC;
constexpr int SortDirection_ARRAYSIZE = SortDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDirection_descriptor();
template<typename T>
inline const std::string& SortDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SortDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SortDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SortDirection_descriptor(), enum_t_value);
}
inline bool SortDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SortDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortDirection>(
    SortDirection_descriptor(), name, value);
}
enum FilterRelationship : int {
  EQ = 0,
  LTE = 2,
  GTE = 4,
  LT = 8,
  GT = 16,
  BETWEEN = 32,
  NOT_BETWEEN = 64,
  NEQ = 128,
  IN = 256,
  NOT_IN = 512,
  LIKE = 1024,
  NOT_LIKE = 2048,
  FilterRelationship_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FilterRelationship_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FilterRelationship_IsValid(int value);
constexpr FilterRelationship FilterRelationship_MIN = EQ;
constexpr FilterRelationship FilterRelationship_MAX = NOT_LIKE;
constexpr int FilterRelationship_ARRAYSIZE = FilterRelationship_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterRelationship_descriptor();
template<typename T>
inline const std::string& FilterRelationship_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterRelationship>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterRelationship_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilterRelationship_descriptor(), enum_t_value);
}
inline bool FilterRelationship_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterRelationship* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilterRelationship>(
    FilterRelationship_descriptor(), name, value);
}
// ===================================================================

class FloatFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.FloatFilter) */ {
 public:
  inline FloatFilter() : FloatFilter(nullptr) {}
  virtual ~FloatFilter();
  explicit constexpr FloatFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatFilter(const FloatFilter& from);
  FloatFilter(FloatFilter&& from) noexcept
    : FloatFilter() {
    *this = ::std::move(from);
  }

  inline FloatFilter& operator=(const FloatFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatFilter& operator=(FloatFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatFilter& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kValue = 1,
    kStart = 3,
    DATA_NOT_SET = 0,
  };

  static inline const FloatFilter* internal_default_instance() {
    return reinterpret_cast<const FloatFilter*>(
               &_FloatFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FloatFilter& a, FloatFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatFilter* New() const final {
    return CreateMaybeMessage<FloatFilter>(nullptr);
  }

  FloatFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatFilter& from);
  void MergeFrom(const FloatFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.FloatFilter";
  }
  protected:
  explicit FloatFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetFieldNumber = 6,
    kRelTypeFieldNumber = 2,
    kEndFieldNumber = 4,
    kSortDirectionFieldNumber = 5,
    kValueFieldNumber = 1,
    kStartFieldNumber = 3,
  };
  // repeated float set = 6;
  int set_size() const;
  private:
  int _internal_set_size() const;
  public:
  void clear_set();
  private:
  float _internal_set(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_set() const;
  void _internal_add_set(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_set();
  public:
  float set(int index) const;
  void set_set(int index, float value);
  void add_set(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_set();

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  void clear_rel_type();
  ::epl::protobuf::v1::FilterRelationship rel_type() const;
  void set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  private:
  ::epl::protobuf::v1::FilterRelationship _internal_rel_type() const;
  void _internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  public:

  // float end = 4;
  void clear_end();
  float end() const;
  void set_end(float value);
  private:
  float _internal_end() const;
  void _internal_set_end(float value);
  public:

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  void clear_sort_direction();
  ::epl::protobuf::v1::SortDirection sort_direction() const;
  void set_sort_direction(::epl::protobuf::v1::SortDirection value);
  private:
  ::epl::protobuf::v1::SortDirection _internal_sort_direction() const;
  void _internal_set_sort_direction(::epl::protobuf::v1::SortDirection value);
  public:

  // float value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // float start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.FloatFilter)
 private:
  class _Internal;
  void set_has_value();
  void set_has_start();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > set_;
  mutable std::atomic<int> _set_cached_byte_size_;
  int rel_type_;
  float end_;
  int sort_direction_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float value_;
    float start_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class DoubleFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.DoubleFilter) */ {
 public:
  inline DoubleFilter() : DoubleFilter(nullptr) {}
  virtual ~DoubleFilter();
  explicit constexpr DoubleFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleFilter(const DoubleFilter& from);
  DoubleFilter(DoubleFilter&& from) noexcept
    : DoubleFilter() {
    *this = ::std::move(from);
  }

  inline DoubleFilter& operator=(const DoubleFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleFilter& operator=(DoubleFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleFilter& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kValue = 1,
    kStart = 3,
    DATA_NOT_SET = 0,
  };

  static inline const DoubleFilter* internal_default_instance() {
    return reinterpret_cast<const DoubleFilter*>(
               &_DoubleFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoubleFilter& a, DoubleFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleFilter* New() const final {
    return CreateMaybeMessage<DoubleFilter>(nullptr);
  }

  DoubleFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleFilter& from);
  void MergeFrom(const DoubleFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.DoubleFilter";
  }
  protected:
  explicit DoubleFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetFieldNumber = 6,
    kRelTypeFieldNumber = 2,
    kSortDirectionFieldNumber = 5,
    kEndFieldNumber = 4,
    kValueFieldNumber = 1,
    kStartFieldNumber = 3,
  };
  // repeated double set = 6;
  int set_size() const;
  private:
  int _internal_set_size() const;
  public:
  void clear_set();
  private:
  double _internal_set(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_set() const;
  void _internal_add_set(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_set();
  public:
  double set(int index) const;
  void set_set(int index, double value);
  void add_set(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_set();

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  void clear_rel_type();
  ::epl::protobuf::v1::FilterRelationship rel_type() const;
  void set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  private:
  ::epl::protobuf::v1::FilterRelationship _internal_rel_type() const;
  void _internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  public:

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  void clear_sort_direction();
  ::epl::protobuf::v1::SortDirection sort_direction() const;
  void set_sort_direction(::epl::protobuf::v1::SortDirection value);
  private:
  ::epl::protobuf::v1::SortDirection _internal_sort_direction() const;
  void _internal_set_sort_direction(::epl::protobuf::v1::SortDirection value);
  public:

  // double end = 4;
  void clear_end();
  double end() const;
  void set_end(double value);
  private:
  double _internal_end() const;
  void _internal_set_end(double value);
  public:

  // double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // double start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  double start() const;
  void set_start(double value);
  private:
  double _internal_start() const;
  void _internal_set_start(double value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.DoubleFilter)
 private:
  class _Internal;
  void set_has_value();
  void set_has_start();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > set_;
  mutable std::atomic<int> _set_cached_byte_size_;
  int rel_type_;
  int sort_direction_;
  double end_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double value_;
    double start_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class TimestampFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.TimestampFilter) */ {
 public:
  inline TimestampFilter() : TimestampFilter(nullptr) {}
  virtual ~TimestampFilter();
  explicit constexpr TimestampFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimestampFilter(const TimestampFilter& from);
  TimestampFilter(TimestampFilter&& from) noexcept
    : TimestampFilter() {
    *this = ::std::move(from);
  }

  inline TimestampFilter& operator=(const TimestampFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampFilter& operator=(TimestampFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampFilter& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kValue = 1,
    kStart = 3,
    DATA_NOT_SET = 0,
  };

  static inline const TimestampFilter* internal_default_instance() {
    return reinterpret_cast<const TimestampFilter*>(
               &_TimestampFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimestampFilter& a, TimestampFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampFilter* New() const final {
    return CreateMaybeMessage<TimestampFilter>(nullptr);
  }

  TimestampFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampFilter& from);
  void MergeFrom(const TimestampFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.TimestampFilter";
  }
  protected:
  explicit TimestampFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 4,
    kRelTypeFieldNumber = 2,
    kSortDirectionFieldNumber = 5,
    kValueFieldNumber = 1,
    kStartFieldNumber = 3,
  };
  // .google.protobuf.Timestamp end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      PROTOBUF_NAMESPACE_ID::Timestamp* end);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  void clear_rel_type();
  ::epl::protobuf::v1::FilterRelationship rel_type() const;
  void set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  private:
  ::epl::protobuf::v1::FilterRelationship _internal_rel_type() const;
  void _internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  public:

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  void clear_sort_direction();
  ::epl::protobuf::v1::SortDirection sort_direction() const;
  void set_sort_direction(::epl::protobuf::v1::SortDirection value);
  private:
  ::epl::protobuf::v1::SortDirection _internal_sort_direction() const;
  void _internal_set_sort_direction(::epl::protobuf::v1::SortDirection value);
  public:

  // .google.protobuf.Timestamp value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Timestamp& value() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_value();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Timestamp* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Timestamp* value);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_value();

  // .google.protobuf.Timestamp start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.TimestampFilter)
 private:
  class _Internal;
  void set_has_value();
  void set_has_start();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  int rel_type_;
  int sort_direction_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Timestamp* value_;
    PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class UInt32Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.UInt32Filter) */ {
 public:
  inline UInt32Filter() : UInt32Filter(nullptr) {}
  virtual ~UInt32Filter();
  explicit constexpr UInt32Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInt32Filter(const UInt32Filter& from);
  UInt32Filter(UInt32Filter&& from) noexcept
    : UInt32Filter() {
    *this = ::std::move(from);
  }

  inline UInt32Filter& operator=(const UInt32Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Filter& operator=(UInt32Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UInt32Filter& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kValue = 1,
    kStart = 3,
    DATA_NOT_SET = 0,
  };

  static inline const UInt32Filter* internal_default_instance() {
    return reinterpret_cast<const UInt32Filter*>(
               &_UInt32Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UInt32Filter& a, UInt32Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt32Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt32Filter* New() const final {
    return CreateMaybeMessage<UInt32Filter>(nullptr);
  }

  UInt32Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt32Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UInt32Filter& from);
  void MergeFrom(const UInt32Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt32Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.UInt32Filter";
  }
  protected:
  explicit UInt32Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetFieldNumber = 6,
    kRelTypeFieldNumber = 2,
    kEndFieldNumber = 4,
    kSortDirectionFieldNumber = 5,
    kValueFieldNumber = 1,
    kStartFieldNumber = 3,
  };
  // repeated uint32 set = 6;
  int set_size() const;
  private:
  int _internal_set_size() const;
  public:
  void clear_set();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_set(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_set() const;
  void _internal_add_set(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_set();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 set(int index) const;
  void set_set(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_set(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_set();

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  void clear_rel_type();
  ::epl::protobuf::v1::FilterRelationship rel_type() const;
  void set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  private:
  ::epl::protobuf::v1::FilterRelationship _internal_rel_type() const;
  void _internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  public:

  // uint32 end = 4;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .epl.protobuf.v1.SortDirection sort_direction = 5;
  void clear_sort_direction();
  ::epl::protobuf::v1::SortDirection sort_direction() const;
  void set_sort_direction(::epl::protobuf::v1::SortDirection value);
  private:
  ::epl::protobuf::v1::SortDirection _internal_sort_direction() const;
  void _internal_set_sort_direction(::epl::protobuf::v1::SortDirection value);
  public:

  // uint32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.UInt32Filter)
 private:
  class _Internal;
  void set_has_value();
  void set_has_start();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > set_;
  mutable std::atomic<int> _set_cached_byte_size_;
  int rel_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  int sort_direction_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class StringFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.StringFilter) */ {
 public:
  inline StringFilter() : StringFilter(nullptr) {}
  virtual ~StringFilter();
  explicit constexpr StringFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringFilter(const StringFilter& from);
  StringFilter(StringFilter&& from) noexcept
    : StringFilter() {
    *this = ::std::move(from);
  }

  inline StringFilter& operator=(const StringFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringFilter& operator=(StringFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringFilter* internal_default_instance() {
    return reinterpret_cast<const StringFilter*>(
               &_StringFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringFilter& a, StringFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(StringFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringFilter* New() const final {
    return CreateMaybeMessage<StringFilter>(nullptr);
  }

  StringFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringFilter& from);
  void MergeFrom(const StringFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.StringFilter";
  }
  protected:
  explicit StringFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetFieldNumber = 6,
    kValueFieldNumber = 1,
    kRelTypeFieldNumber = 2,
  };
  // repeated string set = 6;
  int set_size() const;
  private:
  int _internal_set_size() const;
  public:
  void clear_set();
  const std::string& set(int index) const;
  std::string* mutable_set(int index);
  void set_set(int index, const std::string& value);
  void set_set(int index, std::string&& value);
  void set_set(int index, const char* value);
  void set_set(int index, const char* value, size_t size);
  std::string* add_set();
  void add_set(const std::string& value);
  void add_set(std::string&& value);
  void add_set(const char* value);
  void add_set(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_set();
  private:
  const std::string& _internal_set(int index) const;
  std::string* _internal_add_set();
  public:

  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .epl.protobuf.v1.FilterRelationship rel_type = 2;
  void clear_rel_type();
  ::epl::protobuf::v1::FilterRelationship rel_type() const;
  void set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  private:
  ::epl::protobuf::v1::FilterRelationship _internal_rel_type() const;
  void _internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.StringFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> set_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int rel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatFilter

// .epl.protobuf.v1.FilterRelationship rel_type = 2;
inline void FloatFilter::clear_rel_type() {
  rel_type_ = 0;
}
inline ::epl::protobuf::v1::FilterRelationship FloatFilter::_internal_rel_type() const {
  return static_cast< ::epl::protobuf::v1::FilterRelationship >(rel_type_);
}
inline ::epl::protobuf::v1::FilterRelationship FloatFilter::rel_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.rel_type)
  return _internal_rel_type();
}
inline void FloatFilter::_internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  
  rel_type_ = value;
}
inline void FloatFilter::set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  _internal_set_rel_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.rel_type)
}

// float value = 1;
inline bool FloatFilter::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool FloatFilter::has_value() const {
  return _internal_has_value();
}
inline void FloatFilter::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void FloatFilter::clear_value() {
  if (_internal_has_value()) {
    data_.value_ = 0;
    clear_has_data();
  }
}
inline float FloatFilter::_internal_value() const {
  if (_internal_has_value()) {
    return data_.value_;
  }
  return 0;
}
inline void FloatFilter::_internal_set_value(float value) {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
  }
  data_.value_ = value;
}
inline float FloatFilter::value() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.value)
  return _internal_value();
}
inline void FloatFilter::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.value)
}

// float start = 3;
inline bool FloatFilter::_internal_has_start() const {
  return data_case() == kStart;
}
inline bool FloatFilter::has_start() const {
  return _internal_has_start();
}
inline void FloatFilter::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void FloatFilter::clear_start() {
  if (_internal_has_start()) {
    data_.start_ = 0;
    clear_has_data();
  }
}
inline float FloatFilter::_internal_start() const {
  if (_internal_has_start()) {
    return data_.start_;
  }
  return 0;
}
inline void FloatFilter::_internal_set_start(float value) {
  if (!_internal_has_start()) {
    clear_data();
    set_has_start();
  }
  data_.start_ = value;
}
inline float FloatFilter::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.start)
  return _internal_start();
}
inline void FloatFilter::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.start)
}

// float end = 4;
inline void FloatFilter::clear_end() {
  end_ = 0;
}
inline float FloatFilter::_internal_end() const {
  return end_;
}
inline float FloatFilter::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.end)
  return _internal_end();
}
inline void FloatFilter::_internal_set_end(float value) {
  
  end_ = value;
}
inline void FloatFilter::set_end(float value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.end)
}

// .epl.protobuf.v1.SortDirection sort_direction = 5;
inline void FloatFilter::clear_sort_direction() {
  sort_direction_ = 0;
}
inline ::epl::protobuf::v1::SortDirection FloatFilter::_internal_sort_direction() const {
  return static_cast< ::epl::protobuf::v1::SortDirection >(sort_direction_);
}
inline ::epl::protobuf::v1::SortDirection FloatFilter::sort_direction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.sort_direction)
  return _internal_sort_direction();
}
inline void FloatFilter::_internal_set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  
  sort_direction_ = value;
}
inline void FloatFilter::set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  _internal_set_sort_direction(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.sort_direction)
}

// repeated float set = 6;
inline int FloatFilter::_internal_set_size() const {
  return set_.size();
}
inline int FloatFilter::set_size() const {
  return _internal_set_size();
}
inline void FloatFilter::clear_set() {
  set_.Clear();
}
inline float FloatFilter::_internal_set(int index) const {
  return set_.Get(index);
}
inline float FloatFilter::set(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FloatFilter.set)
  return _internal_set(index);
}
inline void FloatFilter::set_set(int index, float value) {
  set_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FloatFilter.set)
}
inline void FloatFilter::_internal_add_set(float value) {
  set_.Add(value);
}
inline void FloatFilter::add_set(float value) {
  _internal_add_set(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.FloatFilter.set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatFilter::_internal_set() const {
  return set_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatFilter::set() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.FloatFilter.set)
  return _internal_set();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatFilter::_internal_mutable_set() {
  return &set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatFilter::mutable_set() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.FloatFilter.set)
  return _internal_mutable_set();
}

inline bool FloatFilter::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void FloatFilter::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline FloatFilter::DataCase FloatFilter::data_case() const {
  return FloatFilter::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DoubleFilter

// .epl.protobuf.v1.FilterRelationship rel_type = 2;
inline void DoubleFilter::clear_rel_type() {
  rel_type_ = 0;
}
inline ::epl::protobuf::v1::FilterRelationship DoubleFilter::_internal_rel_type() const {
  return static_cast< ::epl::protobuf::v1::FilterRelationship >(rel_type_);
}
inline ::epl::protobuf::v1::FilterRelationship DoubleFilter::rel_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.rel_type)
  return _internal_rel_type();
}
inline void DoubleFilter::_internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  
  rel_type_ = value;
}
inline void DoubleFilter::set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  _internal_set_rel_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.rel_type)
}

// double value = 1;
inline bool DoubleFilter::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool DoubleFilter::has_value() const {
  return _internal_has_value();
}
inline void DoubleFilter::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void DoubleFilter::clear_value() {
  if (_internal_has_value()) {
    data_.value_ = 0;
    clear_has_data();
  }
}
inline double DoubleFilter::_internal_value() const {
  if (_internal_has_value()) {
    return data_.value_;
  }
  return 0;
}
inline void DoubleFilter::_internal_set_value(double value) {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
  }
  data_.value_ = value;
}
inline double DoubleFilter::value() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.value)
  return _internal_value();
}
inline void DoubleFilter::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.value)
}

// double start = 3;
inline bool DoubleFilter::_internal_has_start() const {
  return data_case() == kStart;
}
inline bool DoubleFilter::has_start() const {
  return _internal_has_start();
}
inline void DoubleFilter::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void DoubleFilter::clear_start() {
  if (_internal_has_start()) {
    data_.start_ = 0;
    clear_has_data();
  }
}
inline double DoubleFilter::_internal_start() const {
  if (_internal_has_start()) {
    return data_.start_;
  }
  return 0;
}
inline void DoubleFilter::_internal_set_start(double value) {
  if (!_internal_has_start()) {
    clear_data();
    set_has_start();
  }
  data_.start_ = value;
}
inline double DoubleFilter::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.start)
  return _internal_start();
}
inline void DoubleFilter::set_start(double value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.start)
}

// double end = 4;
inline void DoubleFilter::clear_end() {
  end_ = 0;
}
inline double DoubleFilter::_internal_end() const {
  return end_;
}
inline double DoubleFilter::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.end)
  return _internal_end();
}
inline void DoubleFilter::_internal_set_end(double value) {
  
  end_ = value;
}
inline void DoubleFilter::set_end(double value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.end)
}

// .epl.protobuf.v1.SortDirection sort_direction = 5;
inline void DoubleFilter::clear_sort_direction() {
  sort_direction_ = 0;
}
inline ::epl::protobuf::v1::SortDirection DoubleFilter::_internal_sort_direction() const {
  return static_cast< ::epl::protobuf::v1::SortDirection >(sort_direction_);
}
inline ::epl::protobuf::v1::SortDirection DoubleFilter::sort_direction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.sort_direction)
  return _internal_sort_direction();
}
inline void DoubleFilter::_internal_set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  
  sort_direction_ = value;
}
inline void DoubleFilter::set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  _internal_set_sort_direction(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.sort_direction)
}

// repeated double set = 6;
inline int DoubleFilter::_internal_set_size() const {
  return set_.size();
}
inline int DoubleFilter::set_size() const {
  return _internal_set_size();
}
inline void DoubleFilter::clear_set() {
  set_.Clear();
}
inline double DoubleFilter::_internal_set(int index) const {
  return set_.Get(index);
}
inline double DoubleFilter::set(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.DoubleFilter.set)
  return _internal_set(index);
}
inline void DoubleFilter::set_set(int index, double value) {
  set_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.DoubleFilter.set)
}
inline void DoubleFilter::_internal_add_set(double value) {
  set_.Add(value);
}
inline void DoubleFilter::add_set(double value) {
  _internal_add_set(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.DoubleFilter.set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleFilter::_internal_set() const {
  return set_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleFilter::set() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.DoubleFilter.set)
  return _internal_set();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleFilter::_internal_mutable_set() {
  return &set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleFilter::mutable_set() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.DoubleFilter.set)
  return _internal_mutable_set();
}

inline bool DoubleFilter::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void DoubleFilter::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline DoubleFilter::DataCase DoubleFilter::data_case() const {
  return DoubleFilter::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimestampFilter

// .epl.protobuf.v1.FilterRelationship rel_type = 2;
inline void TimestampFilter::clear_rel_type() {
  rel_type_ = 0;
}
inline ::epl::protobuf::v1::FilterRelationship TimestampFilter::_internal_rel_type() const {
  return static_cast< ::epl::protobuf::v1::FilterRelationship >(rel_type_);
}
inline ::epl::protobuf::v1::FilterRelationship TimestampFilter::rel_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.TimestampFilter.rel_type)
  return _internal_rel_type();
}
inline void TimestampFilter::_internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  
  rel_type_ = value;
}
inline void TimestampFilter::set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  _internal_set_rel_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.TimestampFilter.rel_type)
}

// .google.protobuf.Timestamp value = 1;
inline bool TimestampFilter::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool TimestampFilter::has_value() const {
  return _internal_has_value();
}
inline void TimestampFilter::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::release_value() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.TimestampFilter.value)
  if (_internal_has_value()) {
    clear_has_data();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_.value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::_internal_value() const {
  return _internal_has_value()
      ? *data_.value_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::value() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.TimestampFilter.value)
  return _internal_value();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.TimestampFilter.value)
  if (_internal_has_value()) {
    clear_has_data();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_.value_;
    data_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampFilter::unsafe_arena_set_allocated_value(PROTOBUF_NAMESPACE_ID::Timestamp* value) {
  clear_data();
  if (value) {
    set_has_value();
    data_.value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.TimestampFilter.value)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
    data_.value_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return data_.value_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.TimestampFilter.value)
  return _internal_mutable_value();
}

// .google.protobuf.Timestamp start = 3;
inline bool TimestampFilter::_internal_has_start() const {
  return data_case() == kStart;
}
inline bool TimestampFilter::has_start() const {
  return _internal_has_start();
}
inline void TimestampFilter::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::release_start() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.TimestampFilter.start)
  if (_internal_has_start()) {
    clear_has_data();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::_internal_start() const {
  return _internal_has_start()
      ? *data_.start_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp&>(PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.TimestampFilter.start)
  return _internal_start();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.TimestampFilter.start)
  if (_internal_has_start()) {
    clear_has_data();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_.start_;
    data_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampFilter::unsafe_arena_set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  clear_data();
  if (start) {
    set_has_start();
    data_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.TimestampFilter.start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_data();
    set_has_start();
    data_.start_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return data_.start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::mutable_start() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.TimestampFilter.start)
  return _internal_mutable_start();
}

// .google.protobuf.Timestamp end = 4;
inline bool TimestampFilter::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool TimestampFilter::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampFilter::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.TimestampFilter.end)
  return _internal_end();
}
inline void TimestampFilter::unsafe_arena_set_allocated_end(
    PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.TimestampFilter.end)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::release_end() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.TimestampFilter.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampFilter::mutable_end() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.TimestampFilter.end)
  return _internal_mutable_end();
}
inline void TimestampFilter::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.TimestampFilter.end)
}

// .epl.protobuf.v1.SortDirection sort_direction = 5;
inline void TimestampFilter::clear_sort_direction() {
  sort_direction_ = 0;
}
inline ::epl::protobuf::v1::SortDirection TimestampFilter::_internal_sort_direction() const {
  return static_cast< ::epl::protobuf::v1::SortDirection >(sort_direction_);
}
inline ::epl::protobuf::v1::SortDirection TimestampFilter::sort_direction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.TimestampFilter.sort_direction)
  return _internal_sort_direction();
}
inline void TimestampFilter::_internal_set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  
  sort_direction_ = value;
}
inline void TimestampFilter::set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  _internal_set_sort_direction(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.TimestampFilter.sort_direction)
}

inline bool TimestampFilter::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TimestampFilter::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline TimestampFilter::DataCase TimestampFilter::data_case() const {
  return TimestampFilter::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UInt32Filter

// .epl.protobuf.v1.FilterRelationship rel_type = 2;
inline void UInt32Filter::clear_rel_type() {
  rel_type_ = 0;
}
inline ::epl::protobuf::v1::FilterRelationship UInt32Filter::_internal_rel_type() const {
  return static_cast< ::epl::protobuf::v1::FilterRelationship >(rel_type_);
}
inline ::epl::protobuf::v1::FilterRelationship UInt32Filter::rel_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.rel_type)
  return _internal_rel_type();
}
inline void UInt32Filter::_internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  
  rel_type_ = value;
}
inline void UInt32Filter::set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  _internal_set_rel_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.rel_type)
}

// uint32 value = 1;
inline bool UInt32Filter::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool UInt32Filter::has_value() const {
  return _internal_has_value();
}
inline void UInt32Filter::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void UInt32Filter::clear_value() {
  if (_internal_has_value()) {
    data_.value_ = 0u;
    clear_has_data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::_internal_value() const {
  if (_internal_has_value()) {
    return data_.value_;
  }
  return 0u;
}
inline void UInt32Filter::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
  }
  data_.value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::value() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.value)
  return _internal_value();
}
inline void UInt32Filter::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.value)
}

// uint32 start = 3;
inline bool UInt32Filter::_internal_has_start() const {
  return data_case() == kStart;
}
inline bool UInt32Filter::has_start() const {
  return _internal_has_start();
}
inline void UInt32Filter::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void UInt32Filter::clear_start() {
  if (_internal_has_start()) {
    data_.start_ = 0u;
    clear_has_data();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::_internal_start() const {
  if (_internal_has_start()) {
    return data_.start_;
  }
  return 0u;
}
inline void UInt32Filter::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_start()) {
    clear_data();
    set_has_start();
  }
  data_.start_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::start() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.start)
  return _internal_start();
}
inline void UInt32Filter::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.start)
}

// uint32 end = 4;
inline void UInt32Filter::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::end() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.end)
  return _internal_end();
}
inline void UInt32Filter::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void UInt32Filter::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.end)
}

// .epl.protobuf.v1.SortDirection sort_direction = 5;
inline void UInt32Filter::clear_sort_direction() {
  sort_direction_ = 0;
}
inline ::epl::protobuf::v1::SortDirection UInt32Filter::_internal_sort_direction() const {
  return static_cast< ::epl::protobuf::v1::SortDirection >(sort_direction_);
}
inline ::epl::protobuf::v1::SortDirection UInt32Filter::sort_direction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.sort_direction)
  return _internal_sort_direction();
}
inline void UInt32Filter::_internal_set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  
  sort_direction_ = value;
}
inline void UInt32Filter::set_sort_direction(::epl::protobuf::v1::SortDirection value) {
  _internal_set_sort_direction(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.sort_direction)
}

// repeated uint32 set = 6;
inline int UInt32Filter::_internal_set_size() const {
  return set_.size();
}
inline int UInt32Filter::set_size() const {
  return _internal_set_size();
}
inline void UInt32Filter::clear_set() {
  set_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::_internal_set(int index) const {
  return set_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Filter::set(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.UInt32Filter.set)
  return _internal_set(index);
}
inline void UInt32Filter::set_set(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  set_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.UInt32Filter.set)
}
inline void UInt32Filter::_internal_add_set(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  set_.Add(value);
}
inline void UInt32Filter::add_set(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_set(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.UInt32Filter.set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Filter::_internal_set() const {
  return set_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Filter::set() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.UInt32Filter.set)
  return _internal_set();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Filter::_internal_mutable_set() {
  return &set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Filter::mutable_set() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.UInt32Filter.set)
  return _internal_mutable_set();
}

inline bool UInt32Filter::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UInt32Filter::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline UInt32Filter::DataCase UInt32Filter::data_case() const {
  return UInt32Filter::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringFilter

// string value = 1;
inline void StringFilter::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StringFilter::value() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StringFilter.value)
  return _internal_value();
}
inline void StringFilter::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StringFilter.value)
}
inline std::string* StringFilter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StringFilter.value)
  return _internal_mutable_value();
}
inline const std::string& StringFilter::_internal_value() const {
  return value_.Get();
}
inline void StringFilter::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StringFilter::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.StringFilter.value)
}
inline void StringFilter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StringFilter.value)
}
inline void StringFilter::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StringFilter.value)
}
inline std::string* StringFilter::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringFilter::release_value() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.StringFilter.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringFilter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StringFilter.value)
}

// .epl.protobuf.v1.FilterRelationship rel_type = 2;
inline void StringFilter::clear_rel_type() {
  rel_type_ = 0;
}
inline ::epl::protobuf::v1::FilterRelationship StringFilter::_internal_rel_type() const {
  return static_cast< ::epl::protobuf::v1::FilterRelationship >(rel_type_);
}
inline ::epl::protobuf::v1::FilterRelationship StringFilter::rel_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StringFilter.rel_type)
  return _internal_rel_type();
}
inline void StringFilter::_internal_set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  
  rel_type_ = value;
}
inline void StringFilter::set_rel_type(::epl::protobuf::v1::FilterRelationship value) {
  _internal_set_rel_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StringFilter.rel_type)
}

// repeated string set = 6;
inline int StringFilter::_internal_set_size() const {
  return set_.size();
}
inline int StringFilter::set_size() const {
  return _internal_set_size();
}
inline void StringFilter::clear_set() {
  set_.Clear();
}
inline std::string* StringFilter::add_set() {
  // @@protoc_insertion_point(field_add_mutable:epl.protobuf.v1.StringFilter.set)
  return _internal_add_set();
}
inline const std::string& StringFilter::_internal_set(int index) const {
  return set_.Get(index);
}
inline const std::string& StringFilter::set(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.StringFilter.set)
  return _internal_set(index);
}
inline std::string* StringFilter::mutable_set(int index) {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.StringFilter.set)
  return set_.Mutable(index);
}
inline void StringFilter::set_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StringFilter.set)
  set_.Mutable(index)->assign(value);
}
inline void StringFilter::set_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.StringFilter.set)
  set_.Mutable(index)->assign(std::move(value));
}
inline void StringFilter::set_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.StringFilter.set)
}
inline void StringFilter::set_set(int index, const char* value, size_t size) {
  set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.StringFilter.set)
}
inline std::string* StringFilter::_internal_add_set() {
  return set_.Add();
}
inline void StringFilter::add_set(const std::string& value) {
  set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.StringFilter.set)
}
inline void StringFilter::add_set(std::string&& value) {
  set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.StringFilter.set)
}
inline void StringFilter::add_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:epl.protobuf.v1.StringFilter.set)
}
inline void StringFilter::add_set(const char* value, size_t size) {
  set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:epl.protobuf.v1.StringFilter.set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringFilter::set() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.StringFilter.set)
  return set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringFilter::mutable_set() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.StringFilter.set)
  return &set_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace epl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::epl::protobuf::v1::SortDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::SortDirection>() {
  return ::epl::protobuf::v1::SortDirection_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::FilterRelationship> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::FilterRelationship>() {
  return ::epl::protobuf::v1::FilterRelationship_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fquery_2eproto
