// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: epl/protobuf/v1/stac_service.proto
// Original file comments:
//
// Copyright 2017-2019 Echo Park Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// For additional information, contact:
//
// email: info@echoparklabs.io
//
#ifndef GRPC_epl_2fprotobuf_2fv1_2fstac_5fservice_2eproto__INCLUDED
#define GRPC_epl_2fprotobuf_2fv1_2fstac_5fservice_2eproto__INCLUDED

#include "epl/protobuf/v1/stac_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace epl {
namespace protobuf {
namespace v1 {

//
// gRPC Interfaces for working with stac metadata
class StacService final {
 public:
  static constexpr char const* service_full_name() {
    return "epl.protobuf.v1.StacService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // using a search request, stream all the results that match the search filter
    std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::StacItem>> SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::StacItem>>(SearchItemsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>> AsyncSearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>>(AsyncSearchItemsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>> PrepareAsyncSearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>>(PrepareAsyncSearchItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::Collection>> SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::Collection>>(SearchCollectionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>> AsyncSearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>>(AsyncSearchCollectionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>> PrepareAsyncSearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>>(PrepareAsyncSearchCollectionsRaw(context, request, cq));
    }
    //
    // insert a stream of items into the STAC service
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> InsertItems(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(InsertItemsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> AsyncInsertItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertItemsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertItemsRaw(context, cq));
    }
    //
    // update a stream of items in the STAC service
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> UpdateItems(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(UpdateItemsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> AsyncUpdateItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(AsyncUpdateItemsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncUpdateItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncUpdateItemsRaw(context, cq));
    }
    //
    // count all the items in the Stac service according to the StacRequest filter
    virtual ::grpc::Status CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::epl::protobuf::v1::StacDbResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> AsyncCountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(AsyncCountItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncCountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncCountItemsRaw(context, request, cq));
    }
    //
    // delete an item from the STAC service
    virtual ::grpc::Status DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> AsyncDeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(AsyncDeleteOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncDeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncDeleteOneItemRaw(context, request, cq));
    }
    //
    // using a search request get the first item that matches the request
    virtual ::grpc::Status SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::epl::protobuf::v1::StacItem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>> AsyncSearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>>(AsyncSearchOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>> PrepareAsyncSearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>>(PrepareAsyncSearchOneItemRaw(context, request, cq));
    }
    //
    // Insert one item into the STAC service
    virtual ::grpc::Status InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> AsyncInsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertOneItemRaw(context, request, cq));
    }
    //
    // Insert one item into the STAC service
    virtual ::grpc::Status InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::epl::protobuf::v1::StacDbResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> AsyncInsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertOneCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertOneCollectionRaw(context, request, cq));
    }
    //
    // Update one item in the STAC service
    virtual ::grpc::Status UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> AsyncUpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(AsyncUpdateOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncUpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncUpdateOneItemRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // using a search request, stream all the results that match the search filter
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::StacItem>* reactor) = 0;
      #else
      virtual void SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::StacItem>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::Collection>* reactor) = 0;
      #else
      virtual void SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::Collection>* reactor) = 0;
      #endif
      //
      // insert a stream of items into the STAC service
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InsertItems(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) = 0;
      #else
      virtual void InsertItems(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) = 0;
      #endif
      //
      // update a stream of items in the STAC service
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateItems(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) = 0;
      #else
      virtual void UpdateItems(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) = 0;
      #endif
      //
      // count all the items in the Stac service according to the StacRequest filter
      virtual void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // delete an item from the STAC service
      virtual void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // using a search request get the first item that matches the request
      virtual void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // Insert one item into the STAC service
      virtual void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // Insert one item into the STAC service
      virtual void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // Update one item in the STAC service
      virtual void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::epl::protobuf::v1::StacItem>* SearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>* AsyncSearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::StacItem>* PrepareAsyncSearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::epl::protobuf::v1::Collection>* SearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>* AsyncSearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::Collection>* PrepareAsyncSearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* InsertItemsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* AsyncInsertItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* UpdateItemsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* AsyncUpdateItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncUpdateItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* AsyncCountItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncCountItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* AsyncDeleteOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncDeleteOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>* AsyncSearchOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacItem>* PrepareAsyncSearchOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* AsyncInsertOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* AsyncInsertOneCollectionRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertOneCollectionRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* AsyncUpdateOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncUpdateOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::StacItem>> SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::StacItem>>(SearchItemsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>> AsyncSearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>>(AsyncSearchItemsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>> PrepareAsyncSearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>>(PrepareAsyncSearchItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::Collection>> SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::Collection>>(SearchCollectionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>> AsyncSearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>>(AsyncSearchCollectionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>> PrepareAsyncSearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>>(PrepareAsyncSearchCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> InsertItems(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(InsertItemsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> AsyncInsertItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertItemsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertItemsRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> UpdateItems(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(UpdateItemsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> AsyncUpdateItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(AsyncUpdateItemsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncUpdateItems(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncUpdateItemsRaw(context, cq));
    }
    ::grpc::Status CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::epl::protobuf::v1::StacDbResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> AsyncCountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(AsyncCountItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncCountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncCountItemsRaw(context, request, cq));
    }
    ::grpc::Status DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> AsyncDeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(AsyncDeleteOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncDeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncDeleteOneItemRaw(context, request, cq));
    }
    ::grpc::Status SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::epl::protobuf::v1::StacItem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>> AsyncSearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>>(AsyncSearchOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>> PrepareAsyncSearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>>(PrepareAsyncSearchOneItemRaw(context, request, cq));
    }
    ::grpc::Status InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> AsyncInsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertOneItemRaw(context, request, cq));
    }
    ::grpc::Status InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::epl::protobuf::v1::StacDbResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> AsyncInsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(AsyncInsertOneCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncInsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncInsertOneCollectionRaw(context, request, cq));
    }
    ::grpc::Status UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::epl::protobuf::v1::StacDbResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> AsyncUpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(AsyncUpdateOneItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>> PrepareAsyncUpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>>(PrepareAsyncUpdateOneItemRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::StacItem>* reactor) override;
      #else
      void SearchItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::StacItem>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::Collection>* reactor) override;
      #else
      void SearchCollections(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::Collection>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InsertItems(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) override;
      #else
      void InsertItems(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateItems(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) override;
      #else
      void UpdateItems(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* reactor) override;
      #endif
      void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CountItems(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SearchOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InsertOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InsertOneCollection(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOneItem(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::epl::protobuf::v1::StacItem>* SearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>* AsyncSearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::StacItem>* PrepareAsyncSearchItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::epl::protobuf::v1::Collection>* SearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>* AsyncSearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::Collection>* PrepareAsyncSearchCollectionsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::CollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* InsertItemsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* AsyncInsertItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* UpdateItemsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* AsyncUpdateItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncUpdateItemsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* AsyncCountItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncCountItemsRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* AsyncDeleteOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncDeleteOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>* AsyncSearchOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacItem>* PrepareAsyncSearchOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* AsyncInsertOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* AsyncInsertOneCollectionRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncInsertOneCollectionRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::Collection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* AsyncUpdateOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::StacDbResponse>* PrepareAsyncUpdateOneItemRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::StacItem& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SearchItems_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchCollections_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertItems_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateItems_;
    const ::grpc::internal::RpcMethod rpcmethod_CountItems_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOneItem_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchOneItem_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertOneItem_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertOneCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOneItem_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // using a search request, stream all the results that match the search filter
    virtual ::grpc::Status SearchItems(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacRequest* request, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* writer);
    virtual ::grpc::Status SearchCollections(::grpc::ServerContext* context, const ::epl::protobuf::v1::CollectionRequest* request, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* writer);
    //
    // insert a stream of items into the STAC service
    virtual ::grpc::Status InsertItems(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* stream);
    //
    // update a stream of items in the STAC service
    virtual ::grpc::Status UpdateItems(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* stream);
    //
    // count all the items in the Stac service according to the StacRequest filter
    virtual ::grpc::Status CountItems(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response);
    //
    // delete an item from the STAC service
    virtual ::grpc::Status DeleteOneItem(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response);
    //
    // using a search request get the first item that matches the request
    virtual ::grpc::Status SearchOneItem(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response);
    //
    // Insert one item into the STAC service
    virtual ::grpc::Status InsertOneItem(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response);
    //
    // Insert one item into the STAC service
    virtual ::grpc::Status InsertOneCollection(::grpc::ServerContext* context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response);
    //
    // Update one item in the STAC service
    virtual ::grpc::Status UpdateOneItem(::grpc::ServerContext* context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchItems() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchItems(::grpc::ServerContext* context, ::epl::protobuf::v1::StacRequest* request, ::grpc::ServerAsyncWriter< ::epl::protobuf::v1::StacItem>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchCollections() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchCollections(::grpc::ServerContext* context, ::epl::protobuf::v1::CollectionRequest* request, ::grpc::ServerAsyncWriter< ::epl::protobuf::v1::Collection>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertItems() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InsertItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertItems(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateItems() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItems(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CountItems() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountItems(::grpc::ServerContext* context, ::epl::protobuf::v1::StacRequest* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacDbResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOneItem() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOneItem(::grpc::ServerContext* context, ::epl::protobuf::v1::StacItem* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacDbResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchOneItem() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchOneItem(::grpc::ServerContext* context, ::epl::protobuf::v1::StacRequest* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacItem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertOneItem() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertOneItem(::grpc::ServerContext* context, ::epl::protobuf::v1::StacItem* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacDbResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertOneCollection() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertOneCollection(::grpc::ServerContext* context, ::epl::protobuf::v1::Collection* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacDbResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOneItem() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOneItem(::grpc::ServerContext* context, ::epl::protobuf::v1::StacItem* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::StacDbResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SearchItems<WithAsyncMethod_SearchCollections<WithAsyncMethod_InsertItems<WithAsyncMethod_UpdateItems<WithAsyncMethod_CountItems<WithAsyncMethod_DeleteOneItem<WithAsyncMethod_SearchOneItem<WithAsyncMethod_InsertOneItem<WithAsyncMethod_InsertOneCollection<WithAsyncMethod_UpdateOneItem<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacRequest* request) { return this->SearchItems(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::epl::protobuf::v1::StacItem>* SearchItems(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::epl::protobuf::v1::StacItem>* SearchItems(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::epl::protobuf::v1::CollectionRequest, ::epl::protobuf::v1::Collection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::CollectionRequest* request) { return this->SearchCollections(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::epl::protobuf::v1::Collection>* SearchCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::epl::protobuf::v1::Collection>* SearchCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InsertItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InsertItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->InsertItems(context); }));
    }
    ~ExperimentalWithCallbackMethod_InsertItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* InsertItems(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* InsertItems(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->UpdateItems(context); }));
    }
    ~ExperimentalWithCallbackMethod_UpdateItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* UpdateItems(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* UpdateItems(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CountItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacDbResponse* response) { return this->CountItems(context, request, response); }));}
    void SetMessageAllocatorFor_CountItems(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacDbResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacDbResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CountItems(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CountItems(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response) { return this->DeleteOneItem(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOneItem(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacRequest* request, ::epl::protobuf::v1::StacItem* response) { return this->SearchOneItem(context, request, response); }));}
    void SetMessageAllocatorFor_SearchOneItem(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InsertOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response) { return this->InsertOneItem(context, request, response); }));}
    void SetMessageAllocatorFor_InsertOneItem(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InsertOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InsertOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InsertOneCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::Collection, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::Collection* request, ::epl::protobuf::v1::StacDbResponse* response) { return this->InsertOneCollection(context, request, response); }));}
    void SetMessageAllocatorFor_InsertOneCollection(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::Collection, ::epl::protobuf::v1::StacDbResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::Collection, ::epl::protobuf::v1::StacDbResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InsertOneCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InsertOneCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::StacItem* request, ::epl::protobuf::v1::StacDbResponse* response) { return this->UpdateOneItem(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOneItem(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SearchItems<ExperimentalWithCallbackMethod_SearchCollections<ExperimentalWithCallbackMethod_InsertItems<ExperimentalWithCallbackMethod_UpdateItems<ExperimentalWithCallbackMethod_CountItems<ExperimentalWithCallbackMethod_DeleteOneItem<ExperimentalWithCallbackMethod_SearchOneItem<ExperimentalWithCallbackMethod_InsertOneItem<ExperimentalWithCallbackMethod_InsertOneCollection<ExperimentalWithCallbackMethod_UpdateOneItem<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SearchItems<ExperimentalWithCallbackMethod_SearchCollections<ExperimentalWithCallbackMethod_InsertItems<ExperimentalWithCallbackMethod_UpdateItems<ExperimentalWithCallbackMethod_CountItems<ExperimentalWithCallbackMethod_DeleteOneItem<ExperimentalWithCallbackMethod_SearchOneItem<ExperimentalWithCallbackMethod_InsertOneItem<ExperimentalWithCallbackMethod_InsertOneCollection<ExperimentalWithCallbackMethod_UpdateOneItem<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchItems() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchCollections() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertItems() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InsertItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateItems() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CountItems() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOneItem() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchOneItem() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertOneItem() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertOneCollection() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOneItem() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchItems() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchCollections() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchCollections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertItems() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InsertItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertItems(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateItems() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItems(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CountItems() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOneItem() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOneItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchOneItem() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchOneItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertOneItem() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertOneItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertOneCollection() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertOneCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOneItem() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOneItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SearchItems(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SearchItems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SearchItems(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SearchCollections(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SearchCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SearchCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InsertItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InsertItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->InsertItems(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_InsertItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* InsertItems(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* InsertItems(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->UpdateItems(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItems(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::StacDbResponse, ::epl::protobuf::v1::StacItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* UpdateItems(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* UpdateItems(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CountItems() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CountItems(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CountItems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CountItems(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOneItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchOneItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InsertOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertOneItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InsertOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InsertOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InsertOneCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertOneCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InsertOneCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InsertOneCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOneItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOneItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOneItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOneItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CountItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CountItems() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacDbResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacDbResponse>* streamer) {
                       return this->StreamedCountItems(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CountItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CountItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCountItems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::StacRequest,::epl::protobuf::v1::StacDbResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOneItem() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* streamer) {
                       return this->StreamedDeleteOneItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOneItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchOneItem() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>* streamer) {
                       return this->StreamedSearchOneItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::epl::protobuf::v1::StacItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchOneItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::StacRequest,::epl::protobuf::v1::StacItem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertOneItem() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* streamer) {
                       return this->StreamedInsertOneItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertOneItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertOneCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertOneCollection() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::Collection, ::epl::protobuf::v1::StacDbResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::Collection, ::epl::protobuf::v1::StacDbResponse>* streamer) {
                       return this->StreamedInsertOneCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertOneCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertOneCollection(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::Collection* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertOneCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::Collection,::epl::protobuf::v1::StacDbResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOneItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOneItem() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::StacItem, ::epl::protobuf::v1::StacDbResponse>* streamer) {
                       return this->StreamedUpdateOneItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOneItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOneItem(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacItem* /*request*/, ::epl::protobuf::v1::StacDbResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOneItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::StacItem,::epl::protobuf::v1::StacDbResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CountItems<WithStreamedUnaryMethod_DeleteOneItem<WithStreamedUnaryMethod_SearchOneItem<WithStreamedUnaryMethod_InsertOneItem<WithStreamedUnaryMethod_InsertOneCollection<WithStreamedUnaryMethod_UpdateOneItem<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SearchItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SearchItems() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::epl::protobuf::v1::StacRequest, ::epl::protobuf::v1::StacItem>* streamer) {
                       return this->StreamedSearchItems(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SearchItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchItems(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::StacRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::StacItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSearchItems(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::epl::protobuf::v1::StacRequest,::epl::protobuf::v1::StacItem>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SearchCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SearchCollections() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::epl::protobuf::v1::CollectionRequest, ::epl::protobuf::v1::Collection>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::epl::protobuf::v1::CollectionRequest, ::epl::protobuf::v1::Collection>* streamer) {
                       return this->StreamedSearchCollections(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SearchCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchCollections(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::CollectionRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::Collection>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSearchCollections(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::epl::protobuf::v1::CollectionRequest,::epl::protobuf::v1::Collection>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SearchItems<WithSplitStreamingMethod_SearchCollections<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_SearchItems<WithSplitStreamingMethod_SearchCollections<WithStreamedUnaryMethod_CountItems<WithStreamedUnaryMethod_DeleteOneItem<WithStreamedUnaryMethod_SearchOneItem<WithStreamedUnaryMethod_InsertOneItem<WithStreamedUnaryMethod_InsertOneCollection<WithStreamedUnaryMethod_UpdateOneItem<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace protobuf
}  // namespace epl


#endif  // GRPC_epl_2fprotobuf_2fv1_2fstac_5fservice_2eproto__INCLUDED
