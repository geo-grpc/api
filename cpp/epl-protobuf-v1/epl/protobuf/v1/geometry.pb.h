// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fv1_2fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(int index);
namespace epl {
namespace protobuf {
namespace v1 {
class EnvelopeData;
struct EnvelopeDataDefaultTypeInternal;
extern EnvelopeDataDefaultTypeInternal _EnvelopeData_default_instance_;
class FileRequestChunk;
struct FileRequestChunkDefaultTypeInternal;
extern FileRequestChunkDefaultTypeInternal _FileRequestChunk_default_instance_;
class GeodeticInverse;
struct GeodeticInverseDefaultTypeInternal;
extern GeodeticInverseDefaultTypeInternal _GeodeticInverse_default_instance_;
class GeometryData;
struct GeometryDataDefaultTypeInternal;
extern GeometryDataDefaultTypeInternal _GeometryData_default_instance_;
class GeometryRequest;
struct GeometryRequestDefaultTypeInternal;
extern GeometryRequestDefaultTypeInternal _GeometryRequest_default_instance_;
class GeometryResponse;
struct GeometryResponseDefaultTypeInternal;
extern GeometryResponseDefaultTypeInternal _GeometryResponse_default_instance_;
class GeometryResponse_RelateMapEntry_DoNotUse;
struct GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal;
extern GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal _GeometryResponse_RelateMapEntry_DoNotUse_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Params_AffineTransform;
struct Params_AffineTransformDefaultTypeInternal;
extern Params_AffineTransformDefaultTypeInternal _Params_AffineTransform_default_instance_;
class Params_Buffer;
struct Params_BufferDefaultTypeInternal;
extern Params_BufferDefaultTypeInternal _Params_Buffer_default_instance_;
class Params_Clip;
struct Params_ClipDefaultTypeInternal;
extern Params_ClipDefaultTypeInternal _Params_Clip_default_instance_;
class Params_Convex;
struct Params_ConvexDefaultTypeInternal;
extern Params_ConvexDefaultTypeInternal _Params_Convex_default_instance_;
class Params_Cut;
struct Params_CutDefaultTypeInternal;
extern Params_CutDefaultTypeInternal _Params_Cut_default_instance_;
class Params_Densify;
struct Params_DensifyDefaultTypeInternal;
extern Params_DensifyDefaultTypeInternal _Params_Densify_default_instance_;
class Params_Generalize;
struct Params_GeneralizeDefaultTypeInternal;
extern Params_GeneralizeDefaultTypeInternal _Params_Generalize_default_instance_;
class Params_GeneralizeByArea;
struct Params_GeneralizeByAreaDefaultTypeInternal;
extern Params_GeneralizeByAreaDefaultTypeInternal _Params_GeneralizeByArea_default_instance_;
class Params_GeodeticBuffer;
struct Params_GeodeticBufferDefaultTypeInternal;
extern Params_GeodeticBufferDefaultTypeInternal _Params_GeodeticBuffer_default_instance_;
class Params_Intersection;
struct Params_IntersectionDefaultTypeInternal;
extern Params_IntersectionDefaultTypeInternal _Params_Intersection_default_instance_;
class Params_Offset;
struct Params_OffsetDefaultTypeInternal;
extern Params_OffsetDefaultTypeInternal _Params_Offset_default_instance_;
class Params_RandomPoints;
struct Params_RandomPointsDefaultTypeInternal;
extern Params_RandomPointsDefaultTypeInternal _Params_RandomPoints_default_instance_;
class Params_Relate;
struct Params_RelateDefaultTypeInternal;
extern Params_RelateDefaultTypeInternal _Params_Relate_default_instance_;
class Params_Simplify;
struct Params_SimplifyDefaultTypeInternal;
extern Params_SimplifyDefaultTypeInternal _Params_Simplify_default_instance_;
class ProjectionData;
struct ProjectionDataDefaultTypeInternal;
extern ProjectionDataDefaultTypeInternal _ProjectionData_default_instance_;
class ProjectionData_Custom;
struct ProjectionData_CustomDefaultTypeInternal;
extern ProjectionData_CustomDefaultTypeInternal _ProjectionData_Custom_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> ::epl::protobuf::v1::EnvelopeData* Arena::CreateMaybeMessage<::epl::protobuf::v1::EnvelopeData>(Arena*);
template<> ::epl::protobuf::v1::FileRequestChunk* Arena::CreateMaybeMessage<::epl::protobuf::v1::FileRequestChunk>(Arena*);
template<> ::epl::protobuf::v1::GeodeticInverse* Arena::CreateMaybeMessage<::epl::protobuf::v1::GeodeticInverse>(Arena*);
template<> ::epl::protobuf::v1::GeometryData* Arena::CreateMaybeMessage<::epl::protobuf::v1::GeometryData>(Arena*);
template<> ::epl::protobuf::v1::GeometryRequest* Arena::CreateMaybeMessage<::epl::protobuf::v1::GeometryRequest>(Arena*);
template<> ::epl::protobuf::v1::GeometryResponse* Arena::CreateMaybeMessage<::epl::protobuf::v1::GeometryResponse>(Arena*);
template<> ::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse* Arena::CreateMaybeMessage<::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse>(Arena*);
template<> ::epl::protobuf::v1::Params* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params>(Arena*);
template<> ::epl::protobuf::v1::Params_AffineTransform* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_AffineTransform>(Arena*);
template<> ::epl::protobuf::v1::Params_Buffer* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Buffer>(Arena*);
template<> ::epl::protobuf::v1::Params_Clip* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Clip>(Arena*);
template<> ::epl::protobuf::v1::Params_Convex* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Convex>(Arena*);
template<> ::epl::protobuf::v1::Params_Cut* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Cut>(Arena*);
template<> ::epl::protobuf::v1::Params_Densify* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Densify>(Arena*);
template<> ::epl::protobuf::v1::Params_Generalize* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Generalize>(Arena*);
template<> ::epl::protobuf::v1::Params_GeneralizeByArea* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_GeneralizeByArea>(Arena*);
template<> ::epl::protobuf::v1::Params_GeodeticBuffer* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_GeodeticBuffer>(Arena*);
template<> ::epl::protobuf::v1::Params_Intersection* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Intersection>(Arena*);
template<> ::epl::protobuf::v1::Params_Offset* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Offset>(Arena*);
template<> ::epl::protobuf::v1::Params_RandomPoints* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_RandomPoints>(Arena*);
template<> ::epl::protobuf::v1::Params_Relate* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Relate>(Arena*);
template<> ::epl::protobuf::v1::Params_Simplify* Arena::CreateMaybeMessage<::epl::protobuf::v1::Params_Simplify>(Arena*);
template<> ::epl::protobuf::v1::ProjectionData* Arena::CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(Arena*);
template<> ::epl::protobuf::v1::ProjectionData_Custom* Arena::CreateMaybeMessage<::epl::protobuf::v1::ProjectionData_Custom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epl {
namespace protobuf {
namespace v1 {

enum ProjectionData_CSType : int {
  ProjectionData_CSType_LAMBERT_AZI = 0,
  ProjectionData_CSType_ProjectionData_CSType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProjectionData_CSType_ProjectionData_CSType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProjectionData_CSType_IsValid(int value);
constexpr ProjectionData_CSType ProjectionData_CSType_CSType_MIN = ProjectionData_CSType_LAMBERT_AZI;
constexpr ProjectionData_CSType ProjectionData_CSType_CSType_MAX = ProjectionData_CSType_LAMBERT_AZI;
constexpr int ProjectionData_CSType_CSType_ARRAYSIZE = ProjectionData_CSType_CSType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionData_CSType_descriptor();
template<typename T>
inline const std::string& ProjectionData_CSType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectionData_CSType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectionData_CSType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectionData_CSType_descriptor(), enum_t_value);
}
inline bool ProjectionData_CSType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectionData_CSType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectionData_CSType>(
    ProjectionData_CSType_descriptor(), name, value);
}
enum FileRequestChunk_FileType : int {
  FileRequestChunk_FileType_SHAPEFILE = 0,
  FileRequestChunk_FileType_FileRequestChunk_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileRequestChunk_FileType_FileRequestChunk_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileRequestChunk_FileType_IsValid(int value);
constexpr FileRequestChunk_FileType FileRequestChunk_FileType_FileType_MIN = FileRequestChunk_FileType_SHAPEFILE;
constexpr FileRequestChunk_FileType FileRequestChunk_FileType_FileType_MAX = FileRequestChunk_FileType_SHAPEFILE;
constexpr int FileRequestChunk_FileType_FileType_ARRAYSIZE = FileRequestChunk_FileType_FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileRequestChunk_FileType_descriptor();
template<typename T>
inline const std::string& FileRequestChunk_FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileRequestChunk_FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileRequestChunk_FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileRequestChunk_FileType_descriptor(), enum_t_value);
}
inline bool FileRequestChunk_FileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileRequestChunk_FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileRequestChunk_FileType>(
    FileRequestChunk_FileType_descriptor(), name, value);
}
enum Params_Offset_OffsetJoinType : int {
  Params_Offset_OffsetJoinType_ROUND = 0,
  Params_Offset_OffsetJoinType_BEVEL = 1,
  Params_Offset_OffsetJoinType_MITER = 2,
  Params_Offset_OffsetJoinType_SQUARE = 3,
  Params_Offset_OffsetJoinType_Params_Offset_OffsetJoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Params_Offset_OffsetJoinType_Params_Offset_OffsetJoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Params_Offset_OffsetJoinType_IsValid(int value);
constexpr Params_Offset_OffsetJoinType Params_Offset_OffsetJoinType_OffsetJoinType_MIN = Params_Offset_OffsetJoinType_ROUND;
constexpr Params_Offset_OffsetJoinType Params_Offset_OffsetJoinType_OffsetJoinType_MAX = Params_Offset_OffsetJoinType_SQUARE;
constexpr int Params_Offset_OffsetJoinType_OffsetJoinType_ARRAYSIZE = Params_Offset_OffsetJoinType_OffsetJoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Params_Offset_OffsetJoinType_descriptor();
template<typename T>
inline const std::string& Params_Offset_OffsetJoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Params_Offset_OffsetJoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Params_Offset_OffsetJoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Params_Offset_OffsetJoinType_descriptor(), enum_t_value);
}
inline bool Params_Offset_OffsetJoinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Params_Offset_OffsetJoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Params_Offset_OffsetJoinType>(
    Params_Offset_OffsetJoinType_descriptor(), name, value);
}
enum SimpleState : int {
  SIMPLE_UNKNOWN = 0,
  WEAK_SIMPLE = 1,
  STRONG_SIMPLE = 2,
  NON_SIMPLE = 3,
  STRUCTURE_FLAW = 4,
  DEGENERATE_SEGMENTS = 5,
  CLUSTERING = 6,
  CRACKING = 7,
  CROSS_OVER = 8,
  RING_ORIENTATION = 9,
  SimpleState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SimpleState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SimpleState_IsValid(int value);
constexpr SimpleState SimpleState_MIN = SIMPLE_UNKNOWN;
constexpr SimpleState SimpleState_MAX = RING_ORIENTATION;
constexpr int SimpleState_ARRAYSIZE = SimpleState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleState_descriptor();
template<typename T>
inline const std::string& SimpleState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimpleState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimpleState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimpleState_descriptor(), enum_t_value);
}
inline bool SimpleState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimpleState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimpleState>(
    SimpleState_descriptor(), name, value);
}
enum Encoding : int {
  UNKNOWN_ENCODING = 0,
  WKB = 1,
  WKT = 2,
  GEOJSON = 3,
  ESRI_SHAPE = 4,
  EWKB = 5,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = UNKNOWN_ENCODING;
constexpr Encoding Encoding_MAX = EWKB;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
enum OperatorType : int {
  UNKNOWN_OPERATOR = 0,
  PROJECT = 1,
  EXPORT_TO_JSON = 2,
  IMPORT_FROM_JSON = 3,
  EXPORT_TO_ESRI_SHAPE = 4,
  IMPORT_FROM_ESRI_SHAPE = 5,
  UNION = 6,
  DIFFERENCE = 7,
  PROXIMITY_2D = 8,
  RELATE = 9,
  EQUALS = 10,
  DISJOINT = 11,
  INTERSECTS = 12,
  WITHIN = 13,
  CONTAINS = 14,
  CROSSES = 15,
  TOUCHES = 16,
  OVERLAPS = 17,
  BUFFER = 18,
  DISTANCE = 19,
  INTERSECTION = 20,
  CLIP = 21,
  CUT = 22,
  DENSIFY_BY_LENGTH = 23,
  GEODESIC_BUFFER = 26,
  GEODETIC_DENSIFY_BY_LENGTH = 27,
  GEODETIC_AREA = 30,
  SIMPLIFY = 31,
  SIMPLIFY_OGC = 32,
  OFFSET = 33,
  GENERALIZE = 34,
  GENERALIZE_BY_AREA = 35,
  EXPORT_TO_WKB = 36,
  IMPORT_FROM_WKB = 37,
  EXPORT_TO_WKT = 38,
  IMPORT_FROM_WKT = 39,
  IMPORT_FROM_GEOJSON = 40,
  EXPORT_TO_GEOJSON = 41,
  SYMMETRIC_DIFFERENCE = 42,
  CONVEX_HULL = 43,
  BOUNDARY = 44,
  RANDOM_POINTS = 45,
  ENCLOSING_CIRCLE = 46,
  AFFINE_TRANSFORM = 47,
  GEODETIC_LENGTH = 48,
  GEODETIC_INVERSE = 49,
  EXPORT_TO_EWKB = 50,
  IMPORT_FROM_EWKB = 51,
  OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperatorType_IsValid(int value);
constexpr OperatorType OperatorType_MIN = UNKNOWN_OPERATOR;
constexpr OperatorType OperatorType_MAX = IMPORT_FROM_EWKB;
constexpr int OperatorType_ARRAYSIZE = OperatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorType_descriptor();
template<typename T>
inline const std::string& OperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperatorType_descriptor(), enum_t_value);
}
inline bool OperatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperatorType>(
    OperatorType_descriptor(), name, value);
}
// ===================================================================

class GeometryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.GeometryData) */ {
 public:
  inline GeometryData() : GeometryData(nullptr) {}
  virtual ~GeometryData();
  explicit constexpr GeometryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeometryData(const GeometryData& from);
  GeometryData(GeometryData&& from) noexcept
    : GeometryData() {
    *this = ::std::move(from);
  }

  inline GeometryData& operator=(const GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryData& operator=(GeometryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryData& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kWkt = 3,
    kGeojson = 4,
    kWkb = 5,
    kEsriShape = 6,
    kEwkb = 15,
    DATA_NOT_SET = 0,
  };

  static inline const GeometryData* internal_default_instance() {
    return reinterpret_cast<const GeometryData*>(
               &_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeometryData& a, GeometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryData* New() const final {
    return CreateMaybeMessage<GeometryData>(nullptr);
  }

  GeometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryData& from);
  void MergeFrom(const GeometryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.GeometryData";
  }
  protected:
  explicit GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 2,
    kProjFieldNumber = 7,
    kEnvelopeFieldNumber = 13,
    kGeometryIdFieldNumber = 1,
    kSimpleFieldNumber = 14,
    kWktFieldNumber = 3,
    kGeojsonFieldNumber = 4,
    kWkbFieldNumber = 5,
    kEsriShapeFieldNumber = 6,
    kEwkbFieldNumber = 15,
  };
  // string feature_id = 2;
  void clear_feature_id();
  const std::string& feature_id() const;
  void set_feature_id(const std::string& value);
  void set_feature_id(std::string&& value);
  void set_feature_id(const char* value);
  void set_feature_id(const char* value, size_t size);
  std::string* mutable_feature_id();
  std::string* release_feature_id();
  void set_allocated_feature_id(std::string* feature_id);
  private:
  const std::string& _internal_feature_id() const;
  void _internal_set_feature_id(const std::string& value);
  std::string* _internal_mutable_feature_id();
  public:

  // .epl.protobuf.v1.ProjectionData proj = 7;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  const ::epl::protobuf::v1::ProjectionData& proj() const;
  ::epl::protobuf::v1::ProjectionData* release_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_proj();
  void set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_proj();
  public:
  void unsafe_arena_set_allocated_proj(
      ::epl::protobuf::v1::ProjectionData* proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_proj();

  // .epl.protobuf.v1.EnvelopeData envelope = 13;
  bool has_envelope() const;
  private:
  bool _internal_has_envelope() const;
  public:
  void clear_envelope();
  const ::epl::protobuf::v1::EnvelopeData& envelope() const;
  ::epl::protobuf::v1::EnvelopeData* release_envelope();
  ::epl::protobuf::v1::EnvelopeData* mutable_envelope();
  void set_allocated_envelope(::epl::protobuf::v1::EnvelopeData* envelope);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_envelope() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_envelope();
  public:
  void unsafe_arena_set_allocated_envelope(
      ::epl::protobuf::v1::EnvelopeData* envelope);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_envelope();

  // uint64 geometry_id = 1;
  void clear_geometry_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 geometry_id() const;
  void set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_geometry_id() const;
  void _internal_set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .epl.protobuf.v1.SimpleState simple = 14;
  void clear_simple();
  ::epl::protobuf::v1::SimpleState simple() const;
  void set_simple(::epl::protobuf::v1::SimpleState value);
  private:
  ::epl::protobuf::v1::SimpleState _internal_simple() const;
  void _internal_set_simple(::epl::protobuf::v1::SimpleState value);
  public:

  // string wkt = 3;
  bool has_wkt() const;
  private:
  bool _internal_has_wkt() const;
  public:
  void clear_wkt();
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);
  private:
  const std::string& _internal_wkt() const;
  void _internal_set_wkt(const std::string& value);
  std::string* _internal_mutable_wkt();
  public:

  // string geojson = 4;
  bool has_geojson() const;
  private:
  bool _internal_has_geojson() const;
  public:
  void clear_geojson();
  const std::string& geojson() const;
  void set_geojson(const std::string& value);
  void set_geojson(std::string&& value);
  void set_geojson(const char* value);
  void set_geojson(const char* value, size_t size);
  std::string* mutable_geojson();
  std::string* release_geojson();
  void set_allocated_geojson(std::string* geojson);
  private:
  const std::string& _internal_geojson() const;
  void _internal_set_geojson(const std::string& value);
  std::string* _internal_mutable_geojson();
  public:

  // bytes wkb = 5;
  bool has_wkb() const;
  private:
  bool _internal_has_wkb() const;
  public:
  void clear_wkb();
  const std::string& wkb() const;
  void set_wkb(const std::string& value);
  void set_wkb(std::string&& value);
  void set_wkb(const char* value);
  void set_wkb(const void* value, size_t size);
  std::string* mutable_wkb();
  std::string* release_wkb();
  void set_allocated_wkb(std::string* wkb);
  private:
  const std::string& _internal_wkb() const;
  void _internal_set_wkb(const std::string& value);
  std::string* _internal_mutable_wkb();
  public:

  // bytes esri_shape = 6;
  bool has_esri_shape() const;
  private:
  bool _internal_has_esri_shape() const;
  public:
  void clear_esri_shape();
  const std::string& esri_shape() const;
  void set_esri_shape(const std::string& value);
  void set_esri_shape(std::string&& value);
  void set_esri_shape(const char* value);
  void set_esri_shape(const void* value, size_t size);
  std::string* mutable_esri_shape();
  std::string* release_esri_shape();
  void set_allocated_esri_shape(std::string* esri_shape);
  private:
  const std::string& _internal_esri_shape() const;
  void _internal_set_esri_shape(const std::string& value);
  std::string* _internal_mutable_esri_shape();
  public:

  // bytes ewkb = 15;
  bool has_ewkb() const;
  private:
  bool _internal_has_ewkb() const;
  public:
  void clear_ewkb();
  const std::string& ewkb() const;
  void set_ewkb(const std::string& value);
  void set_ewkb(std::string&& value);
  void set_ewkb(const char* value);
  void set_ewkb(const void* value, size_t size);
  std::string* mutable_ewkb();
  std::string* release_ewkb();
  void set_allocated_ewkb(std::string* ewkb);
  private:
  const std::string& _internal_ewkb() const;
  void _internal_set_ewkb(const std::string& value);
  std::string* _internal_mutable_ewkb();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.GeometryData)
 private:
  class _Internal;
  void set_has_wkt();
  void set_has_geojson();
  void set_has_wkb();
  void set_has_esri_shape();
  void set_has_ewkb();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_id_;
  ::epl::protobuf::v1::ProjectionData* proj_;
  ::epl::protobuf::v1::EnvelopeData* envelope_;
  ::PROTOBUF_NAMESPACE_ID::uint64 geometry_id_;
  int simple_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geojson_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkb_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr esri_shape_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ewkb_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class ProjectionData_Custom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.ProjectionData.Custom) */ {
 public:
  inline ProjectionData_Custom() : ProjectionData_Custom(nullptr) {}
  virtual ~ProjectionData_Custom();
  explicit constexpr ProjectionData_Custom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectionData_Custom(const ProjectionData_Custom& from);
  ProjectionData_Custom(ProjectionData_Custom&& from) noexcept
    : ProjectionData_Custom() {
    *this = ::std::move(from);
  }

  inline ProjectionData_Custom& operator=(const ProjectionData_Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionData_Custom& operator=(ProjectionData_Custom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectionData_Custom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectionData_Custom* internal_default_instance() {
    return reinterpret_cast<const ProjectionData_Custom*>(
               &_ProjectionData_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectionData_Custom& a, ProjectionData_Custom& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionData_Custom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectionData_Custom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectionData_Custom* New() const final {
    return CreateMaybeMessage<ProjectionData_Custom>(nullptr);
  }

  ProjectionData_Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectionData_Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectionData_Custom& from);
  void MergeFrom(const ProjectionData_Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionData_Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.ProjectionData.Custom";
  }
  protected:
  explicit ProjectionData_Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLon0FieldNumber = 1,
    kLat0FieldNumber = 2,
    kCsTypeFieldNumber = 3,
  };
  // double lon_0 = 1;
  void clear_lon_0();
  double lon_0() const;
  void set_lon_0(double value);
  private:
  double _internal_lon_0() const;
  void _internal_set_lon_0(double value);
  public:

  // double lat_0 = 2;
  void clear_lat_0();
  double lat_0() const;
  void set_lat_0(double value);
  private:
  double _internal_lat_0() const;
  void _internal_set_lat_0(double value);
  public:

  // .epl.protobuf.v1.ProjectionData.CSType cs_type = 3;
  void clear_cs_type();
  ::epl::protobuf::v1::ProjectionData_CSType cs_type() const;
  void set_cs_type(::epl::protobuf::v1::ProjectionData_CSType value);
  private:
  ::epl::protobuf::v1::ProjectionData_CSType _internal_cs_type() const;
  void _internal_set_cs_type(::epl::protobuf::v1::ProjectionData_CSType value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.ProjectionData.Custom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lon_0_;
  double lat_0_;
  int cs_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class ProjectionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.ProjectionData) */ {
 public:
  inline ProjectionData() : ProjectionData(nullptr) {}
  virtual ~ProjectionData();
  explicit constexpr ProjectionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectionData(const ProjectionData& from);
  ProjectionData(ProjectionData&& from) noexcept
    : ProjectionData() {
    *this = ::std::move(from);
  }

  inline ProjectionData& operator=(const ProjectionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionData& operator=(ProjectionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectionData& default_instance() {
    return *internal_default_instance();
  }
  enum DefinitionCase {
    kEpsg = 1,
    kProj4 = 2,
    kCustom = 3,
    kWkt = 4,
    DEFINITION_NOT_SET = 0,
  };

  static inline const ProjectionData* internal_default_instance() {
    return reinterpret_cast<const ProjectionData*>(
               &_ProjectionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProjectionData& a, ProjectionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectionData* New() const final {
    return CreateMaybeMessage<ProjectionData>(nullptr);
  }

  ProjectionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectionData& from);
  void MergeFrom(const ProjectionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.ProjectionData";
  }
  protected:
  explicit ProjectionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProjectionData_Custom Custom;

  typedef ProjectionData_CSType CSType;
  static constexpr CSType LAMBERT_AZI =
    ProjectionData_CSType_LAMBERT_AZI;
  static inline bool CSType_IsValid(int value) {
    return ProjectionData_CSType_IsValid(value);
  }
  static constexpr CSType CSType_MIN =
    ProjectionData_CSType_CSType_MIN;
  static constexpr CSType CSType_MAX =
    ProjectionData_CSType_CSType_MAX;
  static constexpr int CSType_ARRAYSIZE =
    ProjectionData_CSType_CSType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CSType_descriptor() {
    return ProjectionData_CSType_descriptor();
  }
  template<typename T>
  static inline const std::string& CSType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CSType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CSType_Name.");
    return ProjectionData_CSType_Name(enum_t_value);
  }
  static inline bool CSType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CSType* value) {
    return ProjectionData_CSType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 8,
    kTransformFieldNumber = 9,
    kGeometryFieldNumber = 10,
    kBboxFieldNumber = 11,
    kCentroidFieldNumber = 12,
    kEpsgFieldNumber = 1,
    kProj4FieldNumber = 2,
    kCustomFieldNumber = 3,
    kWktFieldNumber = 4,
  };
  // repeated uint32 shape = 8;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // repeated double transform = 9;
  int transform_size() const;
  private:
  int _internal_transform_size() const;
  public:
  void clear_transform();
  private:
  double _internal_transform(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_transform() const;
  void _internal_add_transform(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_transform();
  public:
  double transform(int index) const;
  void set_transform(int index, double value);
  void add_transform(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      transform() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_transform();

  // .epl.protobuf.v1.GeometryData geometry = 10;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::epl::protobuf::v1::GeometryData& geometry() const;
  ::epl::protobuf::v1::GeometryData* release_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::epl::protobuf::v1::GeometryData* geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_geometry();

  // .epl.protobuf.v1.EnvelopeData bbox = 11;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::epl::protobuf::v1::EnvelopeData& bbox() const;
  ::epl::protobuf::v1::EnvelopeData* release_bbox();
  ::epl::protobuf::v1::EnvelopeData* mutable_bbox();
  void set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_bbox() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::epl::protobuf::v1::EnvelopeData* bbox);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_bbox();

  // .epl.protobuf.v1.GeometryData centroid = 12;
  bool has_centroid() const;
  private:
  bool _internal_has_centroid() const;
  public:
  void clear_centroid();
  const ::epl::protobuf::v1::GeometryData& centroid() const;
  ::epl::protobuf::v1::GeometryData* release_centroid();
  ::epl::protobuf::v1::GeometryData* mutable_centroid();
  void set_allocated_centroid(::epl::protobuf::v1::GeometryData* centroid);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_centroid() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_centroid();
  public:
  void unsafe_arena_set_allocated_centroid(
      ::epl::protobuf::v1::GeometryData* centroid);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_centroid();

  // int32 epsg = 1;
  bool has_epsg() const;
  private:
  bool _internal_has_epsg() const;
  public:
  void clear_epsg();
  ::PROTOBUF_NAMESPACE_ID::int32 epsg() const;
  void set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsg() const;
  void _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string proj4 = 2;
  bool has_proj4() const;
  private:
  bool _internal_has_proj4() const;
  public:
  void clear_proj4();
  const std::string& proj4() const;
  void set_proj4(const std::string& value);
  void set_proj4(std::string&& value);
  void set_proj4(const char* value);
  void set_proj4(const char* value, size_t size);
  std::string* mutable_proj4();
  std::string* release_proj4();
  void set_allocated_proj4(std::string* proj4);
  private:
  const std::string& _internal_proj4() const;
  void _internal_set_proj4(const std::string& value);
  std::string* _internal_mutable_proj4();
  public:

  // .epl.protobuf.v1.ProjectionData.Custom custom = 3;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::epl::protobuf::v1::ProjectionData_Custom& custom() const;
  ::epl::protobuf::v1::ProjectionData_Custom* release_custom();
  ::epl::protobuf::v1::ProjectionData_Custom* mutable_custom();
  void set_allocated_custom(::epl::protobuf::v1::ProjectionData_Custom* custom);
  private:
  const ::epl::protobuf::v1::ProjectionData_Custom& _internal_custom() const;
  ::epl::protobuf::v1::ProjectionData_Custom* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::epl::protobuf::v1::ProjectionData_Custom* custom);
  ::epl::protobuf::v1::ProjectionData_Custom* unsafe_arena_release_custom();

  // string wkt = 4;
  bool has_wkt() const;
  private:
  bool _internal_has_wkt() const;
  public:
  void clear_wkt();
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);
  private:
  const std::string& _internal_wkt() const;
  void _internal_set_wkt(const std::string& value);
  std::string* _internal_mutable_wkt();
  public:

  void clear_definition();
  DefinitionCase definition_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.ProjectionData)
 private:
  class _Internal;
  void set_has_epsg();
  void set_has_proj4();
  void set_has_custom();
  void set_has_wkt();

  inline bool has_definition() const;
  inline void clear_has_definition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > transform_;
  mutable std::atomic<int> _transform_cached_byte_size_;
  ::epl::protobuf::v1::GeometryData* geometry_;
  ::epl::protobuf::v1::EnvelopeData* bbox_;
  ::epl::protobuf::v1::GeometryData* centroid_;
  union DefinitionUnion {
    constexpr DefinitionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 epsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proj4_;
    ::epl::protobuf::v1::ProjectionData_Custom* custom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
  } definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.EnvelopeData) */ {
 public:
  inline EnvelopeData() : EnvelopeData(nullptr) {}
  virtual ~EnvelopeData();
  explicit constexpr EnvelopeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvelopeData(const EnvelopeData& from);
  EnvelopeData(EnvelopeData&& from) noexcept
    : EnvelopeData() {
    *this = ::std::move(from);
  }

  inline EnvelopeData& operator=(const EnvelopeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeData& operator=(EnvelopeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvelopeData* internal_default_instance() {
    return reinterpret_cast<const EnvelopeData*>(
               &_EnvelopeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnvelopeData& a, EnvelopeData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeData* New() const final {
    return CreateMaybeMessage<EnvelopeData>(nullptr);
  }

  EnvelopeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeData& from);
  void MergeFrom(const EnvelopeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.EnvelopeData";
  }
  protected:
  explicit EnvelopeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjFieldNumber = 5,
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
    kZminFieldNumber = 6,
    kZmaxFieldNumber = 7,
  };
  // .epl.protobuf.v1.ProjectionData proj = 5;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  const ::epl::protobuf::v1::ProjectionData& proj() const;
  ::epl::protobuf::v1::ProjectionData* release_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_proj();
  void set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_proj();
  public:
  void unsafe_arena_set_allocated_proj(
      ::epl::protobuf::v1::ProjectionData* proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_proj();

  // double xmin = 1;
  void clear_xmin();
  double xmin() const;
  void set_xmin(double value);
  private:
  double _internal_xmin() const;
  void _internal_set_xmin(double value);
  public:

  // double ymin = 2;
  void clear_ymin();
  double ymin() const;
  void set_ymin(double value);
  private:
  double _internal_ymin() const;
  void _internal_set_ymin(double value);
  public:

  // double xmax = 3;
  void clear_xmax();
  double xmax() const;
  void set_xmax(double value);
  private:
  double _internal_xmax() const;
  void _internal_set_xmax(double value);
  public:

  // double ymax = 4;
  void clear_ymax();
  double ymax() const;
  void set_ymax(double value);
  private:
  double _internal_ymax() const;
  void _internal_set_ymax(double value);
  public:

  // double zmin = 6;
  void clear_zmin();
  double zmin() const;
  void set_zmin(double value);
  private:
  double _internal_zmin() const;
  void _internal_set_zmin(double value);
  public:

  // double zmax = 7;
  void clear_zmax();
  double zmax() const;
  void set_zmax(double value);
  private:
  double _internal_zmax() const;
  void _internal_set_zmax(double value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.EnvelopeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::epl::protobuf::v1::ProjectionData* proj_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  double zmin_;
  double zmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.GeometryRequest) */ {
 public:
  inline GeometryRequest() : GeometryRequest(nullptr) {}
  virtual ~GeometryRequest();
  explicit constexpr GeometryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeometryRequest(const GeometryRequest& from);
  GeometryRequest(GeometryRequest&& from) noexcept
    : GeometryRequest() {
    *this = ::std::move(from);
  }

  inline GeometryRequest& operator=(const GeometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest& operator=(GeometryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest& default_instance() {
    return *internal_default_instance();
  }
  enum LeftCase {
    kGeometry = 1,
    kLeftGeometry = 2,
    kGeometryRequest = 3,
    kLeftGeometryRequest = 4,
    LEFT_NOT_SET = 0,
  };

  enum RightCase {
    kRightGeometry = 5,
    kRightGeometryRequest = 6,
    RIGHT_NOT_SET = 0,
  };

  enum ParamsCase {
    kBufferParams = 11,
    kConvexParams = 12,
    kRelateParams = 13,
    kRandomPointsParams = 14,
    kGeneralizeParams = 15,
    kIntersectionParams = 16,
    kOffsetParams = 17,
    kCutParams = 18,
    kClipParams = 19,
    kDensifyParams = 20,
    kSimplifyParams = 21,
    kGeneralizeByAreaParams = 22,
    kAffineTransformParams = 23,
    kGeodeticBufferParams = 24,
    PARAMS_NOT_SET = 0,
  };

  static inline const GeometryRequest* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest*>(
               &_GeometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeometryRequest& a, GeometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest* New() const final {
    return CreateMaybeMessage<GeometryRequest>(nullptr);
  }

  GeometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest& from);
  void MergeFrom(const GeometryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.GeometryRequest";
  }
  protected:
  explicit GeometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationProjFieldNumber = 9,
    kResultProjFieldNumber = 10,
    kOperatorFieldNumber = 7,
    kResultEncodingFieldNumber = 8,
    kGeometryFieldNumber = 1,
    kLeftGeometryFieldNumber = 2,
    kGeometryRequestFieldNumber = 3,
    kLeftGeometryRequestFieldNumber = 4,
    kRightGeometryFieldNumber = 5,
    kRightGeometryRequestFieldNumber = 6,
    kBufferParamsFieldNumber = 11,
    kConvexParamsFieldNumber = 12,
    kRelateParamsFieldNumber = 13,
    kRandomPointsParamsFieldNumber = 14,
    kGeneralizeParamsFieldNumber = 15,
    kIntersectionParamsFieldNumber = 16,
    kOffsetParamsFieldNumber = 17,
    kCutParamsFieldNumber = 18,
    kClipParamsFieldNumber = 19,
    kDensifyParamsFieldNumber = 20,
    kSimplifyParamsFieldNumber = 21,
    kGeneralizeByAreaParamsFieldNumber = 22,
    kAffineTransformParamsFieldNumber = 23,
    kGeodeticBufferParamsFieldNumber = 24,
  };
  // .epl.protobuf.v1.ProjectionData operation_proj = 9;
  bool has_operation_proj() const;
  private:
  bool _internal_has_operation_proj() const;
  public:
  void clear_operation_proj();
  const ::epl::protobuf::v1::ProjectionData& operation_proj() const;
  ::epl::protobuf::v1::ProjectionData* release_operation_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_operation_proj();
  void set_allocated_operation_proj(::epl::protobuf::v1::ProjectionData* operation_proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_operation_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_operation_proj();
  public:
  void unsafe_arena_set_allocated_operation_proj(
      ::epl::protobuf::v1::ProjectionData* operation_proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_operation_proj();

  // .epl.protobuf.v1.ProjectionData result_proj = 10;
  bool has_result_proj() const;
  private:
  bool _internal_has_result_proj() const;
  public:
  void clear_result_proj();
  const ::epl::protobuf::v1::ProjectionData& result_proj() const;
  ::epl::protobuf::v1::ProjectionData* release_result_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_result_proj();
  void set_allocated_result_proj(::epl::protobuf::v1::ProjectionData* result_proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_result_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_result_proj();
  public:
  void unsafe_arena_set_allocated_result_proj(
      ::epl::protobuf::v1::ProjectionData* result_proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_result_proj();

  // .epl.protobuf.v1.OperatorType operator = 7;
  void clear_operator_();
  ::epl::protobuf::v1::OperatorType operator_() const;
  void set_operator_(::epl::protobuf::v1::OperatorType value);
  private:
  ::epl::protobuf::v1::OperatorType _internal_operator_() const;
  void _internal_set_operator_(::epl::protobuf::v1::OperatorType value);
  public:

  // .epl.protobuf.v1.Encoding result_encoding = 8;
  void clear_result_encoding();
  ::epl::protobuf::v1::Encoding result_encoding() const;
  void set_result_encoding(::epl::protobuf::v1::Encoding value);
  private:
  ::epl::protobuf::v1::Encoding _internal_result_encoding() const;
  void _internal_set_result_encoding(::epl::protobuf::v1::Encoding value);
  public:

  // .epl.protobuf.v1.GeometryData geometry = 1;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::epl::protobuf::v1::GeometryData& geometry() const;
  ::epl::protobuf::v1::GeometryData* release_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::epl::protobuf::v1::GeometryData* geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_geometry();

  // .epl.protobuf.v1.GeometryData left_geometry = 2;
  bool has_left_geometry() const;
  private:
  bool _internal_has_left_geometry() const;
  public:
  void clear_left_geometry();
  const ::epl::protobuf::v1::GeometryData& left_geometry() const;
  ::epl::protobuf::v1::GeometryData* release_left_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_left_geometry();
  void set_allocated_left_geometry(::epl::protobuf::v1::GeometryData* left_geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_left_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_left_geometry();
  public:
  void unsafe_arena_set_allocated_left_geometry(
      ::epl::protobuf::v1::GeometryData* left_geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_left_geometry();

  // .epl.protobuf.v1.GeometryRequest geometry_request = 3;
  bool has_geometry_request() const;
  private:
  bool _internal_has_geometry_request() const;
  public:
  void clear_geometry_request();
  const ::epl::protobuf::v1::GeometryRequest& geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* release_geometry_request();
  ::epl::protobuf::v1::GeometryRequest* mutable_geometry_request();
  void set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request);
  private:
  const ::epl::protobuf::v1::GeometryRequest& _internal_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* _internal_mutable_geometry_request();
  public:
  void unsafe_arena_set_allocated_geometry_request(
      ::epl::protobuf::v1::GeometryRequest* geometry_request);
  ::epl::protobuf::v1::GeometryRequest* unsafe_arena_release_geometry_request();

  // .epl.protobuf.v1.GeometryRequest left_geometry_request = 4;
  bool has_left_geometry_request() const;
  private:
  bool _internal_has_left_geometry_request() const;
  public:
  void clear_left_geometry_request();
  const ::epl::protobuf::v1::GeometryRequest& left_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* release_left_geometry_request();
  ::epl::protobuf::v1::GeometryRequest* mutable_left_geometry_request();
  void set_allocated_left_geometry_request(::epl::protobuf::v1::GeometryRequest* left_geometry_request);
  private:
  const ::epl::protobuf::v1::GeometryRequest& _internal_left_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* _internal_mutable_left_geometry_request();
  public:
  void unsafe_arena_set_allocated_left_geometry_request(
      ::epl::protobuf::v1::GeometryRequest* left_geometry_request);
  ::epl::protobuf::v1::GeometryRequest* unsafe_arena_release_left_geometry_request();

  // .epl.protobuf.v1.GeometryData right_geometry = 5;
  bool has_right_geometry() const;
  private:
  bool _internal_has_right_geometry() const;
  public:
  void clear_right_geometry();
  const ::epl::protobuf::v1::GeometryData& right_geometry() const;
  ::epl::protobuf::v1::GeometryData* release_right_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_right_geometry();
  void set_allocated_right_geometry(::epl::protobuf::v1::GeometryData* right_geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_right_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_right_geometry();
  public:
  void unsafe_arena_set_allocated_right_geometry(
      ::epl::protobuf::v1::GeometryData* right_geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_right_geometry();

  // .epl.protobuf.v1.GeometryRequest right_geometry_request = 6;
  bool has_right_geometry_request() const;
  private:
  bool _internal_has_right_geometry_request() const;
  public:
  void clear_right_geometry_request();
  const ::epl::protobuf::v1::GeometryRequest& right_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* release_right_geometry_request();
  ::epl::protobuf::v1::GeometryRequest* mutable_right_geometry_request();
  void set_allocated_right_geometry_request(::epl::protobuf::v1::GeometryRequest* right_geometry_request);
  private:
  const ::epl::protobuf::v1::GeometryRequest& _internal_right_geometry_request() const;
  ::epl::protobuf::v1::GeometryRequest* _internal_mutable_right_geometry_request();
  public:
  void unsafe_arena_set_allocated_right_geometry_request(
      ::epl::protobuf::v1::GeometryRequest* right_geometry_request);
  ::epl::protobuf::v1::GeometryRequest* unsafe_arena_release_right_geometry_request();

  // .epl.protobuf.v1.Params.Buffer buffer_params = 11;
  bool has_buffer_params() const;
  private:
  bool _internal_has_buffer_params() const;
  public:
  void clear_buffer_params();
  const ::epl::protobuf::v1::Params_Buffer& buffer_params() const;
  ::epl::protobuf::v1::Params_Buffer* release_buffer_params();
  ::epl::protobuf::v1::Params_Buffer* mutable_buffer_params();
  void set_allocated_buffer_params(::epl::protobuf::v1::Params_Buffer* buffer_params);
  private:
  const ::epl::protobuf::v1::Params_Buffer& _internal_buffer_params() const;
  ::epl::protobuf::v1::Params_Buffer* _internal_mutable_buffer_params();
  public:
  void unsafe_arena_set_allocated_buffer_params(
      ::epl::protobuf::v1::Params_Buffer* buffer_params);
  ::epl::protobuf::v1::Params_Buffer* unsafe_arena_release_buffer_params();

  // .epl.protobuf.v1.Params.Convex convex_params = 12;
  bool has_convex_params() const;
  private:
  bool _internal_has_convex_params() const;
  public:
  void clear_convex_params();
  const ::epl::protobuf::v1::Params_Convex& convex_params() const;
  ::epl::protobuf::v1::Params_Convex* release_convex_params();
  ::epl::protobuf::v1::Params_Convex* mutable_convex_params();
  void set_allocated_convex_params(::epl::protobuf::v1::Params_Convex* convex_params);
  private:
  const ::epl::protobuf::v1::Params_Convex& _internal_convex_params() const;
  ::epl::protobuf::v1::Params_Convex* _internal_mutable_convex_params();
  public:
  void unsafe_arena_set_allocated_convex_params(
      ::epl::protobuf::v1::Params_Convex* convex_params);
  ::epl::protobuf::v1::Params_Convex* unsafe_arena_release_convex_params();

  // .epl.protobuf.v1.Params.Relate relate_params = 13;
  bool has_relate_params() const;
  private:
  bool _internal_has_relate_params() const;
  public:
  void clear_relate_params();
  const ::epl::protobuf::v1::Params_Relate& relate_params() const;
  ::epl::protobuf::v1::Params_Relate* release_relate_params();
  ::epl::protobuf::v1::Params_Relate* mutable_relate_params();
  void set_allocated_relate_params(::epl::protobuf::v1::Params_Relate* relate_params);
  private:
  const ::epl::protobuf::v1::Params_Relate& _internal_relate_params() const;
  ::epl::protobuf::v1::Params_Relate* _internal_mutable_relate_params();
  public:
  void unsafe_arena_set_allocated_relate_params(
      ::epl::protobuf::v1::Params_Relate* relate_params);
  ::epl::protobuf::v1::Params_Relate* unsafe_arena_release_relate_params();

  // .epl.protobuf.v1.Params.RandomPoints random_points_params = 14;
  bool has_random_points_params() const;
  private:
  bool _internal_has_random_points_params() const;
  public:
  void clear_random_points_params();
  const ::epl::protobuf::v1::Params_RandomPoints& random_points_params() const;
  ::epl::protobuf::v1::Params_RandomPoints* release_random_points_params();
  ::epl::protobuf::v1::Params_RandomPoints* mutable_random_points_params();
  void set_allocated_random_points_params(::epl::protobuf::v1::Params_RandomPoints* random_points_params);
  private:
  const ::epl::protobuf::v1::Params_RandomPoints& _internal_random_points_params() const;
  ::epl::protobuf::v1::Params_RandomPoints* _internal_mutable_random_points_params();
  public:
  void unsafe_arena_set_allocated_random_points_params(
      ::epl::protobuf::v1::Params_RandomPoints* random_points_params);
  ::epl::protobuf::v1::Params_RandomPoints* unsafe_arena_release_random_points_params();

  // .epl.protobuf.v1.Params.Generalize generalize_params = 15;
  bool has_generalize_params() const;
  private:
  bool _internal_has_generalize_params() const;
  public:
  void clear_generalize_params();
  const ::epl::protobuf::v1::Params_Generalize& generalize_params() const;
  ::epl::protobuf::v1::Params_Generalize* release_generalize_params();
  ::epl::protobuf::v1::Params_Generalize* mutable_generalize_params();
  void set_allocated_generalize_params(::epl::protobuf::v1::Params_Generalize* generalize_params);
  private:
  const ::epl::protobuf::v1::Params_Generalize& _internal_generalize_params() const;
  ::epl::protobuf::v1::Params_Generalize* _internal_mutable_generalize_params();
  public:
  void unsafe_arena_set_allocated_generalize_params(
      ::epl::protobuf::v1::Params_Generalize* generalize_params);
  ::epl::protobuf::v1::Params_Generalize* unsafe_arena_release_generalize_params();

  // .epl.protobuf.v1.Params.Intersection intersection_params = 16;
  bool has_intersection_params() const;
  private:
  bool _internal_has_intersection_params() const;
  public:
  void clear_intersection_params();
  const ::epl::protobuf::v1::Params_Intersection& intersection_params() const;
  ::epl::protobuf::v1::Params_Intersection* release_intersection_params();
  ::epl::protobuf::v1::Params_Intersection* mutable_intersection_params();
  void set_allocated_intersection_params(::epl::protobuf::v1::Params_Intersection* intersection_params);
  private:
  const ::epl::protobuf::v1::Params_Intersection& _internal_intersection_params() const;
  ::epl::protobuf::v1::Params_Intersection* _internal_mutable_intersection_params();
  public:
  void unsafe_arena_set_allocated_intersection_params(
      ::epl::protobuf::v1::Params_Intersection* intersection_params);
  ::epl::protobuf::v1::Params_Intersection* unsafe_arena_release_intersection_params();

  // .epl.protobuf.v1.Params.Offset offset_params = 17;
  bool has_offset_params() const;
  private:
  bool _internal_has_offset_params() const;
  public:
  void clear_offset_params();
  const ::epl::protobuf::v1::Params_Offset& offset_params() const;
  ::epl::protobuf::v1::Params_Offset* release_offset_params();
  ::epl::protobuf::v1::Params_Offset* mutable_offset_params();
  void set_allocated_offset_params(::epl::protobuf::v1::Params_Offset* offset_params);
  private:
  const ::epl::protobuf::v1::Params_Offset& _internal_offset_params() const;
  ::epl::protobuf::v1::Params_Offset* _internal_mutable_offset_params();
  public:
  void unsafe_arena_set_allocated_offset_params(
      ::epl::protobuf::v1::Params_Offset* offset_params);
  ::epl::protobuf::v1::Params_Offset* unsafe_arena_release_offset_params();

  // .epl.protobuf.v1.Params.Cut cut_params = 18;
  bool has_cut_params() const;
  private:
  bool _internal_has_cut_params() const;
  public:
  void clear_cut_params();
  const ::epl::protobuf::v1::Params_Cut& cut_params() const;
  ::epl::protobuf::v1::Params_Cut* release_cut_params();
  ::epl::protobuf::v1::Params_Cut* mutable_cut_params();
  void set_allocated_cut_params(::epl::protobuf::v1::Params_Cut* cut_params);
  private:
  const ::epl::protobuf::v1::Params_Cut& _internal_cut_params() const;
  ::epl::protobuf::v1::Params_Cut* _internal_mutable_cut_params();
  public:
  void unsafe_arena_set_allocated_cut_params(
      ::epl::protobuf::v1::Params_Cut* cut_params);
  ::epl::protobuf::v1::Params_Cut* unsafe_arena_release_cut_params();

  // .epl.protobuf.v1.Params.Clip clip_params = 19;
  bool has_clip_params() const;
  private:
  bool _internal_has_clip_params() const;
  public:
  void clear_clip_params();
  const ::epl::protobuf::v1::Params_Clip& clip_params() const;
  ::epl::protobuf::v1::Params_Clip* release_clip_params();
  ::epl::protobuf::v1::Params_Clip* mutable_clip_params();
  void set_allocated_clip_params(::epl::protobuf::v1::Params_Clip* clip_params);
  private:
  const ::epl::protobuf::v1::Params_Clip& _internal_clip_params() const;
  ::epl::protobuf::v1::Params_Clip* _internal_mutable_clip_params();
  public:
  void unsafe_arena_set_allocated_clip_params(
      ::epl::protobuf::v1::Params_Clip* clip_params);
  ::epl::protobuf::v1::Params_Clip* unsafe_arena_release_clip_params();

  // .epl.protobuf.v1.Params.Densify densify_params = 20;
  bool has_densify_params() const;
  private:
  bool _internal_has_densify_params() const;
  public:
  void clear_densify_params();
  const ::epl::protobuf::v1::Params_Densify& densify_params() const;
  ::epl::protobuf::v1::Params_Densify* release_densify_params();
  ::epl::protobuf::v1::Params_Densify* mutable_densify_params();
  void set_allocated_densify_params(::epl::protobuf::v1::Params_Densify* densify_params);
  private:
  const ::epl::protobuf::v1::Params_Densify& _internal_densify_params() const;
  ::epl::protobuf::v1::Params_Densify* _internal_mutable_densify_params();
  public:
  void unsafe_arena_set_allocated_densify_params(
      ::epl::protobuf::v1::Params_Densify* densify_params);
  ::epl::protobuf::v1::Params_Densify* unsafe_arena_release_densify_params();

  // .epl.protobuf.v1.Params.Simplify simplify_params = 21;
  bool has_simplify_params() const;
  private:
  bool _internal_has_simplify_params() const;
  public:
  void clear_simplify_params();
  const ::epl::protobuf::v1::Params_Simplify& simplify_params() const;
  ::epl::protobuf::v1::Params_Simplify* release_simplify_params();
  ::epl::protobuf::v1::Params_Simplify* mutable_simplify_params();
  void set_allocated_simplify_params(::epl::protobuf::v1::Params_Simplify* simplify_params);
  private:
  const ::epl::protobuf::v1::Params_Simplify& _internal_simplify_params() const;
  ::epl::protobuf::v1::Params_Simplify* _internal_mutable_simplify_params();
  public:
  void unsafe_arena_set_allocated_simplify_params(
      ::epl::protobuf::v1::Params_Simplify* simplify_params);
  ::epl::protobuf::v1::Params_Simplify* unsafe_arena_release_simplify_params();

  // .epl.protobuf.v1.Params.GeneralizeByArea generalize_by_area_params = 22;
  bool has_generalize_by_area_params() const;
  private:
  bool _internal_has_generalize_by_area_params() const;
  public:
  void clear_generalize_by_area_params();
  const ::epl::protobuf::v1::Params_GeneralizeByArea& generalize_by_area_params() const;
  ::epl::protobuf::v1::Params_GeneralizeByArea* release_generalize_by_area_params();
  ::epl::protobuf::v1::Params_GeneralizeByArea* mutable_generalize_by_area_params();
  void set_allocated_generalize_by_area_params(::epl::protobuf::v1::Params_GeneralizeByArea* generalize_by_area_params);
  private:
  const ::epl::protobuf::v1::Params_GeneralizeByArea& _internal_generalize_by_area_params() const;
  ::epl::protobuf::v1::Params_GeneralizeByArea* _internal_mutable_generalize_by_area_params();
  public:
  void unsafe_arena_set_allocated_generalize_by_area_params(
      ::epl::protobuf::v1::Params_GeneralizeByArea* generalize_by_area_params);
  ::epl::protobuf::v1::Params_GeneralizeByArea* unsafe_arena_release_generalize_by_area_params();

  // .epl.protobuf.v1.Params.AffineTransform affine_transform_params = 23;
  bool has_affine_transform_params() const;
  private:
  bool _internal_has_affine_transform_params() const;
  public:
  void clear_affine_transform_params();
  const ::epl::protobuf::v1::Params_AffineTransform& affine_transform_params() const;
  ::epl::protobuf::v1::Params_AffineTransform* release_affine_transform_params();
  ::epl::protobuf::v1::Params_AffineTransform* mutable_affine_transform_params();
  void set_allocated_affine_transform_params(::epl::protobuf::v1::Params_AffineTransform* affine_transform_params);
  private:
  const ::epl::protobuf::v1::Params_AffineTransform& _internal_affine_transform_params() const;
  ::epl::protobuf::v1::Params_AffineTransform* _internal_mutable_affine_transform_params();
  public:
  void unsafe_arena_set_allocated_affine_transform_params(
      ::epl::protobuf::v1::Params_AffineTransform* affine_transform_params);
  ::epl::protobuf::v1::Params_AffineTransform* unsafe_arena_release_affine_transform_params();

  // .epl.protobuf.v1.Params.GeodeticBuffer geodetic_buffer_params = 24;
  bool has_geodetic_buffer_params() const;
  private:
  bool _internal_has_geodetic_buffer_params() const;
  public:
  void clear_geodetic_buffer_params();
  const ::epl::protobuf::v1::Params_GeodeticBuffer& geodetic_buffer_params() const;
  ::epl::protobuf::v1::Params_GeodeticBuffer* release_geodetic_buffer_params();
  ::epl::protobuf::v1::Params_GeodeticBuffer* mutable_geodetic_buffer_params();
  void set_allocated_geodetic_buffer_params(::epl::protobuf::v1::Params_GeodeticBuffer* geodetic_buffer_params);
  private:
  const ::epl::protobuf::v1::Params_GeodeticBuffer& _internal_geodetic_buffer_params() const;
  ::epl::protobuf::v1::Params_GeodeticBuffer* _internal_mutable_geodetic_buffer_params();
  public:
  void unsafe_arena_set_allocated_geodetic_buffer_params(
      ::epl::protobuf::v1::Params_GeodeticBuffer* geodetic_buffer_params);
  ::epl::protobuf::v1::Params_GeodeticBuffer* unsafe_arena_release_geodetic_buffer_params();

  void clear_left();
  LeftCase left_case() const;
  void clear_right();
  RightCase right_case() const;
  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.GeometryRequest)
 private:
  class _Internal;
  void set_has_geometry();
  void set_has_left_geometry();
  void set_has_geometry_request();
  void set_has_left_geometry_request();
  void set_has_right_geometry();
  void set_has_right_geometry_request();
  void set_has_buffer_params();
  void set_has_convex_params();
  void set_has_relate_params();
  void set_has_random_points_params();
  void set_has_generalize_params();
  void set_has_intersection_params();
  void set_has_offset_params();
  void set_has_cut_params();
  void set_has_clip_params();
  void set_has_densify_params();
  void set_has_simplify_params();
  void set_has_generalize_by_area_params();
  void set_has_affine_transform_params();
  void set_has_geodetic_buffer_params();

  inline bool has_left() const;
  inline void clear_has_left();

  inline bool has_right() const;
  inline void clear_has_right();

  inline bool has_params() const;
  inline void clear_has_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::epl::protobuf::v1::ProjectionData* operation_proj_;
  ::epl::protobuf::v1::ProjectionData* result_proj_;
  int operator__;
  int result_encoding_;
  union LeftUnion {
    constexpr LeftUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::GeometryData* geometry_;
    ::epl::protobuf::v1::GeometryData* left_geometry_;
    ::epl::protobuf::v1::GeometryRequest* geometry_request_;
    ::epl::protobuf::v1::GeometryRequest* left_geometry_request_;
  } left_;
  union RightUnion {
    constexpr RightUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::GeometryData* right_geometry_;
    ::epl::protobuf::v1::GeometryRequest* right_geometry_request_;
  } right_;
  union ParamsUnion {
    constexpr ParamsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::Params_Buffer* buffer_params_;
    ::epl::protobuf::v1::Params_Convex* convex_params_;
    ::epl::protobuf::v1::Params_Relate* relate_params_;
    ::epl::protobuf::v1::Params_RandomPoints* random_points_params_;
    ::epl::protobuf::v1::Params_Generalize* generalize_params_;
    ::epl::protobuf::v1::Params_Intersection* intersection_params_;
    ::epl::protobuf::v1::Params_Offset* offset_params_;
    ::epl::protobuf::v1::Params_Cut* cut_params_;
    ::epl::protobuf::v1::Params_Clip* clip_params_;
    ::epl::protobuf::v1::Params_Densify* densify_params_;
    ::epl::protobuf::v1::Params_Simplify* simplify_params_;
    ::epl::protobuf::v1::Params_GeneralizeByArea* generalize_by_area_params_;
    ::epl::protobuf::v1::Params_AffineTransform* affine_transform_params_;
    ::epl::protobuf::v1::Params_GeodeticBuffer* geodetic_buffer_params_;
  } params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeodeticInverse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.GeodeticInverse) */ {
 public:
  inline GeodeticInverse() : GeodeticInverse(nullptr) {}
  virtual ~GeodeticInverse();
  explicit constexpr GeodeticInverse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeodeticInverse(const GeodeticInverse& from);
  GeodeticInverse(GeodeticInverse&& from) noexcept
    : GeodeticInverse() {
    *this = ::std::move(from);
  }

  inline GeodeticInverse& operator=(const GeodeticInverse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeodeticInverse& operator=(GeodeticInverse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeodeticInverse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeodeticInverse* internal_default_instance() {
    return reinterpret_cast<const GeodeticInverse*>(
               &_GeodeticInverse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GeodeticInverse& a, GeodeticInverse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeodeticInverse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeodeticInverse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeodeticInverse* New() const final {
    return CreateMaybeMessage<GeodeticInverse>(nullptr);
  }

  GeodeticInverse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeodeticInverse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeodeticInverse& from);
  void MergeFrom(const GeodeticInverse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeodeticInverse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.GeodeticInverse";
  }
  protected:
  explicit GeodeticInverse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAz12FieldNumber = 1,
    kAz21FieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // double az12 = 1;
  void clear_az12();
  double az12() const;
  void set_az12(double value);
  private:
  double _internal_az12() const;
  void _internal_set_az12(double value);
  public:

  // double az21 = 2;
  void clear_az21();
  double az21() const;
  void set_az21(double value);
  private:
  double _internal_az21() const;
  void _internal_set_az21(double value);
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.GeodeticInverse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double az12_;
  double az21_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryResponse_RelateMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GeometryResponse_RelateMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GeometryResponse_RelateMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  GeometryResponse_RelateMapEntry_DoNotUse();
  explicit constexpr GeometryResponse_RelateMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GeometryResponse_RelateMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GeometryResponse_RelateMapEntry_DoNotUse& other);
  static const GeometryResponse_RelateMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GeometryResponse_RelateMapEntry_DoNotUse*>(&_GeometryResponse_RelateMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class GeometryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.GeometryResponse) */ {
 public:
  inline GeometryResponse() : GeometryResponse(nullptr) {}
  virtual ~GeometryResponse();
  explicit constexpr GeometryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeometryResponse(const GeometryResponse& from);
  GeometryResponse(GeometryResponse&& from) noexcept
    : GeometryResponse() {
    *this = ::std::move(from);
  }

  inline GeometryResponse& operator=(const GeometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryResponse& operator=(GeometryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kGeometry = 1,
    kSpatialRelationship = 2,
    kMeasure = 3,
    kGeodeticInverse = 4,
    RESULT_NOT_SET = 0,
  };

  static inline const GeometryResponse* internal_default_instance() {
    return reinterpret_cast<const GeometryResponse*>(
               &_GeometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GeometryResponse& a, GeometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryResponse* New() const final {
    return CreateMaybeMessage<GeometryResponse>(nullptr);
  }

  GeometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryResponse& from);
  void MergeFrom(const GeometryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.GeometryResponse";
  }
  protected:
  explicit GeometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRelateMapFieldNumber = 5,
    kGeometryFieldNumber = 1,
    kSpatialRelationshipFieldNumber = 2,
    kMeasureFieldNumber = 3,
    kGeodeticInverseFieldNumber = 4,
  };
  // map<int64, bool> relate_map = 5;
  int relate_map_size() const;
  private:
  int _internal_relate_map_size() const;
  public:
  void clear_relate_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
      _internal_relate_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
      _internal_mutable_relate_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
      relate_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
      mutable_relate_map();

  // .epl.protobuf.v1.GeometryData geometry = 1;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::epl::protobuf::v1::GeometryData& geometry() const;
  ::epl::protobuf::v1::GeometryData* release_geometry();
  ::epl::protobuf::v1::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry);
  private:
  const ::epl::protobuf::v1::GeometryData& _internal_geometry() const;
  ::epl::protobuf::v1::GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::epl::protobuf::v1::GeometryData* geometry);
  ::epl::protobuf::v1::GeometryData* unsafe_arena_release_geometry();

  // bool spatial_relationship = 2;
  bool has_spatial_relationship() const;
  private:
  bool _internal_has_spatial_relationship() const;
  public:
  void clear_spatial_relationship();
  bool spatial_relationship() const;
  void set_spatial_relationship(bool value);
  private:
  bool _internal_spatial_relationship() const;
  void _internal_set_spatial_relationship(bool value);
  public:

  // double measure = 3;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  double measure() const;
  void set_measure(double value);
  private:
  double _internal_measure() const;
  void _internal_set_measure(double value);
  public:

  // .epl.protobuf.v1.GeodeticInverse geodetic_inverse = 4;
  bool has_geodetic_inverse() const;
  private:
  bool _internal_has_geodetic_inverse() const;
  public:
  void clear_geodetic_inverse();
  const ::epl::protobuf::v1::GeodeticInverse& geodetic_inverse() const;
  ::epl::protobuf::v1::GeodeticInverse* release_geodetic_inverse();
  ::epl::protobuf::v1::GeodeticInverse* mutable_geodetic_inverse();
  void set_allocated_geodetic_inverse(::epl::protobuf::v1::GeodeticInverse* geodetic_inverse);
  private:
  const ::epl::protobuf::v1::GeodeticInverse& _internal_geodetic_inverse() const;
  ::epl::protobuf::v1::GeodeticInverse* _internal_mutable_geodetic_inverse();
  public:
  void unsafe_arena_set_allocated_geodetic_inverse(
      ::epl::protobuf::v1::GeodeticInverse* geodetic_inverse);
  ::epl::protobuf::v1::GeodeticInverse* unsafe_arena_release_geodetic_inverse();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.GeometryResponse)
 private:
  class _Internal;
  void set_has_geometry();
  void set_has_spatial_relationship();
  void set_has_measure();
  void set_has_geodetic_inverse();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GeometryResponse_RelateMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> relate_map_;
  union ResultUnion {
    constexpr ResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::epl::protobuf::v1::GeometryData* geometry_;
    bool spatial_relationship_;
    double measure_;
    ::epl::protobuf::v1::GeodeticInverse* geodetic_inverse_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class FileRequestChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.FileRequestChunk) */ {
 public:
  inline FileRequestChunk() : FileRequestChunk(nullptr) {}
  virtual ~FileRequestChunk();
  explicit constexpr FileRequestChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileRequestChunk(const FileRequestChunk& from);
  FileRequestChunk(FileRequestChunk&& from) noexcept
    : FileRequestChunk() {
    *this = ::std::move(from);
  }

  inline FileRequestChunk& operator=(const FileRequestChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequestChunk& operator=(FileRequestChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileRequestChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRequestChunk* internal_default_instance() {
    return reinterpret_cast<const FileRequestChunk*>(
               &_FileRequestChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileRequestChunk& a, FileRequestChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRequestChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequestChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileRequestChunk* New() const final {
    return CreateMaybeMessage<FileRequestChunk>(nullptr);
  }

  FileRequestChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileRequestChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileRequestChunk& from);
  void MergeFrom(const FileRequestChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequestChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.FileRequestChunk";
  }
  protected:
  explicit FileRequestChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileRequestChunk_FileType FileType;
  static constexpr FileType SHAPEFILE =
    FileRequestChunk_FileType_SHAPEFILE;
  static inline bool FileType_IsValid(int value) {
    return FileRequestChunk_FileType_IsValid(value);
  }
  static constexpr FileType FileType_MIN =
    FileRequestChunk_FileType_FileType_MIN;
  static constexpr FileType FileType_MAX =
    FileRequestChunk_FileType_FileType_MAX;
  static constexpr int FileType_ARRAYSIZE =
    FileRequestChunk_FileType_FileType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileType_descriptor() {
    return FileRequestChunk_FileType_descriptor();
  }
  template<typename T>
  static inline const std::string& FileType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileType_Name.");
    return FileRequestChunk_FileType_Name(enum_t_value);
  }
  static inline bool FileType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FileType* value) {
    return FileRequestChunk_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kFileNameFieldNumber = 9,
    kNestedRequestFieldNumber = 1,
    kInputProjFieldNumber = 3,
    kResultProjFieldNumber = 5,
    kResultEncodingTypeFieldNumber = 2,
    kIsLastChunkFieldNumber = 10,
    kSizeFieldNumber = 7,
    kOffsetFieldNumber = 8,
  };
  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string file_name = 9;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .epl.protobuf.v1.GeometryRequest nested_request = 1;
  bool has_nested_request() const;
  private:
  bool _internal_has_nested_request() const;
  public:
  void clear_nested_request();
  const ::epl::protobuf::v1::GeometryRequest& nested_request() const;
  ::epl::protobuf::v1::GeometryRequest* release_nested_request();
  ::epl::protobuf::v1::GeometryRequest* mutable_nested_request();
  void set_allocated_nested_request(::epl::protobuf::v1::GeometryRequest* nested_request);
  private:
  const ::epl::protobuf::v1::GeometryRequest& _internal_nested_request() const;
  ::epl::protobuf::v1::GeometryRequest* _internal_mutable_nested_request();
  public:
  void unsafe_arena_set_allocated_nested_request(
      ::epl::protobuf::v1::GeometryRequest* nested_request);
  ::epl::protobuf::v1::GeometryRequest* unsafe_arena_release_nested_request();

  // .epl.protobuf.v1.ProjectionData input_proj = 3;
  bool has_input_proj() const;
  private:
  bool _internal_has_input_proj() const;
  public:
  void clear_input_proj();
  const ::epl::protobuf::v1::ProjectionData& input_proj() const;
  ::epl::protobuf::v1::ProjectionData* release_input_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_input_proj();
  void set_allocated_input_proj(::epl::protobuf::v1::ProjectionData* input_proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_input_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_input_proj();
  public:
  void unsafe_arena_set_allocated_input_proj(
      ::epl::protobuf::v1::ProjectionData* input_proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_input_proj();

  // .epl.protobuf.v1.ProjectionData result_proj = 5;
  bool has_result_proj() const;
  private:
  bool _internal_has_result_proj() const;
  public:
  void clear_result_proj();
  const ::epl::protobuf::v1::ProjectionData& result_proj() const;
  ::epl::protobuf::v1::ProjectionData* release_result_proj();
  ::epl::protobuf::v1::ProjectionData* mutable_result_proj();
  void set_allocated_result_proj(::epl::protobuf::v1::ProjectionData* result_proj);
  private:
  const ::epl::protobuf::v1::ProjectionData& _internal_result_proj() const;
  ::epl::protobuf::v1::ProjectionData* _internal_mutable_result_proj();
  public:
  void unsafe_arena_set_allocated_result_proj(
      ::epl::protobuf::v1::ProjectionData* result_proj);
  ::epl::protobuf::v1::ProjectionData* unsafe_arena_release_result_proj();

  // .epl.protobuf.v1.Encoding result_encoding_type = 2;
  void clear_result_encoding_type();
  ::epl::protobuf::v1::Encoding result_encoding_type() const;
  void set_result_encoding_type(::epl::protobuf::v1::Encoding value);
  private:
  ::epl::protobuf::v1::Encoding _internal_result_encoding_type() const;
  void _internal_set_result_encoding_type(::epl::protobuf::v1::Encoding value);
  public:

  // bool is_last_chunk = 10;
  void clear_is_last_chunk();
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);
  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);
  public:

  // int64 size = 7;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 8;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.FileRequestChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::epl::protobuf::v1::GeometryRequest* nested_request_;
  ::epl::protobuf::v1::ProjectionData* input_proj_;
  ::epl::protobuf::v1::ProjectionData* result_proj_;
  int result_encoding_type_;
  bool is_last_chunk_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Buffer) */ {
 public:
  inline Params_Buffer() : Params_Buffer(nullptr) {}
  virtual ~Params_Buffer();
  explicit constexpr Params_Buffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Buffer(const Params_Buffer& from);
  Params_Buffer(Params_Buffer&& from) noexcept
    : Params_Buffer() {
    *this = ::std::move(from);
  }

  inline Params_Buffer& operator=(const Params_Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Buffer& operator=(Params_Buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Buffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Buffer* internal_default_instance() {
    return reinterpret_cast<const Params_Buffer*>(
               &_Params_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Params_Buffer& a, Params_Buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Buffer* New() const final {
    return CreateMaybeMessage<Params_Buffer>(nullptr);
  }

  Params_Buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Buffer& from);
  void MergeFrom(const Params_Buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Buffer";
  }
  protected:
  explicit Params_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kMaxDeviationFieldNumber = 2,
    kUnionResultFieldNumber = 3,
    kMaxVerticesInFullCircleFieldNumber = 4,
  };
  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // double max_deviation = 2;
  void clear_max_deviation();
  double max_deviation() const;
  void set_max_deviation(double value);
  private:
  double _internal_max_deviation() const;
  void _internal_set_max_deviation(double value);
  public:

  // bool union_result = 3;
  void clear_union_result();
  bool union_result() const;
  void set_union_result(bool value);
  private:
  bool _internal_union_result() const;
  void _internal_set_union_result(bool value);
  public:

  // int32 max_vertices_in_full_circle = 4;
  void clear_max_vertices_in_full_circle();
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle() const;
  void set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_vertices_in_full_circle() const;
  void _internal_set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double distance_;
  double max_deviation_;
  bool union_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_GeodeticBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.GeodeticBuffer) */ {
 public:
  inline Params_GeodeticBuffer() : Params_GeodeticBuffer(nullptr) {}
  virtual ~Params_GeodeticBuffer();
  explicit constexpr Params_GeodeticBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_GeodeticBuffer(const Params_GeodeticBuffer& from);
  Params_GeodeticBuffer(Params_GeodeticBuffer&& from) noexcept
    : Params_GeodeticBuffer() {
    *this = ::std::move(from);
  }

  inline Params_GeodeticBuffer& operator=(const Params_GeodeticBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_GeodeticBuffer& operator=(Params_GeodeticBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_GeodeticBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_GeodeticBuffer* internal_default_instance() {
    return reinterpret_cast<const Params_GeodeticBuffer*>(
               &_Params_GeodeticBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Params_GeodeticBuffer& a, Params_GeodeticBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_GeodeticBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_GeodeticBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_GeodeticBuffer* New() const final {
    return CreateMaybeMessage<Params_GeodeticBuffer>(nullptr);
  }

  Params_GeodeticBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_GeodeticBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_GeodeticBuffer& from);
  void MergeFrom(const Params_GeodeticBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_GeodeticBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.GeodeticBuffer";
  }
  protected:
  explicit Params_GeodeticBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kMaxDeviationFieldNumber = 2,
    kUnionResultFieldNumber = 3,
    kMaxVerticesInFullCircleFieldNumber = 4,
  };
  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // double max_deviation = 2;
  void clear_max_deviation();
  double max_deviation() const;
  void set_max_deviation(double value);
  private:
  double _internal_max_deviation() const;
  void _internal_set_max_deviation(double value);
  public:

  // bool union_result = 3;
  void clear_union_result();
  bool union_result() const;
  void set_union_result(bool value);
  private:
  bool _internal_union_result() const;
  void _internal_set_union_result(bool value);
  public:

  // int32 max_vertices_in_full_circle = 4;
  void clear_max_vertices_in_full_circle();
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle() const;
  void set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_vertices_in_full_circle() const;
  void _internal_set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.GeodeticBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double distance_;
  double max_deviation_;
  bool union_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Convex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Convex) */ {
 public:
  inline Params_Convex() : Params_Convex(nullptr) {}
  virtual ~Params_Convex();
  explicit constexpr Params_Convex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Convex(const Params_Convex& from);
  Params_Convex(Params_Convex&& from) noexcept
    : Params_Convex() {
    *this = ::std::move(from);
  }

  inline Params_Convex& operator=(const Params_Convex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Convex& operator=(Params_Convex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Convex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Convex* internal_default_instance() {
    return reinterpret_cast<const Params_Convex*>(
               &_Params_Convex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Params_Convex& a, Params_Convex& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Convex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Convex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Convex* New() const final {
    return CreateMaybeMessage<Params_Convex>(nullptr);
  }

  Params_Convex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Convex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Convex& from);
  void MergeFrom(const Params_Convex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Convex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Convex";
  }
  protected:
  explicit Params_Convex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeFieldNumber = 1,
  };
  // bool merge = 1;
  void clear_merge();
  bool merge() const;
  void set_merge(bool value);
  private:
  bool _internal_merge() const;
  void _internal_set_merge(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Convex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool merge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Relate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Relate) */ {
 public:
  inline Params_Relate() : Params_Relate(nullptr) {}
  virtual ~Params_Relate();
  explicit constexpr Params_Relate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Relate(const Params_Relate& from);
  Params_Relate(Params_Relate&& from) noexcept
    : Params_Relate() {
    *this = ::std::move(from);
  }

  inline Params_Relate& operator=(const Params_Relate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Relate& operator=(Params_Relate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Relate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Relate* internal_default_instance() {
    return reinterpret_cast<const Params_Relate*>(
               &_Params_Relate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Params_Relate& a, Params_Relate& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Relate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Relate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Relate* New() const final {
    return CreateMaybeMessage<Params_Relate>(nullptr);
  }

  Params_Relate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Relate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Relate& from);
  void MergeFrom(const Params_Relate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Relate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Relate";
  }
  protected:
  explicit Params_Relate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDe9ImFieldNumber = 1,
  };
  // string de_9im = 1;
  void clear_de_9im();
  const std::string& de_9im() const;
  void set_de_9im(const std::string& value);
  void set_de_9im(std::string&& value);
  void set_de_9im(const char* value);
  void set_de_9im(const char* value, size_t size);
  std::string* mutable_de_9im();
  std::string* release_de_9im();
  void set_allocated_de_9im(std::string* de_9im);
  private:
  const std::string& _internal_de_9im() const;
  void _internal_set_de_9im(const std::string& value);
  std::string* _internal_mutable_de_9im();
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Relate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr de_9im_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_RandomPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.RandomPoints) */ {
 public:
  inline Params_RandomPoints() : Params_RandomPoints(nullptr) {}
  virtual ~Params_RandomPoints();
  explicit constexpr Params_RandomPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_RandomPoints(const Params_RandomPoints& from);
  Params_RandomPoints(Params_RandomPoints&& from) noexcept
    : Params_RandomPoints() {
    *this = ::std::move(from);
  }

  inline Params_RandomPoints& operator=(const Params_RandomPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_RandomPoints& operator=(Params_RandomPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_RandomPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_RandomPoints* internal_default_instance() {
    return reinterpret_cast<const Params_RandomPoints*>(
               &_Params_RandomPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Params_RandomPoints& a, Params_RandomPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_RandomPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_RandomPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_RandomPoints* New() const final {
    return CreateMaybeMessage<Params_RandomPoints>(nullptr);
  }

  Params_RandomPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_RandomPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_RandomPoints& from);
  void MergeFrom(const Params_RandomPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_RandomPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.RandomPoints";
  }
  protected:
  explicit Params_RandomPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsPerSquareKmFieldNumber = 1,
    kSeedFieldNumber = 2,
  };
  // double points_per_square_km = 1;
  void clear_points_per_square_km();
  double points_per_square_km() const;
  void set_points_per_square_km(double value);
  private:
  double _internal_points_per_square_km() const;
  void _internal_set_points_per_square_km(double value);
  public:

  // int64 seed = 2;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.RandomPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double points_per_square_km_;
  ::PROTOBUF_NAMESPACE_ID::int64 seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Generalize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Generalize) */ {
 public:
  inline Params_Generalize() : Params_Generalize(nullptr) {}
  virtual ~Params_Generalize();
  explicit constexpr Params_Generalize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Generalize(const Params_Generalize& from);
  Params_Generalize(Params_Generalize&& from) noexcept
    : Params_Generalize() {
    *this = ::std::move(from);
  }

  inline Params_Generalize& operator=(const Params_Generalize& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Generalize& operator=(Params_Generalize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Generalize& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Generalize* internal_default_instance() {
    return reinterpret_cast<const Params_Generalize*>(
               &_Params_Generalize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Params_Generalize& a, Params_Generalize& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Generalize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Generalize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Generalize* New() const final {
    return CreateMaybeMessage<Params_Generalize>(nullptr);
  }

  Params_Generalize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Generalize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Generalize& from);
  void MergeFrom(const Params_Generalize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Generalize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Generalize";
  }
  protected:
  explicit Params_Generalize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxDeviationFieldNumber = 1,
    kRemoveDegeneratesFieldNumber = 2,
  };
  // double max_deviation = 1;
  void clear_max_deviation();
  double max_deviation() const;
  void set_max_deviation(double value);
  private:
  double _internal_max_deviation() const;
  void _internal_set_max_deviation(double value);
  public:

  // bool remove_degenerates = 2;
  void clear_remove_degenerates();
  bool remove_degenerates() const;
  void set_remove_degenerates(bool value);
  private:
  bool _internal_remove_degenerates() const;
  void _internal_set_remove_degenerates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Generalize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double max_deviation_;
  bool remove_degenerates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_GeneralizeByArea PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.GeneralizeByArea) */ {
 public:
  inline Params_GeneralizeByArea() : Params_GeneralizeByArea(nullptr) {}
  virtual ~Params_GeneralizeByArea();
  explicit constexpr Params_GeneralizeByArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_GeneralizeByArea(const Params_GeneralizeByArea& from);
  Params_GeneralizeByArea(Params_GeneralizeByArea&& from) noexcept
    : Params_GeneralizeByArea() {
    *this = ::std::move(from);
  }

  inline Params_GeneralizeByArea& operator=(const Params_GeneralizeByArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_GeneralizeByArea& operator=(Params_GeneralizeByArea&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_GeneralizeByArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_GeneralizeByArea* internal_default_instance() {
    return reinterpret_cast<const Params_GeneralizeByArea*>(
               &_Params_GeneralizeByArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Params_GeneralizeByArea& a, Params_GeneralizeByArea& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_GeneralizeByArea* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_GeneralizeByArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_GeneralizeByArea* New() const final {
    return CreateMaybeMessage<Params_GeneralizeByArea>(nullptr);
  }

  Params_GeneralizeByArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_GeneralizeByArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_GeneralizeByArea& from);
  void MergeFrom(const Params_GeneralizeByArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_GeneralizeByArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.GeneralizeByArea";
  }
  protected:
  explicit Params_GeneralizeByArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentReductionFieldNumber = 1,
    kMaxPointCountFieldNumber = 2,
    kRemoveDegeneratesFieldNumber = 3,
  };
  // double percent_reduction = 1;
  void clear_percent_reduction();
  double percent_reduction() const;
  void set_percent_reduction(double value);
  private:
  double _internal_percent_reduction() const;
  void _internal_set_percent_reduction(double value);
  public:

  // int32 max_point_count = 2;
  void clear_max_point_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_point_count() const;
  void set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_point_count() const;
  void _internal_set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool remove_degenerates = 3;
  void clear_remove_degenerates();
  bool remove_degenerates() const;
  void set_remove_degenerates(bool value);
  private:
  bool _internal_remove_degenerates() const;
  void _internal_set_remove_degenerates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.GeneralizeByArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double percent_reduction_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_point_count_;
  bool remove_degenerates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Intersection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Intersection) */ {
 public:
  inline Params_Intersection() : Params_Intersection(nullptr) {}
  virtual ~Params_Intersection();
  explicit constexpr Params_Intersection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Intersection(const Params_Intersection& from);
  Params_Intersection(Params_Intersection&& from) noexcept
    : Params_Intersection() {
    *this = ::std::move(from);
  }

  inline Params_Intersection& operator=(const Params_Intersection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Intersection& operator=(Params_Intersection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Intersection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Intersection* internal_default_instance() {
    return reinterpret_cast<const Params_Intersection*>(
               &_Params_Intersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Params_Intersection& a, Params_Intersection& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Intersection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Intersection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Intersection* New() const final {
    return CreateMaybeMessage<Params_Intersection>(nullptr);
  }

  Params_Intersection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Intersection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Intersection& from);
  void MergeFrom(const Params_Intersection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Intersection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Intersection";
  }
  protected:
  explicit Params_Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionMaskFieldNumber = 1,
  };
  // int32 dimension_mask = 1;
  void clear_dimension_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_mask() const;
  void set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimension_mask() const;
  void _internal_set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Intersection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Offset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Offset) */ {
 public:
  inline Params_Offset() : Params_Offset(nullptr) {}
  virtual ~Params_Offset();
  explicit constexpr Params_Offset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Offset(const Params_Offset& from);
  Params_Offset(Params_Offset&& from) noexcept
    : Params_Offset() {
    *this = ::std::move(from);
  }

  inline Params_Offset& operator=(const Params_Offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Offset& operator=(Params_Offset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Offset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Offset* internal_default_instance() {
    return reinterpret_cast<const Params_Offset*>(
               &_Params_Offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Params_Offset& a, Params_Offset& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Offset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Offset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Offset* New() const final {
    return CreateMaybeMessage<Params_Offset>(nullptr);
  }

  Params_Offset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Offset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Offset& from);
  void MergeFrom(const Params_Offset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Offset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Offset";
  }
  protected:
  explicit Params_Offset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Params_Offset_OffsetJoinType OffsetJoinType;
  static constexpr OffsetJoinType ROUND =
    Params_Offset_OffsetJoinType_ROUND;
  static constexpr OffsetJoinType BEVEL =
    Params_Offset_OffsetJoinType_BEVEL;
  static constexpr OffsetJoinType MITER =
    Params_Offset_OffsetJoinType_MITER;
  static constexpr OffsetJoinType SQUARE =
    Params_Offset_OffsetJoinType_SQUARE;
  static inline bool OffsetJoinType_IsValid(int value) {
    return Params_Offset_OffsetJoinType_IsValid(value);
  }
  static constexpr OffsetJoinType OffsetJoinType_MIN =
    Params_Offset_OffsetJoinType_OffsetJoinType_MIN;
  static constexpr OffsetJoinType OffsetJoinType_MAX =
    Params_Offset_OffsetJoinType_OffsetJoinType_MAX;
  static constexpr int OffsetJoinType_ARRAYSIZE =
    Params_Offset_OffsetJoinType_OffsetJoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OffsetJoinType_descriptor() {
    return Params_Offset_OffsetJoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& OffsetJoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OffsetJoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OffsetJoinType_Name.");
    return Params_Offset_OffsetJoinType_Name(enum_t_value);
  }
  static inline bool OffsetJoinType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OffsetJoinType* value) {
    return Params_Offset_OffsetJoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kBevelRatioFieldNumber = 3,
    kFlattenErrorFieldNumber = 4,
    kJoinTypeFieldNumber = 2,
  };
  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // double bevel_ratio = 3;
  void clear_bevel_ratio();
  double bevel_ratio() const;
  void set_bevel_ratio(double value);
  private:
  double _internal_bevel_ratio() const;
  void _internal_set_bevel_ratio(double value);
  public:

  // double flatten_error = 4;
  void clear_flatten_error();
  double flatten_error() const;
  void set_flatten_error(double value);
  private:
  double _internal_flatten_error() const;
  void _internal_set_flatten_error(double value);
  public:

  // .epl.protobuf.v1.Params.Offset.OffsetJoinType join_type = 2;
  void clear_join_type();
  ::epl::protobuf::v1::Params_Offset_OffsetJoinType join_type() const;
  void set_join_type(::epl::protobuf::v1::Params_Offset_OffsetJoinType value);
  private:
  ::epl::protobuf::v1::Params_Offset_OffsetJoinType _internal_join_type() const;
  void _internal_set_join_type(::epl::protobuf::v1::Params_Offset_OffsetJoinType value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Offset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double distance_;
  double bevel_ratio_;
  double flatten_error_;
  int join_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Cut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Cut) */ {
 public:
  inline Params_Cut() : Params_Cut(nullptr) {}
  virtual ~Params_Cut();
  explicit constexpr Params_Cut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Cut(const Params_Cut& from);
  Params_Cut(Params_Cut&& from) noexcept
    : Params_Cut() {
    *this = ::std::move(from);
  }

  inline Params_Cut& operator=(const Params_Cut& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Cut& operator=(Params_Cut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Cut& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Cut* internal_default_instance() {
    return reinterpret_cast<const Params_Cut*>(
               &_Params_Cut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Params_Cut& a, Params_Cut& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Cut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Cut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Cut* New() const final {
    return CreateMaybeMessage<Params_Cut>(nullptr);
  }

  Params_Cut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Cut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Cut& from);
  void MergeFrom(const Params_Cut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Cut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Cut";
  }
  protected:
  explicit Params_Cut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsiderTouchFieldNumber = 1,
  };
  // bool consider_touch = 1;
  void clear_consider_touch();
  bool consider_touch() const;
  void set_consider_touch(bool value);
  private:
  bool _internal_consider_touch() const;
  void _internal_set_consider_touch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Cut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool consider_touch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Clip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Clip) */ {
 public:
  inline Params_Clip() : Params_Clip(nullptr) {}
  virtual ~Params_Clip();
  explicit constexpr Params_Clip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Clip(const Params_Clip& from);
  Params_Clip(Params_Clip&& from) noexcept
    : Params_Clip() {
    *this = ::std::move(from);
  }

  inline Params_Clip& operator=(const Params_Clip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Clip& operator=(Params_Clip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Clip& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Clip* internal_default_instance() {
    return reinterpret_cast<const Params_Clip*>(
               &_Params_Clip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Params_Clip& a, Params_Clip& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Clip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Clip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Clip* New() const final {
    return CreateMaybeMessage<Params_Clip>(nullptr);
  }

  Params_Clip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Clip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Clip& from);
  void MergeFrom(const Params_Clip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Clip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Clip";
  }
  protected:
  explicit Params_Clip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvelopeFieldNumber = 1,
  };
  // .epl.protobuf.v1.EnvelopeData envelope = 1;
  bool has_envelope() const;
  private:
  bool _internal_has_envelope() const;
  public:
  void clear_envelope();
  const ::epl::protobuf::v1::EnvelopeData& envelope() const;
  ::epl::protobuf::v1::EnvelopeData* release_envelope();
  ::epl::protobuf::v1::EnvelopeData* mutable_envelope();
  void set_allocated_envelope(::epl::protobuf::v1::EnvelopeData* envelope);
  private:
  const ::epl::protobuf::v1::EnvelopeData& _internal_envelope() const;
  ::epl::protobuf::v1::EnvelopeData* _internal_mutable_envelope();
  public:
  void unsafe_arena_set_allocated_envelope(
      ::epl::protobuf::v1::EnvelopeData* envelope);
  ::epl::protobuf::v1::EnvelopeData* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Clip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::epl::protobuf::v1::EnvelopeData* envelope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Densify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Densify) */ {
 public:
  inline Params_Densify() : Params_Densify(nullptr) {}
  virtual ~Params_Densify();
  explicit constexpr Params_Densify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Densify(const Params_Densify& from);
  Params_Densify(Params_Densify&& from) noexcept
    : Params_Densify() {
    *this = ::std::move(from);
  }

  inline Params_Densify& operator=(const Params_Densify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Densify& operator=(Params_Densify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Densify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Densify* internal_default_instance() {
    return reinterpret_cast<const Params_Densify*>(
               &_Params_Densify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Params_Densify& a, Params_Densify& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Densify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Densify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Densify* New() const final {
    return CreateMaybeMessage<Params_Densify>(nullptr);
  }

  Params_Densify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Densify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Densify& from);
  void MergeFrom(const Params_Densify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Densify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Densify";
  }
  protected:
  explicit Params_Densify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxLengthFieldNumber = 1,
  };
  // double max_length = 1;
  void clear_max_length();
  double max_length() const;
  void set_max_length(double value);
  private:
  double _internal_max_length() const;
  void _internal_set_max_length(double value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Densify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double max_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_Simplify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.Simplify) */ {
 public:
  inline Params_Simplify() : Params_Simplify(nullptr) {}
  virtual ~Params_Simplify();
  explicit constexpr Params_Simplify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_Simplify(const Params_Simplify& from);
  Params_Simplify(Params_Simplify&& from) noexcept
    : Params_Simplify() {
    *this = ::std::move(from);
  }

  inline Params_Simplify& operator=(const Params_Simplify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_Simplify& operator=(Params_Simplify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_Simplify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_Simplify* internal_default_instance() {
    return reinterpret_cast<const Params_Simplify*>(
               &_Params_Simplify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Params_Simplify& a, Params_Simplify& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_Simplify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_Simplify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_Simplify* New() const final {
    return CreateMaybeMessage<Params_Simplify>(nullptr);
  }

  Params_Simplify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_Simplify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_Simplify& from);
  void MergeFrom(const Params_Simplify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_Simplify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.Simplify";
  }
  protected:
  explicit Params_Simplify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceFieldNumber = 1,
  };
  // bool force = 1;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.Simplify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params_AffineTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params.AffineTransform) */ {
 public:
  inline Params_AffineTransform() : Params_AffineTransform(nullptr) {}
  virtual ~Params_AffineTransform();
  explicit constexpr Params_AffineTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params_AffineTransform(const Params_AffineTransform& from);
  Params_AffineTransform(Params_AffineTransform&& from) noexcept
    : Params_AffineTransform() {
    *this = ::std::move(from);
  }

  inline Params_AffineTransform& operator=(const Params_AffineTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params_AffineTransform& operator=(Params_AffineTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params_AffineTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params_AffineTransform* internal_default_instance() {
    return reinterpret_cast<const Params_AffineTransform*>(
               &_Params_AffineTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Params_AffineTransform& a, Params_AffineTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(Params_AffineTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params_AffineTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params_AffineTransform* New() const final {
    return CreateMaybeMessage<Params_AffineTransform>(nullptr);
  }

  Params_AffineTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params_AffineTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params_AffineTransform& from);
  void MergeFrom(const Params_AffineTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params_AffineTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params.AffineTransform";
  }
  protected:
  explicit Params_AffineTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXOffsetFieldNumber = 3,
    kYOffsetFieldNumber = 4,
    kGeodeticFieldNumber = 2,
  };
  // double x_offset = 3;
  void clear_x_offset();
  double x_offset() const;
  void set_x_offset(double value);
  private:
  double _internal_x_offset() const;
  void _internal_set_x_offset(double value);
  public:

  // double y_offset = 4;
  void clear_y_offset();
  double y_offset() const;
  void set_y_offset(double value);
  private:
  double _internal_y_offset() const;
  void _internal_set_y_offset(double value);
  public:

  // bool geodetic = 2;
  void clear_geodetic();
  bool geodetic() const;
  void set_geodetic(bool value);
  private:
  bool _internal_geodetic() const;
  void _internal_set_geodetic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params.AffineTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_offset_;
  double y_offset_;
  bool geodetic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Params PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  virtual ~Params();
  explicit constexpr Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const final {
    return CreateMaybeMessage<Params>(nullptr);
  }

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Params_Buffer Buffer;
  typedef Params_GeodeticBuffer GeodeticBuffer;
  typedef Params_Convex Convex;
  typedef Params_Relate Relate;
  typedef Params_RandomPoints RandomPoints;
  typedef Params_Generalize Generalize;
  typedef Params_GeneralizeByArea GeneralizeByArea;
  typedef Params_Intersection Intersection;
  typedef Params_Offset Offset;
  typedef Params_Cut Cut;
  typedef Params_Clip Clip;
  typedef Params_Densify Densify;
  typedef Params_Simplify Simplify;
  typedef Params_AffineTransform AffineTransform;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:epl.protobuf.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeometryData

// uint64 geometry_id = 1;
inline void GeometryData::clear_geometry_id() {
  geometry_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GeometryData::_internal_geometry_id() const {
  return geometry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GeometryData::geometry_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.geometry_id)
  return _internal_geometry_id();
}
inline void GeometryData::_internal_set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  geometry_id_ = value;
}
inline void GeometryData::set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_geometry_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.geometry_id)
}

// string feature_id = 2;
inline void GeometryData::clear_feature_id() {
  feature_id_.ClearToEmpty();
}
inline const std::string& GeometryData::feature_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.feature_id)
  return _internal_feature_id();
}
inline void GeometryData::set_feature_id(const std::string& value) {
  _internal_set_feature_id(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.feature_id)
}
inline std::string* GeometryData::mutable_feature_id() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.feature_id)
  return _internal_mutable_feature_id();
}
inline const std::string& GeometryData::_internal_feature_id() const {
  return feature_id_.Get();
}
inline void GeometryData::_internal_set_feature_id(const std::string& value) {
  
  feature_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_feature_id(std::string&& value) {
  
  feature_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.feature_id)
}
inline void GeometryData::set_feature_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.feature_id)
}
inline void GeometryData::set_feature_id(const char* value,
    size_t size) {
  
  feature_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.feature_id)
}
inline std::string* GeometryData::_internal_mutable_feature_id() {
  
  return feature_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_feature_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.feature_id)
  return feature_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeometryData::set_allocated_feature_id(std::string* feature_id) {
  if (feature_id != nullptr) {
    
  } else {
    
  }
  feature_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.feature_id)
}

// string wkt = 3;
inline bool GeometryData::_internal_has_wkt() const {
  return data_case() == kWkt;
}
inline bool GeometryData::has_wkt() const {
  return _internal_has_wkt();
}
inline void GeometryData::set_has_wkt() {
  _oneof_case_[0] = kWkt;
}
inline void GeometryData::clear_wkt() {
  if (_internal_has_wkt()) {
    data_.wkt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& GeometryData::wkt() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.wkt)
  return _internal_wkt();
}
inline void GeometryData::set_wkt(const std::string& value) {
  _internal_set_wkt(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.wkt)
}
inline std::string* GeometryData::mutable_wkt() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.wkt)
  return _internal_mutable_wkt();
}
inline const std::string& GeometryData::_internal_wkt() const {
  if (_internal_has_wkt()) {
    return data_.wkt_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GeometryData::_internal_set_wkt(const std::string& value) {
  if (!_internal_has_wkt()) {
    clear_data();
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_wkt(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.wkt)
  if (!_internal_has_wkt()) {
    clear_data();
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.wkt)
}
inline void GeometryData::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_wkt()) {
    clear_data();
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.wkt)
}
inline void GeometryData::set_wkt(const char* value,
                             size_t size) {
  if (!_internal_has_wkt()) {
    clear_data();
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkt_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.wkt)
}
inline std::string* GeometryData::_internal_mutable_wkt() {
  if (!_internal_has_wkt()) {
    clear_data();
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.wkt_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_wkt() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.wkt)
  if (_internal_has_wkt()) {
    clear_has_data();
    return data_.wkt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GeometryData::set_allocated_wkt(std::string* wkt) {
  if (has_data()) {
    clear_data();
  }
  if (wkt != nullptr) {
    set_has_wkt();
    data_.wkt_.UnsafeSetDefault(wkt);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(wkt);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.wkt)
}

// string geojson = 4;
inline bool GeometryData::_internal_has_geojson() const {
  return data_case() == kGeojson;
}
inline bool GeometryData::has_geojson() const {
  return _internal_has_geojson();
}
inline void GeometryData::set_has_geojson() {
  _oneof_case_[0] = kGeojson;
}
inline void GeometryData::clear_geojson() {
  if (_internal_has_geojson()) {
    data_.geojson_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& GeometryData::geojson() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.geojson)
  return _internal_geojson();
}
inline void GeometryData::set_geojson(const std::string& value) {
  _internal_set_geojson(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.geojson)
}
inline std::string* GeometryData::mutable_geojson() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.geojson)
  return _internal_mutable_geojson();
}
inline const std::string& GeometryData::_internal_geojson() const {
  if (_internal_has_geojson()) {
    return data_.geojson_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GeometryData::_internal_set_geojson(const std::string& value) {
  if (!_internal_has_geojson()) {
    clear_data();
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.geojson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_geojson(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.geojson)
  if (!_internal_has_geojson()) {
    clear_data();
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.geojson_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.geojson)
}
inline void GeometryData::set_geojson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_geojson()) {
    clear_data();
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.geojson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.geojson)
}
inline void GeometryData::set_geojson(const char* value,
                             size_t size) {
  if (!_internal_has_geojson()) {
    clear_data();
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.geojson_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.geojson)
}
inline std::string* GeometryData::_internal_mutable_geojson() {
  if (!_internal_has_geojson()) {
    clear_data();
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.geojson_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_geojson() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.geojson)
  if (_internal_has_geojson()) {
    clear_has_data();
    return data_.geojson_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GeometryData::set_allocated_geojson(std::string* geojson) {
  if (has_data()) {
    clear_data();
  }
  if (geojson != nullptr) {
    set_has_geojson();
    data_.geojson_.UnsafeSetDefault(geojson);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(geojson);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.geojson)
}

// bytes wkb = 5;
inline bool GeometryData::_internal_has_wkb() const {
  return data_case() == kWkb;
}
inline bool GeometryData::has_wkb() const {
  return _internal_has_wkb();
}
inline void GeometryData::set_has_wkb() {
  _oneof_case_[0] = kWkb;
}
inline void GeometryData::clear_wkb() {
  if (_internal_has_wkb()) {
    data_.wkb_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& GeometryData::wkb() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.wkb)
  return _internal_wkb();
}
inline void GeometryData::set_wkb(const std::string& value) {
  _internal_set_wkb(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.wkb)
}
inline std::string* GeometryData::mutable_wkb() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.wkb)
  return _internal_mutable_wkb();
}
inline const std::string& GeometryData::_internal_wkb() const {
  if (_internal_has_wkb()) {
    return data_.wkb_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GeometryData::_internal_set_wkb(const std::string& value) {
  if (!_internal_has_wkb()) {
    clear_data();
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_wkb(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.wkb)
  if (!_internal_has_wkb()) {
    clear_data();
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.wkb)
}
inline void GeometryData::set_wkb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_wkb()) {
    clear_data();
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.wkb)
}
inline void GeometryData::set_wkb(const void* value,
                             size_t size) {
  if (!_internal_has_wkb()) {
    clear_data();
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.wkb_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.wkb)
}
inline std::string* GeometryData::_internal_mutable_wkb() {
  if (!_internal_has_wkb()) {
    clear_data();
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.wkb_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_wkb() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.wkb)
  if (_internal_has_wkb()) {
    clear_has_data();
    return data_.wkb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GeometryData::set_allocated_wkb(std::string* wkb) {
  if (has_data()) {
    clear_data();
  }
  if (wkb != nullptr) {
    set_has_wkb();
    data_.wkb_.UnsafeSetDefault(wkb);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(wkb);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.wkb)
}

// bytes esri_shape = 6;
inline bool GeometryData::_internal_has_esri_shape() const {
  return data_case() == kEsriShape;
}
inline bool GeometryData::has_esri_shape() const {
  return _internal_has_esri_shape();
}
inline void GeometryData::set_has_esri_shape() {
  _oneof_case_[0] = kEsriShape;
}
inline void GeometryData::clear_esri_shape() {
  if (_internal_has_esri_shape()) {
    data_.esri_shape_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& GeometryData::esri_shape() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.esri_shape)
  return _internal_esri_shape();
}
inline void GeometryData::set_esri_shape(const std::string& value) {
  _internal_set_esri_shape(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.esri_shape)
}
inline std::string* GeometryData::mutable_esri_shape() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.esri_shape)
  return _internal_mutable_esri_shape();
}
inline const std::string& GeometryData::_internal_esri_shape() const {
  if (_internal_has_esri_shape()) {
    return data_.esri_shape_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GeometryData::_internal_set_esri_shape(const std::string& value) {
  if (!_internal_has_esri_shape()) {
    clear_data();
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.esri_shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_esri_shape(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.esri_shape)
  if (!_internal_has_esri_shape()) {
    clear_data();
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.esri_shape_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.esri_shape)
}
inline void GeometryData::set_esri_shape(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_esri_shape()) {
    clear_data();
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.esri_shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.esri_shape)
}
inline void GeometryData::set_esri_shape(const void* value,
                             size_t size) {
  if (!_internal_has_esri_shape()) {
    clear_data();
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.esri_shape_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.esri_shape)
}
inline std::string* GeometryData::_internal_mutable_esri_shape() {
  if (!_internal_has_esri_shape()) {
    clear_data();
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.esri_shape_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_esri_shape() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.esri_shape)
  if (_internal_has_esri_shape()) {
    clear_has_data();
    return data_.esri_shape_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GeometryData::set_allocated_esri_shape(std::string* esri_shape) {
  if (has_data()) {
    clear_data();
  }
  if (esri_shape != nullptr) {
    set_has_esri_shape();
    data_.esri_shape_.UnsafeSetDefault(esri_shape);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(esri_shape);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.esri_shape)
}

// bytes ewkb = 15;
inline bool GeometryData::_internal_has_ewkb() const {
  return data_case() == kEwkb;
}
inline bool GeometryData::has_ewkb() const {
  return _internal_has_ewkb();
}
inline void GeometryData::set_has_ewkb() {
  _oneof_case_[0] = kEwkb;
}
inline void GeometryData::clear_ewkb() {
  if (_internal_has_ewkb()) {
    data_.ewkb_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& GeometryData::ewkb() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.ewkb)
  return _internal_ewkb();
}
inline void GeometryData::set_ewkb(const std::string& value) {
  _internal_set_ewkb(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.ewkb)
}
inline std::string* GeometryData::mutable_ewkb() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.ewkb)
  return _internal_mutable_ewkb();
}
inline const std::string& GeometryData::_internal_ewkb() const {
  if (_internal_has_ewkb()) {
    return data_.ewkb_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GeometryData::_internal_set_ewkb(const std::string& value) {
  if (!_internal_has_ewkb()) {
    clear_data();
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ewkb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeometryData::set_ewkb(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.ewkb)
  if (!_internal_has_ewkb()) {
    clear_data();
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ewkb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.GeometryData.ewkb)
}
inline void GeometryData::set_ewkb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_ewkb()) {
    clear_data();
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ewkb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.GeometryData.ewkb)
}
inline void GeometryData::set_ewkb(const void* value,
                             size_t size) {
  if (!_internal_has_ewkb()) {
    clear_data();
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ewkb_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.GeometryData.ewkb)
}
inline std::string* GeometryData::_internal_mutable_ewkb() {
  if (!_internal_has_ewkb()) {
    clear_data();
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.ewkb_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeometryData::release_ewkb() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.ewkb)
  if (_internal_has_ewkb()) {
    clear_has_data();
    return data_.ewkb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GeometryData::set_allocated_ewkb(std::string* ewkb) {
  if (has_data()) {
    clear_data();
  }
  if (ewkb != nullptr) {
    set_has_ewkb();
    data_.ewkb_.UnsafeSetDefault(ewkb);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(ewkb);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.ewkb)
}

// .epl.protobuf.v1.ProjectionData proj = 7;
inline bool GeometryData::_internal_has_proj() const {
  return this != internal_default_instance() && proj_ != nullptr;
}
inline bool GeometryData::has_proj() const {
  return _internal_has_proj();
}
inline void GeometryData::clear_proj() {
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryData::_internal_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryData::proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.proj)
  return _internal_proj();
}
inline void GeometryData::unsafe_arena_set_allocated_proj(
    ::epl::protobuf::v1::ProjectionData* proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  proj_ = proj;
  if (proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryData.proj)
}
inline ::epl::protobuf::v1::ProjectionData* GeometryData::release_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryData::unsafe_arena_release_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryData::_internal_mutable_proj() {
  
  if (proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    proj_ = p;
  }
  return proj_;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryData::mutable_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.proj)
  return _internal_mutable_proj();
}
inline void GeometryData::set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete proj_;
  }
  if (proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proj);
    if (message_arena != submessage_arena) {
      proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj, submessage_arena);
    }
    
  } else {
    
  }
  proj_ = proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.proj)
}

// .epl.protobuf.v1.EnvelopeData envelope = 13;
inline bool GeometryData::_internal_has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline bool GeometryData::has_envelope() const {
  return _internal_has_envelope();
}
inline void GeometryData::clear_envelope() {
  if (GetArena() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::epl::protobuf::v1::EnvelopeData& GeometryData::_internal_envelope() const {
  const ::epl::protobuf::v1::EnvelopeData* p = envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::EnvelopeData&>(
      ::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& GeometryData::envelope() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.envelope)
  return _internal_envelope();
}
inline void GeometryData::unsafe_arena_set_allocated_envelope(
    ::epl::protobuf::v1::EnvelopeData* envelope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envelope_);
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryData.envelope)
}
inline ::epl::protobuf::v1::EnvelopeData* GeometryData::release_envelope() {
  
  ::epl::protobuf::v1::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* GeometryData::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryData.envelope)
  
  ::epl::protobuf::v1::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* GeometryData::_internal_mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::EnvelopeData>(GetArena());
    envelope_ = p;
  }
  return envelope_;
}
inline ::epl::protobuf::v1::EnvelopeData* GeometryData::mutable_envelope() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryData.envelope)
  return _internal_mutable_envelope();
}
inline void GeometryData::set_allocated_envelope(::epl::protobuf::v1::EnvelopeData* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(envelope);
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryData.envelope)
}

// .epl.protobuf.v1.SimpleState simple = 14;
inline void GeometryData::clear_simple() {
  simple_ = 0;
}
inline ::epl::protobuf::v1::SimpleState GeometryData::_internal_simple() const {
  return static_cast< ::epl::protobuf::v1::SimpleState >(simple_);
}
inline ::epl::protobuf::v1::SimpleState GeometryData::simple() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryData.simple)
  return _internal_simple();
}
inline void GeometryData::_internal_set_simple(::epl::protobuf::v1::SimpleState value) {
  
  simple_ = value;
}
inline void GeometryData::set_simple(::epl::protobuf::v1::SimpleState value) {
  _internal_set_simple(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryData.simple)
}

inline bool GeometryData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void GeometryData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline GeometryData::DataCase GeometryData::data_case() const {
  return GeometryData::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectionData_Custom

// double lon_0 = 1;
inline void ProjectionData_Custom::clear_lon_0() {
  lon_0_ = 0;
}
inline double ProjectionData_Custom::_internal_lon_0() const {
  return lon_0_;
}
inline double ProjectionData_Custom::lon_0() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.Custom.lon_0)
  return _internal_lon_0();
}
inline void ProjectionData_Custom::_internal_set_lon_0(double value) {
  
  lon_0_ = value;
}
inline void ProjectionData_Custom::set_lon_0(double value) {
  _internal_set_lon_0(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.Custom.lon_0)
}

// double lat_0 = 2;
inline void ProjectionData_Custom::clear_lat_0() {
  lat_0_ = 0;
}
inline double ProjectionData_Custom::_internal_lat_0() const {
  return lat_0_;
}
inline double ProjectionData_Custom::lat_0() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.Custom.lat_0)
  return _internal_lat_0();
}
inline void ProjectionData_Custom::_internal_set_lat_0(double value) {
  
  lat_0_ = value;
}
inline void ProjectionData_Custom::set_lat_0(double value) {
  _internal_set_lat_0(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.Custom.lat_0)
}

// .epl.protobuf.v1.ProjectionData.CSType cs_type = 3;
inline void ProjectionData_Custom::clear_cs_type() {
  cs_type_ = 0;
}
inline ::epl::protobuf::v1::ProjectionData_CSType ProjectionData_Custom::_internal_cs_type() const {
  return static_cast< ::epl::protobuf::v1::ProjectionData_CSType >(cs_type_);
}
inline ::epl::protobuf::v1::ProjectionData_CSType ProjectionData_Custom::cs_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.Custom.cs_type)
  return _internal_cs_type();
}
inline void ProjectionData_Custom::_internal_set_cs_type(::epl::protobuf::v1::ProjectionData_CSType value) {
  
  cs_type_ = value;
}
inline void ProjectionData_Custom::set_cs_type(::epl::protobuf::v1::ProjectionData_CSType value) {
  _internal_set_cs_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.Custom.cs_type)
}

// -------------------------------------------------------------------

// ProjectionData

// int32 epsg = 1;
inline bool ProjectionData::_internal_has_epsg() const {
  return definition_case() == kEpsg;
}
inline bool ProjectionData::has_epsg() const {
  return _internal_has_epsg();
}
inline void ProjectionData::set_has_epsg() {
  _oneof_case_[0] = kEpsg;
}
inline void ProjectionData::clear_epsg() {
  if (_internal_has_epsg()) {
    definition_.epsg_ = 0;
    clear_has_definition();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionData::_internal_epsg() const {
  if (_internal_has_epsg()) {
    return definition_.epsg_;
  }
  return 0;
}
inline void ProjectionData::_internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_epsg()) {
    clear_definition();
    set_has_epsg();
  }
  definition_.epsg_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionData::epsg() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.epsg)
  return _internal_epsg();
}
inline void ProjectionData::set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.epsg)
}

// string proj4 = 2;
inline bool ProjectionData::_internal_has_proj4() const {
  return definition_case() == kProj4;
}
inline bool ProjectionData::has_proj4() const {
  return _internal_has_proj4();
}
inline void ProjectionData::set_has_proj4() {
  _oneof_case_[0] = kProj4;
}
inline void ProjectionData::clear_proj4() {
  if (_internal_has_proj4()) {
    definition_.proj4_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_definition();
  }
}
inline const std::string& ProjectionData::proj4() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.proj4)
  return _internal_proj4();
}
inline void ProjectionData::set_proj4(const std::string& value) {
  _internal_set_proj4(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.proj4)
}
inline std::string* ProjectionData::mutable_proj4() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.proj4)
  return _internal_mutable_proj4();
}
inline const std::string& ProjectionData::_internal_proj4() const {
  if (_internal_has_proj4()) {
    return definition_.proj4_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProjectionData::_internal_set_proj4(const std::string& value) {
  if (!_internal_has_proj4()) {
    clear_definition();
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.proj4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectionData::set_proj4(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.proj4)
  if (!_internal_has_proj4()) {
    clear_definition();
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.proj4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.ProjectionData.proj4)
}
inline void ProjectionData::set_proj4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_proj4()) {
    clear_definition();
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.proj4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.ProjectionData.proj4)
}
inline void ProjectionData::set_proj4(const char* value,
                             size_t size) {
  if (!_internal_has_proj4()) {
    clear_definition();
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.proj4_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.ProjectionData.proj4)
}
inline std::string* ProjectionData::_internal_mutable_proj4() {
  if (!_internal_has_proj4()) {
    clear_definition();
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return definition_.proj4_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectionData::release_proj4() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.proj4)
  if (_internal_has_proj4()) {
    clear_has_definition();
    return definition_.proj4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ProjectionData::set_allocated_proj4(std::string* proj4) {
  if (has_definition()) {
    clear_definition();
  }
  if (proj4 != nullptr) {
    set_has_proj4();
    definition_.proj4_.UnsafeSetDefault(proj4);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(proj4);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.proj4)
}

// .epl.protobuf.v1.ProjectionData.Custom custom = 3;
inline bool ProjectionData::_internal_has_custom() const {
  return definition_case() == kCustom;
}
inline bool ProjectionData::has_custom() const {
  return _internal_has_custom();
}
inline void ProjectionData::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void ProjectionData::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArena() == nullptr) {
      delete definition_.custom_;
    }
    clear_has_definition();
  }
}
inline ::epl::protobuf::v1::ProjectionData_Custom* ProjectionData::release_custom() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.custom)
  if (_internal_has_custom()) {
    clear_has_definition();
      ::epl::protobuf::v1::ProjectionData_Custom* temp = definition_.custom_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::ProjectionData_Custom& ProjectionData::_internal_custom() const {
  return _internal_has_custom()
      ? *definition_.custom_
      : reinterpret_cast< ::epl::protobuf::v1::ProjectionData_Custom&>(::epl::protobuf::v1::_ProjectionData_Custom_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData_Custom& ProjectionData::custom() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.custom)
  return _internal_custom();
}
inline ::epl::protobuf::v1::ProjectionData_Custom* ProjectionData::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.ProjectionData.custom)
  if (_internal_has_custom()) {
    clear_has_definition();
    ::epl::protobuf::v1::ProjectionData_Custom* temp = definition_.custom_;
    definition_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProjectionData::unsafe_arena_set_allocated_custom(::epl::protobuf::v1::ProjectionData_Custom* custom) {
  clear_definition();
  if (custom) {
    set_has_custom();
    definition_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ProjectionData.custom)
}
inline ::epl::protobuf::v1::ProjectionData_Custom* ProjectionData::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_definition();
    set_has_custom();
    definition_.custom_ = CreateMaybeMessage< ::epl::protobuf::v1::ProjectionData_Custom >(GetArena());
  }
  return definition_.custom_;
}
inline ::epl::protobuf::v1::ProjectionData_Custom* ProjectionData::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.custom)
  return _internal_mutable_custom();
}

// string wkt = 4;
inline bool ProjectionData::_internal_has_wkt() const {
  return definition_case() == kWkt;
}
inline bool ProjectionData::has_wkt() const {
  return _internal_has_wkt();
}
inline void ProjectionData::set_has_wkt() {
  _oneof_case_[0] = kWkt;
}
inline void ProjectionData::clear_wkt() {
  if (_internal_has_wkt()) {
    definition_.wkt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_definition();
  }
}
inline const std::string& ProjectionData::wkt() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.wkt)
  return _internal_wkt();
}
inline void ProjectionData::set_wkt(const std::string& value) {
  _internal_set_wkt(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.wkt)
}
inline std::string* ProjectionData::mutable_wkt() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.wkt)
  return _internal_mutable_wkt();
}
inline const std::string& ProjectionData::_internal_wkt() const {
  if (_internal_has_wkt()) {
    return definition_.wkt_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProjectionData::_internal_set_wkt(const std::string& value) {
  if (!_internal_has_wkt()) {
    clear_definition();
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectionData::set_wkt(std::string&& value) {
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.wkt)
  if (!_internal_has_wkt()) {
    clear_definition();
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.wkt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.ProjectionData.wkt)
}
inline void ProjectionData::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_wkt()) {
    clear_definition();
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.ProjectionData.wkt)
}
inline void ProjectionData::set_wkt(const char* value,
                             size_t size) {
  if (!_internal_has_wkt()) {
    clear_definition();
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  definition_.wkt_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.ProjectionData.wkt)
}
inline std::string* ProjectionData::_internal_mutable_wkt() {
  if (!_internal_has_wkt()) {
    clear_definition();
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return definition_.wkt_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectionData::release_wkt() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.wkt)
  if (_internal_has_wkt()) {
    clear_has_definition();
    return definition_.wkt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ProjectionData::set_allocated_wkt(std::string* wkt) {
  if (has_definition()) {
    clear_definition();
  }
  if (wkt != nullptr) {
    set_has_wkt();
    definition_.wkt_.UnsafeSetDefault(wkt);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(wkt);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.wkt)
}

// .epl.protobuf.v1.GeometryData geometry = 10;
inline bool ProjectionData::_internal_has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline bool ProjectionData::has_geometry() const {
  return _internal_has_geometry();
}
inline void ProjectionData::clear_geometry() {
  if (GetArena() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
inline const ::epl::protobuf::v1::GeometryData& ProjectionData::_internal_geometry() const {
  const ::epl::protobuf::v1::GeometryData* p = geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::GeometryData&>(
      ::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& ProjectionData::geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.geometry)
  return _internal_geometry();
}
inline void ProjectionData::unsafe_arena_set_allocated_geometry(
    ::epl::protobuf::v1::GeometryData* geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_);
  }
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ProjectionData.geometry)
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::release_geometry() {
  
  ::epl::protobuf::v1::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.geometry)
  
  ::epl::protobuf::v1::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::_internal_mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::GeometryData>(GetArena());
    geometry_ = p;
  }
  return geometry_;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.geometry)
  return _internal_mutable_geometry();
}
inline void ProjectionData::set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geometry_;
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry);
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.geometry)
}

// .epl.protobuf.v1.EnvelopeData bbox = 11;
inline bool ProjectionData::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool ProjectionData::has_bbox() const {
  return _internal_has_bbox();
}
inline void ProjectionData::clear_bbox() {
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::epl::protobuf::v1::EnvelopeData& ProjectionData::_internal_bbox() const {
  const ::epl::protobuf::v1::EnvelopeData* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::EnvelopeData&>(
      ::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& ProjectionData::bbox() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.bbox)
  return _internal_bbox();
}
inline void ProjectionData::unsafe_arena_set_allocated_bbox(
    ::epl::protobuf::v1::EnvelopeData* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ProjectionData.bbox)
}
inline ::epl::protobuf::v1::EnvelopeData* ProjectionData::release_bbox() {
  
  ::epl::protobuf::v1::EnvelopeData* temp = bbox_;
  bbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* ProjectionData::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.bbox)
  
  ::epl::protobuf::v1::EnvelopeData* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* ProjectionData::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::EnvelopeData>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::epl::protobuf::v1::EnvelopeData* ProjectionData::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.bbox)
  return _internal_mutable_bbox();
}
inline void ProjectionData::set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.bbox)
}

// .epl.protobuf.v1.GeometryData centroid = 12;
inline bool ProjectionData::_internal_has_centroid() const {
  return this != internal_default_instance() && centroid_ != nullptr;
}
inline bool ProjectionData::has_centroid() const {
  return _internal_has_centroid();
}
inline void ProjectionData::clear_centroid() {
  if (GetArena() == nullptr && centroid_ != nullptr) {
    delete centroid_;
  }
  centroid_ = nullptr;
}
inline const ::epl::protobuf::v1::GeometryData& ProjectionData::_internal_centroid() const {
  const ::epl::protobuf::v1::GeometryData* p = centroid_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::GeometryData&>(
      ::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& ProjectionData::centroid() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.centroid)
  return _internal_centroid();
}
inline void ProjectionData::unsafe_arena_set_allocated_centroid(
    ::epl::protobuf::v1::GeometryData* centroid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centroid_);
  }
  centroid_ = centroid;
  if (centroid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.ProjectionData.centroid)
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::release_centroid() {
  
  ::epl::protobuf::v1::GeometryData* temp = centroid_;
  centroid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::unsafe_arena_release_centroid() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.ProjectionData.centroid)
  
  ::epl::protobuf::v1::GeometryData* temp = centroid_;
  centroid_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::_internal_mutable_centroid() {
  
  if (centroid_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::GeometryData>(GetArena());
    centroid_ = p;
  }
  return centroid_;
}
inline ::epl::protobuf::v1::GeometryData* ProjectionData::mutable_centroid() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.ProjectionData.centroid)
  return _internal_mutable_centroid();
}
inline void ProjectionData::set_allocated_centroid(::epl::protobuf::v1::GeometryData* centroid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete centroid_;
  }
  if (centroid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(centroid);
    if (message_arena != submessage_arena) {
      centroid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centroid, submessage_arena);
    }
    
  } else {
    
  }
  centroid_ = centroid;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.centroid)
}

// repeated uint32 shape = 8;
inline int ProjectionData::_internal_shape_size() const {
  return shape_.size();
}
inline int ProjectionData::shape_size() const {
  return _internal_shape_size();
}
inline void ProjectionData::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProjectionData::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProjectionData::shape(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.shape)
  return _internal_shape(index);
}
inline void ProjectionData::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.shape)
}
inline void ProjectionData::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void ProjectionData::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.ProjectionData.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProjectionData::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProjectionData::shape() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.ProjectionData.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProjectionData::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProjectionData::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.ProjectionData.shape)
  return _internal_mutable_shape();
}

// repeated double transform = 9;
inline int ProjectionData::_internal_transform_size() const {
  return transform_.size();
}
inline int ProjectionData::transform_size() const {
  return _internal_transform_size();
}
inline void ProjectionData::clear_transform() {
  transform_.Clear();
}
inline double ProjectionData::_internal_transform(int index) const {
  return transform_.Get(index);
}
inline double ProjectionData::transform(int index) const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.ProjectionData.transform)
  return _internal_transform(index);
}
inline void ProjectionData::set_transform(int index, double value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.ProjectionData.transform)
}
inline void ProjectionData::_internal_add_transform(double value) {
  transform_.Add(value);
}
inline void ProjectionData::add_transform(double value) {
  _internal_add_transform(value);
  // @@protoc_insertion_point(field_add:epl.protobuf.v1.ProjectionData.transform)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProjectionData::_internal_transform() const {
  return transform_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProjectionData::transform() const {
  // @@protoc_insertion_point(field_list:epl.protobuf.v1.ProjectionData.transform)
  return _internal_transform();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProjectionData::_internal_mutable_transform() {
  return &transform_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProjectionData::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:epl.protobuf.v1.ProjectionData.transform)
  return _internal_mutable_transform();
}

inline bool ProjectionData::has_definition() const {
  return definition_case() != DEFINITION_NOT_SET;
}
inline void ProjectionData::clear_has_definition() {
  _oneof_case_[0] = DEFINITION_NOT_SET;
}
inline ProjectionData::DefinitionCase ProjectionData::definition_case() const {
  return ProjectionData::DefinitionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnvelopeData

// double xmin = 1;
inline void EnvelopeData::clear_xmin() {
  xmin_ = 0;
}
inline double EnvelopeData::_internal_xmin() const {
  return xmin_;
}
inline double EnvelopeData::xmin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.xmin)
  return _internal_xmin();
}
inline void EnvelopeData::_internal_set_xmin(double value) {
  
  xmin_ = value;
}
inline void EnvelopeData::set_xmin(double value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.xmin)
}

// double ymin = 2;
inline void EnvelopeData::clear_ymin() {
  ymin_ = 0;
}
inline double EnvelopeData::_internal_ymin() const {
  return ymin_;
}
inline double EnvelopeData::ymin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.ymin)
  return _internal_ymin();
}
inline void EnvelopeData::_internal_set_ymin(double value) {
  
  ymin_ = value;
}
inline void EnvelopeData::set_ymin(double value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.ymin)
}

// double xmax = 3;
inline void EnvelopeData::clear_xmax() {
  xmax_ = 0;
}
inline double EnvelopeData::_internal_xmax() const {
  return xmax_;
}
inline double EnvelopeData::xmax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.xmax)
  return _internal_xmax();
}
inline void EnvelopeData::_internal_set_xmax(double value) {
  
  xmax_ = value;
}
inline void EnvelopeData::set_xmax(double value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.xmax)
}

// double ymax = 4;
inline void EnvelopeData::clear_ymax() {
  ymax_ = 0;
}
inline double EnvelopeData::_internal_ymax() const {
  return ymax_;
}
inline double EnvelopeData::ymax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.ymax)
  return _internal_ymax();
}
inline void EnvelopeData::_internal_set_ymax(double value) {
  
  ymax_ = value;
}
inline void EnvelopeData::set_ymax(double value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.ymax)
}

// .epl.protobuf.v1.ProjectionData proj = 5;
inline bool EnvelopeData::_internal_has_proj() const {
  return this != internal_default_instance() && proj_ != nullptr;
}
inline bool EnvelopeData::has_proj() const {
  return _internal_has_proj();
}
inline void EnvelopeData::clear_proj() {
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& EnvelopeData::_internal_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& EnvelopeData::proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.proj)
  return _internal_proj();
}
inline void EnvelopeData::unsafe_arena_set_allocated_proj(
    ::epl::protobuf::v1::ProjectionData* proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proj_);
  }
  proj_ = proj;
  if (proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.EnvelopeData.proj)
}
inline ::epl::protobuf::v1::ProjectionData* EnvelopeData::release_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* EnvelopeData::unsafe_arena_release_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.EnvelopeData.proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = proj_;
  proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* EnvelopeData::_internal_mutable_proj() {
  
  if (proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    proj_ = p;
  }
  return proj_;
}
inline ::epl::protobuf::v1::ProjectionData* EnvelopeData::mutable_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.EnvelopeData.proj)
  return _internal_mutable_proj();
}
inline void EnvelopeData::set_allocated_proj(::epl::protobuf::v1::ProjectionData* proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete proj_;
  }
  if (proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proj);
    if (message_arena != submessage_arena) {
      proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proj, submessage_arena);
    }
    
  } else {
    
  }
  proj_ = proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.EnvelopeData.proj)
}

// double zmin = 6;
inline void EnvelopeData::clear_zmin() {
  zmin_ = 0;
}
inline double EnvelopeData::_internal_zmin() const {
  return zmin_;
}
inline double EnvelopeData::zmin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.zmin)
  return _internal_zmin();
}
inline void EnvelopeData::_internal_set_zmin(double value) {
  
  zmin_ = value;
}
inline void EnvelopeData::set_zmin(double value) {
  _internal_set_zmin(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.zmin)
}

// double zmax = 7;
inline void EnvelopeData::clear_zmax() {
  zmax_ = 0;
}
inline double EnvelopeData::_internal_zmax() const {
  return zmax_;
}
inline double EnvelopeData::zmax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.EnvelopeData.zmax)
  return _internal_zmax();
}
inline void EnvelopeData::_internal_set_zmax(double value) {
  
  zmax_ = value;
}
inline void EnvelopeData::set_zmax(double value) {
  _internal_set_zmax(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.EnvelopeData.zmax)
}

// -------------------------------------------------------------------

// GeometryRequest

// .epl.protobuf.v1.GeometryData geometry = 1;
inline bool GeometryRequest::_internal_has_geometry() const {
  return left_case() == kGeometry;
}
inline bool GeometryRequest::has_geometry() const {
  return _internal_has_geometry();
}
inline void GeometryRequest::set_has_geometry() {
  _oneof_case_[0] = kGeometry;
}
inline void GeometryRequest::clear_geometry() {
  if (_internal_has_geometry()) {
    if (GetArena() == nullptr) {
      delete left_.geometry_;
    }
    clear_has_left();
  }
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.geometry)
  if (_internal_has_geometry()) {
    clear_has_left();
      ::epl::protobuf::v1::GeometryData* temp = left_.geometry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    left_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::_internal_geometry() const {
  return _internal_has_geometry()
      ? *left_.geometry_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.geometry)
  return _internal_geometry();
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.geometry)
  if (_internal_has_geometry()) {
    clear_has_left();
    ::epl::protobuf::v1::GeometryData* temp = left_.geometry_;
    left_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  clear_left();
  if (geometry) {
    set_has_geometry();
    left_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.geometry)
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::_internal_mutable_geometry() {
  if (!_internal_has_geometry()) {
    clear_left();
    set_has_geometry();
    left_.geometry_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return left_.geometry_;
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.geometry)
  return _internal_mutable_geometry();
}

// .epl.protobuf.v1.GeometryData left_geometry = 2;
inline bool GeometryRequest::_internal_has_left_geometry() const {
  return left_case() == kLeftGeometry;
}
inline bool GeometryRequest::has_left_geometry() const {
  return _internal_has_left_geometry();
}
inline void GeometryRequest::set_has_left_geometry() {
  _oneof_case_[0] = kLeftGeometry;
}
inline void GeometryRequest::clear_left_geometry() {
  if (_internal_has_left_geometry()) {
    if (GetArena() == nullptr) {
      delete left_.left_geometry_;
    }
    clear_has_left();
  }
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::release_left_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.left_geometry)
  if (_internal_has_left_geometry()) {
    clear_has_left();
      ::epl::protobuf::v1::GeometryData* temp = left_.left_geometry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    left_.left_geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::_internal_left_geometry() const {
  return _internal_has_left_geometry()
      ? *left_.left_geometry_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::left_geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.left_geometry)
  return _internal_left_geometry();
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::unsafe_arena_release_left_geometry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.left_geometry)
  if (_internal_has_left_geometry()) {
    clear_has_left();
    ::epl::protobuf::v1::GeometryData* temp = left_.left_geometry_;
    left_.left_geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_left_geometry(::epl::protobuf::v1::GeometryData* left_geometry) {
  clear_left();
  if (left_geometry) {
    set_has_left_geometry();
    left_.left_geometry_ = left_geometry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.left_geometry)
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::_internal_mutable_left_geometry() {
  if (!_internal_has_left_geometry()) {
    clear_left();
    set_has_left_geometry();
    left_.left_geometry_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return left_.left_geometry_;
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::mutable_left_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.left_geometry)
  return _internal_mutable_left_geometry();
}

// .epl.protobuf.v1.GeometryRequest geometry_request = 3;
inline bool GeometryRequest::_internal_has_geometry_request() const {
  return left_case() == kGeometryRequest;
}
inline bool GeometryRequest::has_geometry_request() const {
  return _internal_has_geometry_request();
}
inline void GeometryRequest::set_has_geometry_request() {
  _oneof_case_[0] = kGeometryRequest;
}
inline void GeometryRequest::clear_geometry_request() {
  if (_internal_has_geometry_request()) {
    if (GetArena() == nullptr) {
      delete left_.geometry_request_;
    }
    clear_has_left();
  }
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::release_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.geometry_request)
  if (_internal_has_geometry_request()) {
    clear_has_left();
      ::epl::protobuf::v1::GeometryRequest* temp = left_.geometry_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    left_.geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::_internal_geometry_request() const {
  return _internal_has_geometry_request()
      ? *left_.geometry_request_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryRequest&>(::epl::protobuf::v1::_GeometryRequest_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::geometry_request() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.geometry_request)
  return _internal_geometry_request();
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::unsafe_arena_release_geometry_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.geometry_request)
  if (_internal_has_geometry_request()) {
    clear_has_left();
    ::epl::protobuf::v1::GeometryRequest* temp = left_.geometry_request_;
    left_.geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request) {
  clear_left();
  if (geometry_request) {
    set_has_geometry_request();
    left_.geometry_request_ = geometry_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.geometry_request)
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::_internal_mutable_geometry_request() {
  if (!_internal_has_geometry_request()) {
    clear_left();
    set_has_geometry_request();
    left_.geometry_request_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryRequest >(GetArena());
  }
  return left_.geometry_request_;
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::mutable_geometry_request() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.geometry_request)
  return _internal_mutable_geometry_request();
}

// .epl.protobuf.v1.GeometryRequest left_geometry_request = 4;
inline bool GeometryRequest::_internal_has_left_geometry_request() const {
  return left_case() == kLeftGeometryRequest;
}
inline bool GeometryRequest::has_left_geometry_request() const {
  return _internal_has_left_geometry_request();
}
inline void GeometryRequest::set_has_left_geometry_request() {
  _oneof_case_[0] = kLeftGeometryRequest;
}
inline void GeometryRequest::clear_left_geometry_request() {
  if (_internal_has_left_geometry_request()) {
    if (GetArena() == nullptr) {
      delete left_.left_geometry_request_;
    }
    clear_has_left();
  }
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::release_left_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.left_geometry_request)
  if (_internal_has_left_geometry_request()) {
    clear_has_left();
      ::epl::protobuf::v1::GeometryRequest* temp = left_.left_geometry_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    left_.left_geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::_internal_left_geometry_request() const {
  return _internal_has_left_geometry_request()
      ? *left_.left_geometry_request_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryRequest&>(::epl::protobuf::v1::_GeometryRequest_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::left_geometry_request() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.left_geometry_request)
  return _internal_left_geometry_request();
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::unsafe_arena_release_left_geometry_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.left_geometry_request)
  if (_internal_has_left_geometry_request()) {
    clear_has_left();
    ::epl::protobuf::v1::GeometryRequest* temp = left_.left_geometry_request_;
    left_.left_geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_left_geometry_request(::epl::protobuf::v1::GeometryRequest* left_geometry_request) {
  clear_left();
  if (left_geometry_request) {
    set_has_left_geometry_request();
    left_.left_geometry_request_ = left_geometry_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.left_geometry_request)
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::_internal_mutable_left_geometry_request() {
  if (!_internal_has_left_geometry_request()) {
    clear_left();
    set_has_left_geometry_request();
    left_.left_geometry_request_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryRequest >(GetArena());
  }
  return left_.left_geometry_request_;
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::mutable_left_geometry_request() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.left_geometry_request)
  return _internal_mutable_left_geometry_request();
}

// .epl.protobuf.v1.GeometryData right_geometry = 5;
inline bool GeometryRequest::_internal_has_right_geometry() const {
  return right_case() == kRightGeometry;
}
inline bool GeometryRequest::has_right_geometry() const {
  return _internal_has_right_geometry();
}
inline void GeometryRequest::set_has_right_geometry() {
  _oneof_case_[1] = kRightGeometry;
}
inline void GeometryRequest::clear_right_geometry() {
  if (_internal_has_right_geometry()) {
    if (GetArena() == nullptr) {
      delete right_.right_geometry_;
    }
    clear_has_right();
  }
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::release_right_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.right_geometry)
  if (_internal_has_right_geometry()) {
    clear_has_right();
      ::epl::protobuf::v1::GeometryData* temp = right_.right_geometry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    right_.right_geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::_internal_right_geometry() const {
  return _internal_has_right_geometry()
      ? *right_.right_geometry_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& GeometryRequest::right_geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.right_geometry)
  return _internal_right_geometry();
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::unsafe_arena_release_right_geometry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.right_geometry)
  if (_internal_has_right_geometry()) {
    clear_has_right();
    ::epl::protobuf::v1::GeometryData* temp = right_.right_geometry_;
    right_.right_geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_right_geometry(::epl::protobuf::v1::GeometryData* right_geometry) {
  clear_right();
  if (right_geometry) {
    set_has_right_geometry();
    right_.right_geometry_ = right_geometry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.right_geometry)
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::_internal_mutable_right_geometry() {
  if (!_internal_has_right_geometry()) {
    clear_right();
    set_has_right_geometry();
    right_.right_geometry_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return right_.right_geometry_;
}
inline ::epl::protobuf::v1::GeometryData* GeometryRequest::mutable_right_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.right_geometry)
  return _internal_mutable_right_geometry();
}

// .epl.protobuf.v1.GeometryRequest right_geometry_request = 6;
inline bool GeometryRequest::_internal_has_right_geometry_request() const {
  return right_case() == kRightGeometryRequest;
}
inline bool GeometryRequest::has_right_geometry_request() const {
  return _internal_has_right_geometry_request();
}
inline void GeometryRequest::set_has_right_geometry_request() {
  _oneof_case_[1] = kRightGeometryRequest;
}
inline void GeometryRequest::clear_right_geometry_request() {
  if (_internal_has_right_geometry_request()) {
    if (GetArena() == nullptr) {
      delete right_.right_geometry_request_;
    }
    clear_has_right();
  }
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::release_right_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.right_geometry_request)
  if (_internal_has_right_geometry_request()) {
    clear_has_right();
      ::epl::protobuf::v1::GeometryRequest* temp = right_.right_geometry_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    right_.right_geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::_internal_right_geometry_request() const {
  return _internal_has_right_geometry_request()
      ? *right_.right_geometry_request_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryRequest&>(::epl::protobuf::v1::_GeometryRequest_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryRequest& GeometryRequest::right_geometry_request() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.right_geometry_request)
  return _internal_right_geometry_request();
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::unsafe_arena_release_right_geometry_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.right_geometry_request)
  if (_internal_has_right_geometry_request()) {
    clear_has_right();
    ::epl::protobuf::v1::GeometryRequest* temp = right_.right_geometry_request_;
    right_.right_geometry_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_right_geometry_request(::epl::protobuf::v1::GeometryRequest* right_geometry_request) {
  clear_right();
  if (right_geometry_request) {
    set_has_right_geometry_request();
    right_.right_geometry_request_ = right_geometry_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.right_geometry_request)
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::_internal_mutable_right_geometry_request() {
  if (!_internal_has_right_geometry_request()) {
    clear_right();
    set_has_right_geometry_request();
    right_.right_geometry_request_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryRequest >(GetArena());
  }
  return right_.right_geometry_request_;
}
inline ::epl::protobuf::v1::GeometryRequest* GeometryRequest::mutable_right_geometry_request() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.right_geometry_request)
  return _internal_mutable_right_geometry_request();
}

// .epl.protobuf.v1.OperatorType operator = 7;
inline void GeometryRequest::clear_operator_() {
  operator__ = 0;
}
inline ::epl::protobuf::v1::OperatorType GeometryRequest::_internal_operator_() const {
  return static_cast< ::epl::protobuf::v1::OperatorType >(operator__);
}
inline ::epl::protobuf::v1::OperatorType GeometryRequest::operator_() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.operator)
  return _internal_operator_();
}
inline void GeometryRequest::_internal_set_operator_(::epl::protobuf::v1::OperatorType value) {
  
  operator__ = value;
}
inline void GeometryRequest::set_operator_(::epl::protobuf::v1::OperatorType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryRequest.operator)
}

// .epl.protobuf.v1.Encoding result_encoding = 8;
inline void GeometryRequest::clear_result_encoding() {
  result_encoding_ = 0;
}
inline ::epl::protobuf::v1::Encoding GeometryRequest::_internal_result_encoding() const {
  return static_cast< ::epl::protobuf::v1::Encoding >(result_encoding_);
}
inline ::epl::protobuf::v1::Encoding GeometryRequest::result_encoding() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.result_encoding)
  return _internal_result_encoding();
}
inline void GeometryRequest::_internal_set_result_encoding(::epl::protobuf::v1::Encoding value) {
  
  result_encoding_ = value;
}
inline void GeometryRequest::set_result_encoding(::epl::protobuf::v1::Encoding value) {
  _internal_set_result_encoding(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryRequest.result_encoding)
}

// .epl.protobuf.v1.ProjectionData operation_proj = 9;
inline bool GeometryRequest::_internal_has_operation_proj() const {
  return this != internal_default_instance() && operation_proj_ != nullptr;
}
inline bool GeometryRequest::has_operation_proj() const {
  return _internal_has_operation_proj();
}
inline void GeometryRequest::clear_operation_proj() {
  if (GetArena() == nullptr && operation_proj_ != nullptr) {
    delete operation_proj_;
  }
  operation_proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryRequest::_internal_operation_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = operation_proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryRequest::operation_proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.operation_proj)
  return _internal_operation_proj();
}
inline void GeometryRequest::unsafe_arena_set_allocated_operation_proj(
    ::epl::protobuf::v1::ProjectionData* operation_proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_proj_);
  }
  operation_proj_ = operation_proj;
  if (operation_proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.operation_proj)
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::release_operation_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = operation_proj_;
  operation_proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::unsafe_arena_release_operation_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.operation_proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = operation_proj_;
  operation_proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::_internal_mutable_operation_proj() {
  
  if (operation_proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    operation_proj_ = p;
  }
  return operation_proj_;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::mutable_operation_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.operation_proj)
  return _internal_mutable_operation_proj();
}
inline void GeometryRequest::set_allocated_operation_proj(::epl::protobuf::v1::ProjectionData* operation_proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete operation_proj_;
  }
  if (operation_proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(operation_proj);
    if (message_arena != submessage_arena) {
      operation_proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_proj, submessage_arena);
    }
    
  } else {
    
  }
  operation_proj_ = operation_proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.operation_proj)
}

// .epl.protobuf.v1.ProjectionData result_proj = 10;
inline bool GeometryRequest::_internal_has_result_proj() const {
  return this != internal_default_instance() && result_proj_ != nullptr;
}
inline bool GeometryRequest::has_result_proj() const {
  return _internal_has_result_proj();
}
inline void GeometryRequest::clear_result_proj() {
  if (GetArena() == nullptr && result_proj_ != nullptr) {
    delete result_proj_;
  }
  result_proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryRequest::_internal_result_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = result_proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& GeometryRequest::result_proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.result_proj)
  return _internal_result_proj();
}
inline void GeometryRequest::unsafe_arena_set_allocated_result_proj(
    ::epl::protobuf::v1::ProjectionData* result_proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_proj_);
  }
  result_proj_ = result_proj;
  if (result_proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.result_proj)
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::release_result_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = result_proj_;
  result_proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::unsafe_arena_release_result_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.result_proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = result_proj_;
  result_proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::_internal_mutable_result_proj() {
  
  if (result_proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    result_proj_ = p;
  }
  return result_proj_;
}
inline ::epl::protobuf::v1::ProjectionData* GeometryRequest::mutable_result_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.result_proj)
  return _internal_mutable_result_proj();
}
inline void GeometryRequest::set_allocated_result_proj(::epl::protobuf::v1::ProjectionData* result_proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_proj_;
  }
  if (result_proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_proj);
    if (message_arena != submessage_arena) {
      result_proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_proj, submessage_arena);
    }
    
  } else {
    
  }
  result_proj_ = result_proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.result_proj)
}

// .epl.protobuf.v1.Params.Buffer buffer_params = 11;
inline bool GeometryRequest::_internal_has_buffer_params() const {
  return params_case() == kBufferParams;
}
inline bool GeometryRequest::has_buffer_params() const {
  return _internal_has_buffer_params();
}
inline void GeometryRequest::set_has_buffer_params() {
  _oneof_case_[2] = kBufferParams;
}
inline void GeometryRequest::clear_buffer_params() {
  if (_internal_has_buffer_params()) {
    if (GetArena() == nullptr) {
      delete params_.buffer_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Buffer* GeometryRequest::release_buffer_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.buffer_params)
  if (_internal_has_buffer_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Buffer* temp = params_.buffer_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.buffer_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Buffer& GeometryRequest::_internal_buffer_params() const {
  return _internal_has_buffer_params()
      ? *params_.buffer_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Buffer&>(::epl::protobuf::v1::_Params_Buffer_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Buffer& GeometryRequest::buffer_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.buffer_params)
  return _internal_buffer_params();
}
inline ::epl::protobuf::v1::Params_Buffer* GeometryRequest::unsafe_arena_release_buffer_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.buffer_params)
  if (_internal_has_buffer_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Buffer* temp = params_.buffer_params_;
    params_.buffer_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_buffer_params(::epl::protobuf::v1::Params_Buffer* buffer_params) {
  clear_params();
  if (buffer_params) {
    set_has_buffer_params();
    params_.buffer_params_ = buffer_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.buffer_params)
}
inline ::epl::protobuf::v1::Params_Buffer* GeometryRequest::_internal_mutable_buffer_params() {
  if (!_internal_has_buffer_params()) {
    clear_params();
    set_has_buffer_params();
    params_.buffer_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Buffer >(GetArena());
  }
  return params_.buffer_params_;
}
inline ::epl::protobuf::v1::Params_Buffer* GeometryRequest::mutable_buffer_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.buffer_params)
  return _internal_mutable_buffer_params();
}

// .epl.protobuf.v1.Params.Convex convex_params = 12;
inline bool GeometryRequest::_internal_has_convex_params() const {
  return params_case() == kConvexParams;
}
inline bool GeometryRequest::has_convex_params() const {
  return _internal_has_convex_params();
}
inline void GeometryRequest::set_has_convex_params() {
  _oneof_case_[2] = kConvexParams;
}
inline void GeometryRequest::clear_convex_params() {
  if (_internal_has_convex_params()) {
    if (GetArena() == nullptr) {
      delete params_.convex_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Convex* GeometryRequest::release_convex_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.convex_params)
  if (_internal_has_convex_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Convex* temp = params_.convex_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.convex_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Convex& GeometryRequest::_internal_convex_params() const {
  return _internal_has_convex_params()
      ? *params_.convex_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Convex&>(::epl::protobuf::v1::_Params_Convex_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Convex& GeometryRequest::convex_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.convex_params)
  return _internal_convex_params();
}
inline ::epl::protobuf::v1::Params_Convex* GeometryRequest::unsafe_arena_release_convex_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.convex_params)
  if (_internal_has_convex_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Convex* temp = params_.convex_params_;
    params_.convex_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_convex_params(::epl::protobuf::v1::Params_Convex* convex_params) {
  clear_params();
  if (convex_params) {
    set_has_convex_params();
    params_.convex_params_ = convex_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.convex_params)
}
inline ::epl::protobuf::v1::Params_Convex* GeometryRequest::_internal_mutable_convex_params() {
  if (!_internal_has_convex_params()) {
    clear_params();
    set_has_convex_params();
    params_.convex_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Convex >(GetArena());
  }
  return params_.convex_params_;
}
inline ::epl::protobuf::v1::Params_Convex* GeometryRequest::mutable_convex_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.convex_params)
  return _internal_mutable_convex_params();
}

// .epl.protobuf.v1.Params.Relate relate_params = 13;
inline bool GeometryRequest::_internal_has_relate_params() const {
  return params_case() == kRelateParams;
}
inline bool GeometryRequest::has_relate_params() const {
  return _internal_has_relate_params();
}
inline void GeometryRequest::set_has_relate_params() {
  _oneof_case_[2] = kRelateParams;
}
inline void GeometryRequest::clear_relate_params() {
  if (_internal_has_relate_params()) {
    if (GetArena() == nullptr) {
      delete params_.relate_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Relate* GeometryRequest::release_relate_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.relate_params)
  if (_internal_has_relate_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Relate* temp = params_.relate_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.relate_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Relate& GeometryRequest::_internal_relate_params() const {
  return _internal_has_relate_params()
      ? *params_.relate_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Relate&>(::epl::protobuf::v1::_Params_Relate_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Relate& GeometryRequest::relate_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.relate_params)
  return _internal_relate_params();
}
inline ::epl::protobuf::v1::Params_Relate* GeometryRequest::unsafe_arena_release_relate_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.relate_params)
  if (_internal_has_relate_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Relate* temp = params_.relate_params_;
    params_.relate_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_relate_params(::epl::protobuf::v1::Params_Relate* relate_params) {
  clear_params();
  if (relate_params) {
    set_has_relate_params();
    params_.relate_params_ = relate_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.relate_params)
}
inline ::epl::protobuf::v1::Params_Relate* GeometryRequest::_internal_mutable_relate_params() {
  if (!_internal_has_relate_params()) {
    clear_params();
    set_has_relate_params();
    params_.relate_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Relate >(GetArena());
  }
  return params_.relate_params_;
}
inline ::epl::protobuf::v1::Params_Relate* GeometryRequest::mutable_relate_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.relate_params)
  return _internal_mutable_relate_params();
}

// .epl.protobuf.v1.Params.RandomPoints random_points_params = 14;
inline bool GeometryRequest::_internal_has_random_points_params() const {
  return params_case() == kRandomPointsParams;
}
inline bool GeometryRequest::has_random_points_params() const {
  return _internal_has_random_points_params();
}
inline void GeometryRequest::set_has_random_points_params() {
  _oneof_case_[2] = kRandomPointsParams;
}
inline void GeometryRequest::clear_random_points_params() {
  if (_internal_has_random_points_params()) {
    if (GetArena() == nullptr) {
      delete params_.random_points_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_RandomPoints* GeometryRequest::release_random_points_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.random_points_params)
  if (_internal_has_random_points_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_RandomPoints* temp = params_.random_points_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.random_points_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_RandomPoints& GeometryRequest::_internal_random_points_params() const {
  return _internal_has_random_points_params()
      ? *params_.random_points_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_RandomPoints&>(::epl::protobuf::v1::_Params_RandomPoints_default_instance_);
}
inline const ::epl::protobuf::v1::Params_RandomPoints& GeometryRequest::random_points_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.random_points_params)
  return _internal_random_points_params();
}
inline ::epl::protobuf::v1::Params_RandomPoints* GeometryRequest::unsafe_arena_release_random_points_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.random_points_params)
  if (_internal_has_random_points_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_RandomPoints* temp = params_.random_points_params_;
    params_.random_points_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_random_points_params(::epl::protobuf::v1::Params_RandomPoints* random_points_params) {
  clear_params();
  if (random_points_params) {
    set_has_random_points_params();
    params_.random_points_params_ = random_points_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.random_points_params)
}
inline ::epl::protobuf::v1::Params_RandomPoints* GeometryRequest::_internal_mutable_random_points_params() {
  if (!_internal_has_random_points_params()) {
    clear_params();
    set_has_random_points_params();
    params_.random_points_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_RandomPoints >(GetArena());
  }
  return params_.random_points_params_;
}
inline ::epl::protobuf::v1::Params_RandomPoints* GeometryRequest::mutable_random_points_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.random_points_params)
  return _internal_mutable_random_points_params();
}

// .epl.protobuf.v1.Params.Generalize generalize_params = 15;
inline bool GeometryRequest::_internal_has_generalize_params() const {
  return params_case() == kGeneralizeParams;
}
inline bool GeometryRequest::has_generalize_params() const {
  return _internal_has_generalize_params();
}
inline void GeometryRequest::set_has_generalize_params() {
  _oneof_case_[2] = kGeneralizeParams;
}
inline void GeometryRequest::clear_generalize_params() {
  if (_internal_has_generalize_params()) {
    if (GetArena() == nullptr) {
      delete params_.generalize_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Generalize* GeometryRequest::release_generalize_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.generalize_params)
  if (_internal_has_generalize_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Generalize* temp = params_.generalize_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.generalize_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Generalize& GeometryRequest::_internal_generalize_params() const {
  return _internal_has_generalize_params()
      ? *params_.generalize_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Generalize&>(::epl::protobuf::v1::_Params_Generalize_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Generalize& GeometryRequest::generalize_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.generalize_params)
  return _internal_generalize_params();
}
inline ::epl::protobuf::v1::Params_Generalize* GeometryRequest::unsafe_arena_release_generalize_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.generalize_params)
  if (_internal_has_generalize_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Generalize* temp = params_.generalize_params_;
    params_.generalize_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_generalize_params(::epl::protobuf::v1::Params_Generalize* generalize_params) {
  clear_params();
  if (generalize_params) {
    set_has_generalize_params();
    params_.generalize_params_ = generalize_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.generalize_params)
}
inline ::epl::protobuf::v1::Params_Generalize* GeometryRequest::_internal_mutable_generalize_params() {
  if (!_internal_has_generalize_params()) {
    clear_params();
    set_has_generalize_params();
    params_.generalize_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Generalize >(GetArena());
  }
  return params_.generalize_params_;
}
inline ::epl::protobuf::v1::Params_Generalize* GeometryRequest::mutable_generalize_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.generalize_params)
  return _internal_mutable_generalize_params();
}

// .epl.protobuf.v1.Params.Intersection intersection_params = 16;
inline bool GeometryRequest::_internal_has_intersection_params() const {
  return params_case() == kIntersectionParams;
}
inline bool GeometryRequest::has_intersection_params() const {
  return _internal_has_intersection_params();
}
inline void GeometryRequest::set_has_intersection_params() {
  _oneof_case_[2] = kIntersectionParams;
}
inline void GeometryRequest::clear_intersection_params() {
  if (_internal_has_intersection_params()) {
    if (GetArena() == nullptr) {
      delete params_.intersection_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Intersection* GeometryRequest::release_intersection_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.intersection_params)
  if (_internal_has_intersection_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Intersection* temp = params_.intersection_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.intersection_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Intersection& GeometryRequest::_internal_intersection_params() const {
  return _internal_has_intersection_params()
      ? *params_.intersection_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Intersection&>(::epl::protobuf::v1::_Params_Intersection_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Intersection& GeometryRequest::intersection_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.intersection_params)
  return _internal_intersection_params();
}
inline ::epl::protobuf::v1::Params_Intersection* GeometryRequest::unsafe_arena_release_intersection_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.intersection_params)
  if (_internal_has_intersection_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Intersection* temp = params_.intersection_params_;
    params_.intersection_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_intersection_params(::epl::protobuf::v1::Params_Intersection* intersection_params) {
  clear_params();
  if (intersection_params) {
    set_has_intersection_params();
    params_.intersection_params_ = intersection_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.intersection_params)
}
inline ::epl::protobuf::v1::Params_Intersection* GeometryRequest::_internal_mutable_intersection_params() {
  if (!_internal_has_intersection_params()) {
    clear_params();
    set_has_intersection_params();
    params_.intersection_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Intersection >(GetArena());
  }
  return params_.intersection_params_;
}
inline ::epl::protobuf::v1::Params_Intersection* GeometryRequest::mutable_intersection_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.intersection_params)
  return _internal_mutable_intersection_params();
}

// .epl.protobuf.v1.Params.Offset offset_params = 17;
inline bool GeometryRequest::_internal_has_offset_params() const {
  return params_case() == kOffsetParams;
}
inline bool GeometryRequest::has_offset_params() const {
  return _internal_has_offset_params();
}
inline void GeometryRequest::set_has_offset_params() {
  _oneof_case_[2] = kOffsetParams;
}
inline void GeometryRequest::clear_offset_params() {
  if (_internal_has_offset_params()) {
    if (GetArena() == nullptr) {
      delete params_.offset_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Offset* GeometryRequest::release_offset_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.offset_params)
  if (_internal_has_offset_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Offset* temp = params_.offset_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.offset_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Offset& GeometryRequest::_internal_offset_params() const {
  return _internal_has_offset_params()
      ? *params_.offset_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Offset&>(::epl::protobuf::v1::_Params_Offset_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Offset& GeometryRequest::offset_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.offset_params)
  return _internal_offset_params();
}
inline ::epl::protobuf::v1::Params_Offset* GeometryRequest::unsafe_arena_release_offset_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.offset_params)
  if (_internal_has_offset_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Offset* temp = params_.offset_params_;
    params_.offset_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_offset_params(::epl::protobuf::v1::Params_Offset* offset_params) {
  clear_params();
  if (offset_params) {
    set_has_offset_params();
    params_.offset_params_ = offset_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.offset_params)
}
inline ::epl::protobuf::v1::Params_Offset* GeometryRequest::_internal_mutable_offset_params() {
  if (!_internal_has_offset_params()) {
    clear_params();
    set_has_offset_params();
    params_.offset_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Offset >(GetArena());
  }
  return params_.offset_params_;
}
inline ::epl::protobuf::v1::Params_Offset* GeometryRequest::mutable_offset_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.offset_params)
  return _internal_mutable_offset_params();
}

// .epl.protobuf.v1.Params.Cut cut_params = 18;
inline bool GeometryRequest::_internal_has_cut_params() const {
  return params_case() == kCutParams;
}
inline bool GeometryRequest::has_cut_params() const {
  return _internal_has_cut_params();
}
inline void GeometryRequest::set_has_cut_params() {
  _oneof_case_[2] = kCutParams;
}
inline void GeometryRequest::clear_cut_params() {
  if (_internal_has_cut_params()) {
    if (GetArena() == nullptr) {
      delete params_.cut_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Cut* GeometryRequest::release_cut_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.cut_params)
  if (_internal_has_cut_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Cut* temp = params_.cut_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.cut_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Cut& GeometryRequest::_internal_cut_params() const {
  return _internal_has_cut_params()
      ? *params_.cut_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Cut&>(::epl::protobuf::v1::_Params_Cut_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Cut& GeometryRequest::cut_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.cut_params)
  return _internal_cut_params();
}
inline ::epl::protobuf::v1::Params_Cut* GeometryRequest::unsafe_arena_release_cut_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.cut_params)
  if (_internal_has_cut_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Cut* temp = params_.cut_params_;
    params_.cut_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_cut_params(::epl::protobuf::v1::Params_Cut* cut_params) {
  clear_params();
  if (cut_params) {
    set_has_cut_params();
    params_.cut_params_ = cut_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.cut_params)
}
inline ::epl::protobuf::v1::Params_Cut* GeometryRequest::_internal_mutable_cut_params() {
  if (!_internal_has_cut_params()) {
    clear_params();
    set_has_cut_params();
    params_.cut_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Cut >(GetArena());
  }
  return params_.cut_params_;
}
inline ::epl::protobuf::v1::Params_Cut* GeometryRequest::mutable_cut_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.cut_params)
  return _internal_mutable_cut_params();
}

// .epl.protobuf.v1.Params.Clip clip_params = 19;
inline bool GeometryRequest::_internal_has_clip_params() const {
  return params_case() == kClipParams;
}
inline bool GeometryRequest::has_clip_params() const {
  return _internal_has_clip_params();
}
inline void GeometryRequest::set_has_clip_params() {
  _oneof_case_[2] = kClipParams;
}
inline void GeometryRequest::clear_clip_params() {
  if (_internal_has_clip_params()) {
    if (GetArena() == nullptr) {
      delete params_.clip_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Clip* GeometryRequest::release_clip_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.clip_params)
  if (_internal_has_clip_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Clip* temp = params_.clip_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.clip_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Clip& GeometryRequest::_internal_clip_params() const {
  return _internal_has_clip_params()
      ? *params_.clip_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Clip&>(::epl::protobuf::v1::_Params_Clip_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Clip& GeometryRequest::clip_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.clip_params)
  return _internal_clip_params();
}
inline ::epl::protobuf::v1::Params_Clip* GeometryRequest::unsafe_arena_release_clip_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.clip_params)
  if (_internal_has_clip_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Clip* temp = params_.clip_params_;
    params_.clip_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_clip_params(::epl::protobuf::v1::Params_Clip* clip_params) {
  clear_params();
  if (clip_params) {
    set_has_clip_params();
    params_.clip_params_ = clip_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.clip_params)
}
inline ::epl::protobuf::v1::Params_Clip* GeometryRequest::_internal_mutable_clip_params() {
  if (!_internal_has_clip_params()) {
    clear_params();
    set_has_clip_params();
    params_.clip_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Clip >(GetArena());
  }
  return params_.clip_params_;
}
inline ::epl::protobuf::v1::Params_Clip* GeometryRequest::mutable_clip_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.clip_params)
  return _internal_mutable_clip_params();
}

// .epl.protobuf.v1.Params.Densify densify_params = 20;
inline bool GeometryRequest::_internal_has_densify_params() const {
  return params_case() == kDensifyParams;
}
inline bool GeometryRequest::has_densify_params() const {
  return _internal_has_densify_params();
}
inline void GeometryRequest::set_has_densify_params() {
  _oneof_case_[2] = kDensifyParams;
}
inline void GeometryRequest::clear_densify_params() {
  if (_internal_has_densify_params()) {
    if (GetArena() == nullptr) {
      delete params_.densify_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Densify* GeometryRequest::release_densify_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.densify_params)
  if (_internal_has_densify_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Densify* temp = params_.densify_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.densify_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Densify& GeometryRequest::_internal_densify_params() const {
  return _internal_has_densify_params()
      ? *params_.densify_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Densify&>(::epl::protobuf::v1::_Params_Densify_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Densify& GeometryRequest::densify_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.densify_params)
  return _internal_densify_params();
}
inline ::epl::protobuf::v1::Params_Densify* GeometryRequest::unsafe_arena_release_densify_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.densify_params)
  if (_internal_has_densify_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Densify* temp = params_.densify_params_;
    params_.densify_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_densify_params(::epl::protobuf::v1::Params_Densify* densify_params) {
  clear_params();
  if (densify_params) {
    set_has_densify_params();
    params_.densify_params_ = densify_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.densify_params)
}
inline ::epl::protobuf::v1::Params_Densify* GeometryRequest::_internal_mutable_densify_params() {
  if (!_internal_has_densify_params()) {
    clear_params();
    set_has_densify_params();
    params_.densify_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Densify >(GetArena());
  }
  return params_.densify_params_;
}
inline ::epl::protobuf::v1::Params_Densify* GeometryRequest::mutable_densify_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.densify_params)
  return _internal_mutable_densify_params();
}

// .epl.protobuf.v1.Params.Simplify simplify_params = 21;
inline bool GeometryRequest::_internal_has_simplify_params() const {
  return params_case() == kSimplifyParams;
}
inline bool GeometryRequest::has_simplify_params() const {
  return _internal_has_simplify_params();
}
inline void GeometryRequest::set_has_simplify_params() {
  _oneof_case_[2] = kSimplifyParams;
}
inline void GeometryRequest::clear_simplify_params() {
  if (_internal_has_simplify_params()) {
    if (GetArena() == nullptr) {
      delete params_.simplify_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_Simplify* GeometryRequest::release_simplify_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.simplify_params)
  if (_internal_has_simplify_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_Simplify* temp = params_.simplify_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.simplify_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_Simplify& GeometryRequest::_internal_simplify_params() const {
  return _internal_has_simplify_params()
      ? *params_.simplify_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_Simplify&>(::epl::protobuf::v1::_Params_Simplify_default_instance_);
}
inline const ::epl::protobuf::v1::Params_Simplify& GeometryRequest::simplify_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.simplify_params)
  return _internal_simplify_params();
}
inline ::epl::protobuf::v1::Params_Simplify* GeometryRequest::unsafe_arena_release_simplify_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.simplify_params)
  if (_internal_has_simplify_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_Simplify* temp = params_.simplify_params_;
    params_.simplify_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_simplify_params(::epl::protobuf::v1::Params_Simplify* simplify_params) {
  clear_params();
  if (simplify_params) {
    set_has_simplify_params();
    params_.simplify_params_ = simplify_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.simplify_params)
}
inline ::epl::protobuf::v1::Params_Simplify* GeometryRequest::_internal_mutable_simplify_params() {
  if (!_internal_has_simplify_params()) {
    clear_params();
    set_has_simplify_params();
    params_.simplify_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_Simplify >(GetArena());
  }
  return params_.simplify_params_;
}
inline ::epl::protobuf::v1::Params_Simplify* GeometryRequest::mutable_simplify_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.simplify_params)
  return _internal_mutable_simplify_params();
}

// .epl.protobuf.v1.Params.GeneralizeByArea generalize_by_area_params = 22;
inline bool GeometryRequest::_internal_has_generalize_by_area_params() const {
  return params_case() == kGeneralizeByAreaParams;
}
inline bool GeometryRequest::has_generalize_by_area_params() const {
  return _internal_has_generalize_by_area_params();
}
inline void GeometryRequest::set_has_generalize_by_area_params() {
  _oneof_case_[2] = kGeneralizeByAreaParams;
}
inline void GeometryRequest::clear_generalize_by_area_params() {
  if (_internal_has_generalize_by_area_params()) {
    if (GetArena() == nullptr) {
      delete params_.generalize_by_area_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_GeneralizeByArea* GeometryRequest::release_generalize_by_area_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
  if (_internal_has_generalize_by_area_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_GeneralizeByArea* temp = params_.generalize_by_area_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.generalize_by_area_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_GeneralizeByArea& GeometryRequest::_internal_generalize_by_area_params() const {
  return _internal_has_generalize_by_area_params()
      ? *params_.generalize_by_area_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_GeneralizeByArea&>(::epl::protobuf::v1::_Params_GeneralizeByArea_default_instance_);
}
inline const ::epl::protobuf::v1::Params_GeneralizeByArea& GeometryRequest::generalize_by_area_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
  return _internal_generalize_by_area_params();
}
inline ::epl::protobuf::v1::Params_GeneralizeByArea* GeometryRequest::unsafe_arena_release_generalize_by_area_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
  if (_internal_has_generalize_by_area_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_GeneralizeByArea* temp = params_.generalize_by_area_params_;
    params_.generalize_by_area_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_generalize_by_area_params(::epl::protobuf::v1::Params_GeneralizeByArea* generalize_by_area_params) {
  clear_params();
  if (generalize_by_area_params) {
    set_has_generalize_by_area_params();
    params_.generalize_by_area_params_ = generalize_by_area_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
}
inline ::epl::protobuf::v1::Params_GeneralizeByArea* GeometryRequest::_internal_mutable_generalize_by_area_params() {
  if (!_internal_has_generalize_by_area_params()) {
    clear_params();
    set_has_generalize_by_area_params();
    params_.generalize_by_area_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_GeneralizeByArea >(GetArena());
  }
  return params_.generalize_by_area_params_;
}
inline ::epl::protobuf::v1::Params_GeneralizeByArea* GeometryRequest::mutable_generalize_by_area_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
  return _internal_mutable_generalize_by_area_params();
}

// .epl.protobuf.v1.Params.AffineTransform affine_transform_params = 23;
inline bool GeometryRequest::_internal_has_affine_transform_params() const {
  return params_case() == kAffineTransformParams;
}
inline bool GeometryRequest::has_affine_transform_params() const {
  return _internal_has_affine_transform_params();
}
inline void GeometryRequest::set_has_affine_transform_params() {
  _oneof_case_[2] = kAffineTransformParams;
}
inline void GeometryRequest::clear_affine_transform_params() {
  if (_internal_has_affine_transform_params()) {
    if (GetArena() == nullptr) {
      delete params_.affine_transform_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_AffineTransform* GeometryRequest::release_affine_transform_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.affine_transform_params)
  if (_internal_has_affine_transform_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_AffineTransform* temp = params_.affine_transform_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.affine_transform_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_AffineTransform& GeometryRequest::_internal_affine_transform_params() const {
  return _internal_has_affine_transform_params()
      ? *params_.affine_transform_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_AffineTransform&>(::epl::protobuf::v1::_Params_AffineTransform_default_instance_);
}
inline const ::epl::protobuf::v1::Params_AffineTransform& GeometryRequest::affine_transform_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.affine_transform_params)
  return _internal_affine_transform_params();
}
inline ::epl::protobuf::v1::Params_AffineTransform* GeometryRequest::unsafe_arena_release_affine_transform_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.affine_transform_params)
  if (_internal_has_affine_transform_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_AffineTransform* temp = params_.affine_transform_params_;
    params_.affine_transform_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_affine_transform_params(::epl::protobuf::v1::Params_AffineTransform* affine_transform_params) {
  clear_params();
  if (affine_transform_params) {
    set_has_affine_transform_params();
    params_.affine_transform_params_ = affine_transform_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.affine_transform_params)
}
inline ::epl::protobuf::v1::Params_AffineTransform* GeometryRequest::_internal_mutable_affine_transform_params() {
  if (!_internal_has_affine_transform_params()) {
    clear_params();
    set_has_affine_transform_params();
    params_.affine_transform_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_AffineTransform >(GetArena());
  }
  return params_.affine_transform_params_;
}
inline ::epl::protobuf::v1::Params_AffineTransform* GeometryRequest::mutable_affine_transform_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.affine_transform_params)
  return _internal_mutable_affine_transform_params();
}

// .epl.protobuf.v1.Params.GeodeticBuffer geodetic_buffer_params = 24;
inline bool GeometryRequest::_internal_has_geodetic_buffer_params() const {
  return params_case() == kGeodeticBufferParams;
}
inline bool GeometryRequest::has_geodetic_buffer_params() const {
  return _internal_has_geodetic_buffer_params();
}
inline void GeometryRequest::set_has_geodetic_buffer_params() {
  _oneof_case_[2] = kGeodeticBufferParams;
}
inline void GeometryRequest::clear_geodetic_buffer_params() {
  if (_internal_has_geodetic_buffer_params()) {
    if (GetArena() == nullptr) {
      delete params_.geodetic_buffer_params_;
    }
    clear_has_params();
  }
}
inline ::epl::protobuf::v1::Params_GeodeticBuffer* GeometryRequest::release_geodetic_buffer_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
  if (_internal_has_geodetic_buffer_params()) {
    clear_has_params();
      ::epl::protobuf::v1::Params_GeodeticBuffer* temp = params_.geodetic_buffer_params_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.geodetic_buffer_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::Params_GeodeticBuffer& GeometryRequest::_internal_geodetic_buffer_params() const {
  return _internal_has_geodetic_buffer_params()
      ? *params_.geodetic_buffer_params_
      : reinterpret_cast< ::epl::protobuf::v1::Params_GeodeticBuffer&>(::epl::protobuf::v1::_Params_GeodeticBuffer_default_instance_);
}
inline const ::epl::protobuf::v1::Params_GeodeticBuffer& GeometryRequest::geodetic_buffer_params() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
  return _internal_geodetic_buffer_params();
}
inline ::epl::protobuf::v1::Params_GeodeticBuffer* GeometryRequest::unsafe_arena_release_geodetic_buffer_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
  if (_internal_has_geodetic_buffer_params()) {
    clear_has_params();
    ::epl::protobuf::v1::Params_GeodeticBuffer* temp = params_.geodetic_buffer_params_;
    params_.geodetic_buffer_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryRequest::unsafe_arena_set_allocated_geodetic_buffer_params(::epl::protobuf::v1::Params_GeodeticBuffer* geodetic_buffer_params) {
  clear_params();
  if (geodetic_buffer_params) {
    set_has_geodetic_buffer_params();
    params_.geodetic_buffer_params_ = geodetic_buffer_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
}
inline ::epl::protobuf::v1::Params_GeodeticBuffer* GeometryRequest::_internal_mutable_geodetic_buffer_params() {
  if (!_internal_has_geodetic_buffer_params()) {
    clear_params();
    set_has_geodetic_buffer_params();
    params_.geodetic_buffer_params_ = CreateMaybeMessage< ::epl::protobuf::v1::Params_GeodeticBuffer >(GetArena());
  }
  return params_.geodetic_buffer_params_;
}
inline ::epl::protobuf::v1::Params_GeodeticBuffer* GeometryRequest::mutable_geodetic_buffer_params() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
  return _internal_mutable_geodetic_buffer_params();
}

inline bool GeometryRequest::has_left() const {
  return left_case() != LEFT_NOT_SET;
}
inline void GeometryRequest::clear_has_left() {
  _oneof_case_[0] = LEFT_NOT_SET;
}
inline bool GeometryRequest::has_right() const {
  return right_case() != RIGHT_NOT_SET;
}
inline void GeometryRequest::clear_has_right() {
  _oneof_case_[1] = RIGHT_NOT_SET;
}
inline bool GeometryRequest::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void GeometryRequest::clear_has_params() {
  _oneof_case_[2] = PARAMS_NOT_SET;
}
inline GeometryRequest::LeftCase GeometryRequest::left_case() const {
  return GeometryRequest::LeftCase(_oneof_case_[0]);
}
inline GeometryRequest::RightCase GeometryRequest::right_case() const {
  return GeometryRequest::RightCase(_oneof_case_[1]);
}
inline GeometryRequest::ParamsCase GeometryRequest::params_case() const {
  return GeometryRequest::ParamsCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// GeodeticInverse

// double az12 = 1;
inline void GeodeticInverse::clear_az12() {
  az12_ = 0;
}
inline double GeodeticInverse::_internal_az12() const {
  return az12_;
}
inline double GeodeticInverse::az12() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeodeticInverse.az12)
  return _internal_az12();
}
inline void GeodeticInverse::_internal_set_az12(double value) {
  
  az12_ = value;
}
inline void GeodeticInverse::set_az12(double value) {
  _internal_set_az12(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeodeticInverse.az12)
}

// double az21 = 2;
inline void GeodeticInverse::clear_az21() {
  az21_ = 0;
}
inline double GeodeticInverse::_internal_az21() const {
  return az21_;
}
inline double GeodeticInverse::az21() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeodeticInverse.az21)
  return _internal_az21();
}
inline void GeodeticInverse::_internal_set_az21(double value) {
  
  az21_ = value;
}
inline void GeodeticInverse::set_az21(double value) {
  _internal_set_az21(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeodeticInverse.az21)
}

// double distance = 3;
inline void GeodeticInverse::clear_distance() {
  distance_ = 0;
}
inline double GeodeticInverse::_internal_distance() const {
  return distance_;
}
inline double GeodeticInverse::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeodeticInverse.distance)
  return _internal_distance();
}
inline void GeodeticInverse::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void GeodeticInverse::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeodeticInverse.distance)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GeometryResponse

// .epl.protobuf.v1.GeometryData geometry = 1;
inline bool GeometryResponse::_internal_has_geometry() const {
  return result_case() == kGeometry;
}
inline bool GeometryResponse::has_geometry() const {
  return _internal_has_geometry();
}
inline void GeometryResponse::set_has_geometry() {
  _oneof_case_[0] = kGeometry;
}
inline void GeometryResponse::clear_geometry() {
  if (_internal_has_geometry()) {
    if (GetArena() == nullptr) {
      delete result_.geometry_;
    }
    clear_has_result();
  }
}
inline ::epl::protobuf::v1::GeometryData* GeometryResponse::release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryResponse.geometry)
  if (_internal_has_geometry()) {
    clear_has_result();
      ::epl::protobuf::v1::GeometryData* temp = result_.geometry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeometryData& GeometryResponse::_internal_geometry() const {
  return _internal_has_geometry()
      ? *result_.geometry_
      : reinterpret_cast< ::epl::protobuf::v1::GeometryData&>(::epl::protobuf::v1::_GeometryData_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryData& GeometryResponse::geometry() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryResponse.geometry)
  return _internal_geometry();
}
inline ::epl::protobuf::v1::GeometryData* GeometryResponse::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryResponse.geometry)
  if (_internal_has_geometry()) {
    clear_has_result();
    ::epl::protobuf::v1::GeometryData* temp = result_.geometry_;
    result_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryResponse::unsafe_arena_set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  clear_result();
  if (geometry) {
    set_has_geometry();
    result_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryResponse.geometry)
}
inline ::epl::protobuf::v1::GeometryData* GeometryResponse::_internal_mutable_geometry() {
  if (!_internal_has_geometry()) {
    clear_result();
    set_has_geometry();
    result_.geometry_ = CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(GetArena());
  }
  return result_.geometry_;
}
inline ::epl::protobuf::v1::GeometryData* GeometryResponse::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryResponse.geometry)
  return _internal_mutable_geometry();
}

// bool spatial_relationship = 2;
inline bool GeometryResponse::_internal_has_spatial_relationship() const {
  return result_case() == kSpatialRelationship;
}
inline bool GeometryResponse::has_spatial_relationship() const {
  return _internal_has_spatial_relationship();
}
inline void GeometryResponse::set_has_spatial_relationship() {
  _oneof_case_[0] = kSpatialRelationship;
}
inline void GeometryResponse::clear_spatial_relationship() {
  if (_internal_has_spatial_relationship()) {
    result_.spatial_relationship_ = false;
    clear_has_result();
  }
}
inline bool GeometryResponse::_internal_spatial_relationship() const {
  if (_internal_has_spatial_relationship()) {
    return result_.spatial_relationship_;
  }
  return false;
}
inline void GeometryResponse::_internal_set_spatial_relationship(bool value) {
  if (!_internal_has_spatial_relationship()) {
    clear_result();
    set_has_spatial_relationship();
  }
  result_.spatial_relationship_ = value;
}
inline bool GeometryResponse::spatial_relationship() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryResponse.spatial_relationship)
  return _internal_spatial_relationship();
}
inline void GeometryResponse::set_spatial_relationship(bool value) {
  _internal_set_spatial_relationship(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryResponse.spatial_relationship)
}

// double measure = 3;
inline bool GeometryResponse::_internal_has_measure() const {
  return result_case() == kMeasure;
}
inline bool GeometryResponse::has_measure() const {
  return _internal_has_measure();
}
inline void GeometryResponse::set_has_measure() {
  _oneof_case_[0] = kMeasure;
}
inline void GeometryResponse::clear_measure() {
  if (_internal_has_measure()) {
    result_.measure_ = 0;
    clear_has_result();
  }
}
inline double GeometryResponse::_internal_measure() const {
  if (_internal_has_measure()) {
    return result_.measure_;
  }
  return 0;
}
inline void GeometryResponse::_internal_set_measure(double value) {
  if (!_internal_has_measure()) {
    clear_result();
    set_has_measure();
  }
  result_.measure_ = value;
}
inline double GeometryResponse::measure() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryResponse.measure)
  return _internal_measure();
}
inline void GeometryResponse::set_measure(double value) {
  _internal_set_measure(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.GeometryResponse.measure)
}

// .epl.protobuf.v1.GeodeticInverse geodetic_inverse = 4;
inline bool GeometryResponse::_internal_has_geodetic_inverse() const {
  return result_case() == kGeodeticInverse;
}
inline bool GeometryResponse::has_geodetic_inverse() const {
  return _internal_has_geodetic_inverse();
}
inline void GeometryResponse::set_has_geodetic_inverse() {
  _oneof_case_[0] = kGeodeticInverse;
}
inline void GeometryResponse::clear_geodetic_inverse() {
  if (_internal_has_geodetic_inverse()) {
    if (GetArena() == nullptr) {
      delete result_.geodetic_inverse_;
    }
    clear_has_result();
  }
}
inline ::epl::protobuf::v1::GeodeticInverse* GeometryResponse::release_geodetic_inverse() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
  if (_internal_has_geodetic_inverse()) {
    clear_has_result();
      ::epl::protobuf::v1::GeodeticInverse* temp = result_.geodetic_inverse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.geodetic_inverse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epl::protobuf::v1::GeodeticInverse& GeometryResponse::_internal_geodetic_inverse() const {
  return _internal_has_geodetic_inverse()
      ? *result_.geodetic_inverse_
      : reinterpret_cast< ::epl::protobuf::v1::GeodeticInverse&>(::epl::protobuf::v1::_GeodeticInverse_default_instance_);
}
inline const ::epl::protobuf::v1::GeodeticInverse& GeometryResponse::geodetic_inverse() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
  return _internal_geodetic_inverse();
}
inline ::epl::protobuf::v1::GeodeticInverse* GeometryResponse::unsafe_arena_release_geodetic_inverse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
  if (_internal_has_geodetic_inverse()) {
    clear_has_result();
    ::epl::protobuf::v1::GeodeticInverse* temp = result_.geodetic_inverse_;
    result_.geodetic_inverse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryResponse::unsafe_arena_set_allocated_geodetic_inverse(::epl::protobuf::v1::GeodeticInverse* geodetic_inverse) {
  clear_result();
  if (geodetic_inverse) {
    set_has_geodetic_inverse();
    result_.geodetic_inverse_ = geodetic_inverse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
}
inline ::epl::protobuf::v1::GeodeticInverse* GeometryResponse::_internal_mutable_geodetic_inverse() {
  if (!_internal_has_geodetic_inverse()) {
    clear_result();
    set_has_geodetic_inverse();
    result_.geodetic_inverse_ = CreateMaybeMessage< ::epl::protobuf::v1::GeodeticInverse >(GetArena());
  }
  return result_.geodetic_inverse_;
}
inline ::epl::protobuf::v1::GeodeticInverse* GeometryResponse::mutable_geodetic_inverse() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
  return _internal_mutable_geodetic_inverse();
}

// map<int64, bool> relate_map = 5;
inline int GeometryResponse::_internal_relate_map_size() const {
  return relate_map_.size();
}
inline int GeometryResponse::relate_map_size() const {
  return _internal_relate_map_size();
}
inline void GeometryResponse::clear_relate_map() {
  relate_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
GeometryResponse::_internal_relate_map() const {
  return relate_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
GeometryResponse::relate_map() const {
  // @@protoc_insertion_point(field_map:epl.protobuf.v1.GeometryResponse.relate_map)
  return _internal_relate_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
GeometryResponse::_internal_mutable_relate_map() {
  return relate_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
GeometryResponse::mutable_relate_map() {
  // @@protoc_insertion_point(field_mutable_map:epl.protobuf.v1.GeometryResponse.relate_map)
  return _internal_mutable_relate_map();
}

inline bool GeometryResponse::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void GeometryResponse::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline GeometryResponse::ResultCase GeometryResponse::result_case() const {
  return GeometryResponse::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileRequestChunk

// .epl.protobuf.v1.GeometryRequest nested_request = 1;
inline bool FileRequestChunk::_internal_has_nested_request() const {
  return this != internal_default_instance() && nested_request_ != nullptr;
}
inline bool FileRequestChunk::has_nested_request() const {
  return _internal_has_nested_request();
}
inline void FileRequestChunk::clear_nested_request() {
  if (GetArena() == nullptr && nested_request_ != nullptr) {
    delete nested_request_;
  }
  nested_request_ = nullptr;
}
inline const ::epl::protobuf::v1::GeometryRequest& FileRequestChunk::_internal_nested_request() const {
  const ::epl::protobuf::v1::GeometryRequest* p = nested_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::GeometryRequest&>(
      ::epl::protobuf::v1::_GeometryRequest_default_instance_);
}
inline const ::epl::protobuf::v1::GeometryRequest& FileRequestChunk::nested_request() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.nested_request)
  return _internal_nested_request();
}
inline void FileRequestChunk::unsafe_arena_set_allocated_nested_request(
    ::epl::protobuf::v1::GeometryRequest* nested_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nested_request_);
  }
  nested_request_ = nested_request;
  if (nested_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.FileRequestChunk.nested_request)
}
inline ::epl::protobuf::v1::GeometryRequest* FileRequestChunk::release_nested_request() {
  
  ::epl::protobuf::v1::GeometryRequest* temp = nested_request_;
  nested_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::GeometryRequest* FileRequestChunk::unsafe_arena_release_nested_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.FileRequestChunk.nested_request)
  
  ::epl::protobuf::v1::GeometryRequest* temp = nested_request_;
  nested_request_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::GeometryRequest* FileRequestChunk::_internal_mutable_nested_request() {
  
  if (nested_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::GeometryRequest>(GetArena());
    nested_request_ = p;
  }
  return nested_request_;
}
inline ::epl::protobuf::v1::GeometryRequest* FileRequestChunk::mutable_nested_request() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.FileRequestChunk.nested_request)
  return _internal_mutable_nested_request();
}
inline void FileRequestChunk::set_allocated_nested_request(::epl::protobuf::v1::GeometryRequest* nested_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nested_request_;
  }
  if (nested_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_request);
    if (message_arena != submessage_arena) {
      nested_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_request, submessage_arena);
    }
    
  } else {
    
  }
  nested_request_ = nested_request;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.FileRequestChunk.nested_request)
}

// .epl.protobuf.v1.Encoding result_encoding_type = 2;
inline void FileRequestChunk::clear_result_encoding_type() {
  result_encoding_type_ = 0;
}
inline ::epl::protobuf::v1::Encoding FileRequestChunk::_internal_result_encoding_type() const {
  return static_cast< ::epl::protobuf::v1::Encoding >(result_encoding_type_);
}
inline ::epl::protobuf::v1::Encoding FileRequestChunk::result_encoding_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.result_encoding_type)
  return _internal_result_encoding_type();
}
inline void FileRequestChunk::_internal_set_result_encoding_type(::epl::protobuf::v1::Encoding value) {
  
  result_encoding_type_ = value;
}
inline void FileRequestChunk::set_result_encoding_type(::epl::protobuf::v1::Encoding value) {
  _internal_set_result_encoding_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.result_encoding_type)
}

// .epl.protobuf.v1.ProjectionData input_proj = 3;
inline bool FileRequestChunk::_internal_has_input_proj() const {
  return this != internal_default_instance() && input_proj_ != nullptr;
}
inline bool FileRequestChunk::has_input_proj() const {
  return _internal_has_input_proj();
}
inline void FileRequestChunk::clear_input_proj() {
  if (GetArena() == nullptr && input_proj_ != nullptr) {
    delete input_proj_;
  }
  input_proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& FileRequestChunk::_internal_input_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = input_proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& FileRequestChunk::input_proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.input_proj)
  return _internal_input_proj();
}
inline void FileRequestChunk::unsafe_arena_set_allocated_input_proj(
    ::epl::protobuf::v1::ProjectionData* input_proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_proj_);
  }
  input_proj_ = input_proj;
  if (input_proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.FileRequestChunk.input_proj)
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::release_input_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = input_proj_;
  input_proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::unsafe_arena_release_input_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.FileRequestChunk.input_proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = input_proj_;
  input_proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::_internal_mutable_input_proj() {
  
  if (input_proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    input_proj_ = p;
  }
  return input_proj_;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::mutable_input_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.FileRequestChunk.input_proj)
  return _internal_mutable_input_proj();
}
inline void FileRequestChunk::set_allocated_input_proj(::epl::protobuf::v1::ProjectionData* input_proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_proj_;
  }
  if (input_proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input_proj);
    if (message_arena != submessage_arena) {
      input_proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_proj, submessage_arena);
    }
    
  } else {
    
  }
  input_proj_ = input_proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.FileRequestChunk.input_proj)
}

// .epl.protobuf.v1.ProjectionData result_proj = 5;
inline bool FileRequestChunk::_internal_has_result_proj() const {
  return this != internal_default_instance() && result_proj_ != nullptr;
}
inline bool FileRequestChunk::has_result_proj() const {
  return _internal_has_result_proj();
}
inline void FileRequestChunk::clear_result_proj() {
  if (GetArena() == nullptr && result_proj_ != nullptr) {
    delete result_proj_;
  }
  result_proj_ = nullptr;
}
inline const ::epl::protobuf::v1::ProjectionData& FileRequestChunk::_internal_result_proj() const {
  const ::epl::protobuf::v1::ProjectionData* p = result_proj_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::ProjectionData&>(
      ::epl::protobuf::v1::_ProjectionData_default_instance_);
}
inline const ::epl::protobuf::v1::ProjectionData& FileRequestChunk::result_proj() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.result_proj)
  return _internal_result_proj();
}
inline void FileRequestChunk::unsafe_arena_set_allocated_result_proj(
    ::epl::protobuf::v1::ProjectionData* result_proj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_proj_);
  }
  result_proj_ = result_proj;
  if (result_proj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.FileRequestChunk.result_proj)
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::release_result_proj() {
  
  ::epl::protobuf::v1::ProjectionData* temp = result_proj_;
  result_proj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::unsafe_arena_release_result_proj() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.FileRequestChunk.result_proj)
  
  ::epl::protobuf::v1::ProjectionData* temp = result_proj_;
  result_proj_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::_internal_mutable_result_proj() {
  
  if (result_proj_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::ProjectionData>(GetArena());
    result_proj_ = p;
  }
  return result_proj_;
}
inline ::epl::protobuf::v1::ProjectionData* FileRequestChunk::mutable_result_proj() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.FileRequestChunk.result_proj)
  return _internal_mutable_result_proj();
}
inline void FileRequestChunk::set_allocated_result_proj(::epl::protobuf::v1::ProjectionData* result_proj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_proj_;
  }
  if (result_proj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result_proj);
    if (message_arena != submessage_arena) {
      result_proj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_proj, submessage_arena);
    }
    
  } else {
    
  }
  result_proj_ = result_proj;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.FileRequestChunk.result_proj)
}

// bytes data = 6;
inline void FileRequestChunk::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileRequestChunk::data() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.data)
  return _internal_data();
}
inline void FileRequestChunk::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.data)
}
inline std::string* FileRequestChunk::mutable_data() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.FileRequestChunk.data)
  return _internal_mutable_data();
}
inline const std::string& FileRequestChunk::_internal_data() const {
  return data_.Get();
}
inline void FileRequestChunk::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileRequestChunk::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.FileRequestChunk.data)
}
inline void FileRequestChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.FileRequestChunk.data)
}
inline void FileRequestChunk::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.FileRequestChunk.data)
}
inline std::string* FileRequestChunk::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileRequestChunk::release_data() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.FileRequestChunk.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileRequestChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.FileRequestChunk.data)
}

// int64 size = 7;
inline void FileRequestChunk::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::size() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.size)
  return _internal_size();
}
inline void FileRequestChunk::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void FileRequestChunk::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.size)
}

// int64 offset = 8;
inline void FileRequestChunk::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.offset)
  return _internal_offset();
}
inline void FileRequestChunk::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void FileRequestChunk::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.offset)
}

// string file_name = 9;
inline void FileRequestChunk::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& FileRequestChunk::file_name() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.file_name)
  return _internal_file_name();
}
inline void FileRequestChunk::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.file_name)
}
inline std::string* FileRequestChunk::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.FileRequestChunk.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& FileRequestChunk::_internal_file_name() const {
  return file_name_.Get();
}
inline void FileRequestChunk::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileRequestChunk::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.FileRequestChunk.file_name)
}
inline void FileRequestChunk::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.FileRequestChunk.file_name)
}
inline void FileRequestChunk::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.FileRequestChunk.file_name)
}
inline std::string* FileRequestChunk::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileRequestChunk::release_file_name() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.FileRequestChunk.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileRequestChunk::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.FileRequestChunk.file_name)
}

// bool is_last_chunk = 10;
inline void FileRequestChunk::clear_is_last_chunk() {
  is_last_chunk_ = false;
}
inline bool FileRequestChunk::_internal_is_last_chunk() const {
  return is_last_chunk_;
}
inline bool FileRequestChunk::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.FileRequestChunk.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void FileRequestChunk::_internal_set_is_last_chunk(bool value) {
  
  is_last_chunk_ = value;
}
inline void FileRequestChunk::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.FileRequestChunk.is_last_chunk)
}

// -------------------------------------------------------------------

// Params_Buffer

// double distance = 1;
inline void Params_Buffer::clear_distance() {
  distance_ = 0;
}
inline double Params_Buffer::_internal_distance() const {
  return distance_;
}
inline double Params_Buffer::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Buffer.distance)
  return _internal_distance();
}
inline void Params_Buffer::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Params_Buffer::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Buffer.distance)
}

// double max_deviation = 2;
inline void Params_Buffer::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double Params_Buffer::_internal_max_deviation() const {
  return max_deviation_;
}
inline double Params_Buffer::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Buffer.max_deviation)
  return _internal_max_deviation();
}
inline void Params_Buffer::_internal_set_max_deviation(double value) {
  
  max_deviation_ = value;
}
inline void Params_Buffer::set_max_deviation(double value) {
  _internal_set_max_deviation(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Buffer.max_deviation)
}

// bool union_result = 3;
inline void Params_Buffer::clear_union_result() {
  union_result_ = false;
}
inline bool Params_Buffer::_internal_union_result() const {
  return union_result_;
}
inline bool Params_Buffer::union_result() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Buffer.union_result)
  return _internal_union_result();
}
inline void Params_Buffer::_internal_set_union_result(bool value) {
  
  union_result_ = value;
}
inline void Params_Buffer::set_union_result(bool value) {
  _internal_set_union_result(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Buffer.union_result)
}

// int32 max_vertices_in_full_circle = 4;
inline void Params_Buffer::clear_max_vertices_in_full_circle() {
  max_vertices_in_full_circle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_Buffer::_internal_max_vertices_in_full_circle() const {
  return max_vertices_in_full_circle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_Buffer::max_vertices_in_full_circle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Buffer.max_vertices_in_full_circle)
  return _internal_max_vertices_in_full_circle();
}
inline void Params_Buffer::_internal_set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_vertices_in_full_circle_ = value;
}
inline void Params_Buffer::set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_vertices_in_full_circle(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Buffer.max_vertices_in_full_circle)
}

// -------------------------------------------------------------------

// Params_GeodeticBuffer

// double distance = 1;
inline void Params_GeodeticBuffer::clear_distance() {
  distance_ = 0;
}
inline double Params_GeodeticBuffer::_internal_distance() const {
  return distance_;
}
inline double Params_GeodeticBuffer::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeodeticBuffer.distance)
  return _internal_distance();
}
inline void Params_GeodeticBuffer::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Params_GeodeticBuffer::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeodeticBuffer.distance)
}

// double max_deviation = 2;
inline void Params_GeodeticBuffer::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double Params_GeodeticBuffer::_internal_max_deviation() const {
  return max_deviation_;
}
inline double Params_GeodeticBuffer::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeodeticBuffer.max_deviation)
  return _internal_max_deviation();
}
inline void Params_GeodeticBuffer::_internal_set_max_deviation(double value) {
  
  max_deviation_ = value;
}
inline void Params_GeodeticBuffer::set_max_deviation(double value) {
  _internal_set_max_deviation(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeodeticBuffer.max_deviation)
}

// bool union_result = 3;
inline void Params_GeodeticBuffer::clear_union_result() {
  union_result_ = false;
}
inline bool Params_GeodeticBuffer::_internal_union_result() const {
  return union_result_;
}
inline bool Params_GeodeticBuffer::union_result() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeodeticBuffer.union_result)
  return _internal_union_result();
}
inline void Params_GeodeticBuffer::_internal_set_union_result(bool value) {
  
  union_result_ = value;
}
inline void Params_GeodeticBuffer::set_union_result(bool value) {
  _internal_set_union_result(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeodeticBuffer.union_result)
}

// int32 max_vertices_in_full_circle = 4;
inline void Params_GeodeticBuffer::clear_max_vertices_in_full_circle() {
  max_vertices_in_full_circle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_GeodeticBuffer::_internal_max_vertices_in_full_circle() const {
  return max_vertices_in_full_circle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_GeodeticBuffer::max_vertices_in_full_circle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeodeticBuffer.max_vertices_in_full_circle)
  return _internal_max_vertices_in_full_circle();
}
inline void Params_GeodeticBuffer::_internal_set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_vertices_in_full_circle_ = value;
}
inline void Params_GeodeticBuffer::set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_vertices_in_full_circle(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeodeticBuffer.max_vertices_in_full_circle)
}

// -------------------------------------------------------------------

// Params_Convex

// bool merge = 1;
inline void Params_Convex::clear_merge() {
  merge_ = false;
}
inline bool Params_Convex::_internal_merge() const {
  return merge_;
}
inline bool Params_Convex::merge() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Convex.merge)
  return _internal_merge();
}
inline void Params_Convex::_internal_set_merge(bool value) {
  
  merge_ = value;
}
inline void Params_Convex::set_merge(bool value) {
  _internal_set_merge(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Convex.merge)
}

// -------------------------------------------------------------------

// Params_Relate

// string de_9im = 1;
inline void Params_Relate::clear_de_9im() {
  de_9im_.ClearToEmpty();
}
inline const std::string& Params_Relate::de_9im() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Relate.de_9im)
  return _internal_de_9im();
}
inline void Params_Relate::set_de_9im(const std::string& value) {
  _internal_set_de_9im(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Relate.de_9im)
}
inline std::string* Params_Relate::mutable_de_9im() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Params.Relate.de_9im)
  return _internal_mutable_de_9im();
}
inline const std::string& Params_Relate::_internal_de_9im() const {
  return de_9im_.Get();
}
inline void Params_Relate::_internal_set_de_9im(const std::string& value) {
  
  de_9im_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Params_Relate::set_de_9im(std::string&& value) {
  
  de_9im_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.v1.Params.Relate.de_9im)
}
inline void Params_Relate::set_de_9im(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  de_9im_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:epl.protobuf.v1.Params.Relate.de_9im)
}
inline void Params_Relate::set_de_9im(const char* value,
    size_t size) {
  
  de_9im_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.v1.Params.Relate.de_9im)
}
inline std::string* Params_Relate::_internal_mutable_de_9im() {
  
  return de_9im_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Params_Relate::release_de_9im() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Params.Relate.de_9im)
  return de_9im_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Params_Relate::set_allocated_de_9im(std::string* de_9im) {
  if (de_9im != nullptr) {
    
  } else {
    
  }
  de_9im_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), de_9im,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Params.Relate.de_9im)
}

// -------------------------------------------------------------------

// Params_RandomPoints

// double points_per_square_km = 1;
inline void Params_RandomPoints::clear_points_per_square_km() {
  points_per_square_km_ = 0;
}
inline double Params_RandomPoints::_internal_points_per_square_km() const {
  return points_per_square_km_;
}
inline double Params_RandomPoints::points_per_square_km() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.RandomPoints.points_per_square_km)
  return _internal_points_per_square_km();
}
inline void Params_RandomPoints::_internal_set_points_per_square_km(double value) {
  
  points_per_square_km_ = value;
}
inline void Params_RandomPoints::set_points_per_square_km(double value) {
  _internal_set_points_per_square_km(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.RandomPoints.points_per_square_km)
}

// int64 seed = 2;
inline void Params_RandomPoints::clear_seed() {
  seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Params_RandomPoints::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Params_RandomPoints::seed() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.RandomPoints.seed)
  return _internal_seed();
}
inline void Params_RandomPoints::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seed_ = value;
}
inline void Params_RandomPoints::set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.RandomPoints.seed)
}

// -------------------------------------------------------------------

// Params_Generalize

// double max_deviation = 1;
inline void Params_Generalize::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double Params_Generalize::_internal_max_deviation() const {
  return max_deviation_;
}
inline double Params_Generalize::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Generalize.max_deviation)
  return _internal_max_deviation();
}
inline void Params_Generalize::_internal_set_max_deviation(double value) {
  
  max_deviation_ = value;
}
inline void Params_Generalize::set_max_deviation(double value) {
  _internal_set_max_deviation(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Generalize.max_deviation)
}

// bool remove_degenerates = 2;
inline void Params_Generalize::clear_remove_degenerates() {
  remove_degenerates_ = false;
}
inline bool Params_Generalize::_internal_remove_degenerates() const {
  return remove_degenerates_;
}
inline bool Params_Generalize::remove_degenerates() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Generalize.remove_degenerates)
  return _internal_remove_degenerates();
}
inline void Params_Generalize::_internal_set_remove_degenerates(bool value) {
  
  remove_degenerates_ = value;
}
inline void Params_Generalize::set_remove_degenerates(bool value) {
  _internal_set_remove_degenerates(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Generalize.remove_degenerates)
}

// -------------------------------------------------------------------

// Params_GeneralizeByArea

// double percent_reduction = 1;
inline void Params_GeneralizeByArea::clear_percent_reduction() {
  percent_reduction_ = 0;
}
inline double Params_GeneralizeByArea::_internal_percent_reduction() const {
  return percent_reduction_;
}
inline double Params_GeneralizeByArea::percent_reduction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeneralizeByArea.percent_reduction)
  return _internal_percent_reduction();
}
inline void Params_GeneralizeByArea::_internal_set_percent_reduction(double value) {
  
  percent_reduction_ = value;
}
inline void Params_GeneralizeByArea::set_percent_reduction(double value) {
  _internal_set_percent_reduction(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeneralizeByArea.percent_reduction)
}

// int32 max_point_count = 2;
inline void Params_GeneralizeByArea::clear_max_point_count() {
  max_point_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_GeneralizeByArea::_internal_max_point_count() const {
  return max_point_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_GeneralizeByArea::max_point_count() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeneralizeByArea.max_point_count)
  return _internal_max_point_count();
}
inline void Params_GeneralizeByArea::_internal_set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_point_count_ = value;
}
inline void Params_GeneralizeByArea::set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_point_count(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeneralizeByArea.max_point_count)
}

// bool remove_degenerates = 3;
inline void Params_GeneralizeByArea::clear_remove_degenerates() {
  remove_degenerates_ = false;
}
inline bool Params_GeneralizeByArea::_internal_remove_degenerates() const {
  return remove_degenerates_;
}
inline bool Params_GeneralizeByArea::remove_degenerates() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.GeneralizeByArea.remove_degenerates)
  return _internal_remove_degenerates();
}
inline void Params_GeneralizeByArea::_internal_set_remove_degenerates(bool value) {
  
  remove_degenerates_ = value;
}
inline void Params_GeneralizeByArea::set_remove_degenerates(bool value) {
  _internal_set_remove_degenerates(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.GeneralizeByArea.remove_degenerates)
}

// -------------------------------------------------------------------

// Params_Intersection

// int32 dimension_mask = 1;
inline void Params_Intersection::clear_dimension_mask() {
  dimension_mask_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_Intersection::_internal_dimension_mask() const {
  return dimension_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Params_Intersection::dimension_mask() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Intersection.dimension_mask)
  return _internal_dimension_mask();
}
inline void Params_Intersection::_internal_set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimension_mask_ = value;
}
inline void Params_Intersection::set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimension_mask(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Intersection.dimension_mask)
}

// -------------------------------------------------------------------

// Params_Offset

// double distance = 1;
inline void Params_Offset::clear_distance() {
  distance_ = 0;
}
inline double Params_Offset::_internal_distance() const {
  return distance_;
}
inline double Params_Offset::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Offset.distance)
  return _internal_distance();
}
inline void Params_Offset::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Params_Offset::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Offset.distance)
}

// .epl.protobuf.v1.Params.Offset.OffsetJoinType join_type = 2;
inline void Params_Offset::clear_join_type() {
  join_type_ = 0;
}
inline ::epl::protobuf::v1::Params_Offset_OffsetJoinType Params_Offset::_internal_join_type() const {
  return static_cast< ::epl::protobuf::v1::Params_Offset_OffsetJoinType >(join_type_);
}
inline ::epl::protobuf::v1::Params_Offset_OffsetJoinType Params_Offset::join_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Offset.join_type)
  return _internal_join_type();
}
inline void Params_Offset::_internal_set_join_type(::epl::protobuf::v1::Params_Offset_OffsetJoinType value) {
  
  join_type_ = value;
}
inline void Params_Offset::set_join_type(::epl::protobuf::v1::Params_Offset_OffsetJoinType value) {
  _internal_set_join_type(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Offset.join_type)
}

// double bevel_ratio = 3;
inline void Params_Offset::clear_bevel_ratio() {
  bevel_ratio_ = 0;
}
inline double Params_Offset::_internal_bevel_ratio() const {
  return bevel_ratio_;
}
inline double Params_Offset::bevel_ratio() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Offset.bevel_ratio)
  return _internal_bevel_ratio();
}
inline void Params_Offset::_internal_set_bevel_ratio(double value) {
  
  bevel_ratio_ = value;
}
inline void Params_Offset::set_bevel_ratio(double value) {
  _internal_set_bevel_ratio(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Offset.bevel_ratio)
}

// double flatten_error = 4;
inline void Params_Offset::clear_flatten_error() {
  flatten_error_ = 0;
}
inline double Params_Offset::_internal_flatten_error() const {
  return flatten_error_;
}
inline double Params_Offset::flatten_error() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Offset.flatten_error)
  return _internal_flatten_error();
}
inline void Params_Offset::_internal_set_flatten_error(double value) {
  
  flatten_error_ = value;
}
inline void Params_Offset::set_flatten_error(double value) {
  _internal_set_flatten_error(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Offset.flatten_error)
}

// -------------------------------------------------------------------

// Params_Cut

// bool consider_touch = 1;
inline void Params_Cut::clear_consider_touch() {
  consider_touch_ = false;
}
inline bool Params_Cut::_internal_consider_touch() const {
  return consider_touch_;
}
inline bool Params_Cut::consider_touch() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Cut.consider_touch)
  return _internal_consider_touch();
}
inline void Params_Cut::_internal_set_consider_touch(bool value) {
  
  consider_touch_ = value;
}
inline void Params_Cut::set_consider_touch(bool value) {
  _internal_set_consider_touch(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Cut.consider_touch)
}

// -------------------------------------------------------------------

// Params_Clip

// .epl.protobuf.v1.EnvelopeData envelope = 1;
inline bool Params_Clip::_internal_has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline bool Params_Clip::has_envelope() const {
  return _internal_has_envelope();
}
inline void Params_Clip::clear_envelope() {
  if (GetArena() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::epl::protobuf::v1::EnvelopeData& Params_Clip::_internal_envelope() const {
  const ::epl::protobuf::v1::EnvelopeData* p = envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::epl::protobuf::v1::EnvelopeData&>(
      ::epl::protobuf::v1::_EnvelopeData_default_instance_);
}
inline const ::epl::protobuf::v1::EnvelopeData& Params_Clip::envelope() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Clip.envelope)
  return _internal_envelope();
}
inline void Params_Clip::unsafe_arena_set_allocated_envelope(
    ::epl::protobuf::v1::EnvelopeData* envelope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(envelope_);
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epl.protobuf.v1.Params.Clip.envelope)
}
inline ::epl::protobuf::v1::EnvelopeData* Params_Clip::release_envelope() {
  
  ::epl::protobuf::v1::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* Params_Clip::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_release:epl.protobuf.v1.Params.Clip.envelope)
  
  ::epl::protobuf::v1::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::epl::protobuf::v1::EnvelopeData* Params_Clip::_internal_mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::v1::EnvelopeData>(GetArena());
    envelope_ = p;
  }
  return envelope_;
}
inline ::epl::protobuf::v1::EnvelopeData* Params_Clip::mutable_envelope() {
  // @@protoc_insertion_point(field_mutable:epl.protobuf.v1.Params.Clip.envelope)
  return _internal_mutable_envelope();
}
inline void Params_Clip::set_allocated_envelope(::epl::protobuf::v1::EnvelopeData* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(envelope);
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.Params.Clip.envelope)
}

// -------------------------------------------------------------------

// Params_Densify

// double max_length = 1;
inline void Params_Densify::clear_max_length() {
  max_length_ = 0;
}
inline double Params_Densify::_internal_max_length() const {
  return max_length_;
}
inline double Params_Densify::max_length() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Densify.max_length)
  return _internal_max_length();
}
inline void Params_Densify::_internal_set_max_length(double value) {
  
  max_length_ = value;
}
inline void Params_Densify::set_max_length(double value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Densify.max_length)
}

// -------------------------------------------------------------------

// Params_Simplify

// bool force = 1;
inline void Params_Simplify::clear_force() {
  force_ = false;
}
inline bool Params_Simplify::_internal_force() const {
  return force_;
}
inline bool Params_Simplify::force() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.Simplify.force)
  return _internal_force();
}
inline void Params_Simplify::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void Params_Simplify::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.Simplify.force)
}

// -------------------------------------------------------------------

// Params_AffineTransform

// bool geodetic = 2;
inline void Params_AffineTransform::clear_geodetic() {
  geodetic_ = false;
}
inline bool Params_AffineTransform::_internal_geodetic() const {
  return geodetic_;
}
inline bool Params_AffineTransform::geodetic() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.AffineTransform.geodetic)
  return _internal_geodetic();
}
inline void Params_AffineTransform::_internal_set_geodetic(bool value) {
  
  geodetic_ = value;
}
inline void Params_AffineTransform::set_geodetic(bool value) {
  _internal_set_geodetic(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.AffineTransform.geodetic)
}

// double x_offset = 3;
inline void Params_AffineTransform::clear_x_offset() {
  x_offset_ = 0;
}
inline double Params_AffineTransform::_internal_x_offset() const {
  return x_offset_;
}
inline double Params_AffineTransform::x_offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.AffineTransform.x_offset)
  return _internal_x_offset();
}
inline void Params_AffineTransform::_internal_set_x_offset(double value) {
  
  x_offset_ = value;
}
inline void Params_AffineTransform::set_x_offset(double value) {
  _internal_set_x_offset(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.AffineTransform.x_offset)
}

// double y_offset = 4;
inline void Params_AffineTransform::clear_y_offset() {
  y_offset_ = 0;
}
inline double Params_AffineTransform::_internal_y_offset() const {
  return y_offset_;
}
inline double Params_AffineTransform::y_offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.v1.Params.AffineTransform.y_offset)
  return _internal_y_offset();
}
inline void Params_AffineTransform::_internal_set_y_offset(double value) {
  
  y_offset_ = value;
}
inline void Params_AffineTransform::set_y_offset(double value) {
  _internal_set_y_offset(value);
  // @@protoc_insertion_point(field_set:epl.protobuf.v1.Params.AffineTransform.y_offset)
}

// -------------------------------------------------------------------

// Params

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace epl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::epl::protobuf::v1::ProjectionData_CSType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::ProjectionData_CSType>() {
  return ::epl::protobuf::v1::ProjectionData_CSType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::FileRequestChunk_FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::FileRequestChunk_FileType>() {
  return ::epl::protobuf::v1::FileRequestChunk_FileType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Params_Offset_OffsetJoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Params_Offset_OffsetJoinType>() {
  return ::epl::protobuf::v1::Params_Offset_OffsetJoinType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::SimpleState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::SimpleState>() {
  return ::epl::protobuf::v1::SimpleState_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::Encoding>() {
  return ::epl::protobuf::v1::Encoding_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::v1::OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::v1::OperatorType>() {
  return ::epl::protobuf::v1::OperatorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fv1_2fgeometry_2eproto
