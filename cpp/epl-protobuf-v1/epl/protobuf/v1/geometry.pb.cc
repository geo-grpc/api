// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/geometry.proto

#include "epl/protobuf/v1/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace epl {
namespace protobuf {
namespace v1 {
constexpr GeometryData::GeometryData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proj_(nullptr)
  , envelope_(nullptr)
  , geometry_id_(PROTOBUF_ULONGLONG(0))
  , simple_(0)

  , _oneof_case_{}{}
struct GeometryDataDefaultTypeInternal {
  constexpr GeometryDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeometryDataDefaultTypeInternal() {}
  union {
    GeometryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeometryDataDefaultTypeInternal _GeometryData_default_instance_;
constexpr ProjectionData_Custom::ProjectionData_Custom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lon_0_(0)
  , lat_0_(0)
  , cs_type_(0)
{}
struct ProjectionData_CustomDefaultTypeInternal {
  constexpr ProjectionData_CustomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectionData_CustomDefaultTypeInternal() {}
  union {
    ProjectionData_Custom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectionData_CustomDefaultTypeInternal _ProjectionData_Custom_default_instance_;
constexpr ProjectionData::ProjectionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_()
  , transform_()
  , _transform_cached_byte_size_()
  , geometry_(nullptr)
  , bbox_(nullptr)
  , centroid_(nullptr)
  , _oneof_case_{}{}
struct ProjectionDataDefaultTypeInternal {
  constexpr ProjectionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectionDataDefaultTypeInternal() {}
  union {
    ProjectionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectionDataDefaultTypeInternal _ProjectionData_default_instance_;
constexpr EnvelopeData::EnvelopeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proj_(nullptr)
  , xmin_(0)
  , ymin_(0)
  , xmax_(0)
  , ymax_(0)
  , zmin_(0)
  , zmax_(0){}
struct EnvelopeDataDefaultTypeInternal {
  constexpr EnvelopeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeDataDefaultTypeInternal() {}
  union {
    EnvelopeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeDataDefaultTypeInternal _EnvelopeData_default_instance_;
constexpr GeometryRequest::GeometryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_proj_(nullptr)
  , result_proj_(nullptr)
  , operator__(0)

  , result_encoding_(0)

  , _oneof_case_{}{}
struct GeometryRequestDefaultTypeInternal {
  constexpr GeometryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeometryRequestDefaultTypeInternal() {}
  union {
    GeometryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeometryRequestDefaultTypeInternal _GeometryRequest_default_instance_;
constexpr GeodeticInverse::GeodeticInverse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : az12_(0)
  , az21_(0)
  , distance_(0){}
struct GeodeticInverseDefaultTypeInternal {
  constexpr GeodeticInverseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeodeticInverseDefaultTypeInternal() {}
  union {
    GeodeticInverse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeodeticInverseDefaultTypeInternal _GeodeticInverse_default_instance_;
constexpr GeometryResponse_RelateMapEntry_DoNotUse::GeometryResponse_RelateMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal {
  constexpr GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GeometryResponse_RelateMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal _GeometryResponse_RelateMapEntry_DoNotUse_default_instance_;
constexpr GeometryResponse::GeometryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relate_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , _oneof_case_{}{}
struct GeometryResponseDefaultTypeInternal {
  constexpr GeometryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeometryResponseDefaultTypeInternal() {}
  union {
    GeometryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeometryResponseDefaultTypeInternal _GeometryResponse_default_instance_;
constexpr FileRequestChunk::FileRequestChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nested_request_(nullptr)
  , input_proj_(nullptr)
  , result_proj_(nullptr)
  , result_encoding_type_(0)

  , is_last_chunk_(false)
  , size_(PROTOBUF_LONGLONG(0))
  , offset_(PROTOBUF_LONGLONG(0)){}
struct FileRequestChunkDefaultTypeInternal {
  constexpr FileRequestChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileRequestChunkDefaultTypeInternal() {}
  union {
    FileRequestChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileRequestChunkDefaultTypeInternal _FileRequestChunk_default_instance_;
constexpr Params_Buffer::Params_Buffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , max_deviation_(0)
  , union_result_(false)
  , max_vertices_in_full_circle_(0){}
struct Params_BufferDefaultTypeInternal {
  constexpr Params_BufferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_BufferDefaultTypeInternal() {}
  union {
    Params_Buffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_BufferDefaultTypeInternal _Params_Buffer_default_instance_;
constexpr Params_GeodeticBuffer::Params_GeodeticBuffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , max_deviation_(0)
  , union_result_(false)
  , max_vertices_in_full_circle_(0){}
struct Params_GeodeticBufferDefaultTypeInternal {
  constexpr Params_GeodeticBufferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_GeodeticBufferDefaultTypeInternal() {}
  union {
    Params_GeodeticBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_GeodeticBufferDefaultTypeInternal _Params_GeodeticBuffer_default_instance_;
constexpr Params_Convex::Params_Convex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : merge_(false){}
struct Params_ConvexDefaultTypeInternal {
  constexpr Params_ConvexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_ConvexDefaultTypeInternal() {}
  union {
    Params_Convex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_ConvexDefaultTypeInternal _Params_Convex_default_instance_;
constexpr Params_Relate::Params_Relate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : de_9im_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Params_RelateDefaultTypeInternal {
  constexpr Params_RelateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_RelateDefaultTypeInternal() {}
  union {
    Params_Relate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_RelateDefaultTypeInternal _Params_Relate_default_instance_;
constexpr Params_RandomPoints::Params_RandomPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_per_square_km_(0)
  , seed_(PROTOBUF_LONGLONG(0)){}
struct Params_RandomPointsDefaultTypeInternal {
  constexpr Params_RandomPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_RandomPointsDefaultTypeInternal() {}
  union {
    Params_RandomPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_RandomPointsDefaultTypeInternal _Params_RandomPoints_default_instance_;
constexpr Params_Generalize::Params_Generalize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_deviation_(0)
  , remove_degenerates_(false){}
struct Params_GeneralizeDefaultTypeInternal {
  constexpr Params_GeneralizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_GeneralizeDefaultTypeInternal() {}
  union {
    Params_Generalize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_GeneralizeDefaultTypeInternal _Params_Generalize_default_instance_;
constexpr Params_GeneralizeByArea::Params_GeneralizeByArea(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : percent_reduction_(0)
  , max_point_count_(0)
  , remove_degenerates_(false){}
struct Params_GeneralizeByAreaDefaultTypeInternal {
  constexpr Params_GeneralizeByAreaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_GeneralizeByAreaDefaultTypeInternal() {}
  union {
    Params_GeneralizeByArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_GeneralizeByAreaDefaultTypeInternal _Params_GeneralizeByArea_default_instance_;
constexpr Params_Intersection::Params_Intersection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dimension_mask_(0){}
struct Params_IntersectionDefaultTypeInternal {
  constexpr Params_IntersectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_IntersectionDefaultTypeInternal() {}
  union {
    Params_Intersection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_IntersectionDefaultTypeInternal _Params_Intersection_default_instance_;
constexpr Params_Offset::Params_Offset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , bevel_ratio_(0)
  , flatten_error_(0)
  , join_type_(0)
{}
struct Params_OffsetDefaultTypeInternal {
  constexpr Params_OffsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_OffsetDefaultTypeInternal() {}
  union {
    Params_Offset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_OffsetDefaultTypeInternal _Params_Offset_default_instance_;
constexpr Params_Cut::Params_Cut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consider_touch_(false){}
struct Params_CutDefaultTypeInternal {
  constexpr Params_CutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_CutDefaultTypeInternal() {}
  union {
    Params_Cut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_CutDefaultTypeInternal _Params_Cut_default_instance_;
constexpr Params_Clip::Params_Clip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : envelope_(nullptr){}
struct Params_ClipDefaultTypeInternal {
  constexpr Params_ClipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_ClipDefaultTypeInternal() {}
  union {
    Params_Clip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_ClipDefaultTypeInternal _Params_Clip_default_instance_;
constexpr Params_Densify::Params_Densify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_length_(0){}
struct Params_DensifyDefaultTypeInternal {
  constexpr Params_DensifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_DensifyDefaultTypeInternal() {}
  union {
    Params_Densify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_DensifyDefaultTypeInternal _Params_Densify_default_instance_;
constexpr Params_Simplify::Params_Simplify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : force_(false){}
struct Params_SimplifyDefaultTypeInternal {
  constexpr Params_SimplifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_SimplifyDefaultTypeInternal() {}
  union {
    Params_Simplify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_SimplifyDefaultTypeInternal _Params_Simplify_default_instance_;
constexpr Params_AffineTransform::Params_AffineTransform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_offset_(0)
  , y_offset_(0)
  , geodetic_(false){}
struct Params_AffineTransformDefaultTypeInternal {
  constexpr Params_AffineTransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Params_AffineTransformDefaultTypeInternal() {}
  union {
    Params_AffineTransform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Params_AffineTransformDefaultTypeInternal _Params_AffineTransform_default_instance_;
constexpr Params::Params(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ParamsDefaultTypeInternal {
  constexpr ParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_epl_2fprotobuf_2fv1_2fgeometry_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, geometry_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, feature_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, envelope_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, simple_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData_Custom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData_Custom, lon_0_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData_Custom, lat_0_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData_Custom, cs_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, bbox_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, centroid_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, shape_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, transform_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ProjectionData, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, xmin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, ymin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, xmax_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, ymax_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, zmin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EnvelopeData, zmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, operator__),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, result_encoding_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, operation_proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, result_proj_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, left_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, right_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeodeticInverse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeodeticInverse, az12_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeodeticInverse, az21_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeodeticInverse, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse, relate_map_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::GeometryResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, nested_request_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, result_encoding_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, input_proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, result_proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, data_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, size_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, offset_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, file_name_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::FileRequestChunk, is_last_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Buffer, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Buffer, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Buffer, union_result_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Buffer, max_vertices_in_full_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeodeticBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeodeticBuffer, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeodeticBuffer, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeodeticBuffer, union_result_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeodeticBuffer, max_vertices_in_full_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Convex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Convex, merge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Relate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Relate, de_9im_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_RandomPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_RandomPoints, points_per_square_km_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_RandomPoints, seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Generalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Generalize, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Generalize, remove_degenerates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeneralizeByArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeneralizeByArea, percent_reduction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeneralizeByArea, max_point_count_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_GeneralizeByArea, remove_degenerates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Intersection, dimension_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Offset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Offset, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Offset, join_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Offset, bevel_ratio_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Offset, flatten_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Cut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Cut, consider_touch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Clip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Clip, envelope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Densify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Densify, max_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Simplify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_Simplify, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_AffineTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_AffineTransform, geodetic_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_AffineTransform, x_offset_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params_AffineTransform, y_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::epl::protobuf::v1::GeometryData)},
  { 16, -1, sizeof(::epl::protobuf::v1::ProjectionData_Custom)},
  { 24, -1, sizeof(::epl::protobuf::v1::ProjectionData)},
  { 39, -1, sizeof(::epl::protobuf::v1::EnvelopeData)},
  { 51, -1, sizeof(::epl::protobuf::v1::GeometryRequest)},
  { 83, -1, sizeof(::epl::protobuf::v1::GeodeticInverse)},
  { 91, 98, sizeof(::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse)},
  { 100, -1, sizeof(::epl::protobuf::v1::GeometryResponse)},
  { 111, -1, sizeof(::epl::protobuf::v1::FileRequestChunk)},
  { 125, -1, sizeof(::epl::protobuf::v1::Params_Buffer)},
  { 134, -1, sizeof(::epl::protobuf::v1::Params_GeodeticBuffer)},
  { 143, -1, sizeof(::epl::protobuf::v1::Params_Convex)},
  { 149, -1, sizeof(::epl::protobuf::v1::Params_Relate)},
  { 155, -1, sizeof(::epl::protobuf::v1::Params_RandomPoints)},
  { 162, -1, sizeof(::epl::protobuf::v1::Params_Generalize)},
  { 169, -1, sizeof(::epl::protobuf::v1::Params_GeneralizeByArea)},
  { 177, -1, sizeof(::epl::protobuf::v1::Params_Intersection)},
  { 183, -1, sizeof(::epl::protobuf::v1::Params_Offset)},
  { 192, -1, sizeof(::epl::protobuf::v1::Params_Cut)},
  { 198, -1, sizeof(::epl::protobuf::v1::Params_Clip)},
  { 204, -1, sizeof(::epl::protobuf::v1::Params_Densify)},
  { 210, -1, sizeof(::epl::protobuf::v1::Params_Simplify)},
  { 216, -1, sizeof(::epl::protobuf::v1::Params_AffineTransform)},
  { 224, -1, sizeof(::epl::protobuf::v1::Params)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_GeometryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_ProjectionData_Custom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_ProjectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_EnvelopeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_GeometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_GeodeticInverse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_GeometryResponse_RelateMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_GeometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_FileRequestChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Buffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_GeodeticBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Convex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Relate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_RandomPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Generalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_GeneralizeByArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Intersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Offset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Cut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Clip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Densify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_Simplify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_AffineTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Params_default_instance_),
};

const char descriptor_table_protodef_epl_2fprotobuf_2fv1_2fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036epl/protobuf/v1/geometry.proto\022\017epl.pr"
  "otobuf.v1\"\252\002\n\014GeometryData\022\023\n\013geometry_i"
  "d\030\001 \001(\004\022\022\n\nfeature_id\030\002 \001(\t\022\r\n\003wkt\030\003 \001(\t"
  "H\000\022\021\n\007geojson\030\004 \001(\tH\000\022\r\n\003wkb\030\005 \001(\014H\000\022\024\n\n"
  "esri_shape\030\006 \001(\014H\000\022\016\n\004ewkb\030\017 \001(\014H\000\022-\n\004pr"
  "oj\030\007 \001(\0132\037.epl.protobuf.v1.ProjectionDat"
  "a\022/\n\010envelope\030\r \001(\0132\035.epl.protobuf.v1.En"
  "velopeData\022,\n\006simple\030\016 \001(\0162\034.epl.protobu"
  "f.v1.SimpleStateB\006\n\004dataJ\004\010\010\020\r\"\307\003\n\016Proje"
  "ctionData\022\016\n\004epsg\030\001 \001(\005H\000\022\017\n\005proj4\030\002 \001(\t"
  "H\000\0228\n\006custom\030\003 \001(\0132&.epl.protobuf.v1.Pro"
  "jectionData.CustomH\000\022\r\n\003wkt\030\004 \001(\tH\000\022/\n\010g"
  "eometry\030\n \001(\0132\035.epl.protobuf.v1.Geometry"
  "Data\022+\n\004bbox\030\013 \001(\0132\035.epl.protobuf.v1.Env"
  "elopeData\022/\n\010centroid\030\014 \001(\0132\035.epl.protob"
  "uf.v1.GeometryData\022\r\n\005shape\030\010 \003(\r\022\021\n\ttra"
  "nsform\030\t \003(\001\032_\n\006Custom\022\r\n\005lon_0\030\001 \001(\001\022\r\n"
  "\005lat_0\030\002 \001(\001\0227\n\007cs_type\030\003 \001(\0162&.epl.prot"
  "obuf.v1.ProjectionData.CSType\"\031\n\006CSType\022"
  "\017\n\013LAMBERT_AZI\020\000B\014\n\ndefinitionJ\004\010\005\020\006J\004\010\006"
  "\020\007J\004\010\007\020\010\"\221\001\n\014EnvelopeData\022\014\n\004xmin\030\001 \001(\001\022"
  "\014\n\004ymin\030\002 \001(\001\022\014\n\004xmax\030\003 \001(\001\022\014\n\004ymax\030\004 \001("
  "\001\022-\n\004proj\030\005 \001(\0132\037.epl.protobuf.v1.Projec"
  "tionData\022\014\n\004zmin\030\006 \001(\001\022\014\n\004zmax\030\007 \001(\001\"\336\013\n"
  "\017GeometryRequest\0221\n\010geometry\030\001 \001(\0132\035.epl"
  ".protobuf.v1.GeometryDataH\000\0226\n\rleft_geom"
  "etry\030\002 \001(\0132\035.epl.protobuf.v1.GeometryDat"
  "aH\000\022<\n\020geometry_request\030\003 \001(\0132 .epl.prot"
  "obuf.v1.GeometryRequestH\000\022A\n\025left_geomet"
  "ry_request\030\004 \001(\0132 .epl.protobuf.v1.Geome"
  "tryRequestH\000\0227\n\016right_geometry\030\005 \001(\0132\035.e"
  "pl.protobuf.v1.GeometryDataH\001\022B\n\026right_g"
  "eometry_request\030\006 \001(\0132 .epl.protobuf.v1."
  "GeometryRequestH\001\022/\n\010operator\030\007 \001(\0162\035.ep"
  "l.protobuf.v1.OperatorType\0222\n\017result_enc"
  "oding\030\010 \001(\0162\031.epl.protobuf.v1.Encoding\0227"
  "\n\016operation_proj\030\t \001(\0132\037.epl.protobuf.v1"
  ".ProjectionData\0224\n\013result_proj\030\n \001(\0132\037.e"
  "pl.protobuf.v1.ProjectionData\0227\n\rbuffer_"
  "params\030\013 \001(\0132\036.epl.protobuf.v1.Params.Bu"
  "fferH\002\0227\n\rconvex_params\030\014 \001(\0132\036.epl.prot"
  "obuf.v1.Params.ConvexH\002\0227\n\rrelate_params"
  "\030\r \001(\0132\036.epl.protobuf.v1.Params.RelateH\002"
  "\022D\n\024random_points_params\030\016 \001(\0132$.epl.pro"
  "tobuf.v1.Params.RandomPointsH\002\022\?\n\021genera"
  "lize_params\030\017 \001(\0132\".epl.protobuf.v1.Para"
  "ms.GeneralizeH\002\022C\n\023intersection_params\030\020"
  " \001(\0132$.epl.protobuf.v1.Params.Intersecti"
  "onH\002\0227\n\roffset_params\030\021 \001(\0132\036.epl.protob"
  "uf.v1.Params.OffsetH\002\0221\n\ncut_params\030\022 \001("
  "\0132\033.epl.protobuf.v1.Params.CutH\002\0223\n\013clip"
  "_params\030\023 \001(\0132\034.epl.protobuf.v1.Params.C"
  "lipH\002\0229\n\016densify_params\030\024 \001(\0132\037.epl.prot"
  "obuf.v1.Params.DensifyH\002\022;\n\017simplify_par"
  "ams\030\025 \001(\0132 .epl.protobuf.v1.Params.Simpl"
  "ifyH\002\022M\n\031generalize_by_area_params\030\026 \001(\013"
  "2(.epl.protobuf.v1.Params.GeneralizeByAr"
  "eaH\002\022J\n\027affine_transform_params\030\027 \001(\0132\'."
  "epl.protobuf.v1.Params.AffineTransformH\002"
  "\022H\n\026geodetic_buffer_params\030\030 \001(\0132&.epl.p"
  "rotobuf.v1.Params.GeodeticBufferH\002B\006\n\004le"
  "ftB\007\n\005rightB\010\n\006params\"\?\n\017GeodeticInverse"
  "\022\014\n\004az12\030\001 \001(\001\022\014\n\004az21\030\002 \001(\001\022\020\n\010distance"
  "\030\003 \001(\001\"\270\002\n\020GeometryResponse\0221\n\010geometry\030"
  "\001 \001(\0132\035.epl.protobuf.v1.GeometryDataH\000\022\036"
  "\n\024spatial_relationship\030\002 \001(\010H\000\022\021\n\007measur"
  "e\030\003 \001(\001H\000\022<\n\020geodetic_inverse\030\004 \001(\0132 .ep"
  "l.protobuf.v1.GeodeticInverseH\000\022D\n\nrelat"
  "e_map\030\005 \003(\01320.epl.protobuf.v1.GeometryRe"
  "sponse.RelateMapEntry\0320\n\016RelateMapEntry\022"
  "\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\010:\0028\001B\010\n\006resul"
  "t\"\341\002\n\020FileRequestChunk\0228\n\016nested_request"
  "\030\001 \001(\0132 .epl.protobuf.v1.GeometryRequest"
  "\0227\n\024result_encoding_type\030\002 \001(\0162\031.epl.pro"
  "tobuf.v1.Encoding\0223\n\ninput_proj\030\003 \001(\0132\037."
  "epl.protobuf.v1.ProjectionData\0224\n\013result"
  "_proj\030\005 \001(\0132\037.epl.protobuf.v1.Projection"
  "Data\022\014\n\004data\030\006 \001(\014\022\014\n\004size\030\007 \001(\003\022\016\n\006offs"
  "et\030\010 \001(\003\022\021\n\tfile_name\030\t \001(\t\022\025\n\ris_last_c"
  "hunk\030\n \001(\010\"\031\n\010FileType\022\r\n\tSHAPEFILE\020\000\"\323\007"
  "\n\006Params\032l\n\006Buffer\022\020\n\010distance\030\001 \001(\001\022\025\n\r"
  "max_deviation\030\002 \001(\001\022\024\n\014union_result\030\003 \001("
  "\010\022#\n\033max_vertices_in_full_circle\030\004 \001(\005\032t"
  "\n\016GeodeticBuffer\022\020\n\010distance\030\001 \001(\001\022\025\n\rma"
  "x_deviation\030\002 \001(\001\022\024\n\014union_result\030\003 \001(\010\022"
  "#\n\033max_vertices_in_full_circle\030\004 \001(\005\032\027\n\006"
  "Convex\022\r\n\005merge\030\001 \001(\010\032\030\n\006Relate\022\016\n\006de_9i"
  "m\030\001 \001(\t\032:\n\014RandomPoints\022\034\n\024points_per_sq"
  "uare_km\030\001 \001(\001\022\014\n\004seed\030\002 \001(\003\032\?\n\nGeneraliz"
  "e\022\025\n\rmax_deviation\030\001 \001(\001\022\032\n\022remove_degen"
  "erates\030\002 \001(\010\032b\n\020GeneralizeByArea\022\031\n\021perc"
  "ent_reduction\030\001 \001(\001\022\027\n\017max_point_count\030\002"
  " \001(\005\022\032\n\022remove_degenerates\030\003 \001(\010\032&\n\014Inte"
  "rsection\022\026\n\016dimension_mask\030\001 \001(\005\032\307\001\n\006Off"
  "set\022\020\n\010distance\030\001 \001(\001\022@\n\tjoin_type\030\002 \001(\016"
  "2-.epl.protobuf.v1.Params.Offset.OffsetJ"
  "oinType\022\023\n\013bevel_ratio\030\003 \001(\001\022\025\n\rflatten_"
  "error\030\004 \001(\001\"=\n\016OffsetJoinType\022\t\n\005ROUND\020\000"
  "\022\t\n\005BEVEL\020\001\022\t\n\005MITER\020\002\022\n\n\006SQUARE\020\003\032\035\n\003Cu"
  "t\022\026\n\016consider_touch\030\001 \001(\010\0327\n\004Clip\022/\n\010env"
  "elope\030\001 \001(\0132\035.epl.protobuf.v1.EnvelopeDa"
  "ta\032\035\n\007Densify\022\022\n\nmax_length\030\001 \001(\001\032\031\n\010Sim"
  "plify\022\r\n\005force\030\001 \001(\010\032M\n\017AffineTransform\022"
  "\020\n\010geodetic\030\002 \001(\010\022\020\n\010x_offset\030\003 \001(\001\022\020\n\010y"
  "_offset\030\004 \001(\001J\004\010\001\020\002*\306\001\n\013SimpleState\022\022\n\016S"
  "IMPLE_UNKNOWN\020\000\022\017\n\013WEAK_SIMPLE\020\001\022\021\n\rSTRO"
  "NG_SIMPLE\020\002\022\016\n\nNON_SIMPLE\020\003\022\022\n\016STRUCTURE"
  "_FLAW\020\004\022\027\n\023DEGENERATE_SEGMENTS\020\005\022\016\n\nCLUS"
  "TERING\020\006\022\014\n\010CRACKING\020\007\022\016\n\nCROSS_OVER\020\010\022\024"
  "\n\020RING_ORIENTATION\020\t*Y\n\010Encoding\022\024\n\020UNKN"
  "OWN_ENCODING\020\000\022\007\n\003WKB\020\001\022\007\n\003WKT\020\002\022\013\n\007GEOJ"
  "SON\020\003\022\016\n\nESRI_SHAPE\020\004\022\010\n\004EWKB\020\005*\365\006\n\014Oper"
  "atorType\022\024\n\020UNKNOWN_OPERATOR\020\000\022\013\n\007PROJEC"
  "T\020\001\022\022\n\016EXPORT_TO_JSON\020\002\022\024\n\020IMPORT_FROM_J"
  "SON\020\003\022\030\n\024EXPORT_TO_ESRI_SHAPE\020\004\022\032\n\026IMPOR"
  "T_FROM_ESRI_SHAPE\020\005\022\t\n\005UNION\020\006\022\016\n\nDIFFER"
  "ENCE\020\007\022\020\n\014PROXIMITY_2D\020\010\022\n\n\006RELATE\020\t\022\n\n\006"
  "EQUALS\020\n\022\014\n\010DISJOINT\020\013\022\016\n\nINTERSECTS\020\014\022\n"
  "\n\006WITHIN\020\r\022\014\n\010CONTAINS\020\016\022\013\n\007CROSSES\020\017\022\013\n"
  "\007TOUCHES\020\020\022\014\n\010OVERLAPS\020\021\022\n\n\006BUFFER\020\022\022\014\n\010"
  "DISTANCE\020\023\022\020\n\014INTERSECTION\020\024\022\010\n\004CLIP\020\025\022\007"
  "\n\003CUT\020\026\022\025\n\021DENSIFY_BY_LENGTH\020\027\022\023\n\017GEODES"
  "IC_BUFFER\020\032\022\036\n\032GEODETIC_DENSIFY_BY_LENGT"
  "H\020\033\022\021\n\rGEODETIC_AREA\020\036\022\014\n\010SIMPLIFY\020\037\022\020\n\014"
  "SIMPLIFY_OGC\020 \022\n\n\006OFFSET\020!\022\016\n\nGENERALIZE"
  "\020\"\022\026\n\022GENERALIZE_BY_AREA\020#\022\021\n\rEXPORT_TO_"
  "WKB\020$\022\023\n\017IMPORT_FROM_WKB\020%\022\021\n\rEXPORT_TO_"
  "WKT\020&\022\023\n\017IMPORT_FROM_WKT\020\'\022\027\n\023IMPORT_FRO"
  "M_GEOJSON\020(\022\025\n\021EXPORT_TO_GEOJSON\020)\022\030\n\024SY"
  "MMETRIC_DIFFERENCE\020*\022\017\n\013CONVEX_HULL\020+\022\014\n"
  "\010BOUNDARY\020,\022\021\n\rRANDOM_POINTS\020-\022\024\n\020ENCLOS"
  "ING_CIRCLE\020.\022\024\n\020AFFINE_TRANSFORM\020/\022\023\n\017GE"
  "ODETIC_LENGTH\0200\022\024\n\020GEODETIC_INVERSE\0201\022\022\n"
  "\016EXPORT_TO_EWKB\0202\022\024\n\020IMPORT_FROM_EWKB\0203B"
  "s\n\023com.epl.protobuf.v1B\rGeometryProtoP\001Z"
  ".github.com/geo-grpc/api/golang/epl/prot"
  "obuf/v1\242\002\004GMPB\252\002\023com.epl.protobuf.v1b\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto = {
  false, false, 5484, descriptor_table_protodef_epl_2fprotobuf_2fv1_2fgeometry_2eproto, "epl/protobuf/v1/geometry.proto", 
  &descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_epl_2fprotobuf_2fv1_2fgeometry_2eproto::offsets,
  file_level_metadata_epl_2fprotobuf_2fv1_2fgeometry_2eproto, file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto, file_level_service_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_epl_2fprotobuf_2fv1_2fgeometry_2eproto(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
namespace epl {
namespace protobuf {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionData_CSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[0];
}
bool ProjectionData_CSType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProjectionData_CSType ProjectionData::LAMBERT_AZI;
constexpr ProjectionData_CSType ProjectionData::CSType_MIN;
constexpr ProjectionData_CSType ProjectionData::CSType_MAX;
constexpr int ProjectionData::CSType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileRequestChunk_FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[1];
}
bool FileRequestChunk_FileType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FileRequestChunk_FileType FileRequestChunk::SHAPEFILE;
constexpr FileRequestChunk_FileType FileRequestChunk::FileType_MIN;
constexpr FileRequestChunk_FileType FileRequestChunk::FileType_MAX;
constexpr int FileRequestChunk::FileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Params_Offset_OffsetJoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[2];
}
bool Params_Offset_OffsetJoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Params_Offset_OffsetJoinType Params_Offset::ROUND;
constexpr Params_Offset_OffsetJoinType Params_Offset::BEVEL;
constexpr Params_Offset_OffsetJoinType Params_Offset::MITER;
constexpr Params_Offset_OffsetJoinType Params_Offset::SQUARE;
constexpr Params_Offset_OffsetJoinType Params_Offset::OffsetJoinType_MIN;
constexpr Params_Offset_OffsetJoinType Params_Offset::OffsetJoinType_MAX;
constexpr int Params_Offset::OffsetJoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[3];
}
bool SimpleState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[4];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fgeometry_2eproto[5];
}
bool OperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 26:
    case 27:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GeometryData::_Internal {
 public:
  static const ::epl::protobuf::v1::ProjectionData& proj(const GeometryData* msg);
  static const ::epl::protobuf::v1::EnvelopeData& envelope(const GeometryData* msg);
};

const ::epl::protobuf::v1::ProjectionData&
GeometryData::_Internal::proj(const GeometryData* msg) {
  return *msg->proj_;
}
const ::epl::protobuf::v1::EnvelopeData&
GeometryData::_Internal::envelope(const GeometryData* msg) {
  return *msg->envelope_;
}
GeometryData::GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.GeometryData)
}
GeometryData::GeometryData(const GeometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_feature_id().empty()) {
    feature_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_feature_id(), 
      GetArena());
  }
  if (from._internal_has_proj()) {
    proj_ = new ::epl::protobuf::v1::ProjectionData(*from.proj_);
  } else {
    proj_ = nullptr;
  }
  if (from._internal_has_envelope()) {
    envelope_ = new ::epl::protobuf::v1::EnvelopeData(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  ::memcpy(&geometry_id_, &from.geometry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&simple_) -
    reinterpret_cast<char*>(&geometry_id_)) + sizeof(simple_));
  clear_has_data();
  switch (from.data_case()) {
    case kWkt: {
      _internal_set_wkt(from._internal_wkt());
      break;
    }
    case kGeojson: {
      _internal_set_geojson(from._internal_geojson());
      break;
    }
    case kWkb: {
      _internal_set_wkb(from._internal_wkb());
      break;
    }
    case kEsriShape: {
      _internal_set_esri_shape(from._internal_esri_shape());
      break;
    }
    case kEwkb: {
      _internal_set_ewkb(from._internal_ewkb());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.GeometryData)
}

void GeometryData::SharedCtor() {
feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proj_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simple_) -
    reinterpret_cast<char*>(&proj_)) + sizeof(simple_));
clear_has_data();
}

GeometryData::~GeometryData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.GeometryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeometryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  feature_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proj_;
  if (this != internal_default_instance()) delete envelope_;
  if (has_data()) {
    clear_data();
  }
}

void GeometryData::ArenaDtor(void* object) {
  GeometryData* _this = reinterpret_cast< GeometryData* >(object);
  (void)_this;
}
void GeometryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeometryData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.GeometryData)
  switch (data_case()) {
    case kWkt: {
      data_.wkt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kGeojson: {
      data_.geojson_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kWkb: {
      data_.wkb_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kEsriShape: {
      data_.esri_shape_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kEwkb: {
      data_.ewkb_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_id_.ClearToEmpty();
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
  if (GetArena() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  ::memset(&geometry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simple_) -
      reinterpret_cast<char*>(&geometry_id_)) + sizeof(simple_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 geometry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          geometry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string feature_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_feature_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.GeometryData.feature_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wkt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wkt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.GeometryData.wkt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geojson = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_geojson();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.GeometryData.geojson"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes wkb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_wkb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes esri_shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_esri_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData proj = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EnvelopeData envelope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_envelope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.SimpleState simple = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_simple(static_cast<::epl::protobuf::v1::SimpleState>(val));
        } else goto handle_unusual;
        continue;
      // bytes ewkb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ewkb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 geometry_id = 1;
  if (this->geometry_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_geometry_id(), target);
  }

  // string feature_id = 2;
  if (this->feature_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feature_id().data(), static_cast<int>(this->_internal_feature_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.GeometryData.feature_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_feature_id(), target);
  }

  // string wkt = 3;
  if (_internal_has_wkt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wkt().data(), static_cast<int>(this->_internal_wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.GeometryData.wkt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_wkt(), target);
  }

  // string geojson = 4;
  if (_internal_has_geojson()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geojson().data(), static_cast<int>(this->_internal_geojson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.GeometryData.geojson");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_geojson(), target);
  }

  // bytes wkb = 5;
  if (_internal_has_wkb()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_wkb(), target);
  }

  // bytes esri_shape = 6;
  if (_internal_has_esri_shape()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_esri_shape(), target);
  }

  // .epl.protobuf.v1.ProjectionData proj = 7;
  if (this->has_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::proj(this), target, stream);
  }

  // .epl.protobuf.v1.EnvelopeData envelope = 13;
  if (this->has_envelope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::envelope(this), target, stream);
  }

  // .epl.protobuf.v1.SimpleState simple = 14;
  if (this->simple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_simple(), target);
  }

  // bytes ewkb = 15;
  if (_internal_has_ewkb()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_ewkb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.GeometryData)
  return target;
}

size_t GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.GeometryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feature_id = 2;
  if (this->feature_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feature_id());
  }

  // .epl.protobuf.v1.ProjectionData proj = 7;
  if (this->has_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proj_);
  }

  // .epl.protobuf.v1.EnvelopeData envelope = 13;
  if (this->has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // uint64 geometry_id = 1;
  if (this->geometry_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_geometry_id());
  }

  // .epl.protobuf.v1.SimpleState simple = 14;
  if (this->simple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_simple());
  }

  switch (data_case()) {
    // string wkt = 3;
    case kWkt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wkt());
      break;
    }
    // string geojson = 4;
    case kGeojson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_geojson());
      break;
    }
    // bytes wkb = 5;
    case kWkb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_wkb());
      break;
    }
    // bytes esri_shape = 6;
    case kEsriShape: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_esri_shape());
      break;
    }
    // bytes ewkb = 15;
    case kEwkb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ewkb());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.GeometryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.GeometryData)
    MergeFrom(*source);
  }
}

void GeometryData::MergeFrom(const GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_id().size() > 0) {
    _internal_set_feature_id(from._internal_feature_id());
  }
  if (from.has_proj()) {
    _internal_mutable_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_proj());
  }
  if (from.has_envelope()) {
    _internal_mutable_envelope()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_envelope());
  }
  if (from.geometry_id() != 0) {
    _internal_set_geometry_id(from._internal_geometry_id());
  }
  if (from.simple() != 0) {
    _internal_set_simple(from._internal_simple());
  }
  switch (from.data_case()) {
    case kWkt: {
      _internal_set_wkt(from._internal_wkt());
      break;
    }
    case kGeojson: {
      _internal_set_geojson(from._internal_geojson());
      break;
    }
    case kWkb: {
      _internal_set_wkb(from._internal_wkb());
      break;
    }
    case kEsriShape: {
      _internal_set_esri_shape(from._internal_esri_shape());
      break;
    }
    case kEwkb: {
      _internal_set_ewkb(from._internal_ewkb());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void GeometryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryData::CopyFrom(const GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryData::IsInitialized() const {
  return true;
}

void GeometryData::InternalSwap(GeometryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_id_.Swap(&other->feature_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeometryData, simple_)
      + sizeof(GeometryData::simple_)
      - PROTOBUF_FIELD_OFFSET(GeometryData, proj_)>(
          reinterpret_cast<char*>(&proj_),
          reinterpret_cast<char*>(&other->proj_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProjectionData_Custom::_Internal {
 public:
};

ProjectionData_Custom::ProjectionData_Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.ProjectionData.Custom)
}
ProjectionData_Custom::ProjectionData_Custom(const ProjectionData_Custom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lon_0_, &from.lon_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&cs_type_) -
    reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.ProjectionData.Custom)
}

void ProjectionData_Custom::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lon_0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cs_type_) -
    reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
}

ProjectionData_Custom::~ProjectionData_Custom() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.ProjectionData.Custom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectionData_Custom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjectionData_Custom::ArenaDtor(void* object) {
  ProjectionData_Custom* _this = reinterpret_cast< ProjectionData_Custom* >(object);
  (void)_this;
}
void ProjectionData_Custom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectionData_Custom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectionData_Custom::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.ProjectionData.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cs_type_) -
      reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectionData_Custom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lon_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lon_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData.CSType cs_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cs_type(static_cast<::epl::protobuf::v1::ProjectionData_CSType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionData_Custom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.ProjectionData.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lon_0 = 1;
  if (!(this->lon_0() <= 0 && this->lon_0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lon_0(), target);
  }

  // double lat_0 = 2;
  if (!(this->lat_0() <= 0 && this->lat_0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat_0(), target);
  }

  // .epl.protobuf.v1.ProjectionData.CSType cs_type = 3;
  if (this->cs_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cs_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.ProjectionData.Custom)
  return target;
}

size_t ProjectionData_Custom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.ProjectionData.Custom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lon_0 = 1;
  if (!(this->lon_0() <= 0 && this->lon_0() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat_0 = 2;
  if (!(this->lat_0() <= 0 && this->lat_0() >= 0)) {
    total_size += 1 + 8;
  }

  // .epl.protobuf.v1.ProjectionData.CSType cs_type = 3;
  if (this->cs_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cs_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionData_Custom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.ProjectionData.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionData_Custom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionData_Custom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.ProjectionData.Custom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.ProjectionData.Custom)
    MergeFrom(*source);
  }
}

void ProjectionData_Custom::MergeFrom(const ProjectionData_Custom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.ProjectionData.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lon_0() <= 0 && from.lon_0() >= 0)) {
    _internal_set_lon_0(from._internal_lon_0());
  }
  if (!(from.lat_0() <= 0 && from.lat_0() >= 0)) {
    _internal_set_lat_0(from._internal_lat_0());
  }
  if (from.cs_type() != 0) {
    _internal_set_cs_type(from._internal_cs_type());
  }
}

void ProjectionData_Custom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.ProjectionData.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionData_Custom::CopyFrom(const ProjectionData_Custom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.ProjectionData.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionData_Custom::IsInitialized() const {
  return true;
}

void ProjectionData_Custom::InternalSwap(ProjectionData_Custom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectionData_Custom, cs_type_)
      + sizeof(ProjectionData_Custom::cs_type_)
      - PROTOBUF_FIELD_OFFSET(ProjectionData_Custom, lon_0_)>(
          reinterpret_cast<char*>(&lon_0_),
          reinterpret_cast<char*>(&other->lon_0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionData_Custom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProjectionData::_Internal {
 public:
  static const ::epl::protobuf::v1::ProjectionData_Custom& custom(const ProjectionData* msg);
  static const ::epl::protobuf::v1::GeometryData& geometry(const ProjectionData* msg);
  static const ::epl::protobuf::v1::EnvelopeData& bbox(const ProjectionData* msg);
  static const ::epl::protobuf::v1::GeometryData& centroid(const ProjectionData* msg);
};

const ::epl::protobuf::v1::ProjectionData_Custom&
ProjectionData::_Internal::custom(const ProjectionData* msg) {
  return *msg->definition_.custom_;
}
const ::epl::protobuf::v1::GeometryData&
ProjectionData::_Internal::geometry(const ProjectionData* msg) {
  return *msg->geometry_;
}
const ::epl::protobuf::v1::EnvelopeData&
ProjectionData::_Internal::bbox(const ProjectionData* msg) {
  return *msg->bbox_;
}
const ::epl::protobuf::v1::GeometryData&
ProjectionData::_Internal::centroid(const ProjectionData* msg) {
  return *msg->centroid_;
}
void ProjectionData::set_allocated_custom(::epl::protobuf::v1::ProjectionData_Custom* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    definition_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.ProjectionData.custom)
}
ProjectionData::ProjectionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena),
  transform_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.ProjectionData)
}
ProjectionData::ProjectionData(const ProjectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geometry()) {
    geometry_ = new ::epl::protobuf::v1::GeometryData(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_bbox()) {
    bbox_ = new ::epl::protobuf::v1::EnvelopeData(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  if (from._internal_has_centroid()) {
    centroid_ = new ::epl::protobuf::v1::GeometryData(*from.centroid_);
  } else {
    centroid_ = nullptr;
  }
  clear_has_definition();
  switch (from.definition_case()) {
    case kEpsg: {
      _internal_set_epsg(from._internal_epsg());
      break;
    }
    case kProj4: {
      _internal_set_proj4(from._internal_proj4());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::epl::protobuf::v1::ProjectionData_Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kWkt: {
      _internal_set_wkt(from._internal_wkt());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.ProjectionData)
}

void ProjectionData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&centroid_) -
    reinterpret_cast<char*>(&geometry_)) + sizeof(centroid_));
clear_has_definition();
}

ProjectionData::~ProjectionData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.ProjectionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete centroid_;
  if (has_definition()) {
    clear_definition();
  }
}

void ProjectionData::ArenaDtor(void* object) {
  ProjectionData* _this = reinterpret_cast< ProjectionData* >(object);
  (void)_this;
}
void ProjectionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectionData::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.ProjectionData)
  switch (definition_case()) {
    case kEpsg: {
      // No need to clear
      break;
    }
    case kProj4: {
      definition_.proj4_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustom: {
      if (GetArena() == nullptr) {
        delete definition_.custom_;
      }
      break;
    }
    case kWkt: {
      definition_.wkt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFINITION_NOT_SET;
}


void ProjectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.ProjectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  transform_.Clear();
  if (GetArena() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  if (GetArena() == nullptr && centroid_ != nullptr) {
    delete centroid_;
  }
  centroid_ = nullptr;
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 epsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proj4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proj4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.ProjectionData.proj4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData.Custom custom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wkt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_wkt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.ProjectionData.wkt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double transform = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData geometry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EnvelopeData bbox = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData centroid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.ProjectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 epsg = 1;
  if (_internal_has_epsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_epsg(), target);
  }

  // string proj4 = 2;
  if (_internal_has_proj4()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proj4().data(), static_cast<int>(this->_internal_proj4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.ProjectionData.proj4");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proj4(), target);
  }

  // .epl.protobuf.v1.ProjectionData.Custom custom = 3;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::custom(this), target, stream);
  }

  // string wkt = 4;
  if (_internal_has_wkt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wkt().data(), static_cast<int>(this->_internal_wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.ProjectionData.wkt");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_wkt(), target);
  }

  // repeated uint32 shape = 8;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_shape(), byte_size, target);
    }
  }

  // repeated double transform = 9;
  if (this->_internal_transform_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_transform(), target);
  }

  // .epl.protobuf.v1.GeometryData geometry = 10;
  if (this->has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::geometry(this), target, stream);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 11;
  if (this->has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::bbox(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryData centroid = 12;
  if (this->has_centroid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::centroid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.ProjectionData)
  return target;
}

size_t ProjectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.ProjectionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double transform = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transform_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .epl.protobuf.v1.GeometryData geometry = 10;
  if (this->has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 11;
  if (this->has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .epl.protobuf.v1.GeometryData centroid = 12;
  if (this->has_centroid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centroid_);
  }

  switch (definition_case()) {
    // int32 epsg = 1;
    case kEpsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_epsg());
      break;
    }
    // string proj4 = 2;
    case kProj4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proj4());
      break;
    }
    // .epl.protobuf.v1.ProjectionData.Custom custom = 3;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.custom_);
      break;
    }
    // string wkt = 4;
    case kWkt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wkt());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.ProjectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.ProjectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.ProjectionData)
    MergeFrom(*source);
  }
}

void ProjectionData::MergeFrom(const ProjectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.ProjectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  transform_.MergeFrom(from.transform_);
  if (from.has_geometry()) {
    _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
  }
  if (from.has_bbox()) {
    _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
  }
  if (from.has_centroid()) {
    _internal_mutable_centroid()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_centroid());
  }
  switch (from.definition_case()) {
    case kEpsg: {
      _internal_set_epsg(from._internal_epsg());
      break;
    }
    case kProj4: {
      _internal_set_proj4(from._internal_proj4());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::epl::protobuf::v1::ProjectionData_Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kWkt: {
      _internal_set_wkt(from._internal_wkt());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
}

void ProjectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.ProjectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionData::CopyFrom(const ProjectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.ProjectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionData::IsInitialized() const {
  return true;
}

void ProjectionData::InternalSwap(ProjectionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  transform_.InternalSwap(&other->transform_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectionData, centroid_)
      + sizeof(ProjectionData::centroid_)
      - PROTOBUF_FIELD_OFFSET(ProjectionData, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
  swap(definition_, other->definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvelopeData::_Internal {
 public:
  static const ::epl::protobuf::v1::ProjectionData& proj(const EnvelopeData* msg);
};

const ::epl::protobuf::v1::ProjectionData&
EnvelopeData::_Internal::proj(const EnvelopeData* msg) {
  return *msg->proj_;
}
EnvelopeData::EnvelopeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.EnvelopeData)
}
EnvelopeData::EnvelopeData(const EnvelopeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proj()) {
    proj_ = new ::epl::protobuf::v1::ProjectionData(*from.proj_);
  } else {
    proj_ = nullptr;
  }
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&zmax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.EnvelopeData)
}

void EnvelopeData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proj_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zmax_) -
    reinterpret_cast<char*>(&proj_)) + sizeof(zmax_));
}

EnvelopeData::~EnvelopeData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.EnvelopeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvelopeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete proj_;
}

void EnvelopeData::ArenaDtor(void* object) {
  EnvelopeData* _this = reinterpret_cast< EnvelopeData* >(object);
  (void)_this;
}
void EnvelopeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvelopeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnvelopeData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.EnvelopeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvelopeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData proj = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double zmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          zmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double zmax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          zmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvelopeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.EnvelopeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xmin(), target);
  }

  // double ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ymin(), target);
  }

  // double xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_xmax(), target);
  }

  // double ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ymax(), target);
  }

  // .epl.protobuf.v1.ProjectionData proj = 5;
  if (this->has_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::proj(this), target, stream);
  }

  // double zmin = 6;
  if (!(this->zmin() <= 0 && this->zmin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_zmin(), target);
  }

  // double zmax = 7;
  if (!(this->zmax() <= 0 && this->zmax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_zmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.EnvelopeData)
  return target;
}

size_t EnvelopeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.EnvelopeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.ProjectionData proj = 5;
  if (this->has_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proj_);
  }

  // double xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    total_size += 1 + 8;
  }

  // double ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    total_size += 1 + 8;
  }

  // double xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    total_size += 1 + 8;
  }

  // double ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    total_size += 1 + 8;
  }

  // double zmin = 6;
  if (!(this->zmin() <= 0 && this->zmin() >= 0)) {
    total_size += 1 + 8;
  }

  // double zmax = 7;
  if (!(this->zmax() <= 0 && this->zmax() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvelopeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.EnvelopeData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvelopeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvelopeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.EnvelopeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.EnvelopeData)
    MergeFrom(*source);
  }
}

void EnvelopeData::MergeFrom(const EnvelopeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.EnvelopeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proj()) {
    _internal_mutable_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_proj());
  }
  if (!(from.xmin() <= 0 && from.xmin() >= 0)) {
    _internal_set_xmin(from._internal_xmin());
  }
  if (!(from.ymin() <= 0 && from.ymin() >= 0)) {
    _internal_set_ymin(from._internal_ymin());
  }
  if (!(from.xmax() <= 0 && from.xmax() >= 0)) {
    _internal_set_xmax(from._internal_xmax());
  }
  if (!(from.ymax() <= 0 && from.ymax() >= 0)) {
    _internal_set_ymax(from._internal_ymax());
  }
  if (!(from.zmin() <= 0 && from.zmin() >= 0)) {
    _internal_set_zmin(from._internal_zmin());
  }
  if (!(from.zmax() <= 0 && from.zmax() >= 0)) {
    _internal_set_zmax(from._internal_zmax());
  }
}

void EnvelopeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.EnvelopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeData::CopyFrom(const EnvelopeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.EnvelopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeData::IsInitialized() const {
  return true;
}

void EnvelopeData::InternalSwap(EnvelopeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvelopeData, zmax_)
      + sizeof(EnvelopeData::zmax_)
      - PROTOBUF_FIELD_OFFSET(EnvelopeData, proj_)>(
          reinterpret_cast<char*>(&proj_),
          reinterpret_cast<char*>(&other->proj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvelopeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeometryRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::GeometryData& geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::GeometryData& left_geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::GeometryRequest& geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::GeometryRequest& left_geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::GeometryData& right_geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::GeometryRequest& right_geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::ProjectionData& operation_proj(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::ProjectionData& result_proj(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Buffer& buffer_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Convex& convex_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Relate& relate_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_RandomPoints& random_points_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Generalize& generalize_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Intersection& intersection_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Offset& offset_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Cut& cut_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Clip& clip_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Densify& densify_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_Simplify& simplify_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_GeneralizeByArea& generalize_by_area_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_AffineTransform& affine_transform_params(const GeometryRequest* msg);
  static const ::epl::protobuf::v1::Params_GeodeticBuffer& geodetic_buffer_params(const GeometryRequest* msg);
};

const ::epl::protobuf::v1::GeometryData&
GeometryRequest::_Internal::geometry(const GeometryRequest* msg) {
  return *msg->left_.geometry_;
}
const ::epl::protobuf::v1::GeometryData&
GeometryRequest::_Internal::left_geometry(const GeometryRequest* msg) {
  return *msg->left_.left_geometry_;
}
const ::epl::protobuf::v1::GeometryRequest&
GeometryRequest::_Internal::geometry_request(const GeometryRequest* msg) {
  return *msg->left_.geometry_request_;
}
const ::epl::protobuf::v1::GeometryRequest&
GeometryRequest::_Internal::left_geometry_request(const GeometryRequest* msg) {
  return *msg->left_.left_geometry_request_;
}
const ::epl::protobuf::v1::GeometryData&
GeometryRequest::_Internal::right_geometry(const GeometryRequest* msg) {
  return *msg->right_.right_geometry_;
}
const ::epl::protobuf::v1::GeometryRequest&
GeometryRequest::_Internal::right_geometry_request(const GeometryRequest* msg) {
  return *msg->right_.right_geometry_request_;
}
const ::epl::protobuf::v1::ProjectionData&
GeometryRequest::_Internal::operation_proj(const GeometryRequest* msg) {
  return *msg->operation_proj_;
}
const ::epl::protobuf::v1::ProjectionData&
GeometryRequest::_Internal::result_proj(const GeometryRequest* msg) {
  return *msg->result_proj_;
}
const ::epl::protobuf::v1::Params_Buffer&
GeometryRequest::_Internal::buffer_params(const GeometryRequest* msg) {
  return *msg->params_.buffer_params_;
}
const ::epl::protobuf::v1::Params_Convex&
GeometryRequest::_Internal::convex_params(const GeometryRequest* msg) {
  return *msg->params_.convex_params_;
}
const ::epl::protobuf::v1::Params_Relate&
GeometryRequest::_Internal::relate_params(const GeometryRequest* msg) {
  return *msg->params_.relate_params_;
}
const ::epl::protobuf::v1::Params_RandomPoints&
GeometryRequest::_Internal::random_points_params(const GeometryRequest* msg) {
  return *msg->params_.random_points_params_;
}
const ::epl::protobuf::v1::Params_Generalize&
GeometryRequest::_Internal::generalize_params(const GeometryRequest* msg) {
  return *msg->params_.generalize_params_;
}
const ::epl::protobuf::v1::Params_Intersection&
GeometryRequest::_Internal::intersection_params(const GeometryRequest* msg) {
  return *msg->params_.intersection_params_;
}
const ::epl::protobuf::v1::Params_Offset&
GeometryRequest::_Internal::offset_params(const GeometryRequest* msg) {
  return *msg->params_.offset_params_;
}
const ::epl::protobuf::v1::Params_Cut&
GeometryRequest::_Internal::cut_params(const GeometryRequest* msg) {
  return *msg->params_.cut_params_;
}
const ::epl::protobuf::v1::Params_Clip&
GeometryRequest::_Internal::clip_params(const GeometryRequest* msg) {
  return *msg->params_.clip_params_;
}
const ::epl::protobuf::v1::Params_Densify&
GeometryRequest::_Internal::densify_params(const GeometryRequest* msg) {
  return *msg->params_.densify_params_;
}
const ::epl::protobuf::v1::Params_Simplify&
GeometryRequest::_Internal::simplify_params(const GeometryRequest* msg) {
  return *msg->params_.simplify_params_;
}
const ::epl::protobuf::v1::Params_GeneralizeByArea&
GeometryRequest::_Internal::generalize_by_area_params(const GeometryRequest* msg) {
  return *msg->params_.generalize_by_area_params_;
}
const ::epl::protobuf::v1::Params_AffineTransform&
GeometryRequest::_Internal::affine_transform_params(const GeometryRequest* msg) {
  return *msg->params_.affine_transform_params_;
}
const ::epl::protobuf::v1::Params_GeodeticBuffer&
GeometryRequest::_Internal::geodetic_buffer_params(const GeometryRequest* msg) {
  return *msg->params_.geodetic_buffer_params_;
}
void GeometryRequest::set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_left();
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry);
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
    left_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.geometry)
}
void GeometryRequest::set_allocated_left_geometry(::epl::protobuf::v1::GeometryData* left_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_left();
  if (left_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_geometry);
    if (message_arena != submessage_arena) {
      left_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_geometry, submessage_arena);
    }
    set_has_left_geometry();
    left_.left_geometry_ = left_geometry;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.left_geometry)
}
void GeometryRequest::set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_left();
  if (geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry_request);
    if (message_arena != submessage_arena) {
      geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_request, submessage_arena);
    }
    set_has_geometry_request();
    left_.geometry_request_ = geometry_request;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.geometry_request)
}
void GeometryRequest::set_allocated_left_geometry_request(::epl::protobuf::v1::GeometryRequest* left_geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_left();
  if (left_geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_geometry_request);
    if (message_arena != submessage_arena) {
      left_geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_geometry_request, submessage_arena);
    }
    set_has_left_geometry_request();
    left_.left_geometry_request_ = left_geometry_request;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.left_geometry_request)
}
void GeometryRequest::set_allocated_right_geometry(::epl::protobuf::v1::GeometryData* right_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_right();
  if (right_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_geometry);
    if (message_arena != submessage_arena) {
      right_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_geometry, submessage_arena);
    }
    set_has_right_geometry();
    right_.right_geometry_ = right_geometry;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.right_geometry)
}
void GeometryRequest::set_allocated_right_geometry_request(::epl::protobuf::v1::GeometryRequest* right_geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_right();
  if (right_geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_geometry_request);
    if (message_arena != submessage_arena) {
      right_geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_geometry_request, submessage_arena);
    }
    set_has_right_geometry_request();
    right_.right_geometry_request_ = right_geometry_request;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.right_geometry_request)
}
void GeometryRequest::set_allocated_buffer_params(::epl::protobuf::v1::Params_Buffer* buffer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (buffer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buffer_params);
    if (message_arena != submessage_arena) {
      buffer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_params, submessage_arena);
    }
    set_has_buffer_params();
    params_.buffer_params_ = buffer_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.buffer_params)
}
void GeometryRequest::set_allocated_convex_params(::epl::protobuf::v1::Params_Convex* convex_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (convex_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convex_params);
    if (message_arena != submessage_arena) {
      convex_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convex_params, submessage_arena);
    }
    set_has_convex_params();
    params_.convex_params_ = convex_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.convex_params)
}
void GeometryRequest::set_allocated_relate_params(::epl::protobuf::v1::Params_Relate* relate_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (relate_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relate_params);
    if (message_arena != submessage_arena) {
      relate_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relate_params, submessage_arena);
    }
    set_has_relate_params();
    params_.relate_params_ = relate_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.relate_params)
}
void GeometryRequest::set_allocated_random_points_params(::epl::protobuf::v1::Params_RandomPoints* random_points_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (random_points_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(random_points_params);
    if (message_arena != submessage_arena) {
      random_points_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_points_params, submessage_arena);
    }
    set_has_random_points_params();
    params_.random_points_params_ = random_points_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.random_points_params)
}
void GeometryRequest::set_allocated_generalize_params(::epl::protobuf::v1::Params_Generalize* generalize_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (generalize_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generalize_params);
    if (message_arena != submessage_arena) {
      generalize_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalize_params, submessage_arena);
    }
    set_has_generalize_params();
    params_.generalize_params_ = generalize_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.generalize_params)
}
void GeometryRequest::set_allocated_intersection_params(::epl::protobuf::v1::Params_Intersection* intersection_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (intersection_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intersection_params);
    if (message_arena != submessage_arena) {
      intersection_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection_params, submessage_arena);
    }
    set_has_intersection_params();
    params_.intersection_params_ = intersection_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.intersection_params)
}
void GeometryRequest::set_allocated_offset_params(::epl::protobuf::v1::Params_Offset* offset_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (offset_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(offset_params);
    if (message_arena != submessage_arena) {
      offset_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset_params, submessage_arena);
    }
    set_has_offset_params();
    params_.offset_params_ = offset_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.offset_params)
}
void GeometryRequest::set_allocated_cut_params(::epl::protobuf::v1::Params_Cut* cut_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (cut_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cut_params);
    if (message_arena != submessage_arena) {
      cut_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cut_params, submessage_arena);
    }
    set_has_cut_params();
    params_.cut_params_ = cut_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.cut_params)
}
void GeometryRequest::set_allocated_clip_params(::epl::protobuf::v1::Params_Clip* clip_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (clip_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip_params);
    if (message_arena != submessage_arena) {
      clip_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip_params, submessage_arena);
    }
    set_has_clip_params();
    params_.clip_params_ = clip_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.clip_params)
}
void GeometryRequest::set_allocated_densify_params(::epl::protobuf::v1::Params_Densify* densify_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (densify_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(densify_params);
    if (message_arena != submessage_arena) {
      densify_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, densify_params, submessage_arena);
    }
    set_has_densify_params();
    params_.densify_params_ = densify_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.densify_params)
}
void GeometryRequest::set_allocated_simplify_params(::epl::protobuf::v1::Params_Simplify* simplify_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (simplify_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simplify_params);
    if (message_arena != submessage_arena) {
      simplify_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simplify_params, submessage_arena);
    }
    set_has_simplify_params();
    params_.simplify_params_ = simplify_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.simplify_params)
}
void GeometryRequest::set_allocated_generalize_by_area_params(::epl::protobuf::v1::Params_GeneralizeByArea* generalize_by_area_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (generalize_by_area_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generalize_by_area_params);
    if (message_arena != submessage_arena) {
      generalize_by_area_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalize_by_area_params, submessage_arena);
    }
    set_has_generalize_by_area_params();
    params_.generalize_by_area_params_ = generalize_by_area_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.generalize_by_area_params)
}
void GeometryRequest::set_allocated_affine_transform_params(::epl::protobuf::v1::Params_AffineTransform* affine_transform_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (affine_transform_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(affine_transform_params);
    if (message_arena != submessage_arena) {
      affine_transform_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine_transform_params, submessage_arena);
    }
    set_has_affine_transform_params();
    params_.affine_transform_params_ = affine_transform_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.affine_transform_params)
}
void GeometryRequest::set_allocated_geodetic_buffer_params(::epl::protobuf::v1::Params_GeodeticBuffer* geodetic_buffer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (geodetic_buffer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geodetic_buffer_params);
    if (message_arena != submessage_arena) {
      geodetic_buffer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic_buffer_params, submessage_arena);
    }
    set_has_geodetic_buffer_params();
    params_.geodetic_buffer_params_ = geodetic_buffer_params;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryRequest.geodetic_buffer_params)
}
GeometryRequest::GeometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.GeometryRequest)
}
GeometryRequest::GeometryRequest(const GeometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_operation_proj()) {
    operation_proj_ = new ::epl::protobuf::v1::ProjectionData(*from.operation_proj_);
  } else {
    operation_proj_ = nullptr;
  }
  if (from._internal_has_result_proj()) {
    result_proj_ = new ::epl::protobuf::v1::ProjectionData(*from.result_proj_);
  } else {
    result_proj_ = nullptr;
  }
  ::memcpy(&operator__, &from.operator__,
    static_cast<size_t>(reinterpret_cast<char*>(&result_encoding_) -
    reinterpret_cast<char*>(&operator__)) + sizeof(result_encoding_));
  clear_has_left();
  switch (from.left_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
      break;
    }
    case kLeftGeometry: {
      _internal_mutable_left_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_left_geometry());
      break;
    }
    case kGeometryRequest: {
      _internal_mutable_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_geometry_request());
      break;
    }
    case kLeftGeometryRequest: {
      _internal_mutable_left_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_left_geometry_request());
      break;
    }
    case LEFT_NOT_SET: {
      break;
    }
  }
  clear_has_right();
  switch (from.right_case()) {
    case kRightGeometry: {
      _internal_mutable_right_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_right_geometry());
      break;
    }
    case kRightGeometryRequest: {
      _internal_mutable_right_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_right_geometry_request());
      break;
    }
    case RIGHT_NOT_SET: {
      break;
    }
  }
  clear_has_params();
  switch (from.params_case()) {
    case kBufferParams: {
      _internal_mutable_buffer_params()->::epl::protobuf::v1::Params_Buffer::MergeFrom(from._internal_buffer_params());
      break;
    }
    case kConvexParams: {
      _internal_mutable_convex_params()->::epl::protobuf::v1::Params_Convex::MergeFrom(from._internal_convex_params());
      break;
    }
    case kRelateParams: {
      _internal_mutable_relate_params()->::epl::protobuf::v1::Params_Relate::MergeFrom(from._internal_relate_params());
      break;
    }
    case kRandomPointsParams: {
      _internal_mutable_random_points_params()->::epl::protobuf::v1::Params_RandomPoints::MergeFrom(from._internal_random_points_params());
      break;
    }
    case kGeneralizeParams: {
      _internal_mutable_generalize_params()->::epl::protobuf::v1::Params_Generalize::MergeFrom(from._internal_generalize_params());
      break;
    }
    case kIntersectionParams: {
      _internal_mutable_intersection_params()->::epl::protobuf::v1::Params_Intersection::MergeFrom(from._internal_intersection_params());
      break;
    }
    case kOffsetParams: {
      _internal_mutable_offset_params()->::epl::protobuf::v1::Params_Offset::MergeFrom(from._internal_offset_params());
      break;
    }
    case kCutParams: {
      _internal_mutable_cut_params()->::epl::protobuf::v1::Params_Cut::MergeFrom(from._internal_cut_params());
      break;
    }
    case kClipParams: {
      _internal_mutable_clip_params()->::epl::protobuf::v1::Params_Clip::MergeFrom(from._internal_clip_params());
      break;
    }
    case kDensifyParams: {
      _internal_mutable_densify_params()->::epl::protobuf::v1::Params_Densify::MergeFrom(from._internal_densify_params());
      break;
    }
    case kSimplifyParams: {
      _internal_mutable_simplify_params()->::epl::protobuf::v1::Params_Simplify::MergeFrom(from._internal_simplify_params());
      break;
    }
    case kGeneralizeByAreaParams: {
      _internal_mutable_generalize_by_area_params()->::epl::protobuf::v1::Params_GeneralizeByArea::MergeFrom(from._internal_generalize_by_area_params());
      break;
    }
    case kAffineTransformParams: {
      _internal_mutable_affine_transform_params()->::epl::protobuf::v1::Params_AffineTransform::MergeFrom(from._internal_affine_transform_params());
      break;
    }
    case kGeodeticBufferParams: {
      _internal_mutable_geodetic_buffer_params()->::epl::protobuf::v1::Params_GeodeticBuffer::MergeFrom(from._internal_geodetic_buffer_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.GeometryRequest)
}

void GeometryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_proj_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_encoding_) -
    reinterpret_cast<char*>(&operation_proj_)) + sizeof(result_encoding_));
clear_has_left();
clear_has_right();
clear_has_params();
}

GeometryRequest::~GeometryRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.GeometryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete operation_proj_;
  if (this != internal_default_instance()) delete result_proj_;
  if (has_left()) {
    clear_left();
  }
  if (has_right()) {
    clear_right();
  }
  if (has_params()) {
    clear_params();
  }
}

void GeometryRequest::ArenaDtor(void* object) {
  GeometryRequest* _this = reinterpret_cast< GeometryRequest* >(object);
  (void)_this;
}
void GeometryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeometryRequest::clear_left() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.GeometryRequest)
  switch (left_case()) {
    case kGeometry: {
      if (GetArena() == nullptr) {
        delete left_.geometry_;
      }
      break;
    }
    case kLeftGeometry: {
      if (GetArena() == nullptr) {
        delete left_.left_geometry_;
      }
      break;
    }
    case kGeometryRequest: {
      if (GetArena() == nullptr) {
        delete left_.geometry_request_;
      }
      break;
    }
    case kLeftGeometryRequest: {
      if (GetArena() == nullptr) {
        delete left_.left_geometry_request_;
      }
      break;
    }
    case LEFT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEFT_NOT_SET;
}

void GeometryRequest::clear_right() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.GeometryRequest)
  switch (right_case()) {
    case kRightGeometry: {
      if (GetArena() == nullptr) {
        delete right_.right_geometry_;
      }
      break;
    }
    case kRightGeometryRequest: {
      if (GetArena() == nullptr) {
        delete right_.right_geometry_request_;
      }
      break;
    }
    case RIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RIGHT_NOT_SET;
}

void GeometryRequest::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.GeometryRequest)
  switch (params_case()) {
    case kBufferParams: {
      if (GetArena() == nullptr) {
        delete params_.buffer_params_;
      }
      break;
    }
    case kConvexParams: {
      if (GetArena() == nullptr) {
        delete params_.convex_params_;
      }
      break;
    }
    case kRelateParams: {
      if (GetArena() == nullptr) {
        delete params_.relate_params_;
      }
      break;
    }
    case kRandomPointsParams: {
      if (GetArena() == nullptr) {
        delete params_.random_points_params_;
      }
      break;
    }
    case kGeneralizeParams: {
      if (GetArena() == nullptr) {
        delete params_.generalize_params_;
      }
      break;
    }
    case kIntersectionParams: {
      if (GetArena() == nullptr) {
        delete params_.intersection_params_;
      }
      break;
    }
    case kOffsetParams: {
      if (GetArena() == nullptr) {
        delete params_.offset_params_;
      }
      break;
    }
    case kCutParams: {
      if (GetArena() == nullptr) {
        delete params_.cut_params_;
      }
      break;
    }
    case kClipParams: {
      if (GetArena() == nullptr) {
        delete params_.clip_params_;
      }
      break;
    }
    case kDensifyParams: {
      if (GetArena() == nullptr) {
        delete params_.densify_params_;
      }
      break;
    }
    case kSimplifyParams: {
      if (GetArena() == nullptr) {
        delete params_.simplify_params_;
      }
      break;
    }
    case kGeneralizeByAreaParams: {
      if (GetArena() == nullptr) {
        delete params_.generalize_by_area_params_;
      }
      break;
    }
    case kAffineTransformParams: {
      if (GetArena() == nullptr) {
        delete params_.affine_transform_params_;
      }
      break;
    }
    case kGeodeticBufferParams: {
      if (GetArena() == nullptr) {
        delete params_.geodetic_buffer_params_;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = PARAMS_NOT_SET;
}


void GeometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.GeometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && operation_proj_ != nullptr) {
    delete operation_proj_;
  }
  operation_proj_ = nullptr;
  if (GetArena() == nullptr && result_proj_ != nullptr) {
    delete result_proj_;
  }
  result_proj_ = nullptr;
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_encoding_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(result_encoding_));
  clear_left();
  clear_right();
  clear_params();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.GeometryData geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData left_geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryRequest geometry_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryRequest left_geometry_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData right_geometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryRequest right_geometry_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.OperatorType operator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::epl::protobuf::v1::OperatorType>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Encoding result_encoding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_encoding(static_cast<::epl::protobuf::v1::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData operation_proj = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData result_proj = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Buffer buffer_params = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Convex convex_params = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_convex_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Relate relate_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_relate_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.RandomPoints random_points_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_points_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Generalize generalize_params = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_generalize_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Intersection intersection_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersection_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Offset offset_params = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Cut cut_params = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_cut_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Clip clip_params = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Densify densify_params = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_densify_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Simplify simplify_params = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_simplify_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.GeneralizeByArea generalize_by_area_params = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_generalize_by_area_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.AffineTransform affine_transform_params = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_affine_transform_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.GeodeticBuffer geodetic_buffer_params = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_geodetic_buffer_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.GeometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.GeometryData geometry = 1;
  if (_internal_has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryData left_geometry = 2;
  if (_internal_has_left_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_geometry(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryRequest geometry_request = 3;
  if (_internal_has_geometry_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::geometry_request(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryRequest left_geometry_request = 4;
  if (_internal_has_left_geometry_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::left_geometry_request(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryData right_geometry = 5;
  if (_internal_has_right_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::right_geometry(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryRequest right_geometry_request = 6;
  if (_internal_has_right_geometry_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::right_geometry_request(this), target, stream);
  }

  // .epl.protobuf.v1.OperatorType operator = 7;
  if (this->operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_operator_(), target);
  }

  // .epl.protobuf.v1.Encoding result_encoding = 8;
  if (this->result_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_result_encoding(), target);
  }

  // .epl.protobuf.v1.ProjectionData operation_proj = 9;
  if (this->has_operation_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::operation_proj(this), target, stream);
  }

  // .epl.protobuf.v1.ProjectionData result_proj = 10;
  if (this->has_result_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::result_proj(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Buffer buffer_params = 11;
  if (_internal_has_buffer_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::buffer_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Convex convex_params = 12;
  if (_internal_has_convex_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::convex_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Relate relate_params = 13;
  if (_internal_has_relate_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::relate_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.RandomPoints random_points_params = 14;
  if (_internal_has_random_points_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::random_points_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Generalize generalize_params = 15;
  if (_internal_has_generalize_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::generalize_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Intersection intersection_params = 16;
  if (_internal_has_intersection_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::intersection_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Offset offset_params = 17;
  if (_internal_has_offset_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::offset_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Cut cut_params = 18;
  if (_internal_has_cut_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::cut_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Clip clip_params = 19;
  if (_internal_has_clip_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::clip_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Densify densify_params = 20;
  if (_internal_has_densify_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::densify_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.Simplify simplify_params = 21;
  if (_internal_has_simplify_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::simplify_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.GeneralizeByArea generalize_by_area_params = 22;
  if (_internal_has_generalize_by_area_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::generalize_by_area_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.AffineTransform affine_transform_params = 23;
  if (_internal_has_affine_transform_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::affine_transform_params(this), target, stream);
  }

  // .epl.protobuf.v1.Params.GeodeticBuffer geodetic_buffer_params = 24;
  if (_internal_has_geodetic_buffer_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::geodetic_buffer_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.GeometryRequest)
  return target;
}

size_t GeometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.GeometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.ProjectionData operation_proj = 9;
  if (this->has_operation_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_proj_);
  }

  // .epl.protobuf.v1.ProjectionData result_proj = 10;
  if (this->has_result_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_proj_);
  }

  // .epl.protobuf.v1.OperatorType operator = 7;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  // .epl.protobuf.v1.Encoding result_encoding = 8;
  if (this->result_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_encoding());
  }

  switch (left_case()) {
    // .epl.protobuf.v1.GeometryData geometry = 1;
    case kGeometry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_.geometry_);
      break;
    }
    // .epl.protobuf.v1.GeometryData left_geometry = 2;
    case kLeftGeometry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_.left_geometry_);
      break;
    }
    // .epl.protobuf.v1.GeometryRequest geometry_request = 3;
    case kGeometryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_.geometry_request_);
      break;
    }
    // .epl.protobuf.v1.GeometryRequest left_geometry_request = 4;
    case kLeftGeometryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_.left_geometry_request_);
      break;
    }
    case LEFT_NOT_SET: {
      break;
    }
  }
  switch (right_case()) {
    // .epl.protobuf.v1.GeometryData right_geometry = 5;
    case kRightGeometry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_.right_geometry_);
      break;
    }
    // .epl.protobuf.v1.GeometryRequest right_geometry_request = 6;
    case kRightGeometryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_.right_geometry_request_);
      break;
    }
    case RIGHT_NOT_SET: {
      break;
    }
  }
  switch (params_case()) {
    // .epl.protobuf.v1.Params.Buffer buffer_params = 11;
    case kBufferParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.buffer_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Convex convex_params = 12;
    case kConvexParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.convex_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Relate relate_params = 13;
    case kRelateParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.relate_params_);
      break;
    }
    // .epl.protobuf.v1.Params.RandomPoints random_points_params = 14;
    case kRandomPointsParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.random_points_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Generalize generalize_params = 15;
    case kGeneralizeParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.generalize_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Intersection intersection_params = 16;
    case kIntersectionParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.intersection_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Offset offset_params = 17;
    case kOffsetParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.offset_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Cut cut_params = 18;
    case kCutParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.cut_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Clip clip_params = 19;
    case kClipParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.clip_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Densify densify_params = 20;
    case kDensifyParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.densify_params_);
      break;
    }
    // .epl.protobuf.v1.Params.Simplify simplify_params = 21;
    case kSimplifyParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.simplify_params_);
      break;
    }
    // .epl.protobuf.v1.Params.GeneralizeByArea generalize_by_area_params = 22;
    case kGeneralizeByAreaParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.generalize_by_area_params_);
      break;
    }
    // .epl.protobuf.v1.Params.AffineTransform affine_transform_params = 23;
    case kAffineTransformParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.affine_transform_params_);
      break;
    }
    // .epl.protobuf.v1.Params.GeodeticBuffer geodetic_buffer_params = 24;
    case kGeodeticBufferParams: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.geodetic_buffer_params_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.GeometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.GeometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.GeometryRequest)
    MergeFrom(*source);
  }
}

void GeometryRequest::MergeFrom(const GeometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.GeometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_operation_proj()) {
    _internal_mutable_operation_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_operation_proj());
  }
  if (from.has_result_proj()) {
    _internal_mutable_result_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_result_proj());
  }
  if (from.operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.result_encoding() != 0) {
    _internal_set_result_encoding(from._internal_result_encoding());
  }
  switch (from.left_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
      break;
    }
    case kLeftGeometry: {
      _internal_mutable_left_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_left_geometry());
      break;
    }
    case kGeometryRequest: {
      _internal_mutable_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_geometry_request());
      break;
    }
    case kLeftGeometryRequest: {
      _internal_mutable_left_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_left_geometry_request());
      break;
    }
    case LEFT_NOT_SET: {
      break;
    }
  }
  switch (from.right_case()) {
    case kRightGeometry: {
      _internal_mutable_right_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_right_geometry());
      break;
    }
    case kRightGeometryRequest: {
      _internal_mutable_right_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_right_geometry_request());
      break;
    }
    case RIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.params_case()) {
    case kBufferParams: {
      _internal_mutable_buffer_params()->::epl::protobuf::v1::Params_Buffer::MergeFrom(from._internal_buffer_params());
      break;
    }
    case kConvexParams: {
      _internal_mutable_convex_params()->::epl::protobuf::v1::Params_Convex::MergeFrom(from._internal_convex_params());
      break;
    }
    case kRelateParams: {
      _internal_mutable_relate_params()->::epl::protobuf::v1::Params_Relate::MergeFrom(from._internal_relate_params());
      break;
    }
    case kRandomPointsParams: {
      _internal_mutable_random_points_params()->::epl::protobuf::v1::Params_RandomPoints::MergeFrom(from._internal_random_points_params());
      break;
    }
    case kGeneralizeParams: {
      _internal_mutable_generalize_params()->::epl::protobuf::v1::Params_Generalize::MergeFrom(from._internal_generalize_params());
      break;
    }
    case kIntersectionParams: {
      _internal_mutable_intersection_params()->::epl::protobuf::v1::Params_Intersection::MergeFrom(from._internal_intersection_params());
      break;
    }
    case kOffsetParams: {
      _internal_mutable_offset_params()->::epl::protobuf::v1::Params_Offset::MergeFrom(from._internal_offset_params());
      break;
    }
    case kCutParams: {
      _internal_mutable_cut_params()->::epl::protobuf::v1::Params_Cut::MergeFrom(from._internal_cut_params());
      break;
    }
    case kClipParams: {
      _internal_mutable_clip_params()->::epl::protobuf::v1::Params_Clip::MergeFrom(from._internal_clip_params());
      break;
    }
    case kDensifyParams: {
      _internal_mutable_densify_params()->::epl::protobuf::v1::Params_Densify::MergeFrom(from._internal_densify_params());
      break;
    }
    case kSimplifyParams: {
      _internal_mutable_simplify_params()->::epl::protobuf::v1::Params_Simplify::MergeFrom(from._internal_simplify_params());
      break;
    }
    case kGeneralizeByAreaParams: {
      _internal_mutable_generalize_by_area_params()->::epl::protobuf::v1::Params_GeneralizeByArea::MergeFrom(from._internal_generalize_by_area_params());
      break;
    }
    case kAffineTransformParams: {
      _internal_mutable_affine_transform_params()->::epl::protobuf::v1::Params_AffineTransform::MergeFrom(from._internal_affine_transform_params());
      break;
    }
    case kGeodeticBufferParams: {
      _internal_mutable_geodetic_buffer_params()->::epl::protobuf::v1::Params_GeodeticBuffer::MergeFrom(from._internal_geodetic_buffer_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void GeometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.GeometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest::CopyFrom(const GeometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.GeometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest::IsInitialized() const {
  return true;
}

void GeometryRequest::InternalSwap(GeometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeometryRequest, result_encoding_)
      + sizeof(GeometryRequest::result_encoding_)
      - PROTOBUF_FIELD_OFFSET(GeometryRequest, operation_proj_)>(
          reinterpret_cast<char*>(&operation_proj_),
          reinterpret_cast<char*>(&other->operation_proj_));
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GeodeticInverse::_Internal {
 public:
};

GeodeticInverse::GeodeticInverse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.GeodeticInverse)
}
GeodeticInverse::GeodeticInverse(const GeodeticInverse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&az12_, &from.az12_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.GeodeticInverse)
}

void GeodeticInverse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&az12_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
}

GeodeticInverse::~GeodeticInverse() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.GeodeticInverse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeodeticInverse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeodeticInverse::ArenaDtor(void* object) {
  GeodeticInverse* _this = reinterpret_cast< GeodeticInverse* >(object);
  (void)_this;
}
void GeodeticInverse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeodeticInverse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeodeticInverse::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.GeodeticInverse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&az12_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeodeticInverse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double az12 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          az12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double az21 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          az21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeodeticInverse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.GeodeticInverse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double az12 = 1;
  if (!(this->az12() <= 0 && this->az12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_az12(), target);
  }

  // double az21 = 2;
  if (!(this->az21() <= 0 && this->az21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_az21(), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.GeodeticInverse)
  return target;
}

size_t GeodeticInverse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.GeodeticInverse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double az12 = 1;
  if (!(this->az12() <= 0 && this->az12() >= 0)) {
    total_size += 1 + 8;
  }

  // double az21 = 2;
  if (!(this->az21() <= 0 && this->az21() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeodeticInverse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.GeodeticInverse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeodeticInverse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeodeticInverse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.GeodeticInverse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.GeodeticInverse)
    MergeFrom(*source);
  }
}

void GeodeticInverse::MergeFrom(const GeodeticInverse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.GeodeticInverse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.az12() <= 0 && from.az12() >= 0)) {
    _internal_set_az12(from._internal_az12());
  }
  if (!(from.az21() <= 0 && from.az21() >= 0)) {
    _internal_set_az21(from._internal_az21());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void GeodeticInverse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.GeodeticInverse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeodeticInverse::CopyFrom(const GeodeticInverse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.GeodeticInverse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeodeticInverse::IsInitialized() const {
  return true;
}

void GeodeticInverse::InternalSwap(GeodeticInverse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeodeticInverse, distance_)
      + sizeof(GeodeticInverse::distance_)
      - PROTOBUF_FIELD_OFFSET(GeodeticInverse, az12_)>(
          reinterpret_cast<char*>(&az12_),
          reinterpret_cast<char*>(&other->az12_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeodeticInverse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GeometryResponse_RelateMapEntry_DoNotUse::GeometryResponse_RelateMapEntry_DoNotUse() {}
GeometryResponse_RelateMapEntry_DoNotUse::GeometryResponse_RelateMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GeometryResponse_RelateMapEntry_DoNotUse::MergeFrom(const GeometryResponse_RelateMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GeometryResponse_RelateMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GeometryResponse_RelateMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GeometryResponse::_Internal {
 public:
  static const ::epl::protobuf::v1::GeometryData& geometry(const GeometryResponse* msg);
  static const ::epl::protobuf::v1::GeodeticInverse& geodetic_inverse(const GeometryResponse* msg);
};

const ::epl::protobuf::v1::GeometryData&
GeometryResponse::_Internal::geometry(const GeometryResponse* msg) {
  return *msg->result_.geometry_;
}
const ::epl::protobuf::v1::GeodeticInverse&
GeometryResponse::_Internal::geodetic_inverse(const GeometryResponse* msg) {
  return *msg->result_.geodetic_inverse_;
}
void GeometryResponse::set_allocated_geometry(::epl::protobuf::v1::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry);
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
    result_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryResponse.geometry)
}
void GeometryResponse::set_allocated_geodetic_inverse(::epl::protobuf::v1::GeodeticInverse* geodetic_inverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (geodetic_inverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geodetic_inverse);
    if (message_arena != submessage_arena) {
      geodetic_inverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic_inverse, submessage_arena);
    }
    set_has_geodetic_inverse();
    result_.geodetic_inverse_ = geodetic_inverse;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.GeometryResponse.geodetic_inverse)
}
GeometryResponse::GeometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relate_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.GeometryResponse)
}
GeometryResponse::GeometryResponse(const GeometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relate_map_.MergeFrom(from.relate_map_);
  clear_has_result();
  switch (from.result_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
      break;
    }
    case kSpatialRelationship: {
      _internal_set_spatial_relationship(from._internal_spatial_relationship());
      break;
    }
    case kMeasure: {
      _internal_set_measure(from._internal_measure());
      break;
    }
    case kGeodeticInverse: {
      _internal_mutable_geodetic_inverse()->::epl::protobuf::v1::GeodeticInverse::MergeFrom(from._internal_geodetic_inverse());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.GeometryResponse)
}

void GeometryResponse::SharedCtor() {
clear_has_result();
}

GeometryResponse::~GeometryResponse() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.GeometryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void GeometryResponse::ArenaDtor(void* object) {
  GeometryResponse* _this = reinterpret_cast< GeometryResponse* >(object);
  (void)_this;
}
void GeometryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeometryResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.GeometryResponse)
  switch (result_case()) {
    case kGeometry: {
      if (GetArena() == nullptr) {
        delete result_.geometry_;
      }
      break;
    }
    case kSpatialRelationship: {
      // No need to clear
      break;
    }
    case kMeasure: {
      // No need to clear
      break;
    }
    case kGeodeticInverse: {
      if (GetArena() == nullptr) {
        delete result_.geodetic_inverse_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void GeometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.GeometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relate_map_.Clear();
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.GeometryData geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spatial_relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_spatial_relationship(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double measure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_measure(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeodeticInverse geodetic_inverse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geodetic_inverse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, bool> relate_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relate_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.GeometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.GeometryData geometry = 1;
  if (_internal_has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // bool spatial_relationship = 2;
  if (_internal_has_spatial_relationship()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_spatial_relationship(), target);
  }

  // double measure = 3;
  if (_internal_has_measure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_measure(), target);
  }

  // .epl.protobuf.v1.GeodeticInverse geodetic_inverse = 4;
  if (_internal_has_geodetic_inverse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::geodetic_inverse(this), target, stream);
  }

  // map<int64, bool> relate_map = 5;
  if (!this->_internal_relate_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relate_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relate_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->_internal_relate_map().begin();
          it != this->_internal_relate_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GeometryResponse_RelateMapEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->_internal_relate_map().begin();
          it != this->_internal_relate_map().end(); ++it) {
        target = GeometryResponse_RelateMapEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.GeometryResponse)
  return target;
}

size_t GeometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.GeometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, bool> relate_map = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relate_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
      it = this->_internal_relate_map().begin();
      it != this->_internal_relate_map().end(); ++it) {
    total_size += GeometryResponse_RelateMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  switch (result_case()) {
    // .epl.protobuf.v1.GeometryData geometry = 1;
    case kGeometry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.geometry_);
      break;
    }
    // bool spatial_relationship = 2;
    case kSpatialRelationship: {
      total_size += 1 + 1;
      break;
    }
    // double measure = 3;
    case kMeasure: {
      total_size += 1 + 8;
      break;
    }
    // .epl.protobuf.v1.GeodeticInverse geodetic_inverse = 4;
    case kGeodeticInverse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.geodetic_inverse_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.GeometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.GeometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.GeometryResponse)
    MergeFrom(*source);
  }
}

void GeometryResponse::MergeFrom(const GeometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.GeometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relate_map_.MergeFrom(from.relate_map_);
  switch (from.result_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
      break;
    }
    case kSpatialRelationship: {
      _internal_set_spatial_relationship(from._internal_spatial_relationship());
      break;
    }
    case kMeasure: {
      _internal_set_measure(from._internal_measure());
      break;
    }
    case kGeodeticInverse: {
      _internal_mutable_geodetic_inverse()->::epl::protobuf::v1::GeodeticInverse::MergeFrom(from._internal_geodetic_inverse());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void GeometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.GeometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryResponse::CopyFrom(const GeometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.GeometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryResponse::IsInitialized() const {
  return true;
}

void GeometryResponse::InternalSwap(GeometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relate_map_.Swap(&other->relate_map_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileRequestChunk::_Internal {
 public:
  static const ::epl::protobuf::v1::GeometryRequest& nested_request(const FileRequestChunk* msg);
  static const ::epl::protobuf::v1::ProjectionData& input_proj(const FileRequestChunk* msg);
  static const ::epl::protobuf::v1::ProjectionData& result_proj(const FileRequestChunk* msg);
};

const ::epl::protobuf::v1::GeometryRequest&
FileRequestChunk::_Internal::nested_request(const FileRequestChunk* msg) {
  return *msg->nested_request_;
}
const ::epl::protobuf::v1::ProjectionData&
FileRequestChunk::_Internal::input_proj(const FileRequestChunk* msg) {
  return *msg->input_proj_;
}
const ::epl::protobuf::v1::ProjectionData&
FileRequestChunk::_Internal::result_proj(const FileRequestChunk* msg) {
  return *msg->result_proj_;
}
FileRequestChunk::FileRequestChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.FileRequestChunk)
}
FileRequestChunk::FileRequestChunk(const FileRequestChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  if (from._internal_has_nested_request()) {
    nested_request_ = new ::epl::protobuf::v1::GeometryRequest(*from.nested_request_);
  } else {
    nested_request_ = nullptr;
  }
  if (from._internal_has_input_proj()) {
    input_proj_ = new ::epl::protobuf::v1::ProjectionData(*from.input_proj_);
  } else {
    input_proj_ = nullptr;
  }
  if (from._internal_has_result_proj()) {
    result_proj_ = new ::epl::protobuf::v1::ProjectionData(*from.result_proj_);
  } else {
    result_proj_ = nullptr;
  }
  ::memcpy(&result_encoding_type_, &from.result_encoding_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&result_encoding_type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.FileRequestChunk)
}

void FileRequestChunk::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nested_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&nested_request_)) + sizeof(offset_));
}

FileRequestChunk::~FileRequestChunk() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.FileRequestChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileRequestChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_request_;
  if (this != internal_default_instance()) delete input_proj_;
  if (this != internal_default_instance()) delete result_proj_;
}

void FileRequestChunk::ArenaDtor(void* object) {
  FileRequestChunk* _this = reinterpret_cast< FileRequestChunk* >(object);
  (void)_this;
}
void FileRequestChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileRequestChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileRequestChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.FileRequestChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  file_name_.ClearToEmpty();
  if (GetArena() == nullptr && nested_request_ != nullptr) {
    delete nested_request_;
  }
  nested_request_ = nullptr;
  if (GetArena() == nullptr && input_proj_ != nullptr) {
    delete input_proj_;
  }
  input_proj_ = nullptr;
  if (GetArena() == nullptr && result_proj_ != nullptr) {
    delete result_proj_;
  }
  result_proj_ = nullptr;
  ::memset(&result_encoding_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&result_encoding_type_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileRequestChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.GeometryRequest nested_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Encoding result_encoding_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_encoding_type(static_cast<::epl::protobuf::v1::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData input_proj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData result_proj = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.FileRequestChunk.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_last_chunk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_last_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileRequestChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.FileRequestChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.GeometryRequest nested_request = 1;
  if (this->has_nested_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nested_request(this), target, stream);
  }

  // .epl.protobuf.v1.Encoding result_encoding_type = 2;
  if (this->result_encoding_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_encoding_type(), target);
  }

  // .epl.protobuf.v1.ProjectionData input_proj = 3;
  if (this->has_input_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_proj(this), target, stream);
  }

  // .epl.protobuf.v1.ProjectionData result_proj = 5;
  if (this->has_result_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::result_proj(this), target, stream);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // int64 size = 7;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_size(), target);
  }

  // int64 offset = 8;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_offset(), target);
  }

  // string file_name = 9;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.FileRequestChunk.file_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_file_name(), target);
  }

  // bool is_last_chunk = 10;
  if (this->is_last_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_last_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.FileRequestChunk)
  return target;
}

size_t FileRequestChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.FileRequestChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string file_name = 9;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .epl.protobuf.v1.GeometryRequest nested_request = 1;
  if (this->has_nested_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_request_);
  }

  // .epl.protobuf.v1.ProjectionData input_proj = 3;
  if (this->has_input_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_proj_);
  }

  // .epl.protobuf.v1.ProjectionData result_proj = 5;
  if (this->has_result_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_proj_);
  }

  // .epl.protobuf.v1.Encoding result_encoding_type = 2;
  if (this->result_encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_encoding_type());
  }

  // bool is_last_chunk = 10;
  if (this->is_last_chunk() != 0) {
    total_size += 1 + 1;
  }

  // int64 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 offset = 8;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequestChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.FileRequestChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequestChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileRequestChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.FileRequestChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.FileRequestChunk)
    MergeFrom(*source);
  }
}

void FileRequestChunk::MergeFrom(const FileRequestChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.FileRequestChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.has_nested_request()) {
    _internal_mutable_nested_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_nested_request());
  }
  if (from.has_input_proj()) {
    _internal_mutable_input_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_input_proj());
  }
  if (from.has_result_proj()) {
    _internal_mutable_result_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_result_proj());
  }
  if (from.result_encoding_type() != 0) {
    _internal_set_result_encoding_type(from._internal_result_encoding_type());
  }
  if (from.is_last_chunk() != 0) {
    _internal_set_is_last_chunk(from._internal_is_last_chunk());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void FileRequestChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.FileRequestChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequestChunk::CopyFrom(const FileRequestChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.FileRequestChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequestChunk::IsInitialized() const {
  return true;
}

void FileRequestChunk::InternalSwap(FileRequestChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileRequestChunk, offset_)
      + sizeof(FileRequestChunk::offset_)
      - PROTOBUF_FIELD_OFFSET(FileRequestChunk, nested_request_)>(
          reinterpret_cast<char*>(&nested_request_),
          reinterpret_cast<char*>(&other->nested_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequestChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Buffer::_Internal {
 public:
};

Params_Buffer::Params_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Buffer)
}
Params_Buffer::Params_Buffer(const Params_Buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Buffer)
}

void Params_Buffer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
}

Params_Buffer::~Params_Buffer() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Buffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Buffer::ArenaDtor(void* object) {
  Params_Buffer* _this = reinterpret_cast< Params_Buffer* >(object);
  (void)_this;
}
void Params_Buffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Buffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Buffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool union_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          union_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_vertices_in_full_circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_vertices_in_full_circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Buffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Buffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_deviation(), target);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_union_result(), target);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_vertices_in_full_circle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Buffer)
  return target;
}

size_t Params_Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Buffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_vertices_in_full_circle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Buffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Buffer)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Buffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Buffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Buffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Buffer)
    MergeFrom(*source);
  }
}

void Params_Buffer::MergeFrom(const Params_Buffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Buffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    _internal_set_max_deviation(from._internal_max_deviation());
  }
  if (from.union_result() != 0) {
    _internal_set_union_result(from._internal_union_result());
  }
  if (from.max_vertices_in_full_circle() != 0) {
    _internal_set_max_vertices_in_full_circle(from._internal_max_vertices_in_full_circle());
  }
}

void Params_Buffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Buffer::CopyFrom(const Params_Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Buffer::IsInitialized() const {
  return true;
}

void Params_Buffer::InternalSwap(Params_Buffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_Buffer, max_vertices_in_full_circle_)
      + sizeof(Params_Buffer::max_vertices_in_full_circle_)
      - PROTOBUF_FIELD_OFFSET(Params_Buffer, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Buffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_GeodeticBuffer::_Internal {
 public:
};

Params_GeodeticBuffer::Params_GeodeticBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.GeodeticBuffer)
}
Params_GeodeticBuffer::Params_GeodeticBuffer(const Params_GeodeticBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.GeodeticBuffer)
}

void Params_GeodeticBuffer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
}

Params_GeodeticBuffer::~Params_GeodeticBuffer() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.GeodeticBuffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_GeodeticBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_GeodeticBuffer::ArenaDtor(void* object) {
  Params_GeodeticBuffer* _this = reinterpret_cast< Params_GeodeticBuffer* >(object);
  (void)_this;
}
void Params_GeodeticBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_GeodeticBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_GeodeticBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.GeodeticBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_GeodeticBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool union_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          union_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_vertices_in_full_circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_vertices_in_full_circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_GeodeticBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.GeodeticBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_deviation(), target);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_union_result(), target);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_vertices_in_full_circle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.GeodeticBuffer)
  return target;
}

size_t Params_GeodeticBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.GeodeticBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_vertices_in_full_circle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_GeodeticBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.GeodeticBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_GeodeticBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_GeodeticBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.GeodeticBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.GeodeticBuffer)
    MergeFrom(*source);
  }
}

void Params_GeodeticBuffer::MergeFrom(const Params_GeodeticBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.GeodeticBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    _internal_set_max_deviation(from._internal_max_deviation());
  }
  if (from.union_result() != 0) {
    _internal_set_union_result(from._internal_union_result());
  }
  if (from.max_vertices_in_full_circle() != 0) {
    _internal_set_max_vertices_in_full_circle(from._internal_max_vertices_in_full_circle());
  }
}

void Params_GeodeticBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.GeodeticBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_GeodeticBuffer::CopyFrom(const Params_GeodeticBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.GeodeticBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_GeodeticBuffer::IsInitialized() const {
  return true;
}

void Params_GeodeticBuffer::InternalSwap(Params_GeodeticBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_GeodeticBuffer, max_vertices_in_full_circle_)
      + sizeof(Params_GeodeticBuffer::max_vertices_in_full_circle_)
      - PROTOBUF_FIELD_OFFSET(Params_GeodeticBuffer, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_GeodeticBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Convex::_Internal {
 public:
};

Params_Convex::Params_Convex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Convex)
}
Params_Convex::Params_Convex(const Params_Convex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merge_ = from.merge_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Convex)
}

void Params_Convex::SharedCtor() {
merge_ = false;
}

Params_Convex::~Params_Convex() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Convex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Convex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Convex::ArenaDtor(void* object) {
  Params_Convex* _this = reinterpret_cast< Params_Convex* >(object);
  (void)_this;
}
void Params_Convex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Convex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Convex::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Convex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merge_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Convex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool merge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Convex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Convex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool merge = 1;
  if (this->merge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_merge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Convex)
  return target;
}

size_t Params_Convex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Convex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool merge = 1;
  if (this->merge() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Convex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Convex)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Convex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Convex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Convex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Convex)
    MergeFrom(*source);
  }
}

void Params_Convex::MergeFrom(const Params_Convex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Convex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.merge() != 0) {
    _internal_set_merge(from._internal_merge());
  }
}

void Params_Convex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Convex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Convex::CopyFrom(const Params_Convex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Convex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Convex::IsInitialized() const {
  return true;
}

void Params_Convex::InternalSwap(Params_Convex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(merge_, other->merge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Convex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Relate::_Internal {
 public:
};

Params_Relate::Params_Relate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Relate)
}
Params_Relate::Params_Relate(const Params_Relate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  de_9im_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_de_9im().empty()) {
    de_9im_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_de_9im(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Relate)
}

void Params_Relate::SharedCtor() {
de_9im_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Params_Relate::~Params_Relate() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Relate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Relate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  de_9im_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Params_Relate::ArenaDtor(void* object) {
  Params_Relate* _this = reinterpret_cast< Params_Relate* >(object);
  (void)_this;
}
void Params_Relate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Relate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Relate::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Relate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  de_9im_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Relate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string de_9im = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_de_9im();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Params.Relate.de_9im"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Relate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Relate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string de_9im = 1;
  if (this->de_9im().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_de_9im().data(), static_cast<int>(this->_internal_de_9im().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Params.Relate.de_9im");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_de_9im(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Relate)
  return target;
}

size_t Params_Relate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Relate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string de_9im = 1;
  if (this->de_9im().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_de_9im());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Relate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Relate)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Relate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Relate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Relate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Relate)
    MergeFrom(*source);
  }
}

void Params_Relate::MergeFrom(const Params_Relate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Relate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.de_9im().size() > 0) {
    _internal_set_de_9im(from._internal_de_9im());
  }
}

void Params_Relate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Relate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Relate::CopyFrom(const Params_Relate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Relate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Relate::IsInitialized() const {
  return true;
}

void Params_Relate::InternalSwap(Params_Relate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  de_9im_.Swap(&other->de_9im_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Relate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_RandomPoints::_Internal {
 public:
};

Params_RandomPoints::Params_RandomPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.RandomPoints)
}
Params_RandomPoints::Params_RandomPoints(const Params_RandomPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&points_per_square_km_, &from.points_per_square_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.RandomPoints)
}

void Params_RandomPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&points_per_square_km_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
}

Params_RandomPoints::~Params_RandomPoints() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.RandomPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_RandomPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_RandomPoints::ArenaDtor(void* object) {
  Params_RandomPoints* _this = reinterpret_cast< Params_RandomPoints* >(object);
  (void)_this;
}
void Params_RandomPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_RandomPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_RandomPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.RandomPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&points_per_square_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_RandomPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double points_per_square_km = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          points_per_square_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_RandomPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.RandomPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double points_per_square_km = 1;
  if (!(this->points_per_square_km() <= 0 && this->points_per_square_km() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_points_per_square_km(), target);
  }

  // int64 seed = 2;
  if (this->seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.RandomPoints)
  return target;
}

size_t Params_RandomPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.RandomPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double points_per_square_km = 1;
  if (!(this->points_per_square_km() <= 0 && this->points_per_square_km() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 seed = 2;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_RandomPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.RandomPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_RandomPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_RandomPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.RandomPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.RandomPoints)
    MergeFrom(*source);
  }
}

void Params_RandomPoints::MergeFrom(const Params_RandomPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.RandomPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.points_per_square_km() <= 0 && from.points_per_square_km() >= 0)) {
    _internal_set_points_per_square_km(from._internal_points_per_square_km());
  }
  if (from.seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
}

void Params_RandomPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.RandomPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_RandomPoints::CopyFrom(const Params_RandomPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.RandomPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_RandomPoints::IsInitialized() const {
  return true;
}

void Params_RandomPoints::InternalSwap(Params_RandomPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_RandomPoints, seed_)
      + sizeof(Params_RandomPoints::seed_)
      - PROTOBUF_FIELD_OFFSET(Params_RandomPoints, points_per_square_km_)>(
          reinterpret_cast<char*>(&points_per_square_km_),
          reinterpret_cast<char*>(&other->points_per_square_km_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_RandomPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Generalize::_Internal {
 public:
};

Params_Generalize::Params_Generalize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Generalize)
}
Params_Generalize::Params_Generalize(const Params_Generalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_deviation_, &from.max_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&remove_degenerates_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Generalize)
}

void Params_Generalize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_deviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remove_degenerates_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
}

Params_Generalize::~Params_Generalize() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Generalize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Generalize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Generalize::ArenaDtor(void* object) {
  Params_Generalize* _this = reinterpret_cast< Params_Generalize* >(object);
  (void)_this;
}
void Params_Generalize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Generalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Generalize::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Generalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_degenerates_) -
      reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Generalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_deviation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool remove_degenerates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remove_degenerates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Generalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Generalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_deviation = 1;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_deviation(), target);
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_remove_degenerates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Generalize)
  return target;
}

size_t Params_Generalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Generalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_deviation = 1;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Generalize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Generalize)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Generalize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Generalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Generalize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Generalize)
    MergeFrom(*source);
  }
}

void Params_Generalize::MergeFrom(const Params_Generalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Generalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    _internal_set_max_deviation(from._internal_max_deviation());
  }
  if (from.remove_degenerates() != 0) {
    _internal_set_remove_degenerates(from._internal_remove_degenerates());
  }
}

void Params_Generalize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Generalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Generalize::CopyFrom(const Params_Generalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Generalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Generalize::IsInitialized() const {
  return true;
}

void Params_Generalize::InternalSwap(Params_Generalize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_Generalize, remove_degenerates_)
      + sizeof(Params_Generalize::remove_degenerates_)
      - PROTOBUF_FIELD_OFFSET(Params_Generalize, max_deviation_)>(
          reinterpret_cast<char*>(&max_deviation_),
          reinterpret_cast<char*>(&other->max_deviation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Generalize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_GeneralizeByArea::_Internal {
 public:
};

Params_GeneralizeByArea::Params_GeneralizeByArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.GeneralizeByArea)
}
Params_GeneralizeByArea::Params_GeneralizeByArea(const Params_GeneralizeByArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&percent_reduction_, &from.percent_reduction_,
    static_cast<size_t>(reinterpret_cast<char*>(&remove_degenerates_) -
    reinterpret_cast<char*>(&percent_reduction_)) + sizeof(remove_degenerates_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.GeneralizeByArea)
}

void Params_GeneralizeByArea::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percent_reduction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remove_degenerates_) -
    reinterpret_cast<char*>(&percent_reduction_)) + sizeof(remove_degenerates_));
}

Params_GeneralizeByArea::~Params_GeneralizeByArea() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.GeneralizeByArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_GeneralizeByArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_GeneralizeByArea::ArenaDtor(void* object) {
  Params_GeneralizeByArea* _this = reinterpret_cast< Params_GeneralizeByArea* >(object);
  (void)_this;
}
void Params_GeneralizeByArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_GeneralizeByArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_GeneralizeByArea::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.GeneralizeByArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percent_reduction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_degenerates_) -
      reinterpret_cast<char*>(&percent_reduction_)) + sizeof(remove_degenerates_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_GeneralizeByArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double percent_reduction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          percent_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 max_point_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remove_degenerates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remove_degenerates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_GeneralizeByArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.GeneralizeByArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double percent_reduction = 1;
  if (!(this->percent_reduction() <= 0 && this->percent_reduction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_percent_reduction(), target);
  }

  // int32 max_point_count = 2;
  if (this->max_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_point_count(), target);
  }

  // bool remove_degenerates = 3;
  if (this->remove_degenerates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_remove_degenerates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.GeneralizeByArea)
  return target;
}

size_t Params_GeneralizeByArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.GeneralizeByArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double percent_reduction = 1;
  if (!(this->percent_reduction() <= 0 && this->percent_reduction() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 max_point_count = 2;
  if (this->max_point_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_point_count());
  }

  // bool remove_degenerates = 3;
  if (this->remove_degenerates() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_GeneralizeByArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.GeneralizeByArea)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_GeneralizeByArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_GeneralizeByArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.GeneralizeByArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.GeneralizeByArea)
    MergeFrom(*source);
  }
}

void Params_GeneralizeByArea::MergeFrom(const Params_GeneralizeByArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.GeneralizeByArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.percent_reduction() <= 0 && from.percent_reduction() >= 0)) {
    _internal_set_percent_reduction(from._internal_percent_reduction());
  }
  if (from.max_point_count() != 0) {
    _internal_set_max_point_count(from._internal_max_point_count());
  }
  if (from.remove_degenerates() != 0) {
    _internal_set_remove_degenerates(from._internal_remove_degenerates());
  }
}

void Params_GeneralizeByArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.GeneralizeByArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_GeneralizeByArea::CopyFrom(const Params_GeneralizeByArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.GeneralizeByArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_GeneralizeByArea::IsInitialized() const {
  return true;
}

void Params_GeneralizeByArea::InternalSwap(Params_GeneralizeByArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_GeneralizeByArea, remove_degenerates_)
      + sizeof(Params_GeneralizeByArea::remove_degenerates_)
      - PROTOBUF_FIELD_OFFSET(Params_GeneralizeByArea, percent_reduction_)>(
          reinterpret_cast<char*>(&percent_reduction_),
          reinterpret_cast<char*>(&other->percent_reduction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_GeneralizeByArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Intersection::_Internal {
 public:
};

Params_Intersection::Params_Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Intersection)
}
Params_Intersection::Params_Intersection(const Params_Intersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dimension_mask_ = from.dimension_mask_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Intersection)
}

void Params_Intersection::SharedCtor() {
dimension_mask_ = 0;
}

Params_Intersection::~Params_Intersection() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Intersection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Intersection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Intersection::ArenaDtor(void* object) {
  Params_Intersection* _this = reinterpret_cast< Params_Intersection* >(object);
  (void)_this;
}
void Params_Intersection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_mask_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Intersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dimension_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dimension_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Intersection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dimension_mask = 1;
  if (this->dimension_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dimension_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Intersection)
  return target;
}

size_t Params_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Intersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dimension_mask = 1;
  if (this->dimension_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dimension_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Intersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Intersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Intersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Intersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Intersection)
    MergeFrom(*source);
  }
}

void Params_Intersection::MergeFrom(const Params_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension_mask() != 0) {
    _internal_set_dimension_mask(from._internal_dimension_mask());
  }
}

void Params_Intersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Intersection::CopyFrom(const Params_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Intersection::IsInitialized() const {
  return true;
}

void Params_Intersection::InternalSwap(Params_Intersection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dimension_mask_, other->dimension_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Intersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Offset::_Internal {
 public:
};

Params_Offset::Params_Offset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Offset)
}
Params_Offset::Params_Offset(const Params_Offset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Offset)
}

void Params_Offset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
}

Params_Offset::~Params_Offset() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Offset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Offset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Offset::ArenaDtor(void* object) {
  Params_Offset* _this = reinterpret_cast< Params_Offset* >(object);
  (void)_this;
}
void Params_Offset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Offset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Offset::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Offset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Params.Offset.OffsetJoinType join_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_join_type(static_cast<::epl::protobuf::v1::Params_Offset_OffsetJoinType>(val));
        } else goto handle_unusual;
        continue;
      // double bevel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bevel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double flatten_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          flatten_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Offset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // .epl.protobuf.v1.Params.Offset.OffsetJoinType join_type = 2;
  if (this->join_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_join_type(), target);
  }

  // double bevel_ratio = 3;
  if (!(this->bevel_ratio() <= 0 && this->bevel_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bevel_ratio(), target);
  }

  // double flatten_error = 4;
  if (!(this->flatten_error() <= 0 && this->flatten_error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_flatten_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Offset)
  return target;
}

size_t Params_Offset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Offset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double bevel_ratio = 3;
  if (!(this->bevel_ratio() <= 0 && this->bevel_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double flatten_error = 4;
  if (!(this->flatten_error() <= 0 && this->flatten_error() >= 0)) {
    total_size += 1 + 8;
  }

  // .epl.protobuf.v1.Params.Offset.OffsetJoinType join_type = 2;
  if (this->join_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_join_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Offset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Offset)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Offset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Offset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Offset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Offset)
    MergeFrom(*source);
  }
}

void Params_Offset::MergeFrom(const Params_Offset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Offset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.bevel_ratio() <= 0 && from.bevel_ratio() >= 0)) {
    _internal_set_bevel_ratio(from._internal_bevel_ratio());
  }
  if (!(from.flatten_error() <= 0 && from.flatten_error() >= 0)) {
    _internal_set_flatten_error(from._internal_flatten_error());
  }
  if (from.join_type() != 0) {
    _internal_set_join_type(from._internal_join_type());
  }
}

void Params_Offset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Offset::CopyFrom(const Params_Offset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Offset::IsInitialized() const {
  return true;
}

void Params_Offset::InternalSwap(Params_Offset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_Offset, join_type_)
      + sizeof(Params_Offset::join_type_)
      - PROTOBUF_FIELD_OFFSET(Params_Offset, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Offset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Cut::_Internal {
 public:
};

Params_Cut::Params_Cut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Cut)
}
Params_Cut::Params_Cut(const Params_Cut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consider_touch_ = from.consider_touch_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Cut)
}

void Params_Cut::SharedCtor() {
consider_touch_ = false;
}

Params_Cut::~Params_Cut() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Cut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Cut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Cut::ArenaDtor(void* object) {
  Params_Cut* _this = reinterpret_cast< Params_Cut* >(object);
  (void)_this;
}
void Params_Cut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Cut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Cut::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Cut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consider_touch_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Cut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool consider_touch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          consider_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Cut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Cut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool consider_touch = 1;
  if (this->consider_touch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_consider_touch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Cut)
  return target;
}

size_t Params_Cut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Cut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool consider_touch = 1;
  if (this->consider_touch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Cut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Cut)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Cut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Cut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Cut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Cut)
    MergeFrom(*source);
  }
}

void Params_Cut::MergeFrom(const Params_Cut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Cut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consider_touch() != 0) {
    _internal_set_consider_touch(from._internal_consider_touch());
  }
}

void Params_Cut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Cut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Cut::CopyFrom(const Params_Cut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Cut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Cut::IsInitialized() const {
  return true;
}

void Params_Cut::InternalSwap(Params_Cut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(consider_touch_, other->consider_touch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Cut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Clip::_Internal {
 public:
  static const ::epl::protobuf::v1::EnvelopeData& envelope(const Params_Clip* msg);
};

const ::epl::protobuf::v1::EnvelopeData&
Params_Clip::_Internal::envelope(const Params_Clip* msg) {
  return *msg->envelope_;
}
Params_Clip::Params_Clip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Clip)
}
Params_Clip::Params_Clip(const Params_Clip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_envelope()) {
    envelope_ = new ::epl::protobuf::v1::EnvelopeData(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Clip)
}

void Params_Clip::SharedCtor() {
envelope_ = nullptr;
}

Params_Clip::~Params_Clip() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Clip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Clip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete envelope_;
}

void Params_Clip::ArenaDtor(void* object) {
  Params_Clip* _this = reinterpret_cast< Params_Clip* >(object);
  (void)_this;
}
void Params_Clip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Clip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Clip::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Clip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Clip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.EnvelopeData envelope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_envelope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Clip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Clip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.EnvelopeData envelope = 1;
  if (this->has_envelope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::envelope(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Clip)
  return target;
}

size_t Params_Clip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Clip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.EnvelopeData envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Clip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Clip)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Clip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Clip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Clip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Clip)
    MergeFrom(*source);
  }
}

void Params_Clip::MergeFrom(const Params_Clip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Clip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    _internal_mutable_envelope()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_envelope());
  }
}

void Params_Clip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Clip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Clip::CopyFrom(const Params_Clip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Clip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Clip::IsInitialized() const {
  return true;
}

void Params_Clip::InternalSwap(Params_Clip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(envelope_, other->envelope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Clip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Densify::_Internal {
 public:
};

Params_Densify::Params_Densify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Densify)
}
Params_Densify::Params_Densify(const Params_Densify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_length_ = from.max_length_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Densify)
}

void Params_Densify::SharedCtor() {
max_length_ = 0;
}

Params_Densify::~Params_Densify() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Densify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Densify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Densify::ArenaDtor(void* object) {
  Params_Densify* _this = reinterpret_cast< Params_Densify* >(object);
  (void)_this;
}
void Params_Densify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Densify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Densify::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Densify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Densify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Densify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Densify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Densify)
  return target;
}

size_t Params_Densify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Densify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Densify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Densify)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Densify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Densify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Densify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Densify)
    MergeFrom(*source);
  }
}

void Params_Densify::MergeFrom(const Params_Densify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Densify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_length() <= 0 && from.max_length() >= 0)) {
    _internal_set_max_length(from._internal_max_length());
  }
}

void Params_Densify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Densify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Densify::CopyFrom(const Params_Densify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Densify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Densify::IsInitialized() const {
  return true;
}

void Params_Densify::InternalSwap(Params_Densify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(max_length_, other->max_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Densify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_Simplify::_Internal {
 public:
};

Params_Simplify::Params_Simplify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.Simplify)
}
Params_Simplify::Params_Simplify(const Params_Simplify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.Simplify)
}

void Params_Simplify::SharedCtor() {
force_ = false;
}

Params_Simplify::~Params_Simplify() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.Simplify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_Simplify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_Simplify::ArenaDtor(void* object) {
  Params_Simplify* _this = reinterpret_cast< Params_Simplify* >(object);
  (void)_this;
}
void Params_Simplify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_Simplify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_Simplify::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.Simplify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_Simplify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_Simplify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.Simplify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.Simplify)
  return target;
}

size_t Params_Simplify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.Simplify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool force = 1;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_Simplify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.Simplify)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_Simplify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_Simplify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.Simplify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.Simplify)
    MergeFrom(*source);
  }
}

void Params_Simplify::MergeFrom(const Params_Simplify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.Simplify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
}

void Params_Simplify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.Simplify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_Simplify::CopyFrom(const Params_Simplify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.Simplify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_Simplify::IsInitialized() const {
  return true;
}

void Params_Simplify::InternalSwap(Params_Simplify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_Simplify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params_AffineTransform::_Internal {
 public:
};

Params_AffineTransform::Params_AffineTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params.AffineTransform)
}
Params_AffineTransform::Params_AffineTransform(const Params_AffineTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_offset_, &from.x_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&geodetic_) -
    reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params.AffineTransform)
}

void Params_AffineTransform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geodetic_) -
    reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
}

Params_AffineTransform::~Params_AffineTransform() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params.AffineTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params_AffineTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params_AffineTransform::ArenaDtor(void* object) {
  Params_AffineTransform* _this = reinterpret_cast< Params_AffineTransform* >(object);
  (void)_this;
}
void Params_AffineTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params_AffineTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params_AffineTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params.AffineTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geodetic_) -
      reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params_AffineTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool geodetic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          geodetic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params_AffineTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params.AffineTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool geodetic = 2;
  if (this->geodetic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_geodetic(), target);
  }

  // double x_offset = 3;
  if (!(this->x_offset() <= 0 && this->x_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x_offset(), target);
  }

  // double y_offset = 4;
  if (!(this->y_offset() <= 0 && this->y_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params.AffineTransform)
  return target;
}

size_t Params_AffineTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params.AffineTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_offset = 3;
  if (!(this->x_offset() <= 0 && this->x_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_offset = 4;
  if (!(this->y_offset() <= 0 && this->y_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // bool geodetic = 2;
  if (this->geodetic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params_AffineTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params.AffineTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const Params_AffineTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params_AffineTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params.AffineTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params.AffineTransform)
    MergeFrom(*source);
  }
}

void Params_AffineTransform::MergeFrom(const Params_AffineTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params.AffineTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_offset() <= 0 && from.x_offset() >= 0)) {
    _internal_set_x_offset(from._internal_x_offset());
  }
  if (!(from.y_offset() <= 0 && from.y_offset() >= 0)) {
    _internal_set_y_offset(from._internal_y_offset());
  }
  if (from.geodetic() != 0) {
    _internal_set_geodetic(from._internal_geodetic());
  }
}

void Params_AffineTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params.AffineTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params_AffineTransform::CopyFrom(const Params_AffineTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params.AffineTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params_AffineTransform::IsInitialized() const {
  return true;
}

void Params_AffineTransform::InternalSwap(Params_AffineTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params_AffineTransform, geodetic_)
      + sizeof(Params_AffineTransform::geodetic_)
      - PROTOBUF_FIELD_OFFSET(Params_AffineTransform, x_offset_)>(
          reinterpret_cast<char*>(&x_offset_),
          reinterpret_cast<char*>(&other->x_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params_AffineTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Params)
}

void Params::SharedCtor() {
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Params)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Params::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Params::ArenaDtor(void* object) {
  Params* _this = reinterpret_cast< Params* >(object);
  (void)_this;
}
void Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Params)
  return target;
}

size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Params)
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::GeometryData* Arena::CreateMaybeMessage< ::epl::protobuf::v1::GeometryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::GeometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::ProjectionData_Custom* Arena::CreateMaybeMessage< ::epl::protobuf::v1::ProjectionData_Custom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::ProjectionData_Custom >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::ProjectionData* Arena::CreateMaybeMessage< ::epl::protobuf::v1::ProjectionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::ProjectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::EnvelopeData* Arena::CreateMaybeMessage< ::epl::protobuf::v1::EnvelopeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::EnvelopeData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::GeometryRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::GeometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::GeometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::GeodeticInverse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::GeodeticInverse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::GeodeticInverse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::GeometryResponse_RelateMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::GeometryResponse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::GeometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::GeometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::FileRequestChunk* Arena::CreateMaybeMessage< ::epl::protobuf::v1::FileRequestChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::FileRequestChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Buffer* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_GeodeticBuffer* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_GeodeticBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_GeodeticBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Convex* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Convex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Convex >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Relate* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Relate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Relate >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_RandomPoints* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_RandomPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_RandomPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Generalize* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Generalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Generalize >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_GeneralizeByArea* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_GeneralizeByArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_GeneralizeByArea >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Intersection* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Intersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Intersection >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Offset* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Offset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Offset >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Cut* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Cut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Cut >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Clip* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Clip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Clip >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Densify* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Densify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Densify >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_Simplify* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_Simplify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_Simplify >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params_AffineTransform* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params_AffineTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params_AffineTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Params* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
