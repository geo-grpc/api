// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/v1/stac.proto

#include "epl/protobuf/v1/stac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace epl {
namespace protobuf {
namespace v1 {
constexpr Collection_SummariesEntry_DoNotUse::Collection_SummariesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Collection_SummariesEntry_DoNotUseDefaultTypeInternal {
  constexpr Collection_SummariesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Collection_SummariesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Collection_SummariesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Collection_SummariesEntry_DoNotUseDefaultTypeInternal _Collection_SummariesEntry_DoNotUse_default_instance_;
constexpr Collection::Collection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keywords_()
  , providers_()
  , summaries_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , stac_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extent_(nullptr){}
struct CollectionDefaultTypeInternal {
  constexpr CollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionDefaultTypeInternal() {}
  union {
    Collection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionDefaultTypeInternal _Collection_default_instance_;
constexpr CollectionRequest::CollectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct CollectionRequestDefaultTypeInternal {
  constexpr CollectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollectionRequestDefaultTypeInternal() {}
  union {
    CollectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollectionRequestDefaultTypeInternal _CollectionRequest_default_instance_;
constexpr Stats::Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StatsDefaultTypeInternal {
  constexpr StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatsDefaultTypeInternal() {}
  union {
    Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatsDefaultTypeInternal _Stats_default_instance_;
constexpr Extent::Extent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_()
  , temporal_(){}
struct ExtentDefaultTypeInternal {
  constexpr ExtentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtentDefaultTypeInternal() {}
  union {
    Extent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtentDefaultTypeInternal _Extent_default_instance_;
constexpr Interval::Interval(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct IntervalDefaultTypeInternal {
  constexpr IntervalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntervalDefaultTypeInternal() {}
  union {
    Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntervalDefaultTypeInternal _Interval_default_instance_;
constexpr Provider::Provider(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProviderDefaultTypeInternal {
  constexpr ProviderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProviderDefaultTypeInternal() {}
  union {
    Provider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProviderDefaultTypeInternal _Provider_default_instance_;
constexpr StacItem_AssetsEntry_DoNotUse::StacItem_AssetsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StacItem_AssetsEntry_DoNotUseDefaultTypeInternal {
  constexpr StacItem_AssetsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StacItem_AssetsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StacItem_AssetsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StacItem_AssetsEntry_DoNotUseDefaultTypeInternal _StacItem_AssetsEntry_DoNotUse_default_instance_;
constexpr StacItem::StacItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , stac_extensions_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , constellation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stac_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stac_pb_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , properties_(nullptr)
  , geometry_(nullptr)
  , bbox_(nullptr)
  , end_datetime_(nullptr)
  , end_observation_(nullptr)
  , created_(nullptr)
  , updated_(nullptr)
  , proj_(nullptr)
  , gsd_(nullptr)
  , eo_(nullptr)
  , landsat_(nullptr)
  , mosaic_(nullptr)
  , view_(nullptr)
  , platform_enum_(0)

  , instrument_enum_(0)

  , constellation_enum_(0)

  , mission_enum_(0)

  , _oneof_case_{}{}
struct StacItemDefaultTypeInternal {
  constexpr StacItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StacItemDefaultTypeInternal() {}
  union {
    StacItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StacItemDefaultTypeInternal _StacItem_default_instance_;
constexpr StacRequest::StacRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , properties_(nullptr)
  , created_(nullptr)
  , updated_(nullptr)
  , proj_(nullptr)
  , gsd_(nullptr)
  , eo_(nullptr)
  , view_(nullptr)
  , landsat_(nullptr)
  , mosaic_(nullptr)
  , offset_(PROTOBUF_ULONGLONG(0))
  , limit_(0u)
  , platform_enum_(0)

  , mission_enum_(0)

  , instrument_enum_(0)

  , constellation_enum_(0)

  , _oneof_case_{}{}
struct StacRequestDefaultTypeInternal {
  constexpr StacRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StacRequestDefaultTypeInternal() {}
  union {
    StacRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StacRequestDefaultTypeInternal _StacRequest_default_instance_;
constexpr View::View(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : off_nadir_(nullptr)
  , incidence_angle_(nullptr)
  , azimuth_(nullptr)
  , sun_azimuth_(nullptr)
  , sun_elevation_(nullptr){}
struct ViewDefaultTypeInternal {
  constexpr ViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewDefaultTypeInternal() {}
  union {
    View _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewDefaultTypeInternal _View_default_instance_;
constexpr ViewRequest::ViewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : off_nadir_(nullptr)
  , incidence_angle_(nullptr)
  , azimuth_(nullptr)
  , sun_azimuth_(nullptr)
  , sun_elevation_(nullptr){}
struct ViewRequestDefaultTypeInternal {
  constexpr ViewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewRequestDefaultTypeInternal() {}
  union {
    ViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewRequestDefaultTypeInternal _ViewRequest_default_instance_;
constexpr Sat::Sat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relative_orbit_(nullptr)
  , orbit_state_(0)
{}
struct SatDefaultTypeInternal {
  constexpr SatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SatDefaultTypeInternal() {}
  union {
    Sat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SatDefaultTypeInternal _Sat_default_instance_;
constexpr SatRequest::SatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orbit_state_(0)

  , relative_orbit_(0u){}
struct SatRequestDefaultTypeInternal {
  constexpr SatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SatRequestDefaultTypeInternal() {}
  union {
    SatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SatRequestDefaultTypeInternal _SatRequest_default_instance_;
constexpr Eo::Eo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cloud_cover_(nullptr)
  , bands_(0)
{}
struct EoDefaultTypeInternal {
  constexpr EoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EoDefaultTypeInternal() {}
  union {
    Eo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EoDefaultTypeInternal _Eo_default_instance_;
constexpr EoRequest::EoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cloud_cover_(nullptr)
  , bands_(0)
{}
struct EoRequestDefaultTypeInternal {
  constexpr EoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EoRequestDefaultTypeInternal() {}
  union {
    EoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EoRequestDefaultTypeInternal _EoRequest_default_instance_;
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : href_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bucket_manager_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bucket_region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eo_bands_(0)

  , asset_type_(0)

  , cloud_platform_(0)

  , requester_pays_(false){}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr DatetimeRange::DatetimeRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct DatetimeRangeDefaultTypeInternal {
  constexpr DatetimeRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatetimeRangeDefaultTypeInternal() {}
  union {
    DatetimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatetimeRangeDefaultTypeInternal _DatetimeRange_default_instance_;
constexpr StacDbResponse::StacDbResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(PROTOBUF_ULONGLONG(0))
  , status_code_(0){}
struct StacDbResponseDefaultTypeInternal {
  constexpr StacDbResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StacDbResponseDefaultTypeInternal() {}
  union {
    StacDbResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StacDbResponseDefaultTypeInternal _StacDbResponse_default_instance_;
constexpr Sar::Sar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : platform_(0)
{}
struct SarDefaultTypeInternal {
  constexpr SarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SarDefaultTypeInternal() {}
  union {
    Sar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SarDefaultTypeInternal _Sar_default_instance_;
constexpr Landsat::Landsat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scene_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cloud_cover_land_(nullptr)
  , processing_level_(0)

  , wrs_path_(0)
  , wrs_row_(0)
  , wrs_type_(0)
{}
struct LandsatDefaultTypeInternal {
  constexpr LandsatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandsatDefaultTypeInternal() {}
  union {
    Landsat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandsatDefaultTypeInternal _Landsat_default_instance_;
constexpr LandsatRequest::LandsatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scene_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cloud_cover_land_(nullptr)
  , processing_level_(0)

  , wrs_path_(0)
  , wrs_row_(0){}
struct LandsatRequestDefaultTypeInternal {
  constexpr LandsatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandsatRequestDefaultTypeInternal() {}
  union {
    LandsatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandsatRequestDefaultTypeInternal _LandsatRequest_default_instance_;
constexpr Mosaic::Mosaic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zooms_()
  , _zooms_cached_byte_size_()
  , provenance_ids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quad_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , observation_range_(nullptr){}
struct MosaicDefaultTypeInternal {
  constexpr MosaicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MosaicDefaultTypeInternal() {}
  union {
    Mosaic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MosaicDefaultTypeInternal _Mosaic_default_instance_;
constexpr MosaicRequest::MosaicRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quad_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MosaicRequestDefaultTypeInternal {
  constexpr MosaicRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MosaicRequestDefaultTypeInternal() {}
  union {
    MosaicRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MosaicRequestDefaultTypeInternal _MosaicRequest_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_epl_2fprotobuf_2fv1_2fstac_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, stac_version_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, title_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, description_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, keywords_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, license_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, providers_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, extent_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Collection, summaries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::CollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::CollectionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::CollectionRequest, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::CollectionRequest, spatial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Extent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Extent, spatial_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Extent, temporal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Interval, start_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Interval, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Provider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Provider, name_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Provider, description_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Provider, roles_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Provider, url_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, title_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, collection_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, properties_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, assets_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, bbox_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, end_datetime_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, end_observation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, created_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, updated_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, platform_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, platform_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, instrument_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, instrument_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, constellation_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, constellation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, mission_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, mission_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, gsd_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, stac_version_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, stac_pb_version_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, stac_extensions_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, eo_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, view_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, landsat_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, mosaic_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, temporal_deprecated_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacItem, temporal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, offset_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, collection_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, properties_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, created_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, updated_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, proj_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, platform_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, instrument_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, constellation_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, mission_enum_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, gsd_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, eo_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, view_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, landsat_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, mosaic_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, identity_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, spatial_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacRequest, temporal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, off_nadir_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, incidence_angle_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, azimuth_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, sun_azimuth_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::View, sun_elevation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, off_nadir_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, incidence_angle_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, azimuth_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, sun_azimuth_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::ViewRequest, sun_elevation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Sat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Sat, relative_orbit_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Sat, orbit_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::SatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::SatRequest, relative_orbit_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::SatRequest, orbit_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Eo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Eo, cloud_cover_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Eo, bands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EoRequest, cloud_cover_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::EoRequest, bands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, href_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, eo_bands_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, asset_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, cloud_platform_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, bucket_manager_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, bucket_region_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, bucket_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, object_path_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Asset, requester_pays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DatetimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DatetimeRange, start_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::DatetimeRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacDbResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacDbResponse, status_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacDbResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacDbResponse, data_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::StacDbResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Sar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Sar, platform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, scene_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, product_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, processing_level_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, wrs_path_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, wrs_row_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, cloud_cover_land_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Landsat, wrs_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, scene_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, product_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, processing_level_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, wrs_path_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, wrs_row_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::LandsatRequest, cloud_cover_land_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, name_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, quad_key_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, zooms_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, observation_range_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::Mosaic, provenance_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::MosaicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::MosaicRequest, name_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::v1::MosaicRequest, quad_key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse)},
  { 9, -1, sizeof(::epl::protobuf::v1::Collection)},
  { 23, -1, sizeof(::epl::protobuf::v1::CollectionRequest)},
  { 32, -1, sizeof(::epl::protobuf::v1::Stats)},
  { 37, -1, sizeof(::epl::protobuf::v1::Extent)},
  { 44, -1, sizeof(::epl::protobuf::v1::Interval)},
  { 51, -1, sizeof(::epl::protobuf::v1::Provider)},
  { 60, 67, sizeof(::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse)},
  { 69, -1, sizeof(::epl::protobuf::v1::StacItem)},
  { 108, -1, sizeof(::epl::protobuf::v1::StacRequest)},
  { 139, -1, sizeof(::epl::protobuf::v1::View)},
  { 149, -1, sizeof(::epl::protobuf::v1::ViewRequest)},
  { 159, -1, sizeof(::epl::protobuf::v1::Sat)},
  { 166, -1, sizeof(::epl::protobuf::v1::SatRequest)},
  { 173, -1, sizeof(::epl::protobuf::v1::Eo)},
  { 180, -1, sizeof(::epl::protobuf::v1::EoRequest)},
  { 187, -1, sizeof(::epl::protobuf::v1::Asset)},
  { 202, -1, sizeof(::epl::protobuf::v1::DatetimeRange)},
  { 209, -1, sizeof(::epl::protobuf::v1::StacDbResponse)},
  { 218, -1, sizeof(::epl::protobuf::v1::Sar)},
  { 224, -1, sizeof(::epl::protobuf::v1::Landsat)},
  { 236, -1, sizeof(::epl::protobuf::v1::LandsatRequest)},
  { 247, -1, sizeof(::epl::protobuf::v1::Mosaic)},
  { 257, -1, sizeof(::epl::protobuf::v1::MosaicRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Collection_SummariesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Collection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_CollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Extent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Interval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Provider_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_StacItem_AssetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_StacItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_StacRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_View_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_ViewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Sat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_SatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Eo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_EoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_DatetimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_StacDbResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Sar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Landsat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_LandsatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_Mosaic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::v1::_MosaicRequest_default_instance_),
};

const char descriptor_table_protodef_epl_2fprotobuf_2fv1_2fstac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032epl/protobuf/v1/stac.proto\022\017epl.protob"
  "uf.v1\032\037google/protobuf/timestamp.proto\032\036"
  "google/protobuf/wrappers.proto\032\031google/p"
  "rotobuf/any.proto\032\036epl/protobuf/v1/geome"
  "try.proto\032\033epl/protobuf/v1/query.proto\"\341"
  "\002\n\nCollection\022\024\n\014stac_version\030\001 \001(\t\022\n\n\002i"
  "d\030\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\023\n\013description\030\005 "
  "\001(\t\022\020\n\010keywords\030\006 \003(\t\022\017\n\007license\030\007 \001(\t\022,"
  "\n\tproviders\030\010 \003(\0132\031.epl.protobuf.v1.Prov"
  "ider\022\'\n\006extent\030\t \001(\0132\027.epl.protobuf.v1.E"
  "xtent\022=\n\tsummaries\030\n \003(\0132*.epl.protobuf."
  "v1.Collection.SummariesEntry\032H\n\016Summarie"
  "sEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.epl"
  ".protobuf.v1.Stats:\0028\001J\004\010\002\020\003J\004\010\013\020\014\"\216\001\n\021C"
  "ollectionRequest\022\n\n\002id\030\001 \001(\t\022-\n\004bbox\030\002 \001"
  "(\0132\035.epl.protobuf.v1.EnvelopeDataH\000\0223\n\ni"
  "ntersects\030\003 \001(\0132\035.epl.protobuf.v1.Geomet"
  "ryDataH\000B\t\n\007spatial\"\007\n\005Stats\"e\n\006Extent\022."
  "\n\007spatial\030\001 \003(\0132\035.epl.protobuf.v1.Envelo"
  "peData\022+\n\010temporal\030\002 \003(\0132\031.epl.protobuf."
  "v1.Interval\"^\n\010Interval\022)\n\005start\030\001 \001(\0132\032"
  ".google.protobuf.Timestamp\022\'\n\003end\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\"I\n\010Provider\022"
  "\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\r\n\005ro"
  "les\030\003 \003(\t\022\013\n\003url\030\004 \001(\t\"\317\n\n\010StacItem\022\n\n\002i"
  "d\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\022\n\ncollection\030\003 \001"
  "(\t\022(\n\nproperties\030\004 \001(\0132\024.google.protobuf"
  ".Any\0225\n\006assets\030\005 \003(\0132%.epl.protobuf.v1.S"
  "tacItem.AssetsEntry\022/\n\010geometry\030\006 \001(\0132\035."
  "epl.protobuf.v1.GeometryData\022+\n\004bbox\030\007 \001"
  "(\0132\035.epl.protobuf.v1.EnvelopeData\022.\n\010dat"
  "etime\030\010 \001(\0132\032.google.protobuf.TimestampH"
  "\000\0224\n\016start_datetime\030\n \001(\0132\032.google.proto"
  "buf.TimestampH\000\022.\n\010observed\030\t \001(\0132\032.goog"
  "le.protobuf.TimestampH\001\0227\n\021start_observa"
  "tion\030\013 \001(\0132\032.google.protobuf.TimestampH\001"
  "\0220\n\014end_datetime\030\014 \001(\0132\032.google.protobuf"
  ".Timestamp\0223\n\017end_observation\030\r \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022+\n\007created\030\016 \001(\013"
  "2\032.google.protobuf.Timestamp\022+\n\007updated\030"
  "\017 \001(\0132\032.google.protobuf.Timestamp\022-\n\004pro"
  "j\030\020 \001(\0132\037.epl.protobuf.v1.ProjectionData"
  "\0220\n\rplatform_enum\030\021 \001(\0162\031.epl.protobuf.v"
  "1.Platform\022\020\n\010platform\030\022 \001(\t\0224\n\017instrume"
  "nt_enum\030\023 \001(\0162\033.epl.protobuf.v1.Instrume"
  "nt\022\022\n\ninstrument\030\024 \001(\t\022:\n\022constellation_"
  "enum\030\025 \001(\0162\036.epl.protobuf.v1.Constellati"
  "on\022\025\n\rconstellation\030\026 \001(\t\022.\n\014mission_enu"
  "m\030\027 \001(\0162\030.epl.protobuf.v1.Mission\022\017\n\007mis"
  "sion\030\030 \001(\t\022(\n\003gsd\030\031 \001(\0132\033.google.protobu"
  "f.FloatValue\022\024\n\014stac_version\030\032 \001(\t\022\027\n\017st"
  "ac_pb_version\030\033 \001(\t\022\027\n\017stac_extensions\030\034"
  " \003(\t\022\037\n\002eo\030\035 \001(\0132\023.epl.protobuf.v1.Eo\022#\n"
  "\004view\030\" \001(\0132\025.epl.protobuf.v1.View\022)\n\007la"
  "ndsat\030\037 \001(\0132\030.epl.protobuf.v1.Landsat\022\'\n"
  "\006mosaic\030  \001(\0132\027.epl.protobuf.v1.Mosaic\032E"
  "\n\013AssetsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001("
  "\0132\026.epl.protobuf.v1.Asset:\0028\001B\025\n\023tempora"
  "l_deprecatedB\n\n\010temporal\"\300\010\n\013StacRequest"
  "\022\r\n\005limit\030\001 \001(\r\022\016\n\006offset\030\002 \001(\004\022\014\n\002id\030\003 "
  "\001(\tH\000\0223\n\nid_complex\030\004 \001(\0132\035.epl.protobuf"
  ".v1.StringFilterH\000\022\022\n\ncollection\030\005 \001(\t\022("
  "\n\nproperties\030\006 \001(\0132\024.google.protobuf.Any"
  "\0223\n\nintersects\030\007 \001(\0132\035.epl.protobuf.v1.G"
  "eometryDataH\001\022-\n\004bbox\030\010 \001(\0132\035.epl.protob"
  "uf.v1.EnvelopeDataH\001\022<\n\020geometry_request"
  "\030\t \001(\0132 .epl.protobuf.v1.GeometryRequest"
  "H\001\0224\n\010datetime\030\n \001(\0132 .epl.protobuf.v1.T"
  "imestampFilterH\002\0224\n\010observed\030\013 \001(\0132 .epl"
  ".protobuf.v1.TimestampFilterH\002\0221\n\007create"
  "d\030\014 \001(\0132 .epl.protobuf.v1.TimestampFilte"
  "r\0221\n\007updated\030\r \001(\0132 .epl.protobuf.v1.Tim"
  "estampFilter\022-\n\004proj\030\016 \001(\0132\037.epl.protobu"
  "f.v1.ProjectionData\0220\n\rplatform_enum\030\017 \001"
  "(\0162\031.epl.protobuf.v1.Platform\0224\n\017instrum"
  "ent_enum\030\021 \001(\0162\033.epl.protobuf.v1.Instrum"
  "ent\022:\n\022constellation_enum\030\023 \001(\0162\036.epl.pr"
  "otobuf.v1.Constellation\022.\n\014mission_enum\030"
  "\025 \001(\0162\030.epl.protobuf.v1.Mission\022)\n\003gsd\030\027"
  " \001(\0132\034.epl.protobuf.v1.FloatFilter\022&\n\002eo"
  "\030\030 \001(\0132\032.epl.protobuf.v1.EoRequest\022*\n\004vi"
  "ew\030\031 \001(\0132\034.epl.protobuf.v1.ViewRequest\0220"
  "\n\007landsat\030\032 \001(\0132\037.epl.protobuf.v1.Landsa"
  "tRequest\022.\n\006mosaic\030\033 \001(\0132\036.epl.protobuf."
  "v1.MosaicRequestB\n\n\010identityB\t\n\007spatialB"
  "\n\n\010temporalJ\004\010\020\020\021J\004\010\022\020\023J\004\010\024\020\025J\004\010\026\020\027\"\200\002\n\004"
  "View\022.\n\toff_nadir\030\001 \001(\0132\033.google.protobu"
  "f.FloatValue\0224\n\017incidence_angle\030\002 \001(\0132\033."
  "google.protobuf.FloatValue\022,\n\007azimuth\030\003 "
  "\001(\0132\033.google.protobuf.FloatValue\0220\n\013sun_"
  "azimuth\030\004 \001(\0132\033.google.protobuf.FloatVal"
  "ue\0222\n\rsun_elevation\030\005 \001(\0132\033.google.proto"
  "buf.FloatValue\"\214\002\n\013ViewRequest\022/\n\toff_na"
  "dir\030\001 \001(\0132\034.epl.protobuf.v1.FloatFilter\022"
  "5\n\017incidence_angle\030\002 \001(\0132\034.epl.protobuf."
  "v1.FloatFilter\022-\n\007azimuth\030\003 \001(\0132\034.epl.pr"
  "otobuf.v1.FloatFilter\0221\n\013sun_azimuth\030\004 \001"
  "(\0132\034.epl.protobuf.v1.FloatFilter\0223\n\rsun_"
  "elevation\030\005 \001(\0132\034.epl.protobuf.v1.FloatF"
  "ilter\"\333\001\n\003Sat\0224\n\016relative_orbit\030\006 \001(\0132\034."
  "google.protobuf.UInt32Value\0224\n\013orbit_sta"
  "te\030\001 \001(\0162\037.epl.protobuf.v1.Sat.OrbitStat"
  "e\"h\n\nOrbitState\022\026\n\022UKNOWN_ORBIT_STATE\020\000\022"
  "\023\n\017ASCENDING_ORBIT\020\001\022\024\n\020DESCENDING_ORBIT"
  "\020\002\022\027\n\023GEOSTATIONARY_ORBIT\020\003\"Z\n\nSatReques"
  "t\022\026\n\016relative_orbit\030\006 \001(\r\0224\n\013orbit_state"
  "\030\001 \001(\0162\037.epl.protobuf.v1.Sat.OrbitState\""
  "\227\002\n\002Eo\0220\n\013cloud_cover\030\001 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022\'\n\005bands\030\002 \001(\0162\030.epl.pr"
  "otobuf.v1.Eo.Band\"\265\001\n\004Band\022\020\n\014UNKNOWN_BA"
  "ND\020\000\022\013\n\007COASTAL\020\002\022\010\n\004BLUE\020\004\022\t\n\005GREEN\020\010\022\007"
  "\n\003RED\020\020\022\007\n\003RGB\020\034\022\007\n\003NIR\020 \022\t\n\005NIR_2\020!\022\t\n\005"
  "RGBIR\020<\022\n\n\006SWIR_1\020@\022\013\n\006SWIR_2\020\200\001\022\010\n\003PAN\020"
  "\200\002\022\013\n\006CIRRUS\020\200\004\022\013\n\006LWIR_1\020\200\010\022\013\n\006LWIR_2\020\200"
  "\020\"g\n\tEoRequest\0221\n\013cloud_cover\030\001 \001(\0132\034.ep"
  "l.protobuf.v1.FloatFilter\022\'\n\005bands\030\002 \001(\016"
  "2\030.epl.protobuf.v1.Eo.Band\"\243\002\n\005Asset\022\014\n\004"
  "href\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022*\n\010eo_bands\030\003 \001"
  "(\0162\030.epl.protobuf.v1.Eo.Band\022.\n\nasset_ty"
  "pe\030\004 \001(\0162\032.epl.protobuf.v1.AssetType\0226\n\016"
  "cloud_platform\030\005 \001(\0162\036.epl.protobuf.v1.C"
  "loudPlatform\022\026\n\016bucket_manager\030\006 \001(\t\022\025\n\r"
  "bucket_region\030\007 \001(\t\022\016\n\006bucket\030\010 \001(\t\022\023\n\013o"
  "bject_path\030\t \001(\t\022\026\n\016requester_pays\030\n \001(\010"
  "\"c\n\rDatetimeRange\022)\n\005start\030\001 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\'\n\003end\030\002 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"U\n\016StacDbResponse\022"
  "\016\n\006status\030\001 \001(\t\022\023\n\013status_code\030\002 \001(\005\022\017\n\007"
  "data_id\030\003 \001(\t\022\r\n\005count\030\004 \001(\004\"\234\001\n\003Sar\022/\n\010"
  "platform\030\001 \001(\0162\035.epl.protobuf.v1.Sar.Pla"
  "tform\">\n\010Platform\022\024\n\020UNKNOWN_PLATFORM\020\000\022"
  "\013\n\007ENVISAT\020\001\022\017\n\013SENTINEL_1A\020\002\"$\n\nInstrum"
  "ent\022\026\n\022UNKNOWN_INSTRUMENT\020\000\"\360\003\n\007Landsat\022"
  "\020\n\010scene_id\030\001 \001(\t\022\022\n\nproduct_id\030\002 \001(\t\022B\n"
  "\020processing_level\030\003 \001(\0162(.epl.protobuf.v"
  "1.Landsat.ProcessingLevel\022\020\n\010wrs_path\030\004 "
  "\001(\005\022\017\n\007wrs_row\030\005 \001(\005\0225\n\020cloud_cover_land"
  "\030\006 \001(\0132\033.google.protobuf.FloatValue\0222\n\010w"
  "rs_type\030\007 \001(\0162 .epl.protobuf.v1.Landsat."
  "WRSType\"]\n\022CollectionCategory\022\037\n\033UNKNOWN"
  "_COLLECTION_CATEGORY\020\000\022\006\n\002A1\020\001\022\006\n\002A2\020\002\022\006"
  "\n\002T1\020\003\022\006\n\002T2\020\004\022\006\n\002RT\020\005\"-\n\007WRSType\022\016\n\nUKN"
  "OWN_WRS\020\000\022\010\n\004WRS1\020\001\022\010\n\004WRS2\020\002\"_\n\017Process"
  "ingLevel\022\034\n\030UNKNOWN_PROCESSING_LEVEL\020\000\022\007"
  "\n\003L1G\020\001\022\010\n\004L1TP\020\002\022\007\n\003L1T\020\003\022\010\n\004L1GT\020\004\022\010\n\004"
  "L1GS\020\005\"\325\001\n\016LandsatRequest\022\020\n\010scene_id\030\001 "
  "\001(\t\022\022\n\nproduct_id\030\002 \001(\t\022B\n\020processing_le"
  "vel\030\003 \001(\0162(.epl.protobuf.v1.Landsat.Proc"
  "essingLevel\022\020\n\010wrs_path\030\004 \001(\005\022\017\n\007wrs_row"
  "\030\005 \001(\005\0226\n\020cloud_cover_land\030\006 \001(\0132\034.epl.p"
  "rotobuf.v1.FloatFilter\"\212\001\n\006Mosaic\022\014\n\004nam"
  "e\030\001 \001(\t\022\020\n\010quad_key\030\002 \001(\t\022\r\n\005zooms\030\003 \003(\005"
  "\0229\n\021observation_range\030\004 \001(\0132\036.epl.protob"
  "uf.v1.DatetimeRange\022\026\n\016provenance_ids\030\005 "
  "\003(\t\"/\n\rMosaicRequest\022\014\n\004name\030\001 \001(\t\022\020\n\010qu"
  "ad_key\030\002 \001(\t*\352\001\n\tAssetType\022\021\n\rUNKNOWN_AS"
  "SET\020\000\022\010\n\004JPEG\020\001\022\013\n\007GEOTIFF\020\002\022\010\n\004LERC\020\003\022\007"
  "\n\003MRF\020\004\022\013\n\007MRF_IDX\020\005\022\013\n\007MRF_XML\020\006\022\016\n\nCO_"
  "GEOTIFF\020\007\022\007\n\003RAW\020\010\022\r\n\tTHUMBNAIL\020\t\022\010\n\004TIF"
  "F\020\n\022\r\n\tJPEG_2000\020\013\022\007\n\003XML\020\014\022\007\n\003TXT\020\r\022\007\n\003"
  "PNG\020\016\022\014\n\010OVERVIEW\020\017\022\010\n\004JSON\020\020\022\010\n\004HTML\020\021\022"
  "\010\n\004WEBP\020\022*Q\n\rCloudPlatform\022\032\n\026UNKNOWN_CL"
  "OUD_PLATFORM\020\000\022\007\n\003AWS\020\001\022\007\n\003GCP\020\002\022\t\n\005AZUR"
  "E\020\003\022\007\n\003IBM\020\004*\307\001\n\010Platform\022\024\n\020UNKNOWN_PLA"
  "TFORM\020\000\022\r\n\tLANDSAT_1\020\002\022\r\n\tLANDSAT_2\020\004\022\r\n"
  "\tLANDSAT_3\020\010\022\017\n\013LANDSAT_123\020\016\022\r\n\tLANDSAT"
  "_4\020\020\022\r\n\tLANDSAT_5\020 \022\016\n\nLANDSAT_45\0200\022\r\n\tL"
  "ANDSAT_7\020@\022\016\n\tLANDSAT_8\020\200\001\022\014\n\007SWIFT_2\020\200\002"
  "\022\014\n\007SWIFT_3\020\200\004*v\n\nInstrument\022\026\n\022UNKNOWN_"
  "INSTRUMENT\020\000\022\007\n\003OLI\020\002\022\010\n\004TIRS\020\004\022\014\n\010OLI_T"
  "IRS\020\006\022\t\n\005POM_1\020\010\022\006\n\002TM\020\020\022\007\n\003ETM\020 \022\007\n\003MSS"
  "\020@\022\n\n\005POM_2\020\200\001**\n\rConstellation\022\031\n\025UNKNO"
  "WN_CONSTELLATION\020\000*J\n\007Mission\022\023\n\017UNKNOWN"
  "_MISSION\020\000\022\013\n\007LANDSAT\020\002\022\010\n\004NAIP\020\004\022\010\n\004PNO"
  "A\020\010\022\t\n\005SWIFT\020\020Bo\n\023com.epl.protobuf.v1B\tS"
  "tacProtoP\001Z.github.com/geo-grpc/api/gola"
  "ng/epl/protobuf/v1\242\002\004STPB\252\002\023com.epl.prot"
  "obuf.v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_deps[5] = {
  &::descriptor_table_epl_2fprotobuf_2fv1_2fgeometry_2eproto,
  &::descriptor_table_epl_2fprotobuf_2fv1_2fquery_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto = {
  false, false, 7095, descriptor_table_protodef_epl_2fprotobuf_2fv1_2fstac_2eproto, "epl/protobuf/v1/stac.proto", 
  &descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_once, descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_deps, 5, 24,
  schemas, file_default_instances, TableStruct_epl_2fprotobuf_2fv1_2fstac_2eproto::offsets,
  file_level_metadata_epl_2fprotobuf_2fv1_2fstac_2eproto, file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto, file_level_service_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_epl_2fprotobuf_2fv1_2fstac_2eproto(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
namespace epl {
namespace protobuf {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sat_OrbitState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[0];
}
bool Sat_OrbitState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Sat_OrbitState Sat::UKNOWN_ORBIT_STATE;
constexpr Sat_OrbitState Sat::ASCENDING_ORBIT;
constexpr Sat_OrbitState Sat::DESCENDING_ORBIT;
constexpr Sat_OrbitState Sat::GEOSTATIONARY_ORBIT;
constexpr Sat_OrbitState Sat::OrbitState_MIN;
constexpr Sat_OrbitState Sat::OrbitState_MAX;
constexpr int Sat::OrbitState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Eo_Band_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[1];
}
bool Eo_Band_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
    case 28:
    case 32:
    case 33:
    case 60:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Eo_Band Eo::UNKNOWN_BAND;
constexpr Eo_Band Eo::COASTAL;
constexpr Eo_Band Eo::BLUE;
constexpr Eo_Band Eo::GREEN;
constexpr Eo_Band Eo::RED;
constexpr Eo_Band Eo::RGB;
constexpr Eo_Band Eo::NIR;
constexpr Eo_Band Eo::NIR_2;
constexpr Eo_Band Eo::RGBIR;
constexpr Eo_Band Eo::SWIR_1;
constexpr Eo_Band Eo::SWIR_2;
constexpr Eo_Band Eo::PAN;
constexpr Eo_Band Eo::CIRRUS;
constexpr Eo_Band Eo::LWIR_1;
constexpr Eo_Band Eo::LWIR_2;
constexpr Eo_Band Eo::Band_MIN;
constexpr Eo_Band Eo::Band_MAX;
constexpr int Eo::Band_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sar_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[2];
}
bool Sar_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Sar_Platform Sar::UNKNOWN_PLATFORM;
constexpr Sar_Platform Sar::ENVISAT;
constexpr Sar_Platform Sar::SENTINEL_1A;
constexpr Sar_Platform Sar::Platform_MIN;
constexpr Sar_Platform Sar::Platform_MAX;
constexpr int Sar::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sar_Instrument_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[3];
}
bool Sar_Instrument_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Sar_Instrument Sar::UNKNOWN_INSTRUMENT;
constexpr Sar_Instrument Sar::Instrument_MIN;
constexpr Sar_Instrument Sar::Instrument_MAX;
constexpr int Sar::Instrument_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_CollectionCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[4];
}
bool Landsat_CollectionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Landsat_CollectionCategory Landsat::UNKNOWN_COLLECTION_CATEGORY;
constexpr Landsat_CollectionCategory Landsat::A1;
constexpr Landsat_CollectionCategory Landsat::A2;
constexpr Landsat_CollectionCategory Landsat::T1;
constexpr Landsat_CollectionCategory Landsat::T2;
constexpr Landsat_CollectionCategory Landsat::RT;
constexpr Landsat_CollectionCategory Landsat::CollectionCategory_MIN;
constexpr Landsat_CollectionCategory Landsat::CollectionCategory_MAX;
constexpr int Landsat::CollectionCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_WRSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[5];
}
bool Landsat_WRSType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Landsat_WRSType Landsat::UKNOWN_WRS;
constexpr Landsat_WRSType Landsat::WRS1;
constexpr Landsat_WRSType Landsat::WRS2;
constexpr Landsat_WRSType Landsat::WRSType_MIN;
constexpr Landsat_WRSType Landsat::WRSType_MAX;
constexpr int Landsat::WRSType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landsat_ProcessingLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[6];
}
bool Landsat_ProcessingLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Landsat_ProcessingLevel Landsat::UNKNOWN_PROCESSING_LEVEL;
constexpr Landsat_ProcessingLevel Landsat::L1G;
constexpr Landsat_ProcessingLevel Landsat::L1TP;
constexpr Landsat_ProcessingLevel Landsat::L1T;
constexpr Landsat_ProcessingLevel Landsat::L1GT;
constexpr Landsat_ProcessingLevel Landsat::L1GS;
constexpr Landsat_ProcessingLevel Landsat::ProcessingLevel_MIN;
constexpr Landsat_ProcessingLevel Landsat::ProcessingLevel_MAX;
constexpr int Landsat::ProcessingLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AssetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[7];
}
bool AssetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[8];
}
bool CloudPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[9];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 14:
    case 16:
    case 32:
    case 48:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Instrument_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[10];
}
bool Instrument_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 6:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Constellation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[11];
}
bool Constellation_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fv1_2fstac_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fv1_2fstac_2eproto[12];
}
bool Mission_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Collection_SummariesEntry_DoNotUse::Collection_SummariesEntry_DoNotUse() {}
Collection_SummariesEntry_DoNotUse::Collection_SummariesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Collection_SummariesEntry_DoNotUse::MergeFrom(const Collection_SummariesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Collection_SummariesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Collection_SummariesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Collection::_Internal {
 public:
  static const ::epl::protobuf::v1::Extent& extent(const Collection* msg);
};

const ::epl::protobuf::v1::Extent&
Collection::_Internal::extent(const Collection* msg) {
  return *msg->extent_;
}
Collection::Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keywords_(arena),
  providers_(arena),
  summaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Collection)
}
Collection::Collection(const Collection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keywords_(from.keywords_),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  summaries_.MergeFrom(from.summaries_);
  stac_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stac_version().empty()) {
    stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stac_version(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_license().empty()) {
    license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license(), 
      GetArena());
  }
  if (from._internal_has_extent()) {
    extent_ = new ::epl::protobuf::v1::Extent(*from.extent_);
  } else {
    extent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Collection)
}

void Collection::SharedCtor() {
stac_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extent_ = nullptr;
}

Collection::~Collection() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Collection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Collection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stac_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extent_;
}

void Collection::ArenaDtor(void* object) {
  Collection* _this = reinterpret_cast< Collection* >(object);
  (void)_this;
}
void Collection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Collection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  providers_.Clear();
  summaries_.Clear();
  stac_version_.ClearToEmpty();
  id_.ClearToEmpty();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  license_.ClearToEmpty();
  if (GetArena() == nullptr && extent_ != nullptr) {
    delete extent_;
  }
  extent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stac_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stac_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.stac_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keywords = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.keywords"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string license = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Collection.license"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .epl.protobuf.v1.Provider providers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Extent extent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .epl.protobuf.v1.Stats> summaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&summaries_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stac_version = 1;
  if (this->stac_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stac_version().data(), static_cast<int>(this->_internal_stac_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.stac_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stac_version(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // repeated string keywords = 6;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.keywords");
    target = stream->WriteString(6, s, target);
  }

  // string license = 7;
  if (this->license().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Collection.license");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_license(), target);
  }

  // repeated .epl.protobuf.v1.Provider providers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_providers(i), target, stream);
  }

  // .epl.protobuf.v1.Extent extent = 9;
  if (this->has_extent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::extent(this), target, stream);
  }

  // map<string, .epl.protobuf.v1.Stats> summaries = 10;
  if (!this->_internal_summaries().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "epl.protobuf.v1.Collection.SummariesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_summaries().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_summaries().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >::const_iterator
          it = this->_internal_summaries().begin();
          it != this->_internal_summaries().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Collection_SummariesEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >::const_iterator
          it = this->_internal_summaries().begin();
          it != this->_internal_summaries().end(); ++it) {
        target = Collection_SummariesEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Collection)
  return target;
}

size_t Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Collection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keywords_.size());
  for (int i = 0, n = keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keywords_.Get(i));
  }

  // repeated .epl.protobuf.v1.Provider providers = 8;
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->providers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .epl.protobuf.v1.Stats> summaries = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_summaries_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Stats >::const_iterator
      it = this->_internal_summaries().begin();
      it != this->_internal_summaries().end(); ++it) {
    total_size += Collection_SummariesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string stac_version = 1;
  if (this->stac_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stac_version());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string license = 7;
  if (this->license().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .epl.protobuf.v1.Extent extent = 9;
  if (this->has_extent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  const Collection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Collection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Collection)
    MergeFrom(*source);
  }
}

void Collection::MergeFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  providers_.MergeFrom(from.providers_);
  summaries_.MergeFrom(from.summaries_);
  if (from.stac_version().size() > 0) {
    _internal_set_stac_version(from._internal_stac_version());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.license().size() > 0) {
    _internal_set_license(from._internal_license());
  }
  if (from.has_extent()) {
    _internal_mutable_extent()->::epl::protobuf::v1::Extent::MergeFrom(from._internal_extent());
  }
}

void Collection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collection::CopyFrom(const Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collection::IsInitialized() const {
  return true;
}

void Collection::InternalSwap(Collection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keywords_.InternalSwap(&other->keywords_);
  providers_.InternalSwap(&other->providers_);
  summaries_.Swap(&other->summaries_);
  stac_version_.Swap(&other->stac_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  license_.Swap(&other->license_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(extent_, other->extent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CollectionRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::EnvelopeData& bbox(const CollectionRequest* msg);
  static const ::epl::protobuf::v1::GeometryData& intersects(const CollectionRequest* msg);
};

const ::epl::protobuf::v1::EnvelopeData&
CollectionRequest::_Internal::bbox(const CollectionRequest* msg) {
  return *msg->spatial_.bbox_;
}
const ::epl::protobuf::v1::GeometryData&
CollectionRequest::_Internal::intersects(const CollectionRequest* msg) {
  return *msg->spatial_.intersects_;
}
void CollectionRequest::set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_spatial();
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox)->GetArena();
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    set_has_bbox();
    spatial_.bbox_ = bbox;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.CollectionRequest.bbox)
}
void CollectionRequest::clear_bbox() {
  if (_internal_has_bbox()) {
    if (GetArena() == nullptr) {
      delete spatial_.bbox_;
    }
    clear_has_spatial();
  }
}
void CollectionRequest::set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_spatial();
  if (intersects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intersects)->GetArena();
    if (message_arena != submessage_arena) {
      intersects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersects, submessage_arena);
    }
    set_has_intersects();
    spatial_.intersects_ = intersects;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.CollectionRequest.intersects)
}
void CollectionRequest::clear_intersects() {
  if (_internal_has_intersects()) {
    if (GetArena() == nullptr) {
      delete spatial_.intersects_;
    }
    clear_has_spatial();
  }
}
CollectionRequest::CollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.CollectionRequest)
}
CollectionRequest::CollectionRequest(const CollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  clear_has_spatial();
  switch (from.spatial_case()) {
    case kBbox: {
      _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
      break;
    }
    case kIntersects: {
      _internal_mutable_intersects()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_intersects());
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.CollectionRequest)
}

void CollectionRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_spatial();
}

CollectionRequest::~CollectionRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.CollectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_spatial()) {
    clear_spatial();
  }
}

void CollectionRequest::ArenaDtor(void* object) {
  CollectionRequest* _this = reinterpret_cast< CollectionRequest* >(object);
  (void)_this;
}
void CollectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectionRequest::clear_spatial() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.CollectionRequest)
  switch (spatial_case()) {
    case kBbox: {
      if (GetArena() == nullptr) {
        delete spatial_.bbox_;
      }
      break;
    }
    case kIntersects: {
      if (GetArena() == nullptr) {
        delete spatial_.intersects_;
      }
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPATIAL_NOT_SET;
}


void CollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.CollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  clear_spatial();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.CollectionRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EnvelopeData bbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData intersects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.CollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.CollectionRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 2;
  if (_internal_has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bbox(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryData intersects = 3;
  if (_internal_has_intersects()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::intersects(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.CollectionRequest)
  return target;
}

size_t CollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.CollectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (spatial_case()) {
    // .epl.protobuf.v1.EnvelopeData bbox = 2;
    case kBbox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spatial_.bbox_);
      break;
    }
    // .epl.protobuf.v1.GeometryData intersects = 3;
    case kIntersects: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spatial_.intersects_);
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.CollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.CollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.CollectionRequest)
    MergeFrom(*source);
  }
}

void CollectionRequest::MergeFrom(const CollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.CollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.spatial_case()) {
    case kBbox: {
      _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
      break;
    }
    case kIntersects: {
      _internal_mutable_intersects()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_intersects());
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
}

void CollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.CollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionRequest::CopyFrom(const CollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.CollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionRequest::IsInitialized() const {
  return true;
}

void CollectionRequest::InternalSwap(CollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(spatial_, other->spatial_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stats::_Internal {
 public:
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Stats)
}

void Stats::SharedCtor() {
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Extent::_Internal {
 public:
};

void Extent::clear_spatial() {
  spatial_.Clear();
}
Extent::Extent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spatial_(arena),
  temporal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Extent)
}
Extent::Extent(const Extent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spatial_(from.spatial_),
      temporal_(from.temporal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Extent)
}

void Extent::SharedCtor() {
}

Extent::~Extent() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Extent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extent::ArenaDtor(void* object) {
  Extent* _this = reinterpret_cast< Extent* >(object);
  (void)_this;
}
void Extent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extent::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Extent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spatial_.Clear();
  temporal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .epl.protobuf.v1.EnvelopeData spatial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spatial(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .epl.protobuf.v1.Interval temporal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_temporal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Extent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .epl.protobuf.v1.EnvelopeData spatial = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spatial_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spatial(i), target, stream);
  }

  // repeated .epl.protobuf.v1.Interval temporal = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_temporal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_temporal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Extent)
  return target;
}

size_t Extent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Extent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .epl.protobuf.v1.EnvelopeData spatial = 1;
  total_size += 1UL * this->_internal_spatial_size();
  for (const auto& msg : this->spatial_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .epl.protobuf.v1.Interval temporal = 2;
  total_size += 1UL * this->_internal_temporal_size();
  for (const auto& msg : this->temporal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Extent)
  GOOGLE_DCHECK_NE(&from, this);
  const Extent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Extent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Extent)
    MergeFrom(*source);
  }
}

void Extent::MergeFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Extent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spatial_.MergeFrom(from.spatial_);
  temporal_.MergeFrom(from.temporal_);
}

void Extent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extent::CopyFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extent::IsInitialized() const {
  return true;
}

void Extent::InternalSwap(Extent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spatial_.InternalSwap(&other->spatial_);
  temporal_.InternalSwap(&other->temporal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Interval::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const Interval* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const Interval* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Interval::_Internal::start(const Interval* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Interval::_Internal::end(const Interval* msg) {
  return *msg->end_;
}
void Interval::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void Interval::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
Interval::Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Interval)
}
Interval::Interval(const Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Interval)
}

void Interval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Interval::~Interval() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Interval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Interval::ArenaDtor(void* object) {
  Interval* _this = reinterpret_cast< Interval* >(object);
  (void)_this;
}
void Interval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Interval)
  return target;
}

size_t Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Interval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const Interval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Interval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Interval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Interval)
    MergeFrom(*source);
  }
}

void Interval::MergeFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
}

void Interval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interval::CopyFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interval::IsInitialized() const {
  return true;
}

void Interval::InternalSwap(Interval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interval, end_)
      + sizeof(Interval::end_)
      - PROTOBUF_FIELD_OFFSET(Interval, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Provider::_Internal {
 public:
};

Provider::Provider(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Provider)
}
Provider::Provider(const Provider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Provider)
}

void Provider::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Provider::~Provider() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Provider)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Provider::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Provider::ArenaDtor(void* object) {
  Provider* _this = reinterpret_cast< Provider* >(object);
  (void)_this;
}
void Provider::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Provider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Provider::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Provider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Provider::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Provider.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Provider.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string roles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Provider.roles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Provider.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Provider::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Provider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Provider.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Provider.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated string roles = 3;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Provider.roles");
    target = stream->WriteString(3, s, target);
  }

  // string url = 4;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Provider.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Provider)
  return target;
}

size_t Provider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Provider)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string url = 4;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Provider::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Provider)
  GOOGLE_DCHECK_NE(&from, this);
  const Provider* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Provider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Provider)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Provider)
    MergeFrom(*source);
  }
}

void Provider::MergeFrom(const Provider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Provider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void Provider::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Provider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Provider::CopyFrom(const Provider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Provider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Provider::IsInitialized() const {
  return true;
}

void Provider::InternalSwap(Provider* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Provider::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StacItem_AssetsEntry_DoNotUse::StacItem_AssetsEntry_DoNotUse() {}
StacItem_AssetsEntry_DoNotUse::StacItem_AssetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StacItem_AssetsEntry_DoNotUse::MergeFrom(const StacItem_AssetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StacItem_AssetsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StacItem_AssetsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class StacItem::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& properties(const StacItem* msg);
  static const ::epl::protobuf::v1::GeometryData& geometry(const StacItem* msg);
  static const ::epl::protobuf::v1::EnvelopeData& bbox(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& datetime(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_datetime(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& observed(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_observation(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_datetime(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_observation(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated(const StacItem* msg);
  static const ::epl::protobuf::v1::ProjectionData& proj(const StacItem* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& gsd(const StacItem* msg);
  static const ::epl::protobuf::v1::Eo& eo(const StacItem* msg);
  static const ::epl::protobuf::v1::View& view(const StacItem* msg);
  static const ::epl::protobuf::v1::Landsat& landsat(const StacItem* msg);
  static const ::epl::protobuf::v1::Mosaic& mosaic(const StacItem* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
StacItem::_Internal::properties(const StacItem* msg) {
  return *msg->properties_;
}
const ::epl::protobuf::v1::GeometryData&
StacItem::_Internal::geometry(const StacItem* msg) {
  return *msg->geometry_;
}
const ::epl::protobuf::v1::EnvelopeData&
StacItem::_Internal::bbox(const StacItem* msg) {
  return *msg->bbox_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::datetime(const StacItem* msg) {
  return *msg->temporal_deprecated_.datetime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::start_datetime(const StacItem* msg) {
  return *msg->temporal_deprecated_.start_datetime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::observed(const StacItem* msg) {
  return *msg->temporal_.observed_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::start_observation(const StacItem* msg) {
  return *msg->temporal_.start_observation_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::end_datetime(const StacItem* msg) {
  return *msg->end_datetime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::end_observation(const StacItem* msg) {
  return *msg->end_observation_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::created(const StacItem* msg) {
  return *msg->created_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StacItem::_Internal::updated(const StacItem* msg) {
  return *msg->updated_;
}
const ::epl::protobuf::v1::ProjectionData&
StacItem::_Internal::proj(const StacItem* msg) {
  return *msg->proj_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
StacItem::_Internal::gsd(const StacItem* msg) {
  return *msg->gsd_;
}
const ::epl::protobuf::v1::Eo&
StacItem::_Internal::eo(const StacItem* msg) {
  return *msg->eo_;
}
const ::epl::protobuf::v1::View&
StacItem::_Internal::view(const StacItem* msg) {
  return *msg->view_;
}
const ::epl::protobuf::v1::Landsat&
StacItem::_Internal::landsat(const StacItem* msg) {
  return *msg->landsat_;
}
const ::epl::protobuf::v1::Mosaic&
StacItem::_Internal::mosaic(const StacItem* msg) {
  return *msg->mosaic_;
}
void StacItem::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
void StacItem::clear_geometry() {
  if (GetArena() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
void StacItem::clear_bbox() {
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
void StacItem::set_allocated_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal_deprecated();
  if (datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datetime)->GetArena();
    if (message_arena != submessage_arena) {
      datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime, submessage_arena);
    }
    set_has_datetime();
    temporal_deprecated_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.datetime)
}
void StacItem::clear_datetime() {
  if (_internal_has_datetime()) {
    if (GetArena() == nullptr) {
      delete temporal_deprecated_.datetime_;
    }
    clear_has_temporal_deprecated();
  }
}
void StacItem::set_allocated_start_datetime(PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal_deprecated();
  if (start_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_datetime)->GetArena();
    if (message_arena != submessage_arena) {
      start_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_datetime, submessage_arena);
    }
    set_has_start_datetime();
    temporal_deprecated_.start_datetime_ = start_datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.start_datetime)
}
void StacItem::clear_start_datetime() {
  if (_internal_has_start_datetime()) {
    if (GetArena() == nullptr) {
      delete temporal_deprecated_.start_datetime_;
    }
    clear_has_temporal_deprecated();
  }
}
void StacItem::set_allocated_observed(PROTOBUF_NAMESPACE_ID::Timestamp* observed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal();
  if (observed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observed)->GetArena();
    if (message_arena != submessage_arena) {
      observed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observed, submessage_arena);
    }
    set_has_observed();
    temporal_.observed_ = observed;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.observed)
}
void StacItem::clear_observed() {
  if (_internal_has_observed()) {
    if (GetArena() == nullptr) {
      delete temporal_.observed_;
    }
    clear_has_temporal();
  }
}
void StacItem::set_allocated_start_observation(PROTOBUF_NAMESPACE_ID::Timestamp* start_observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal();
  if (start_observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_observation)->GetArena();
    if (message_arena != submessage_arena) {
      start_observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_observation, submessage_arena);
    }
    set_has_start_observation();
    temporal_.start_observation_ = start_observation;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacItem.start_observation)
}
void StacItem::clear_start_observation() {
  if (_internal_has_start_observation()) {
    if (GetArena() == nullptr) {
      delete temporal_.start_observation_;
    }
    clear_has_temporal();
  }
}
void StacItem::clear_end_datetime() {
  if (GetArena() == nullptr && end_datetime_ != nullptr) {
    delete end_datetime_;
  }
  end_datetime_ = nullptr;
}
void StacItem::clear_end_observation() {
  if (GetArena() == nullptr && end_observation_ != nullptr) {
    delete end_observation_;
  }
  end_observation_ = nullptr;
}
void StacItem::clear_created() {
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void StacItem::clear_updated() {
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
void StacItem::clear_proj() {
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
}
void StacItem::clear_gsd() {
  if (GetArena() == nullptr && gsd_ != nullptr) {
    delete gsd_;
  }
  gsd_ = nullptr;
}
StacItem::StacItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena),
  stac_extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.StacItem)
}
StacItem::StacItem(const StacItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stac_extensions_(from.stac_extensions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assets_.MergeFrom(from.assets_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument().empty()) {
    instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument(), 
      GetArena());
  }
  constellation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_constellation().empty()) {
    constellation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_constellation(), 
      GetArena());
  }
  mission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mission().empty()) {
    mission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mission(), 
      GetArena());
  }
  stac_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stac_version().empty()) {
    stac_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stac_version(), 
      GetArena());
  }
  stac_pb_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stac_pb_version().empty()) {
    stac_pb_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stac_pb_version(), 
      GetArena());
  }
  if (from._internal_has_properties()) {
    properties_ = new PROTOBUF_NAMESPACE_ID::Any(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::epl::protobuf::v1::GeometryData(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_bbox()) {
    bbox_ = new ::epl::protobuf::v1::EnvelopeData(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  if (from._internal_has_end_datetime()) {
    end_datetime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_datetime_);
  } else {
    end_datetime_ = nullptr;
  }
  if (from._internal_has_end_observation()) {
    end_observation_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_observation_);
  } else {
    end_observation_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  if (from._internal_has_proj()) {
    proj_ = new ::epl::protobuf::v1::ProjectionData(*from.proj_);
  } else {
    proj_ = nullptr;
  }
  if (from._internal_has_gsd()) {
    gsd_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.gsd_);
  } else {
    gsd_ = nullptr;
  }
  if (from._internal_has_eo()) {
    eo_ = new ::epl::protobuf::v1::Eo(*from.eo_);
  } else {
    eo_ = nullptr;
  }
  if (from._internal_has_landsat()) {
    landsat_ = new ::epl::protobuf::v1::Landsat(*from.landsat_);
  } else {
    landsat_ = nullptr;
  }
  if (from._internal_has_mosaic()) {
    mosaic_ = new ::epl::protobuf::v1::Mosaic(*from.mosaic_);
  } else {
    mosaic_ = nullptr;
  }
  if (from._internal_has_view()) {
    view_ = new ::epl::protobuf::v1::View(*from.view_);
  } else {
    view_ = nullptr;
  }
  ::memcpy(&platform_enum_, &from.platform_enum_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_enum_) -
    reinterpret_cast<char*>(&platform_enum_)) + sizeof(mission_enum_));
  clear_has_temporal_deprecated();
  switch (from.temporal_deprecated_case()) {
    case kDatetime: {
      _internal_mutable_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_datetime());
      break;
    }
    case kStartDatetime: {
      _internal_mutable_start_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_datetime());
      break;
    }
    case TEMPORAL_DEPRECATED_NOT_SET: {
      break;
    }
  }
  clear_has_temporal();
  switch (from.temporal_case()) {
    case kObserved: {
      _internal_mutable_observed()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_observed());
      break;
    }
    case kStartObservation: {
      _internal_mutable_start_observation()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_observation());
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.StacItem)
}

void StacItem::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
constellation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stac_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stac_pb_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&properties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mission_enum_) -
    reinterpret_cast<char*>(&properties_)) + sizeof(mission_enum_));
clear_has_temporal_deprecated();
clear_has_temporal();
}

StacItem::~StacItem() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.StacItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StacItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  constellation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stac_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stac_pb_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete end_datetime_;
  if (this != internal_default_instance()) delete end_observation_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete updated_;
  if (this != internal_default_instance()) delete proj_;
  if (this != internal_default_instance()) delete gsd_;
  if (this != internal_default_instance()) delete eo_;
  if (this != internal_default_instance()) delete landsat_;
  if (this != internal_default_instance()) delete mosaic_;
  if (this != internal_default_instance()) delete view_;
  if (has_temporal_deprecated()) {
    clear_temporal_deprecated();
  }
  if (has_temporal()) {
    clear_temporal();
  }
}

void StacItem::ArenaDtor(void* object) {
  StacItem* _this = reinterpret_cast< StacItem* >(object);
  (void)_this;
}
void StacItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StacItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StacItem::clear_temporal_deprecated() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.StacItem)
  switch (temporal_deprecated_case()) {
    case kDatetime: {
      if (GetArena() == nullptr) {
        delete temporal_deprecated_.datetime_;
      }
      break;
    }
    case kStartDatetime: {
      if (GetArena() == nullptr) {
        delete temporal_deprecated_.start_datetime_;
      }
      break;
    }
    case TEMPORAL_DEPRECATED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEMPORAL_DEPRECATED_NOT_SET;
}

void StacItem::clear_temporal() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.StacItem)
  switch (temporal_case()) {
    case kObserved: {
      if (GetArena() == nullptr) {
        delete temporal_.observed_;
      }
      break;
    }
    case kStartObservation: {
      if (GetArena() == nullptr) {
        delete temporal_.start_observation_;
      }
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TEMPORAL_NOT_SET;
}


void StacItem::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.StacItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  stac_extensions_.Clear();
  id_.ClearToEmpty();
  title_.ClearToEmpty();
  collection_.ClearToEmpty();
  platform_.ClearToEmpty();
  instrument_.ClearToEmpty();
  constellation_.ClearToEmpty();
  mission_.ClearToEmpty();
  stac_version_.ClearToEmpty();
  stac_pb_version_.ClearToEmpty();
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  if (GetArena() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  if (GetArena() == nullptr && end_datetime_ != nullptr) {
    delete end_datetime_;
  }
  end_datetime_ = nullptr;
  if (GetArena() == nullptr && end_observation_ != nullptr) {
    delete end_observation_;
  }
  end_observation_ = nullptr;
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
  if (GetArena() == nullptr && gsd_ != nullptr) {
    delete gsd_;
  }
  gsd_ = nullptr;
  if (GetArena() == nullptr && eo_ != nullptr) {
    delete eo_;
  }
  eo_ = nullptr;
  if (GetArena() == nullptr && landsat_ != nullptr) {
    delete landsat_;
  }
  landsat_ = nullptr;
  if (GetArena() == nullptr && mosaic_ != nullptr) {
    delete mosaic_;
  }
  mosaic_ = nullptr;
  if (GetArena() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
  ::memset(&platform_enum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_enum_) -
      reinterpret_cast<char*>(&platform_enum_)) + sizeof(mission_enum_));
  clear_temporal_deprecated();
  clear_temporal();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StacItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .epl.protobuf.v1.Asset> assets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData geometry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EnvelopeData bbox = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp datetime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp observed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_observed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_datetime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_observation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_datetime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_observation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData proj = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Platform platform_enum = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform_enum(static_cast<::epl::protobuf::v1::Platform>(val));
        } else goto handle_unusual;
        continue;
      // string platform = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Instrument instrument_enum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_enum(static_cast<::epl::protobuf::v1::Instrument>(val));
        } else goto handle_unusual;
        continue;
      // string instrument = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_instrument();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.instrument"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Constellation constellation_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_constellation_enum(static_cast<::epl::protobuf::v1::Constellation>(val));
        } else goto handle_unusual;
        continue;
      // string constellation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_constellation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.constellation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Mission mission_enum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mission_enum(static_cast<::epl::protobuf::v1::Mission>(val));
        } else goto handle_unusual;
        continue;
      // string mission = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_mission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.mission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue gsd = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_gsd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stac_version = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_stac_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.stac_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stac_pb_version = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_stac_pb_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.stac_pb_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stac_extensions = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_stac_extensions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacItem.stac_extensions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Eo eo = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_eo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Landsat landsat = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_landsat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Mosaic mosaic = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_mosaic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.View view = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StacItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.StacItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string collection = 3;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.collection");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_collection(), target);
  }

  // .google.protobuf.Any properties = 4;
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::properties(this), target, stream);
  }

  // map<string, .epl.protobuf.v1.Asset> assets = 5;
  if (!this->_internal_assets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "epl.protobuf.v1.StacItem.AssetsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >::const_iterator
          it = this->_internal_assets().begin();
          it != this->_internal_assets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StacItem_AssetsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >::const_iterator
          it = this->_internal_assets().begin();
          it != this->_internal_assets().end(); ++it) {
        target = StacItem_AssetsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .epl.protobuf.v1.GeometryData geometry = 6;
  if (this->has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::geometry(this), target, stream);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 7;
  if (this->has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bbox(this), target, stream);
  }

  // .google.protobuf.Timestamp datetime = 8;
  if (_internal_has_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp observed = 9;
  if (_internal_has_observed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::observed(this), target, stream);
  }

  // .google.protobuf.Timestamp start_datetime = 10;
  if (_internal_has_start_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::start_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp start_observation = 11;
  if (_internal_has_start_observation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::start_observation(this), target, stream);
  }

  // .google.protobuf.Timestamp end_datetime = 12;
  if (this->has_end_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::end_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp end_observation = 13;
  if (this->has_end_observation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::end_observation(this), target, stream);
  }

  // .google.protobuf.Timestamp created = 14;
  if (this->has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::created(this), target, stream);
  }

  // .google.protobuf.Timestamp updated = 15;
  if (this->has_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::updated(this), target, stream);
  }

  // .epl.protobuf.v1.ProjectionData proj = 16;
  if (this->has_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::proj(this), target, stream);
  }

  // .epl.protobuf.v1.Platform platform_enum = 17;
  if (this->platform_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_platform_enum(), target);
  }

  // string platform = 18;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.platform");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_platform(), target);
  }

  // .epl.protobuf.v1.Instrument instrument_enum = 19;
  if (this->instrument_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_instrument_enum(), target);
  }

  // string instrument = 20;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument().data(), static_cast<int>(this->_internal_instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.instrument");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_instrument(), target);
  }

  // .epl.protobuf.v1.Constellation constellation_enum = 21;
  if (this->constellation_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_constellation_enum(), target);
  }

  // string constellation = 22;
  if (this->constellation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_constellation().data(), static_cast<int>(this->_internal_constellation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.constellation");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_constellation(), target);
  }

  // .epl.protobuf.v1.Mission mission_enum = 23;
  if (this->mission_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_mission_enum(), target);
  }

  // string mission = 24;
  if (this->mission().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mission().data(), static_cast<int>(this->_internal_mission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.mission");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_mission(), target);
  }

  // .google.protobuf.FloatValue gsd = 25;
  if (this->has_gsd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::gsd(this), target, stream);
  }

  // string stac_version = 26;
  if (this->stac_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stac_version().data(), static_cast<int>(this->_internal_stac_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.stac_version");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_stac_version(), target);
  }

  // string stac_pb_version = 27;
  if (this->stac_pb_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stac_pb_version().data(), static_cast<int>(this->_internal_stac_pb_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.stac_pb_version");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_stac_pb_version(), target);
  }

  // repeated string stac_extensions = 28;
  for (int i = 0, n = this->_internal_stac_extensions_size(); i < n; i++) {
    const auto& s = this->_internal_stac_extensions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacItem.stac_extensions");
    target = stream->WriteString(28, s, target);
  }

  // .epl.protobuf.v1.Eo eo = 29;
  if (this->has_eo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::eo(this), target, stream);
  }

  // .epl.protobuf.v1.Landsat landsat = 31;
  if (this->has_landsat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::landsat(this), target, stream);
  }

  // .epl.protobuf.v1.Mosaic mosaic = 32;
  if (this->has_mosaic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::mosaic(this), target, stream);
  }

  // .epl.protobuf.v1.View view = 34;
  if (this->has_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.StacItem)
  return target;
}

size_t StacItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.StacItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .epl.protobuf.v1.Asset> assets = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::epl::protobuf::v1::Asset >::const_iterator
      it = this->_internal_assets().begin();
      it != this->_internal_assets().end(); ++it) {
    total_size += StacItem_AssetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string stac_extensions = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stac_extensions_.size());
  for (int i = 0, n = stac_extensions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stac_extensions_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string collection = 3;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // string platform = 18;
  if (this->platform().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string instrument = 20;
  if (this->instrument().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument());
  }

  // string constellation = 22;
  if (this->constellation().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_constellation());
  }

  // string mission = 24;
  if (this->mission().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mission());
  }

  // string stac_version = 26;
  if (this->stac_version().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stac_version());
  }

  // string stac_pb_version = 27;
  if (this->stac_pb_version().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stac_pb_version());
  }

  // .google.protobuf.Any properties = 4;
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .epl.protobuf.v1.GeometryData geometry = 6;
  if (this->has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 7;
  if (this->has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .google.protobuf.Timestamp end_datetime = 12;
  if (this->has_end_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_datetime_);
  }

  // .google.protobuf.Timestamp end_observation = 13;
  if (this->has_end_observation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_observation_);
  }

  // .google.protobuf.Timestamp created = 14;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp updated = 15;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .epl.protobuf.v1.ProjectionData proj = 16;
  if (this->has_proj()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proj_);
  }

  // .google.protobuf.FloatValue gsd = 25;
  if (this->has_gsd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gsd_);
  }

  // .epl.protobuf.v1.Eo eo = 29;
  if (this->has_eo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eo_);
  }

  // .epl.protobuf.v1.Landsat landsat = 31;
  if (this->has_landsat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landsat_);
  }

  // .epl.protobuf.v1.Mosaic mosaic = 32;
  if (this->has_mosaic()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mosaic_);
  }

  // .epl.protobuf.v1.View view = 34;
  if (this->has_view()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_);
  }

  // .epl.protobuf.v1.Platform platform_enum = 17;
  if (this->platform_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform_enum());
  }

  // .epl.protobuf.v1.Instrument instrument_enum = 19;
  if (this->instrument_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_instrument_enum());
  }

  // .epl.protobuf.v1.Constellation constellation_enum = 21;
  if (this->constellation_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_constellation_enum());
  }

  // .epl.protobuf.v1.Mission mission_enum = 23;
  if (this->mission_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mission_enum());
  }

  switch (temporal_deprecated_case()) {
    // .google.protobuf.Timestamp datetime = 8;
    case kDatetime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_deprecated_.datetime_);
      break;
    }
    // .google.protobuf.Timestamp start_datetime = 10;
    case kStartDatetime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_deprecated_.start_datetime_);
      break;
    }
    case TEMPORAL_DEPRECATED_NOT_SET: {
      break;
    }
  }
  switch (temporal_case()) {
    // .google.protobuf.Timestamp observed = 9;
    case kObserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_.observed_);
      break;
    }
    // .google.protobuf.Timestamp start_observation = 11;
    case kStartObservation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_.start_observation_);
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StacItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.StacItem)
  GOOGLE_DCHECK_NE(&from, this);
  const StacItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StacItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.StacItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.StacItem)
    MergeFrom(*source);
  }
}

void StacItem::MergeFrom(const StacItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.StacItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  stac_extensions_.MergeFrom(from.stac_extensions_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.instrument().size() > 0) {
    _internal_set_instrument(from._internal_instrument());
  }
  if (from.constellation().size() > 0) {
    _internal_set_constellation(from._internal_constellation());
  }
  if (from.mission().size() > 0) {
    _internal_set_mission(from._internal_mission());
  }
  if (from.stac_version().size() > 0) {
    _internal_set_stac_version(from._internal_stac_version());
  }
  if (from.stac_pb_version().size() > 0) {
    _internal_set_stac_pb_version(from._internal_stac_pb_version());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_properties());
  }
  if (from.has_geometry()) {
    _internal_mutable_geometry()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_geometry());
  }
  if (from.has_bbox()) {
    _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
  }
  if (from.has_end_datetime()) {
    _internal_mutable_end_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_datetime());
  }
  if (from.has_end_observation()) {
    _internal_mutable_end_observation()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_observation());
  }
  if (from.has_created()) {
    _internal_mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from.has_updated()) {
    _internal_mutable_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated());
  }
  if (from.has_proj()) {
    _internal_mutable_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_proj());
  }
  if (from.has_gsd()) {
    _internal_mutable_gsd()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_gsd());
  }
  if (from.has_eo()) {
    _internal_mutable_eo()->::epl::protobuf::v1::Eo::MergeFrom(from._internal_eo());
  }
  if (from.has_landsat()) {
    _internal_mutable_landsat()->::epl::protobuf::v1::Landsat::MergeFrom(from._internal_landsat());
  }
  if (from.has_mosaic()) {
    _internal_mutable_mosaic()->::epl::protobuf::v1::Mosaic::MergeFrom(from._internal_mosaic());
  }
  if (from.has_view()) {
    _internal_mutable_view()->::epl::protobuf::v1::View::MergeFrom(from._internal_view());
  }
  if (from.platform_enum() != 0) {
    _internal_set_platform_enum(from._internal_platform_enum());
  }
  if (from.instrument_enum() != 0) {
    _internal_set_instrument_enum(from._internal_instrument_enum());
  }
  if (from.constellation_enum() != 0) {
    _internal_set_constellation_enum(from._internal_constellation_enum());
  }
  if (from.mission_enum() != 0) {
    _internal_set_mission_enum(from._internal_mission_enum());
  }
  switch (from.temporal_deprecated_case()) {
    case kDatetime: {
      _internal_mutable_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_datetime());
      break;
    }
    case kStartDatetime: {
      _internal_mutable_start_datetime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_datetime());
      break;
    }
    case TEMPORAL_DEPRECATED_NOT_SET: {
      break;
    }
  }
  switch (from.temporal_case()) {
    case kObserved: {
      _internal_mutable_observed()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_observed());
      break;
    }
    case kStartObservation: {
      _internal_mutable_start_observation()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_observation());
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
}

void StacItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.StacItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StacItem::CopyFrom(const StacItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.StacItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StacItem::IsInitialized() const {
  return true;
}

void StacItem::InternalSwap(StacItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.Swap(&other->assets_);
  stac_extensions_.InternalSwap(&other->stac_extensions_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_.Swap(&other->instrument_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  constellation_.Swap(&other->constellation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mission_.Swap(&other->mission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stac_version_.Swap(&other->stac_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stac_pb_version_.Swap(&other->stac_pb_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StacItem, mission_enum_)
      + sizeof(StacItem::mission_enum_)
      - PROTOBUF_FIELD_OFFSET(StacItem, properties_)>(
          reinterpret_cast<char*>(&properties_),
          reinterpret_cast<char*>(&other->properties_));
  swap(temporal_deprecated_, other->temporal_deprecated_);
  swap(temporal_, other->temporal_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StacItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StacRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::StringFilter& id_complex(const StacRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& properties(const StacRequest* msg);
  static const ::epl::protobuf::v1::GeometryData& intersects(const StacRequest* msg);
  static const ::epl::protobuf::v1::EnvelopeData& bbox(const StacRequest* msg);
  static const ::epl::protobuf::v1::GeometryRequest& geometry_request(const StacRequest* msg);
  static const ::epl::protobuf::v1::TimestampFilter& datetime(const StacRequest* msg);
  static const ::epl::protobuf::v1::TimestampFilter& observed(const StacRequest* msg);
  static const ::epl::protobuf::v1::TimestampFilter& created(const StacRequest* msg);
  static const ::epl::protobuf::v1::TimestampFilter& updated(const StacRequest* msg);
  static const ::epl::protobuf::v1::ProjectionData& proj(const StacRequest* msg);
  static const ::epl::protobuf::v1::FloatFilter& gsd(const StacRequest* msg);
  static const ::epl::protobuf::v1::EoRequest& eo(const StacRequest* msg);
  static const ::epl::protobuf::v1::ViewRequest& view(const StacRequest* msg);
  static const ::epl::protobuf::v1::LandsatRequest& landsat(const StacRequest* msg);
  static const ::epl::protobuf::v1::MosaicRequest& mosaic(const StacRequest* msg);
};

const ::epl::protobuf::v1::StringFilter&
StacRequest::_Internal::id_complex(const StacRequest* msg) {
  return *msg->identity_.id_complex_;
}
const PROTOBUF_NAMESPACE_ID::Any&
StacRequest::_Internal::properties(const StacRequest* msg) {
  return *msg->properties_;
}
const ::epl::protobuf::v1::GeometryData&
StacRequest::_Internal::intersects(const StacRequest* msg) {
  return *msg->spatial_.intersects_;
}
const ::epl::protobuf::v1::EnvelopeData&
StacRequest::_Internal::bbox(const StacRequest* msg) {
  return *msg->spatial_.bbox_;
}
const ::epl::protobuf::v1::GeometryRequest&
StacRequest::_Internal::geometry_request(const StacRequest* msg) {
  return *msg->spatial_.geometry_request_;
}
const ::epl::protobuf::v1::TimestampFilter&
StacRequest::_Internal::datetime(const StacRequest* msg) {
  return *msg->temporal_.datetime_;
}
const ::epl::protobuf::v1::TimestampFilter&
StacRequest::_Internal::observed(const StacRequest* msg) {
  return *msg->temporal_.observed_;
}
const ::epl::protobuf::v1::TimestampFilter&
StacRequest::_Internal::created(const StacRequest* msg) {
  return *msg->created_;
}
const ::epl::protobuf::v1::TimestampFilter&
StacRequest::_Internal::updated(const StacRequest* msg) {
  return *msg->updated_;
}
const ::epl::protobuf::v1::ProjectionData&
StacRequest::_Internal::proj(const StacRequest* msg) {
  return *msg->proj_;
}
const ::epl::protobuf::v1::FloatFilter&
StacRequest::_Internal::gsd(const StacRequest* msg) {
  return *msg->gsd_;
}
const ::epl::protobuf::v1::EoRequest&
StacRequest::_Internal::eo(const StacRequest* msg) {
  return *msg->eo_;
}
const ::epl::protobuf::v1::ViewRequest&
StacRequest::_Internal::view(const StacRequest* msg) {
  return *msg->view_;
}
const ::epl::protobuf::v1::LandsatRequest&
StacRequest::_Internal::landsat(const StacRequest* msg) {
  return *msg->landsat_;
}
const ::epl::protobuf::v1::MosaicRequest&
StacRequest::_Internal::mosaic(const StacRequest* msg) {
  return *msg->mosaic_;
}
void StacRequest::set_allocated_id_complex(::epl::protobuf::v1::StringFilter* id_complex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_identity();
  if (id_complex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_complex)->GetArena();
    if (message_arena != submessage_arena) {
      id_complex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_complex, submessage_arena);
    }
    set_has_id_complex();
    identity_.id_complex_ = id_complex;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.id_complex)
}
void StacRequest::clear_id_complex() {
  if (_internal_has_id_complex()) {
    if (GetArena() == nullptr) {
      delete identity_.id_complex_;
    }
    clear_has_identity();
  }
}
void StacRequest::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
void StacRequest::set_allocated_intersects(::epl::protobuf::v1::GeometryData* intersects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_spatial();
  if (intersects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intersects)->GetArena();
    if (message_arena != submessage_arena) {
      intersects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersects, submessage_arena);
    }
    set_has_intersects();
    spatial_.intersects_ = intersects;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.intersects)
}
void StacRequest::clear_intersects() {
  if (_internal_has_intersects()) {
    if (GetArena() == nullptr) {
      delete spatial_.intersects_;
    }
    clear_has_spatial();
  }
}
void StacRequest::set_allocated_bbox(::epl::protobuf::v1::EnvelopeData* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_spatial();
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox)->GetArena();
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    set_has_bbox();
    spatial_.bbox_ = bbox;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.bbox)
}
void StacRequest::clear_bbox() {
  if (_internal_has_bbox()) {
    if (GetArena() == nullptr) {
      delete spatial_.bbox_;
    }
    clear_has_spatial();
  }
}
void StacRequest::set_allocated_geometry_request(::epl::protobuf::v1::GeometryRequest* geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_spatial();
  if (geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_request)->GetArena();
    if (message_arena != submessage_arena) {
      geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_request, submessage_arena);
    }
    set_has_geometry_request();
    spatial_.geometry_request_ = geometry_request;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.geometry_request)
}
void StacRequest::clear_geometry_request() {
  if (_internal_has_geometry_request()) {
    if (GetArena() == nullptr) {
      delete spatial_.geometry_request_;
    }
    clear_has_spatial();
  }
}
void StacRequest::set_allocated_datetime(::epl::protobuf::v1::TimestampFilter* datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal();
  if (datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datetime)->GetArena();
    if (message_arena != submessage_arena) {
      datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime, submessage_arena);
    }
    set_has_datetime();
    temporal_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.datetime)
}
void StacRequest::clear_datetime() {
  if (_internal_has_datetime()) {
    if (GetArena() == nullptr) {
      delete temporal_.datetime_;
    }
    clear_has_temporal();
  }
}
void StacRequest::set_allocated_observed(::epl::protobuf::v1::TimestampFilter* observed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_temporal();
  if (observed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observed)->GetArena();
    if (message_arena != submessage_arena) {
      observed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observed, submessage_arena);
    }
    set_has_observed();
    temporal_.observed_ = observed;
  }
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.v1.StacRequest.observed)
}
void StacRequest::clear_observed() {
  if (_internal_has_observed()) {
    if (GetArena() == nullptr) {
      delete temporal_.observed_;
    }
    clear_has_temporal();
  }
}
void StacRequest::clear_created() {
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void StacRequest::clear_updated() {
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
void StacRequest::clear_proj() {
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
}
void StacRequest::clear_gsd() {
  if (GetArena() == nullptr && gsd_ != nullptr) {
    delete gsd_;
  }
  gsd_ = nullptr;
}
StacRequest::StacRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.StacRequest)
}
StacRequest::StacRequest(const StacRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collection().empty()) {
    collection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection(), 
      GetArena());
  }
  if (from._internal_has_properties()) {
    properties_ = new PROTOBUF_NAMESPACE_ID::Any(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new ::epl::protobuf::v1::TimestampFilter(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::epl::protobuf::v1::TimestampFilter(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  if (from._internal_has_proj()) {
    proj_ = new ::epl::protobuf::v1::ProjectionData(*from.proj_);
  } else {
    proj_ = nullptr;
  }
  if (from._internal_has_gsd()) {
    gsd_ = new ::epl::protobuf::v1::FloatFilter(*from.gsd_);
  } else {
    gsd_ = nullptr;
  }
  if (from._internal_has_eo()) {
    eo_ = new ::epl::protobuf::v1::EoRequest(*from.eo_);
  } else {
    eo_ = nullptr;
  }
  if (from._internal_has_view()) {
    view_ = new ::epl::protobuf::v1::ViewRequest(*from.view_);
  } else {
    view_ = nullptr;
  }
  if (from._internal_has_landsat()) {
    landsat_ = new ::epl::protobuf::v1::LandsatRequest(*from.landsat_);
  } else {
    landsat_ = nullptr;
  }
  if (from._internal_has_mosaic()) {
    mosaic_ = new ::epl::protobuf::v1::MosaicRequest(*from.mosaic_);
  } else {
    mosaic_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&constellation_enum_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(constellation_enum_));
  clear_has_identity();
  switch (from.identity_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kIdComplex: {
      _internal_mutable_id_complex()->::epl::protobuf::v1::StringFilter::MergeFrom(from._internal_id_complex());
      break;
    }
    case IDENTITY_NOT_SET: {
      break;
    }
  }
  clear_has_spatial();
  switch (from.spatial_case()) {
    case kIntersects: {
      _internal_mutable_intersects()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_intersects());
      break;
    }
    case kBbox: {
      _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
      break;
    }
    case kGeometryRequest: {
      _internal_mutable_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_geometry_request());
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  clear_has_temporal();
  switch (from.temporal_case()) {
    case kDatetime: {
      _internal_mutable_datetime()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_datetime());
      break;
    }
    case kObserved: {
      _internal_mutable_observed()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_observed());
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.StacRequest)
}

void StacRequest::SharedCtor() {
collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&properties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&constellation_enum_) -
    reinterpret_cast<char*>(&properties_)) + sizeof(constellation_enum_));
clear_has_identity();
clear_has_spatial();
clear_has_temporal();
}

StacRequest::~StacRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.StacRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StacRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete updated_;
  if (this != internal_default_instance()) delete proj_;
  if (this != internal_default_instance()) delete gsd_;
  if (this != internal_default_instance()) delete eo_;
  if (this != internal_default_instance()) delete view_;
  if (this != internal_default_instance()) delete landsat_;
  if (this != internal_default_instance()) delete mosaic_;
  if (has_identity()) {
    clear_identity();
  }
  if (has_spatial()) {
    clear_spatial();
  }
  if (has_temporal()) {
    clear_temporal();
  }
}

void StacRequest::ArenaDtor(void* object) {
  StacRequest* _this = reinterpret_cast< StacRequest* >(object);
  (void)_this;
}
void StacRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StacRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StacRequest::clear_identity() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.StacRequest)
  switch (identity_case()) {
    case kId: {
      identity_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kIdComplex: {
      if (GetArena() == nullptr) {
        delete identity_.id_complex_;
      }
      break;
    }
    case IDENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTITY_NOT_SET;
}

void StacRequest::clear_spatial() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.StacRequest)
  switch (spatial_case()) {
    case kIntersects: {
      if (GetArena() == nullptr) {
        delete spatial_.intersects_;
      }
      break;
    }
    case kBbox: {
      if (GetArena() == nullptr) {
        delete spatial_.bbox_;
      }
      break;
    }
    case kGeometryRequest: {
      if (GetArena() == nullptr) {
        delete spatial_.geometry_request_;
      }
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SPATIAL_NOT_SET;
}

void StacRequest::clear_temporal() {
// @@protoc_insertion_point(one_of_clear_start:epl.protobuf.v1.StacRequest)
  switch (temporal_case()) {
    case kDatetime: {
      if (GetArena() == nullptr) {
        delete temporal_.datetime_;
      }
      break;
    }
    case kObserved: {
      if (GetArena() == nullptr) {
        delete temporal_.observed_;
      }
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = TEMPORAL_NOT_SET;
}


void StacRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.StacRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_.ClearToEmpty();
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  if (GetArena() == nullptr && proj_ != nullptr) {
    delete proj_;
  }
  proj_ = nullptr;
  if (GetArena() == nullptr && gsd_ != nullptr) {
    delete gsd_;
  }
  gsd_ = nullptr;
  if (GetArena() == nullptr && eo_ != nullptr) {
    delete eo_;
  }
  eo_ = nullptr;
  if (GetArena() == nullptr && view_ != nullptr) {
    delete view_;
  }
  view_ = nullptr;
  if (GetArena() == nullptr && landsat_ != nullptr) {
    delete landsat_;
  }
  landsat_ = nullptr;
  if (GetArena() == nullptr && mosaic_ != nullptr) {
    delete mosaic_;
  }
  mosaic_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constellation_enum_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(constellation_enum_));
  clear_identity();
  clear_spatial();
  clear_temporal();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StacRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.StringFilter id_complex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_complex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_collection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacRequest.collection"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryData intersects = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EnvelopeData bbox = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.GeometryRequest geometry_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.TimestampFilter datetime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.TimestampFilter observed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_observed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.TimestampFilter created = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.TimestampFilter updated = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ProjectionData proj = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_proj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Platform platform_enum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform_enum(static_cast<::epl::protobuf::v1::Platform>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Instrument instrument_enum = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_instrument_enum(static_cast<::epl::protobuf::v1::Instrument>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Constellation constellation_enum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_constellation_enum(static_cast<::epl::protobuf::v1::Constellation>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Mission mission_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mission_enum(static_cast<::epl::protobuf::v1::Mission>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter gsd = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_gsd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.EoRequest eo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_eo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.ViewRequest view = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.LandsatRequest landsat = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_landsat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.MosaicRequest mosaic = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mosaic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StacRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.StacRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // string id = 3;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacRequest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .epl.protobuf.v1.StringFilter id_complex = 4;
  if (_internal_has_id_complex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::id_complex(this), target, stream);
  }

  // string collection = 5;
  if (this->collection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacRequest.collection");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_collection(), target);
  }

  // .google.protobuf.Any properties = 6;
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::properties(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryData intersects = 7;
  if (_internal_has_intersects()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::intersects(this), target, stream);
  }

  // .epl.protobuf.v1.EnvelopeData bbox = 8;
  if (_internal_has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bbox(this), target, stream);
  }

  // .epl.protobuf.v1.GeometryRequest geometry_request = 9;
  if (_internal_has_geometry_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::geometry_request(this), target, stream);
  }

  // .epl.protobuf.v1.TimestampFilter datetime = 10;
  if (_internal_has_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::datetime(this), target, stream);
  }

  // .epl.protobuf.v1.TimestampFilter observed = 11;
  if (_internal_has_observed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::observed(this), target, stream);
  }

  // .epl.protobuf.v1.TimestampFilter created = 12;
  if (this->has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::created(this), target, stream);
  }

  // .epl.protobuf.v1.TimestampFilter updated = 13;
  if (this->has_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::updated(this), target, stream);
  }

  // .epl.protobuf.v1.ProjectionData proj = 14;
  if (this->has_proj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::proj(this), target, stream);
  }

  // .epl.protobuf.v1.Platform platform_enum = 15;
  if (this->platform_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_platform_enum(), target);
  }

  // .epl.protobuf.v1.Instrument instrument_enum = 17;
  if (this->instrument_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_instrument_enum(), target);
  }

  // .epl.protobuf.v1.Constellation constellation_enum = 19;
  if (this->constellation_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_constellation_enum(), target);
  }

  // .epl.protobuf.v1.Mission mission_enum = 21;
  if (this->mission_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_mission_enum(), target);
  }

  // .epl.protobuf.v1.FloatFilter gsd = 23;
  if (this->has_gsd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::gsd(this), target, stream);
  }

  // .epl.protobuf.v1.EoRequest eo = 24;
  if (this->has_eo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::eo(this), target, stream);
  }

  // .epl.protobuf.v1.ViewRequest view = 25;
  if (this->has_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::view(this), target, stream);
  }

  // .epl.protobuf.v1.LandsatRequest landsat = 26;
  if (this->has_landsat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::landsat(this), target, stream);
  }

  // .epl.protobuf.v1.MosaicRequest mosaic = 27;
  if (this->has_mosaic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::mosaic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.StacRequest)
  return target;
}

size_t StacRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.StacRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection = 5;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection());
  }

  // .google.protobuf.Any properties = 6;
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .epl.protobuf.v1.TimestampFilter created = 12;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .epl.protobuf.v1.TimestampFilter updated = 13;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .epl.protobuf.v1.ProjectionData proj = 14;
  if (this->has_proj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proj_);
  }

  // .epl.protobuf.v1.FloatFilter gsd = 23;
  if (this->has_gsd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gsd_);
  }

  // .epl.protobuf.v1.EoRequest eo = 24;
  if (this->has_eo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eo_);
  }

  // .epl.protobuf.v1.ViewRequest view = 25;
  if (this->has_view()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_);
  }

  // .epl.protobuf.v1.LandsatRequest landsat = 26;
  if (this->has_landsat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *landsat_);
  }

  // .epl.protobuf.v1.MosaicRequest mosaic = 27;
  if (this->has_mosaic()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mosaic_);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // .epl.protobuf.v1.Platform platform_enum = 15;
  if (this->platform_enum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform_enum());
  }

  // .epl.protobuf.v1.Mission mission_enum = 21;
  if (this->mission_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mission_enum());
  }

  // .epl.protobuf.v1.Instrument instrument_enum = 17;
  if (this->instrument_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_instrument_enum());
  }

  // .epl.protobuf.v1.Constellation constellation_enum = 19;
  if (this->constellation_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_constellation_enum());
  }

  switch (identity_case()) {
    // string id = 3;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
      break;
    }
    // .epl.protobuf.v1.StringFilter id_complex = 4;
    case kIdComplex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identity_.id_complex_);
      break;
    }
    case IDENTITY_NOT_SET: {
      break;
    }
  }
  switch (spatial_case()) {
    // .epl.protobuf.v1.GeometryData intersects = 7;
    case kIntersects: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spatial_.intersects_);
      break;
    }
    // .epl.protobuf.v1.EnvelopeData bbox = 8;
    case kBbox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spatial_.bbox_);
      break;
    }
    // .epl.protobuf.v1.GeometryRequest geometry_request = 9;
    case kGeometryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spatial_.geometry_request_);
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  switch (temporal_case()) {
    // .epl.protobuf.v1.TimestampFilter datetime = 10;
    case kDatetime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_.datetime_);
      break;
    }
    // .epl.protobuf.v1.TimestampFilter observed = 11;
    case kObserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporal_.observed_);
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StacRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.StacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StacRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StacRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.StacRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.StacRequest)
    MergeFrom(*source);
  }
}

void StacRequest::MergeFrom(const StacRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.StacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection().size() > 0) {
    _internal_set_collection(from._internal_collection());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_properties());
  }
  if (from.has_created()) {
    _internal_mutable_created()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_created());
  }
  if (from.has_updated()) {
    _internal_mutable_updated()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_updated());
  }
  if (from.has_proj()) {
    _internal_mutable_proj()->::epl::protobuf::v1::ProjectionData::MergeFrom(from._internal_proj());
  }
  if (from.has_gsd()) {
    _internal_mutable_gsd()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_gsd());
  }
  if (from.has_eo()) {
    _internal_mutable_eo()->::epl::protobuf::v1::EoRequest::MergeFrom(from._internal_eo());
  }
  if (from.has_view()) {
    _internal_mutable_view()->::epl::protobuf::v1::ViewRequest::MergeFrom(from._internal_view());
  }
  if (from.has_landsat()) {
    _internal_mutable_landsat()->::epl::protobuf::v1::LandsatRequest::MergeFrom(from._internal_landsat());
  }
  if (from.has_mosaic()) {
    _internal_mutable_mosaic()->::epl::protobuf::v1::MosaicRequest::MergeFrom(from._internal_mosaic());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.platform_enum() != 0) {
    _internal_set_platform_enum(from._internal_platform_enum());
  }
  if (from.mission_enum() != 0) {
    _internal_set_mission_enum(from._internal_mission_enum());
  }
  if (from.instrument_enum() != 0) {
    _internal_set_instrument_enum(from._internal_instrument_enum());
  }
  if (from.constellation_enum() != 0) {
    _internal_set_constellation_enum(from._internal_constellation_enum());
  }
  switch (from.identity_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kIdComplex: {
      _internal_mutable_id_complex()->::epl::protobuf::v1::StringFilter::MergeFrom(from._internal_id_complex());
      break;
    }
    case IDENTITY_NOT_SET: {
      break;
    }
  }
  switch (from.spatial_case()) {
    case kIntersects: {
      _internal_mutable_intersects()->::epl::protobuf::v1::GeometryData::MergeFrom(from._internal_intersects());
      break;
    }
    case kBbox: {
      _internal_mutable_bbox()->::epl::protobuf::v1::EnvelopeData::MergeFrom(from._internal_bbox());
      break;
    }
    case kGeometryRequest: {
      _internal_mutable_geometry_request()->::epl::protobuf::v1::GeometryRequest::MergeFrom(from._internal_geometry_request());
      break;
    }
    case SPATIAL_NOT_SET: {
      break;
    }
  }
  switch (from.temporal_case()) {
    case kDatetime: {
      _internal_mutable_datetime()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_datetime());
      break;
    }
    case kObserved: {
      _internal_mutable_observed()->::epl::protobuf::v1::TimestampFilter::MergeFrom(from._internal_observed());
      break;
    }
    case TEMPORAL_NOT_SET: {
      break;
    }
  }
}

void StacRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.StacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StacRequest::CopyFrom(const StacRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.StacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StacRequest::IsInitialized() const {
  return true;
}

void StacRequest::InternalSwap(StacRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StacRequest, constellation_enum_)
      + sizeof(StacRequest::constellation_enum_)
      - PROTOBUF_FIELD_OFFSET(StacRequest, properties_)>(
          reinterpret_cast<char*>(&properties_),
          reinterpret_cast<char*>(&other->properties_));
  swap(identity_, other->identity_);
  swap(spatial_, other->spatial_);
  swap(temporal_, other->temporal_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StacRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class View::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& off_nadir(const View* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& incidence_angle(const View* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& azimuth(const View* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& sun_azimuth(const View* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& sun_elevation(const View* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
View::_Internal::off_nadir(const View* msg) {
  return *msg->off_nadir_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
View::_Internal::incidence_angle(const View* msg) {
  return *msg->incidence_angle_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
View::_Internal::azimuth(const View* msg) {
  return *msg->azimuth_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
View::_Internal::sun_azimuth(const View* msg) {
  return *msg->sun_azimuth_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
View::_Internal::sun_elevation(const View* msg) {
  return *msg->sun_elevation_;
}
void View::clear_off_nadir() {
  if (GetArena() == nullptr && off_nadir_ != nullptr) {
    delete off_nadir_;
  }
  off_nadir_ = nullptr;
}
void View::clear_incidence_angle() {
  if (GetArena() == nullptr && incidence_angle_ != nullptr) {
    delete incidence_angle_;
  }
  incidence_angle_ = nullptr;
}
void View::clear_azimuth() {
  if (GetArena() == nullptr && azimuth_ != nullptr) {
    delete azimuth_;
  }
  azimuth_ = nullptr;
}
void View::clear_sun_azimuth() {
  if (GetArena() == nullptr && sun_azimuth_ != nullptr) {
    delete sun_azimuth_;
  }
  sun_azimuth_ = nullptr;
}
void View::clear_sun_elevation() {
  if (GetArena() == nullptr && sun_elevation_ != nullptr) {
    delete sun_elevation_;
  }
  sun_elevation_ = nullptr;
}
View::View(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.View)
}
View::View(const View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_off_nadir()) {
    off_nadir_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.off_nadir_);
  } else {
    off_nadir_ = nullptr;
  }
  if (from._internal_has_incidence_angle()) {
    incidence_angle_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.incidence_angle_);
  } else {
    incidence_angle_ = nullptr;
  }
  if (from._internal_has_azimuth()) {
    azimuth_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.azimuth_);
  } else {
    azimuth_ = nullptr;
  }
  if (from._internal_has_sun_azimuth()) {
    sun_azimuth_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.sun_azimuth_);
  } else {
    sun_azimuth_ = nullptr;
  }
  if (from._internal_has_sun_elevation()) {
    sun_elevation_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.sun_elevation_);
  } else {
    sun_elevation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.View)
}

void View::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&off_nadir_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sun_elevation_) -
    reinterpret_cast<char*>(&off_nadir_)) + sizeof(sun_elevation_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.View)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void View::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete off_nadir_;
  if (this != internal_default_instance()) delete incidence_angle_;
  if (this != internal_default_instance()) delete azimuth_;
  if (this != internal_default_instance()) delete sun_azimuth_;
  if (this != internal_default_instance()) delete sun_elevation_;
}

void View::ArenaDtor(void* object) {
  View* _this = reinterpret_cast< View* >(object);
  (void)_this;
}
void View::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void View::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && off_nadir_ != nullptr) {
    delete off_nadir_;
  }
  off_nadir_ = nullptr;
  if (GetArena() == nullptr && incidence_angle_ != nullptr) {
    delete incidence_angle_;
  }
  incidence_angle_ = nullptr;
  if (GetArena() == nullptr && azimuth_ != nullptr) {
    delete azimuth_;
  }
  azimuth_ = nullptr;
  if (GetArena() == nullptr && sun_azimuth_ != nullptr) {
    delete sun_azimuth_;
  }
  sun_azimuth_ = nullptr;
  if (GetArena() == nullptr && sun_elevation_ != nullptr) {
    delete sun_elevation_;
  }
  sun_elevation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue off_nadir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_off_nadir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue incidence_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_incidence_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue azimuth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_azimuth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue sun_azimuth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun_azimuth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue sun_elevation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun_elevation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* View::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue off_nadir = 1;
  if (this->has_off_nadir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::off_nadir(this), target, stream);
  }

  // .google.protobuf.FloatValue incidence_angle = 2;
  if (this->has_incidence_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::incidence_angle(this), target, stream);
  }

  // .google.protobuf.FloatValue azimuth = 3;
  if (this->has_azimuth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::azimuth(this), target, stream);
  }

  // .google.protobuf.FloatValue sun_azimuth = 4;
  if (this->has_sun_azimuth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sun_azimuth(this), target, stream);
  }

  // .google.protobuf.FloatValue sun_elevation = 5;
  if (this->has_sun_elevation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sun_elevation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue off_nadir = 1;
  if (this->has_off_nadir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *off_nadir_);
  }

  // .google.protobuf.FloatValue incidence_angle = 2;
  if (this->has_incidence_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incidence_angle_);
  }

  // .google.protobuf.FloatValue azimuth = 3;
  if (this->has_azimuth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *azimuth_);
  }

  // .google.protobuf.FloatValue sun_azimuth = 4;
  if (this->has_sun_azimuth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_azimuth_);
  }

  // .google.protobuf.FloatValue sun_elevation = 5;
  if (this->has_sun_elevation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_elevation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_off_nadir()) {
    _internal_mutable_off_nadir()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_off_nadir());
  }
  if (from.has_incidence_angle()) {
    _internal_mutable_incidence_angle()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_incidence_angle());
  }
  if (from.has_azimuth()) {
    _internal_mutable_azimuth()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_azimuth());
  }
  if (from.has_sun_azimuth()) {
    _internal_mutable_sun_azimuth()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_sun_azimuth());
  }
  if (from.has_sun_elevation()) {
    _internal_mutable_sun_elevation()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_sun_elevation());
  }
}

void View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(View, sun_elevation_)
      + sizeof(View::sun_elevation_)
      - PROTOBUF_FIELD_OFFSET(View, off_nadir_)>(
          reinterpret_cast<char*>(&off_nadir_),
          reinterpret_cast<char*>(&other->off_nadir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata View::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ViewRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::FloatFilter& off_nadir(const ViewRequest* msg);
  static const ::epl::protobuf::v1::FloatFilter& incidence_angle(const ViewRequest* msg);
  static const ::epl::protobuf::v1::FloatFilter& azimuth(const ViewRequest* msg);
  static const ::epl::protobuf::v1::FloatFilter& sun_azimuth(const ViewRequest* msg);
  static const ::epl::protobuf::v1::FloatFilter& sun_elevation(const ViewRequest* msg);
};

const ::epl::protobuf::v1::FloatFilter&
ViewRequest::_Internal::off_nadir(const ViewRequest* msg) {
  return *msg->off_nadir_;
}
const ::epl::protobuf::v1::FloatFilter&
ViewRequest::_Internal::incidence_angle(const ViewRequest* msg) {
  return *msg->incidence_angle_;
}
const ::epl::protobuf::v1::FloatFilter&
ViewRequest::_Internal::azimuth(const ViewRequest* msg) {
  return *msg->azimuth_;
}
const ::epl::protobuf::v1::FloatFilter&
ViewRequest::_Internal::sun_azimuth(const ViewRequest* msg) {
  return *msg->sun_azimuth_;
}
const ::epl::protobuf::v1::FloatFilter&
ViewRequest::_Internal::sun_elevation(const ViewRequest* msg) {
  return *msg->sun_elevation_;
}
void ViewRequest::clear_off_nadir() {
  if (GetArena() == nullptr && off_nadir_ != nullptr) {
    delete off_nadir_;
  }
  off_nadir_ = nullptr;
}
void ViewRequest::clear_incidence_angle() {
  if (GetArena() == nullptr && incidence_angle_ != nullptr) {
    delete incidence_angle_;
  }
  incidence_angle_ = nullptr;
}
void ViewRequest::clear_azimuth() {
  if (GetArena() == nullptr && azimuth_ != nullptr) {
    delete azimuth_;
  }
  azimuth_ = nullptr;
}
void ViewRequest::clear_sun_azimuth() {
  if (GetArena() == nullptr && sun_azimuth_ != nullptr) {
    delete sun_azimuth_;
  }
  sun_azimuth_ = nullptr;
}
void ViewRequest::clear_sun_elevation() {
  if (GetArena() == nullptr && sun_elevation_ != nullptr) {
    delete sun_elevation_;
  }
  sun_elevation_ = nullptr;
}
ViewRequest::ViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.ViewRequest)
}
ViewRequest::ViewRequest(const ViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_off_nadir()) {
    off_nadir_ = new ::epl::protobuf::v1::FloatFilter(*from.off_nadir_);
  } else {
    off_nadir_ = nullptr;
  }
  if (from._internal_has_incidence_angle()) {
    incidence_angle_ = new ::epl::protobuf::v1::FloatFilter(*from.incidence_angle_);
  } else {
    incidence_angle_ = nullptr;
  }
  if (from._internal_has_azimuth()) {
    azimuth_ = new ::epl::protobuf::v1::FloatFilter(*from.azimuth_);
  } else {
    azimuth_ = nullptr;
  }
  if (from._internal_has_sun_azimuth()) {
    sun_azimuth_ = new ::epl::protobuf::v1::FloatFilter(*from.sun_azimuth_);
  } else {
    sun_azimuth_ = nullptr;
  }
  if (from._internal_has_sun_elevation()) {
    sun_elevation_ = new ::epl::protobuf::v1::FloatFilter(*from.sun_elevation_);
  } else {
    sun_elevation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.ViewRequest)
}

void ViewRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&off_nadir_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sun_elevation_) -
    reinterpret_cast<char*>(&off_nadir_)) + sizeof(sun_elevation_));
}

ViewRequest::~ViewRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.ViewRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete off_nadir_;
  if (this != internal_default_instance()) delete incidence_angle_;
  if (this != internal_default_instance()) delete azimuth_;
  if (this != internal_default_instance()) delete sun_azimuth_;
  if (this != internal_default_instance()) delete sun_elevation_;
}

void ViewRequest::ArenaDtor(void* object) {
  ViewRequest* _this = reinterpret_cast< ViewRequest* >(object);
  (void)_this;
}
void ViewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.ViewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && off_nadir_ != nullptr) {
    delete off_nadir_;
  }
  off_nadir_ = nullptr;
  if (GetArena() == nullptr && incidence_angle_ != nullptr) {
    delete incidence_angle_;
  }
  incidence_angle_ = nullptr;
  if (GetArena() == nullptr && azimuth_ != nullptr) {
    delete azimuth_;
  }
  azimuth_ = nullptr;
  if (GetArena() == nullptr && sun_azimuth_ != nullptr) {
    delete sun_azimuth_;
  }
  sun_azimuth_ = nullptr;
  if (GetArena() == nullptr && sun_elevation_ != nullptr) {
    delete sun_elevation_;
  }
  sun_elevation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.FloatFilter off_nadir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_off_nadir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter incidence_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_incidence_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter azimuth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_azimuth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter sun_azimuth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun_azimuth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter sun_elevation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun_elevation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.ViewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.FloatFilter off_nadir = 1;
  if (this->has_off_nadir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::off_nadir(this), target, stream);
  }

  // .epl.protobuf.v1.FloatFilter incidence_angle = 2;
  if (this->has_incidence_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::incidence_angle(this), target, stream);
  }

  // .epl.protobuf.v1.FloatFilter azimuth = 3;
  if (this->has_azimuth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::azimuth(this), target, stream);
  }

  // .epl.protobuf.v1.FloatFilter sun_azimuth = 4;
  if (this->has_sun_azimuth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sun_azimuth(this), target, stream);
  }

  // .epl.protobuf.v1.FloatFilter sun_elevation = 5;
  if (this->has_sun_elevation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sun_elevation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.ViewRequest)
  return target;
}

size_t ViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.ViewRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.FloatFilter off_nadir = 1;
  if (this->has_off_nadir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *off_nadir_);
  }

  // .epl.protobuf.v1.FloatFilter incidence_angle = 2;
  if (this->has_incidence_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incidence_angle_);
  }

  // .epl.protobuf.v1.FloatFilter azimuth = 3;
  if (this->has_azimuth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *azimuth_);
  }

  // .epl.protobuf.v1.FloatFilter sun_azimuth = 4;
  if (this->has_sun_azimuth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_azimuth_);
  }

  // .epl.protobuf.v1.FloatFilter sun_elevation = 5;
  if (this->has_sun_elevation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_elevation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.ViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.ViewRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.ViewRequest)
    MergeFrom(*source);
  }
}

void ViewRequest::MergeFrom(const ViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.ViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_off_nadir()) {
    _internal_mutable_off_nadir()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_off_nadir());
  }
  if (from.has_incidence_angle()) {
    _internal_mutable_incidence_angle()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_incidence_angle());
  }
  if (from.has_azimuth()) {
    _internal_mutable_azimuth()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_azimuth());
  }
  if (from.has_sun_azimuth()) {
    _internal_mutable_sun_azimuth()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_sun_azimuth());
  }
  if (from.has_sun_elevation()) {
    _internal_mutable_sun_elevation()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_sun_elevation());
  }
}

void ViewRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.ViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewRequest::CopyFrom(const ViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.ViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewRequest::IsInitialized() const {
  return true;
}

void ViewRequest::InternalSwap(ViewRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewRequest, sun_elevation_)
      + sizeof(ViewRequest::sun_elevation_)
      - PROTOBUF_FIELD_OFFSET(ViewRequest, off_nadir_)>(
          reinterpret_cast<char*>(&off_nadir_),
          reinterpret_cast<char*>(&other->off_nadir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sat::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& relative_orbit(const Sat* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
Sat::_Internal::relative_orbit(const Sat* msg) {
  return *msg->relative_orbit_;
}
void Sat::clear_relative_orbit() {
  if (GetArena() == nullptr && relative_orbit_ != nullptr) {
    delete relative_orbit_;
  }
  relative_orbit_ = nullptr;
}
Sat::Sat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Sat)
}
Sat::Sat(const Sat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relative_orbit()) {
    relative_orbit_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.relative_orbit_);
  } else {
    relative_orbit_ = nullptr;
  }
  orbit_state_ = from.orbit_state_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Sat)
}

void Sat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&relative_orbit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orbit_state_) -
    reinterpret_cast<char*>(&relative_orbit_)) + sizeof(orbit_state_));
}

Sat::~Sat() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Sat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete relative_orbit_;
}

void Sat::ArenaDtor(void* object) {
  Sat* _this = reinterpret_cast< Sat* >(object);
  (void)_this;
}
void Sat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sat::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Sat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && relative_orbit_ != nullptr) {
    delete relative_orbit_;
  }
  relative_orbit_ = nullptr;
  orbit_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_orbit_state(static_cast<::epl::protobuf::v1::Sat_OrbitState>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value relative_orbit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_orbit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Sat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  if (this->orbit_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_orbit_state(), target);
  }

  // .google.protobuf.UInt32Value relative_orbit = 6;
  if (this->has_relative_orbit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::relative_orbit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Sat)
  return target;
}

size_t Sat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Sat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value relative_orbit = 6;
  if (this->has_relative_orbit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_orbit_);
  }

  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  if (this->orbit_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orbit_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Sat)
  GOOGLE_DCHECK_NE(&from, this);
  const Sat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Sat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Sat)
    MergeFrom(*source);
  }
}

void Sat::MergeFrom(const Sat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Sat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relative_orbit()) {
    _internal_mutable_relative_orbit()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_relative_orbit());
  }
  if (from.orbit_state() != 0) {
    _internal_set_orbit_state(from._internal_orbit_state());
  }
}

void Sat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Sat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sat::CopyFrom(const Sat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Sat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sat::IsInitialized() const {
  return true;
}

void Sat::InternalSwap(Sat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sat, orbit_state_)
      + sizeof(Sat::orbit_state_)
      - PROTOBUF_FIELD_OFFSET(Sat, relative_orbit_)>(
          reinterpret_cast<char*>(&relative_orbit_),
          reinterpret_cast<char*>(&other->relative_orbit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SatRequest::_Internal {
 public:
};

SatRequest::SatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.SatRequest)
}
SatRequest::SatRequest(const SatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&orbit_state_, &from.orbit_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_orbit_) -
    reinterpret_cast<char*>(&orbit_state_)) + sizeof(relative_orbit_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.SatRequest)
}

void SatRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&orbit_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_orbit_) -
    reinterpret_cast<char*>(&orbit_state_)) + sizeof(relative_orbit_));
}

SatRequest::~SatRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.SatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SatRequest::ArenaDtor(void* object) {
  SatRequest* _this = reinterpret_cast< SatRequest* >(object);
  (void)_this;
}
void SatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.SatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&orbit_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_orbit_) -
      reinterpret_cast<char*>(&orbit_state_)) + sizeof(relative_orbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_orbit_state(static_cast<::epl::protobuf::v1::Sat_OrbitState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 relative_orbit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          relative_orbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.SatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  if (this->orbit_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_orbit_state(), target);
  }

  // uint32 relative_orbit = 6;
  if (this->relative_orbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_relative_orbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.SatRequest)
  return target;
}

size_t SatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.SatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.Sat.OrbitState orbit_state = 1;
  if (this->orbit_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orbit_state());
  }

  // uint32 relative_orbit = 6;
  if (this->relative_orbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relative_orbit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.SatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.SatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.SatRequest)
    MergeFrom(*source);
  }
}

void SatRequest::MergeFrom(const SatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.SatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orbit_state() != 0) {
    _internal_set_orbit_state(from._internal_orbit_state());
  }
  if (from.relative_orbit() != 0) {
    _internal_set_relative_orbit(from._internal_relative_orbit());
  }
}

void SatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.SatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatRequest::CopyFrom(const SatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.SatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatRequest::IsInitialized() const {
  return true;
}

void SatRequest::InternalSwap(SatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatRequest, relative_orbit_)
      + sizeof(SatRequest::relative_orbit_)
      - PROTOBUF_FIELD_OFFSET(SatRequest, orbit_state_)>(
          reinterpret_cast<char*>(&orbit_state_),
          reinterpret_cast<char*>(&other->orbit_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Eo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& cloud_cover(const Eo* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
Eo::_Internal::cloud_cover(const Eo* msg) {
  return *msg->cloud_cover_;
}
void Eo::clear_cloud_cover() {
  if (GetArena() == nullptr && cloud_cover_ != nullptr) {
    delete cloud_cover_;
  }
  cloud_cover_ = nullptr;
}
Eo::Eo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Eo)
}
Eo::Eo(const Eo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cloud_cover()) {
    cloud_cover_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.cloud_cover_);
  } else {
    cloud_cover_ = nullptr;
  }
  bands_ = from.bands_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Eo)
}

void Eo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_cover_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bands_) -
    reinterpret_cast<char*>(&cloud_cover_)) + sizeof(bands_));
}

Eo::~Eo() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Eo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Eo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cloud_cover_;
}

void Eo::ArenaDtor(void* object) {
  Eo* _this = reinterpret_cast< Eo* >(object);
  (void)_this;
}
void Eo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Eo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Eo::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Eo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cloud_cover_ != nullptr) {
    delete cloud_cover_;
  }
  cloud_cover_ = nullptr;
  bands_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Eo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue cloud_cover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_cover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Eo.Band bands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bands(static_cast<::epl::protobuf::v1::Eo_Band>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Eo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue cloud_cover = 1;
  if (this->has_cloud_cover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cloud_cover(this), target, stream);
  }

  // .epl.protobuf.v1.Eo.Band bands = 2;
  if (this->bands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bands(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Eo)
  return target;
}

size_t Eo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Eo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue cloud_cover = 1;
  if (this->has_cloud_cover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_cover_);
  }

  // .epl.protobuf.v1.Eo.Band bands = 2;
  if (this->bands() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bands());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Eo)
  GOOGLE_DCHECK_NE(&from, this);
  const Eo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Eo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Eo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Eo)
    MergeFrom(*source);
  }
}

void Eo::MergeFrom(const Eo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Eo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cloud_cover()) {
    _internal_mutable_cloud_cover()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_cloud_cover());
  }
  if (from.bands() != 0) {
    _internal_set_bands(from._internal_bands());
  }
}

void Eo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Eo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eo::CopyFrom(const Eo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Eo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eo::IsInitialized() const {
  return true;
}

void Eo::InternalSwap(Eo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Eo, bands_)
      + sizeof(Eo::bands_)
      - PROTOBUF_FIELD_OFFSET(Eo, cloud_cover_)>(
          reinterpret_cast<char*>(&cloud_cover_),
          reinterpret_cast<char*>(&other->cloud_cover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Eo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EoRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::FloatFilter& cloud_cover(const EoRequest* msg);
};

const ::epl::protobuf::v1::FloatFilter&
EoRequest::_Internal::cloud_cover(const EoRequest* msg) {
  return *msg->cloud_cover_;
}
void EoRequest::clear_cloud_cover() {
  if (GetArena() == nullptr && cloud_cover_ != nullptr) {
    delete cloud_cover_;
  }
  cloud_cover_ = nullptr;
}
EoRequest::EoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.EoRequest)
}
EoRequest::EoRequest(const EoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cloud_cover()) {
    cloud_cover_ = new ::epl::protobuf::v1::FloatFilter(*from.cloud_cover_);
  } else {
    cloud_cover_ = nullptr;
  }
  bands_ = from.bands_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.EoRequest)
}

void EoRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_cover_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bands_) -
    reinterpret_cast<char*>(&cloud_cover_)) + sizeof(bands_));
}

EoRequest::~EoRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.EoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cloud_cover_;
}

void EoRequest::ArenaDtor(void* object) {
  EoRequest* _this = reinterpret_cast< EoRequest* >(object);
  (void)_this;
}
void EoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.EoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cloud_cover_ != nullptr) {
    delete cloud_cover_;
  }
  cloud_cover_ = nullptr;
  bands_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.FloatFilter cloud_cover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_cover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Eo.Band bands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bands(static_cast<::epl::protobuf::v1::Eo_Band>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.EoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.FloatFilter cloud_cover = 1;
  if (this->has_cloud_cover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cloud_cover(this), target, stream);
  }

  // .epl.protobuf.v1.Eo.Band bands = 2;
  if (this->bands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bands(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.EoRequest)
  return target;
}

size_t EoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.EoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.FloatFilter cloud_cover = 1;
  if (this->has_cloud_cover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_cover_);
  }

  // .epl.protobuf.v1.Eo.Band bands = 2;
  if (this->bands() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bands());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.EoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.EoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.EoRequest)
    MergeFrom(*source);
  }
}

void EoRequest::MergeFrom(const EoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.EoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cloud_cover()) {
    _internal_mutable_cloud_cover()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_cloud_cover());
  }
  if (from.bands() != 0) {
    _internal_set_bands(from._internal_bands());
  }
}

void EoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.EoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EoRequest::CopyFrom(const EoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.EoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EoRequest::IsInitialized() const {
  return true;
}

void EoRequest::InternalSwap(EoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EoRequest, bands_)
      + sizeof(EoRequest::bands_)
      - PROTOBUF_FIELD_OFFSET(EoRequest, cloud_cover_)>(
          reinterpret_cast<char*>(&cloud_cover_),
          reinterpret_cast<char*>(&other->cloud_cover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  href_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_href().empty()) {
    href_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_href(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  bucket_manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket_manager().empty()) {
    bucket_manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket_manager(), 
      GetArena());
  }
  bucket_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket_region().empty()) {
    bucket_region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket_region(), 
      GetArena());
  }
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket().empty()) {
    bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket(), 
      GetArena());
  }
  object_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_path().empty()) {
    object_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_path(), 
      GetArena());
  }
  ::memcpy(&eo_bands_, &from.eo_bands_,
    static_cast<size_t>(reinterpret_cast<char*>(&requester_pays_) -
    reinterpret_cast<char*>(&eo_bands_)) + sizeof(requester_pays_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Asset)
}

void Asset::SharedCtor() {
href_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bucket_manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bucket_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eo_bands_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requester_pays_) -
    reinterpret_cast<char*>(&eo_bands_)) + sizeof(requester_pays_));
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  href_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_manager_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  href_.ClearToEmpty();
  type_.ClearToEmpty();
  bucket_manager_.ClearToEmpty();
  bucket_region_.ClearToEmpty();
  bucket_.ClearToEmpty();
  object_path_.ClearToEmpty();
  ::memset(&eo_bands_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requester_pays_) -
      reinterpret_cast<char*>(&eo_bands_)) + sizeof(requester_pays_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string href = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_href();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.href"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Eo.Band eo_bands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eo_bands(static_cast<::epl::protobuf::v1::Eo_Band>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.AssetType asset_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_asset_type(static_cast<::epl::protobuf::v1::AssetType>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.CloudPlatform cloud_platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cloud_platform(static_cast<::epl::protobuf::v1::CloudPlatform>(val));
        } else goto handle_unusual;
        continue;
      // string bucket_manager = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bucket_manager();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.bucket_manager"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bucket_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bucket_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.bucket_region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bucket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.bucket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_object_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Asset.object_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool requester_pays = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          requester_pays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string href = 1;
  if (this->href().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_href().data(), static_cast<int>(this->_internal_href().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.href");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_href(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .epl.protobuf.v1.Eo.Band eo_bands = 3;
  if (this->eo_bands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_eo_bands(), target);
  }

  // .epl.protobuf.v1.AssetType asset_type = 4;
  if (this->asset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_asset_type(), target);
  }

  // .epl.protobuf.v1.CloudPlatform cloud_platform = 5;
  if (this->cloud_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cloud_platform(), target);
  }

  // string bucket_manager = 6;
  if (this->bucket_manager().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_manager().data(), static_cast<int>(this->_internal_bucket_manager().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.bucket_manager");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bucket_manager(), target);
  }

  // string bucket_region = 7;
  if (this->bucket_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_region().data(), static_cast<int>(this->_internal_bucket_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.bucket_region");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bucket_region(), target);
  }

  // string bucket = 8;
  if (this->bucket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.bucket");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bucket(), target);
  }

  // string object_path = 9;
  if (this->object_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_path().data(), static_cast<int>(this->_internal_object_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Asset.object_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_object_path(), target);
  }

  // bool requester_pays = 10;
  if (this->requester_pays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_requester_pays(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string href = 1;
  if (this->href().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_href());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string bucket_manager = 6;
  if (this->bucket_manager().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_manager());
  }

  // string bucket_region = 7;
  if (this->bucket_region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_region());
  }

  // string bucket = 8;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string object_path = 9;
  if (this->object_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_path());
  }

  // .epl.protobuf.v1.Eo.Band eo_bands = 3;
  if (this->eo_bands() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eo_bands());
  }

  // .epl.protobuf.v1.AssetType asset_type = 4;
  if (this->asset_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
  }

  // .epl.protobuf.v1.CloudPlatform cloud_platform = 5;
  if (this->cloud_platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cloud_platform());
  }

  // bool requester_pays = 10;
  if (this->requester_pays() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.href().size() > 0) {
    _internal_set_href(from._internal_href());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.bucket_manager().size() > 0) {
    _internal_set_bucket_manager(from._internal_bucket_manager());
  }
  if (from.bucket_region().size() > 0) {
    _internal_set_bucket_region(from._internal_bucket_region());
  }
  if (from.bucket().size() > 0) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (from.object_path().size() > 0) {
    _internal_set_object_path(from._internal_object_path());
  }
  if (from.eo_bands() != 0) {
    _internal_set_eo_bands(from._internal_eo_bands());
  }
  if (from.asset_type() != 0) {
    _internal_set_asset_type(from._internal_asset_type());
  }
  if (from.cloud_platform() != 0) {
    _internal_set_cloud_platform(from._internal_cloud_platform());
  }
  if (from.requester_pays() != 0) {
    _internal_set_requester_pays(from._internal_requester_pays());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  href_.Swap(&other->href_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bucket_manager_.Swap(&other->bucket_manager_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bucket_region_.Swap(&other->bucket_region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  object_path_.Swap(&other->object_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Asset, requester_pays_)
      + sizeof(Asset::requester_pays_)
      - PROTOBUF_FIELD_OFFSET(Asset, eo_bands_)>(
          reinterpret_cast<char*>(&eo_bands_),
          reinterpret_cast<char*>(&other->eo_bands_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DatetimeRange::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const DatetimeRange* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const DatetimeRange* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DatetimeRange::_Internal::start(const DatetimeRange* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DatetimeRange::_Internal::end(const DatetimeRange* msg) {
  return *msg->end_;
}
void DatetimeRange::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void DatetimeRange::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
DatetimeRange::DatetimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.DatetimeRange)
}
DatetimeRange::DatetimeRange(const DatetimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.DatetimeRange)
}

void DatetimeRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DatetimeRange::~DatetimeRange() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.DatetimeRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DatetimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DatetimeRange::ArenaDtor(void* object) {
  DatetimeRange* _this = reinterpret_cast< DatetimeRange* >(object);
  (void)_this;
}
void DatetimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatetimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatetimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.DatetimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatetimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatetimeRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.DatetimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.DatetimeRange)
  return target;
}

size_t DatetimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.DatetimeRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatetimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.DatetimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DatetimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatetimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.DatetimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.DatetimeRange)
    MergeFrom(*source);
  }
}

void DatetimeRange::MergeFrom(const DatetimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.DatetimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
}

void DatetimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.DatetimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatetimeRange::CopyFrom(const DatetimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.DatetimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatetimeRange::IsInitialized() const {
  return true;
}

void DatetimeRange::InternalSwap(DatetimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatetimeRange, end_)
      + sizeof(DatetimeRange::end_)
      - PROTOBUF_FIELD_OFFSET(DatetimeRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatetimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StacDbResponse::_Internal {
 public:
};

StacDbResponse::StacDbResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.StacDbResponse)
}
StacDbResponse::StacDbResponse(const StacDbResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_id().empty()) {
    data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_id(), 
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.StacDbResponse)
}

void StacDbResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(status_code_));
}

StacDbResponse::~StacDbResponse() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.StacDbResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StacDbResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StacDbResponse::ArenaDtor(void* object) {
  StacDbResponse* _this = reinterpret_cast< StacDbResponse* >(object);
  (void)_this;
}
void StacDbResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StacDbResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StacDbResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.StacDbResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  data_id_.ClearToEmpty();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StacDbResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacDbResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.StacDbResponse.data_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StacDbResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.StacDbResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacDbResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int32 status_code = 2;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status_code(), target);
  }

  // string data_id = 3;
  if (this->data_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_id().data(), static_cast<int>(this->_internal_data_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.StacDbResponse.data_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data_id(), target);
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.StacDbResponse)
  return target;
}

size_t StacDbResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.StacDbResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string data_id = 3;
  if (this->data_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_id());
  }

  // uint64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // int32 status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StacDbResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.StacDbResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StacDbResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StacDbResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.StacDbResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.StacDbResponse)
    MergeFrom(*source);
  }
}

void StacDbResponse::MergeFrom(const StacDbResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.StacDbResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.data_id().size() > 0) {
    _internal_set_data_id(from._internal_data_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void StacDbResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.StacDbResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StacDbResponse::CopyFrom(const StacDbResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.StacDbResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StacDbResponse::IsInitialized() const {
  return true;
}

void StacDbResponse::InternalSwap(StacDbResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_id_.Swap(&other->data_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StacDbResponse, status_code_)
      + sizeof(StacDbResponse::status_code_)
      - PROTOBUF_FIELD_OFFSET(StacDbResponse, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StacDbResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sar::_Internal {
 public:
};

Sar::Sar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Sar)
}
Sar::Sar(const Sar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platform_ = from.platform_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Sar)
}

void Sar::SharedCtor() {
platform_ = 0;
}

Sar::~Sar() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Sar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Sar::ArenaDtor(void* object) {
  Sar* _this = reinterpret_cast< Sar* >(object);
  (void)_this;
}
void Sar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sar::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Sar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platform_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.v1.Sar.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::epl::protobuf::v1::Sar_Platform>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Sar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.v1.Sar.Platform platform = 1;
  if (this->platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Sar)
  return target;
}

size_t Sar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Sar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.v1.Sar.Platform platform = 1;
  if (this->platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Sar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Sar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Sar)
    MergeFrom(*source);
  }
}

void Sar::MergeFrom(const Sar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Sar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
}

void Sar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Sar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sar::CopyFrom(const Sar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Sar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sar::IsInitialized() const {
  return true;
}

void Sar::InternalSwap(Sar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(platform_, other->platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Landsat::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& cloud_cover_land(const Landsat* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
Landsat::_Internal::cloud_cover_land(const Landsat* msg) {
  return *msg->cloud_cover_land_;
}
void Landsat::clear_cloud_cover_land() {
  if (GetArena() == nullptr && cloud_cover_land_ != nullptr) {
    delete cloud_cover_land_;
  }
  cloud_cover_land_ = nullptr;
}
Landsat::Landsat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Landsat)
}
Landsat::Landsat(const Landsat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_id().empty()) {
    scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_id(), 
      GetArena());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArena());
  }
  if (from._internal_has_cloud_cover_land()) {
    cloud_cover_land_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.cloud_cover_land_);
  } else {
    cloud_cover_land_ = nullptr;
  }
  ::memcpy(&processing_level_, &from.processing_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrs_type_) -
    reinterpret_cast<char*>(&processing_level_)) + sizeof(wrs_type_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Landsat)
}

void Landsat::SharedCtor() {
scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_cover_land_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wrs_type_) -
    reinterpret_cast<char*>(&cloud_cover_land_)) + sizeof(wrs_type_));
}

Landsat::~Landsat() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Landsat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Landsat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scene_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cloud_cover_land_;
}

void Landsat::ArenaDtor(void* object) {
  Landsat* _this = reinterpret_cast< Landsat* >(object);
  (void)_this;
}
void Landsat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Landsat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Landsat::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Landsat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  if (GetArena() == nullptr && cloud_cover_land_ != nullptr) {
    delete cloud_cover_land_;
  }
  cloud_cover_land_ = nullptr;
  ::memset(&processing_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wrs_type_) -
      reinterpret_cast<char*>(&processing_level_)) + sizeof(wrs_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Landsat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scene_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Landsat.scene_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Landsat.product_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_processing_level(static_cast<::epl::protobuf::v1::Landsat_ProcessingLevel>(val));
        } else goto handle_unusual;
        continue;
      // int32 wrs_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wrs_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wrs_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wrs_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue cloud_cover_land = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_cover_land(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Landsat.WRSType wrs_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wrs_type(static_cast<::epl::protobuf::v1::Landsat_WRSType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Landsat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Landsat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Landsat.scene_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scene_id(), target);
  }

  // string product_id = 2;
  if (this->product_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Landsat.product_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_id(), target);
  }

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  if (this->processing_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_processing_level(), target);
  }

  // int32 wrs_path = 4;
  if (this->wrs_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wrs_path(), target);
  }

  // int32 wrs_row = 5;
  if (this->wrs_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wrs_row(), target);
  }

  // .google.protobuf.FloatValue cloud_cover_land = 6;
  if (this->has_cloud_cover_land()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cloud_cover_land(this), target, stream);
  }

  // .epl.protobuf.v1.Landsat.WRSType wrs_type = 7;
  if (this->wrs_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_wrs_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Landsat)
  return target;
}

size_t Landsat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Landsat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_id());
  }

  // string product_id = 2;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // .google.protobuf.FloatValue cloud_cover_land = 6;
  if (this->has_cloud_cover_land()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_cover_land_);
  }

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  if (this->processing_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_processing_level());
  }

  // int32 wrs_path = 4;
  if (this->wrs_path() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrs_path());
  }

  // int32 wrs_row = 5;
  if (this->wrs_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrs_row());
  }

  // .epl.protobuf.v1.Landsat.WRSType wrs_type = 7;
  if (this->wrs_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wrs_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landsat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Landsat)
  GOOGLE_DCHECK_NE(&from, this);
  const Landsat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Landsat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Landsat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Landsat)
    MergeFrom(*source);
  }
}

void Landsat::MergeFrom(const Landsat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Landsat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id().size() > 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.product_id().size() > 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.has_cloud_cover_land()) {
    _internal_mutable_cloud_cover_land()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_cloud_cover_land());
  }
  if (from.processing_level() != 0) {
    _internal_set_processing_level(from._internal_processing_level());
  }
  if (from.wrs_path() != 0) {
    _internal_set_wrs_path(from._internal_wrs_path());
  }
  if (from.wrs_row() != 0) {
    _internal_set_wrs_row(from._internal_wrs_row());
  }
  if (from.wrs_type() != 0) {
    _internal_set_wrs_type(from._internal_wrs_type());
  }
}

void Landsat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Landsat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landsat::CopyFrom(const Landsat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Landsat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landsat::IsInitialized() const {
  return true;
}

void Landsat::InternalSwap(Landsat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scene_id_.Swap(&other->scene_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Landsat, wrs_type_)
      + sizeof(Landsat::wrs_type_)
      - PROTOBUF_FIELD_OFFSET(Landsat, cloud_cover_land_)>(
          reinterpret_cast<char*>(&cloud_cover_land_),
          reinterpret_cast<char*>(&other->cloud_cover_land_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Landsat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LandsatRequest::_Internal {
 public:
  static const ::epl::protobuf::v1::FloatFilter& cloud_cover_land(const LandsatRequest* msg);
};

const ::epl::protobuf::v1::FloatFilter&
LandsatRequest::_Internal::cloud_cover_land(const LandsatRequest* msg) {
  return *msg->cloud_cover_land_;
}
void LandsatRequest::clear_cloud_cover_land() {
  if (GetArena() == nullptr && cloud_cover_land_ != nullptr) {
    delete cloud_cover_land_;
  }
  cloud_cover_land_ = nullptr;
}
LandsatRequest::LandsatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.LandsatRequest)
}
LandsatRequest::LandsatRequest(const LandsatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_id().empty()) {
    scene_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scene_id(), 
      GetArena());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArena());
  }
  if (from._internal_has_cloud_cover_land()) {
    cloud_cover_land_ = new ::epl::protobuf::v1::FloatFilter(*from.cloud_cover_land_);
  } else {
    cloud_cover_land_ = nullptr;
  }
  ::memcpy(&processing_level_, &from.processing_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrs_row_) -
    reinterpret_cast<char*>(&processing_level_)) + sizeof(wrs_row_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.LandsatRequest)
}

void LandsatRequest::SharedCtor() {
scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_cover_land_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wrs_row_) -
    reinterpret_cast<char*>(&cloud_cover_land_)) + sizeof(wrs_row_));
}

LandsatRequest::~LandsatRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.LandsatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandsatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scene_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cloud_cover_land_;
}

void LandsatRequest::ArenaDtor(void* object) {
  LandsatRequest* _this = reinterpret_cast< LandsatRequest* >(object);
  (void)_this;
}
void LandsatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandsatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandsatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.LandsatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  if (GetArena() == nullptr && cloud_cover_land_ != nullptr) {
    delete cloud_cover_land_;
  }
  cloud_cover_land_ = nullptr;
  ::memset(&processing_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wrs_row_) -
      reinterpret_cast<char*>(&processing_level_)) + sizeof(wrs_row_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandsatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scene_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.LandsatRequest.scene_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.LandsatRequest.product_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_processing_level(static_cast<::epl::protobuf::v1::Landsat_ProcessingLevel>(val));
        } else goto handle_unusual;
        continue;
      // int32 wrs_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wrs_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wrs_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wrs_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.FloatFilter cloud_cover_land = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud_cover_land(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandsatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.LandsatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.LandsatRequest.scene_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scene_id(), target);
  }

  // string product_id = 2;
  if (this->product_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.LandsatRequest.product_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_id(), target);
  }

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  if (this->processing_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_processing_level(), target);
  }

  // int32 wrs_path = 4;
  if (this->wrs_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wrs_path(), target);
  }

  // int32 wrs_row = 5;
  if (this->wrs_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wrs_row(), target);
  }

  // .epl.protobuf.v1.FloatFilter cloud_cover_land = 6;
  if (this->has_cloud_cover_land()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cloud_cover_land(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.LandsatRequest)
  return target;
}

size_t LandsatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.LandsatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_id());
  }

  // string product_id = 2;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // .epl.protobuf.v1.FloatFilter cloud_cover_land = 6;
  if (this->has_cloud_cover_land()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_cover_land_);
  }

  // .epl.protobuf.v1.Landsat.ProcessingLevel processing_level = 3;
  if (this->processing_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_processing_level());
  }

  // int32 wrs_path = 4;
  if (this->wrs_path() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrs_path());
  }

  // int32 wrs_row = 5;
  if (this->wrs_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrs_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandsatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.LandsatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LandsatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandsatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.LandsatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.LandsatRequest)
    MergeFrom(*source);
  }
}

void LandsatRequest::MergeFrom(const LandsatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.LandsatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id().size() > 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.product_id().size() > 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.has_cloud_cover_land()) {
    _internal_mutable_cloud_cover_land()->::epl::protobuf::v1::FloatFilter::MergeFrom(from._internal_cloud_cover_land());
  }
  if (from.processing_level() != 0) {
    _internal_set_processing_level(from._internal_processing_level());
  }
  if (from.wrs_path() != 0) {
    _internal_set_wrs_path(from._internal_wrs_path());
  }
  if (from.wrs_row() != 0) {
    _internal_set_wrs_row(from._internal_wrs_row());
  }
}

void LandsatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.LandsatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandsatRequest::CopyFrom(const LandsatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.LandsatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandsatRequest::IsInitialized() const {
  return true;
}

void LandsatRequest::InternalSwap(LandsatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scene_id_.Swap(&other->scene_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandsatRequest, wrs_row_)
      + sizeof(LandsatRequest::wrs_row_)
      - PROTOBUF_FIELD_OFFSET(LandsatRequest, cloud_cover_land_)>(
          reinterpret_cast<char*>(&cloud_cover_land_),
          reinterpret_cast<char*>(&other->cloud_cover_land_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandsatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mosaic::_Internal {
 public:
  static const ::epl::protobuf::v1::DatetimeRange& observation_range(const Mosaic* msg);
};

const ::epl::protobuf::v1::DatetimeRange&
Mosaic::_Internal::observation_range(const Mosaic* msg) {
  return *msg->observation_range_;
}
Mosaic::Mosaic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  zooms_(arena),
  provenance_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.Mosaic)
}
Mosaic::Mosaic(const Mosaic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zooms_(from.zooms_),
      provenance_ids_(from.provenance_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  quad_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quad_key().empty()) {
    quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quad_key(), 
      GetArena());
  }
  if (from._internal_has_observation_range()) {
    observation_range_ = new ::epl::protobuf::v1::DatetimeRange(*from.observation_range_);
  } else {
    observation_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.Mosaic)
}

void Mosaic::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quad_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
observation_range_ = nullptr;
}

Mosaic::~Mosaic() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.Mosaic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mosaic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quad_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete observation_range_;
}

void Mosaic::ArenaDtor(void* object) {
  Mosaic* _this = reinterpret_cast< Mosaic* >(object);
  (void)_this;
}
void Mosaic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mosaic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mosaic::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.Mosaic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zooms_.Clear();
  provenance_ids_.Clear();
  name_.ClearToEmpty();
  quad_key_.ClearToEmpty();
  if (GetArena() == nullptr && observation_range_ != nullptr) {
    delete observation_range_;
  }
  observation_range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mosaic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Mosaic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quad_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_quad_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Mosaic.quad_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 zooms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_zooms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_zooms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.v1.DatetimeRange observation_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string provenance_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_provenance_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.Mosaic.provenance_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mosaic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.Mosaic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Mosaic.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string quad_key = 2;
  if (this->quad_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quad_key().data(), static_cast<int>(this->_internal_quad_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Mosaic.quad_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_quad_key(), target);
  }

  // repeated int32 zooms = 3;
  {
    int byte_size = _zooms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_zooms(), byte_size, target);
    }
  }

  // .epl.protobuf.v1.DatetimeRange observation_range = 4;
  if (this->has_observation_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::observation_range(this), target, stream);
  }

  // repeated string provenance_ids = 5;
  for (int i = 0, n = this->_internal_provenance_ids_size(); i < n; i++) {
    const auto& s = this->_internal_provenance_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.Mosaic.provenance_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.Mosaic)
  return target;
}

size_t Mosaic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.Mosaic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 zooms = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->zooms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _zooms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string provenance_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(provenance_ids_.size());
  for (int i = 0, n = provenance_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      provenance_ids_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string quad_key = 2;
  if (this->quad_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quad_key());
  }

  // .epl.protobuf.v1.DatetimeRange observation_range = 4;
  if (this->has_observation_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *observation_range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mosaic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.Mosaic)
  GOOGLE_DCHECK_NE(&from, this);
  const Mosaic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mosaic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.Mosaic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.Mosaic)
    MergeFrom(*source);
  }
}

void Mosaic::MergeFrom(const Mosaic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.Mosaic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zooms_.MergeFrom(from.zooms_);
  provenance_ids_.MergeFrom(from.provenance_ids_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.quad_key().size() > 0) {
    _internal_set_quad_key(from._internal_quad_key());
  }
  if (from.has_observation_range()) {
    _internal_mutable_observation_range()->::epl::protobuf::v1::DatetimeRange::MergeFrom(from._internal_observation_range());
  }
}

void Mosaic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.Mosaic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mosaic::CopyFrom(const Mosaic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.Mosaic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mosaic::IsInitialized() const {
  return true;
}

void Mosaic::InternalSwap(Mosaic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  zooms_.InternalSwap(&other->zooms_);
  provenance_ids_.InternalSwap(&other->provenance_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quad_key_.Swap(&other->quad_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(observation_range_, other->observation_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mosaic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MosaicRequest::_Internal {
 public:
};

MosaicRequest::MosaicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:epl.protobuf.v1.MosaicRequest)
}
MosaicRequest::MosaicRequest(const MosaicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  quad_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quad_key().empty()) {
    quad_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quad_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.v1.MosaicRequest)
}

void MosaicRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quad_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MosaicRequest::~MosaicRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.v1.MosaicRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MosaicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quad_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MosaicRequest::ArenaDtor(void* object) {
  MosaicRequest* _this = reinterpret_cast< MosaicRequest* >(object);
  (void)_this;
}
void MosaicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MosaicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MosaicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.v1.MosaicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  quad_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MosaicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.MosaicRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quad_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_quad_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "epl.protobuf.v1.MosaicRequest.quad_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MosaicRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.v1.MosaicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.MosaicRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string quad_key = 2;
  if (this->quad_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quad_key().data(), static_cast<int>(this->_internal_quad_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.v1.MosaicRequest.quad_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_quad_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.v1.MosaicRequest)
  return target;
}

size_t MosaicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.v1.MosaicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string quad_key = 2;
  if (this->quad_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quad_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MosaicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.v1.MosaicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MosaicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MosaicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.v1.MosaicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.v1.MosaicRequest)
    MergeFrom(*source);
  }
}

void MosaicRequest::MergeFrom(const MosaicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.v1.MosaicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.quad_key().size() > 0) {
    _internal_set_quad_key(from._internal_quad_key());
  }
}

void MosaicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.v1.MosaicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MosaicRequest::CopyFrom(const MosaicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.v1.MosaicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MosaicRequest::IsInitialized() const {
  return true;
}

void MosaicRequest::InternalSwap(MosaicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quad_key_.Swap(&other->quad_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MosaicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Collection_SummariesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Collection* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Collection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Collection >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::CollectionRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::CollectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::CollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Stats* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Extent* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Extent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Extent >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Interval* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Provider* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Provider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Provider >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::StacItem_AssetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::StacItem* Arena::CreateMaybeMessage< ::epl::protobuf::v1::StacItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::StacItem >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::StacRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::StacRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::StacRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::View* Arena::CreateMaybeMessage< ::epl::protobuf::v1::View >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::View >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::ViewRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::ViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::ViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Sat* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Sat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Sat >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::SatRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::SatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::SatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Eo* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Eo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Eo >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::EoRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::EoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::EoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Asset* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::DatetimeRange* Arena::CreateMaybeMessage< ::epl::protobuf::v1::DatetimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::DatetimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::StacDbResponse* Arena::CreateMaybeMessage< ::epl::protobuf::v1::StacDbResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::StacDbResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Sar* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Sar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Sar >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Landsat* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Landsat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Landsat >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::LandsatRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::LandsatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::LandsatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::Mosaic* Arena::CreateMaybeMessage< ::epl::protobuf::v1::Mosaic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::Mosaic >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::v1::MosaicRequest* Arena::CreateMaybeMessage< ::epl::protobuf::v1::MosaicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::epl::protobuf::v1::MosaicRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
