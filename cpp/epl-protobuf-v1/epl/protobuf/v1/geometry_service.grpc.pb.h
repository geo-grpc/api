// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: epl/protobuf/v1/geometry_service.proto
// Original file comments:
//
// Copyright 2017-2019 Echo Park Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// For additional information, contact:
//
// email: info@echoparklabs.io
//
#ifndef GRPC_epl_2fprotobuf_2fv1_2fgeometry_5fservice_2eproto__INCLUDED
#define GRPC_epl_2fprotobuf_2fv1_2fgeometry_5fservice_2eproto__INCLUDED

#include "epl/protobuf/v1/geometry_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace epl {
namespace protobuf {
namespace v1 {

//
// gRPC Interfaces for working with geometry operators
class GeometryService final {
 public:
  static constexpr char const* service_full_name() {
    return "epl.protobuf.v1.GeometryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Execute a single blocking geometry operation
    virtual ::grpc::Status Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::epl::protobuf::v1::GeometryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>> AsyncOperate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateRaw(context, request, cq));
    }
    // stream in operator requests and get back a stream of results
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> OperateBiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(OperateBiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> AsyncOperateBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateBiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateBiStreamRaw(context, cq));
    }
    // manual flow control bi-directional stream. example
    // go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> OperateBiStreamFlow(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(OperateBiStreamFlowRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> AsyncOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateBiStreamFlowRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateBiStreamFlowRaw(context, cq));
    }
    // Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::GeometryResponse>> OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::epl::protobuf::v1::GeometryResponse>>(OperateServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>> AsyncOperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateServerStreamRaw(context, request, cq));
    }
    // Maybe something like a union operation. for now, this is not implemented.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::epl::protobuf::v1::GeometryRequest>> OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::epl::protobuf::v1::GeometryRequest>>(OperateClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>> AsyncOperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>>(AsyncOperateClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>> PrepareAsyncOperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>>(PrepareAsyncOperateClientStreamRaw(context, response, cq));
    }
    // stream in file chunks for a geometry file type and stream back results for each geometry encountered
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> FileOperateBiStreamFlow(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(FileOperateBiStreamFlowRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> AsyncFileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(AsyncFileOperateBiStreamFlowRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncFileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncFileOperateBiStreamFlowRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Execute a single blocking geometry operation
      virtual void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // stream in operator requests and get back a stream of results
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateBiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #else
      virtual void OperateBiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #endif
      // manual flow control bi-directional stream. example
      // go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #else
      virtual void OperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #endif
      // Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #else
      virtual void OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #endif
      // Maybe something like a union operation. for now, this is not implemented.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::ClientWriteReactor< ::epl::protobuf::v1::GeometryRequest>* reactor) = 0;
      #else
      virtual void OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::experimental::ClientWriteReactor< ::epl::protobuf::v1::GeometryRequest>* reactor) = 0;
      #endif
      // stream in file chunks for a geometry file type and stream back results for each geometry encountered
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::FileRequestChunk,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #else
      virtual void FileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::FileRequestChunk,::epl::protobuf::v1::GeometryResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>* AsyncOperateRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* AsyncOperateBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamFlowRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* AsyncOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::epl::protobuf::v1::GeometryResponse>* OperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>* AsyncOperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::epl::protobuf::v1::GeometryRequest>* OperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>* AsyncOperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::epl::protobuf::v1::GeometryRequest>* PrepareAsyncOperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* FileOperateBiStreamFlowRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* AsyncFileOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncFileOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::epl::protobuf::v1::GeometryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>> AsyncOperate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> OperateBiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(OperateBiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> AsyncOperateBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateBiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateBiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateBiStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> OperateBiStreamFlow(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(OperateBiStreamFlowRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> AsyncOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateBiStreamFlowRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateBiStreamFlowRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::GeometryResponse>> OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::epl::protobuf::v1::GeometryResponse>>(OperateServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>> AsyncOperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>>(AsyncOperateServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncOperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncOperateServerStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::epl::protobuf::v1::GeometryRequest>> OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::epl::protobuf::v1::GeometryRequest>>(OperateClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>> AsyncOperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>>(AsyncOperateClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>> PrepareAsyncOperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>>(PrepareAsyncOperateClientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> FileOperateBiStreamFlow(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(FileOperateBiStreamFlowRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> AsyncFileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(AsyncFileOperateBiStreamFlowRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>> PrepareAsyncFileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>>(PrepareAsyncFileOperateBiStreamFlowRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Operate(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateBiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #else
      void OperateBiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #else
      void OperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::grpc::ClientReadReactor< ::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #else
      void OperateServerStream(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::grpc::experimental::ClientReadReactor< ::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::ClientWriteReactor< ::epl::protobuf::v1::GeometryRequest>* reactor) override;
      #else
      void OperateClientStream(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::experimental::ClientWriteReactor< ::epl::protobuf::v1::GeometryRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::epl::protobuf::v1::FileRequestChunk,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #else
      void FileOperateBiStreamFlow(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::epl::protobuf::v1::FileRequestChunk,::epl::protobuf::v1::GeometryResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>* AsyncOperateRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* AsyncOperateBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateBiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamFlowRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* AsyncOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::epl::protobuf::v1::GeometryResponse>* OperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>* AsyncOperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncOperateServerStreamRaw(::grpc::ClientContext* context, const ::epl::protobuf::v1::GeometryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::epl::protobuf::v1::GeometryRequest>* OperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response) override;
    ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>* AsyncOperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::epl::protobuf::v1::GeometryRequest>* PrepareAsyncOperateClientStreamRaw(::grpc::ClientContext* context, ::epl::protobuf::v1::GeometryResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* FileOperateBiStreamFlowRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* AsyncFileOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* PrepareAsyncFileOperateBiStreamFlowRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Operate_;
    const ::grpc::internal::RpcMethod rpcmethod_OperateBiStream_;
    const ::grpc::internal::RpcMethod rpcmethod_OperateBiStreamFlow_;
    const ::grpc::internal::RpcMethod rpcmethod_OperateServerStream_;
    const ::grpc::internal::RpcMethod rpcmethod_OperateClientStream_;
    const ::grpc::internal::RpcMethod rpcmethod_FileOperateBiStreamFlow_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Execute a single blocking geometry operation
    virtual ::grpc::Status Operate(::grpc::ServerContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response);
    // stream in operator requests and get back a stream of results
    virtual ::grpc::Status OperateBiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* stream);
    // manual flow control bi-directional stream. example
    // go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
    virtual ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* stream);
    // Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
    virtual ::grpc::Status OperateServerStream(::grpc::ServerContext* context, const ::epl::protobuf::v1::GeometryRequest* request, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* writer);
    // Maybe something like a union operation. for now, this is not implemented.
    virtual ::grpc::Status OperateClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* reader, ::epl::protobuf::v1::GeometryResponse* response);
    // stream in file chunks for a geometry file type and stream back results for each geometry encountered
    virtual ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Operate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperate(::grpc::ServerContext* context, ::epl::protobuf::v1::GeometryRequest* request, ::grpc::ServerAsyncResponseWriter< ::epl::protobuf::v1::GeometryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperateBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperateBiStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OperateBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateBiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperateBiStreamFlow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperateServerStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateServerStream(::grpc::ServerContext* context, ::epl::protobuf::v1::GeometryRequest* request, ::grpc::ServerAsyncWriter< ::epl::protobuf::v1::GeometryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OperateClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OperateClientStream() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OperateClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* /*reader*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FileOperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileOperateBiStreamFlow() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_FileOperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileOperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Operate<WithAsyncMethod_OperateBiStream<WithAsyncMethod_OperateBiStreamFlow<WithAsyncMethod_OperateServerStream<WithAsyncMethod_OperateClientStream<WithAsyncMethod_FileOperateBiStreamFlow<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Operate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::GeometryRequest* request, ::epl::protobuf::v1::GeometryResponse* response) { return this->Operate(context, request, response); }));}
    void SetMessageAllocatorFor_Operate(
        ::grpc::experimental::MessageAllocator< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Operate(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Operate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperateBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperateBiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->OperateBiStream(context); }));
    }
    ~ExperimentalWithCallbackMethod_OperateBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperateBiStreamFlow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->OperateBiStreamFlow(context); }));
    }
    ~ExperimentalWithCallbackMethod_OperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamFlow(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* OperateBiStreamFlow(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperateServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::epl::protobuf::v1::GeometryRequest* request) { return this->OperateServerStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::epl::protobuf::v1::GeometryResponse>* OperateServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::epl::protobuf::v1::GeometryResponse>* OperateServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OperateClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OperateClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::epl::protobuf::v1::GeometryResponse* response) { return this->OperateClientStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_OperateClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* /*reader*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::epl::protobuf::v1::GeometryRequest>* OperateClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::epl::protobuf::v1::GeometryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::epl::protobuf::v1::GeometryRequest>* OperateClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::epl::protobuf::v1::GeometryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FileOperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FileOperateBiStreamFlow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->FileOperateBiStreamFlow(context); }));
    }
    ~ExperimentalWithCallbackMethod_FileOperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* FileOperateBiStreamFlow(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::epl::protobuf::v1::FileRequestChunk, ::epl::protobuf::v1::GeometryResponse>* FileOperateBiStreamFlow(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Operate<ExperimentalWithCallbackMethod_OperateBiStream<ExperimentalWithCallbackMethod_OperateBiStreamFlow<ExperimentalWithCallbackMethod_OperateServerStream<ExperimentalWithCallbackMethod_OperateClientStream<ExperimentalWithCallbackMethod_FileOperateBiStreamFlow<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Operate<ExperimentalWithCallbackMethod_OperateBiStream<ExperimentalWithCallbackMethod_OperateBiStreamFlow<ExperimentalWithCallbackMethod_OperateServerStream<ExperimentalWithCallbackMethod_OperateClientStream<ExperimentalWithCallbackMethod_FileOperateBiStreamFlow<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Operate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperateBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperateBiStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OperateBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperateBiStreamFlow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperateServerStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OperateClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OperateClientStream() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OperateClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* /*reader*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FileOperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileOperateBiStreamFlow() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_FileOperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Operate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperateBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperateBiStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OperateBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateBiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperateBiStreamFlow() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperateServerStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateServerStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OperateClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OperateClientStream() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OperateClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* /*reader*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOperateClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileOperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileOperateBiStreamFlow() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_FileOperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileOperateBiStreamFlow(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Operate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Operate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Operate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Operate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperateBiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperateBiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->OperateBiStream(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperateBiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OperateBiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OperateBiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperateBiStreamFlow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->OperateBiStreamFlow(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::GeometryRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OperateBiStreamFlow(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OperateBiStreamFlow(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperateServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->OperateServerStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* OperateServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* OperateServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OperateClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OperateClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->OperateClientStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OperateClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OperateClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::epl::protobuf::v1::GeometryRequest>* /*reader*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* OperateClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* OperateClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FileOperateBiStreamFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FileOperateBiStreamFlow() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->FileOperateBiStreamFlow(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_FileOperateBiStreamFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileOperateBiStreamFlow(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::epl::protobuf::v1::GeometryResponse, ::epl::protobuf::v1::FileRequestChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FileOperateBiStreamFlow(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FileOperateBiStreamFlow(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Operate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Operate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* streamer) {
                       return this->StreamedOperate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Operate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Operate(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::epl::protobuf::v1::GeometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOperate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Operate<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OperateServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_OperateServerStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::epl::protobuf::v1::GeometryRequest, ::epl::protobuf::v1::GeometryResponse>* streamer) {
                       return this->StreamedOperateServerStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_OperateServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OperateServerStream(::grpc::ServerContext* /*context*/, const ::epl::protobuf::v1::GeometryRequest* /*request*/, ::grpc::ServerWriter< ::epl::protobuf::v1::GeometryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOperateServerStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::epl::protobuf::v1::GeometryRequest,::epl::protobuf::v1::GeometryResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OperateServerStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Operate<WithSplitStreamingMethod_OperateServerStream<Service > > StreamedService;
};

}  // namespace v1
}  // namespace protobuf
}  // namespace epl


#endif  // GRPC_epl_2fprotobuf_2fv1_2fgeometry_5fservice_2eproto__INCLUDED
