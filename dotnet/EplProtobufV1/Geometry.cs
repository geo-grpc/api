// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: epl/protobuf/v1/geometry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.epl.protobuf.v1 {

  /// <summary>Holder for reflection information generated from epl/protobuf/v1/geometry.proto</summary>
  public static partial class GeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for epl/protobuf/v1/geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5lcGwvcHJvdG9idWYvdjEvZ2VvbWV0cnkucHJvdG8SD2VwbC5wcm90b2J1",
            "Zi52MSKqAgoMR2VvbWV0cnlEYXRhEhMKC2dlb21ldHJ5X2lkGAEgASgEEhIK",
            "CmZlYXR1cmVfaWQYAiABKAkSDQoDd2t0GAMgASgJSAASEQoHZ2VvanNvbhgE",
            "IAEoCUgAEg0KA3drYhgFIAEoDEgAEhQKCmVzcmlfc2hhcGUYBiABKAxIABIO",
            "CgRld2tiGA8gASgMSAASLQoEcHJvahgHIAEoCzIfLmVwbC5wcm90b2J1Zi52",
            "MS5Qcm9qZWN0aW9uRGF0YRIvCghlbnZlbG9wZRgNIAEoCzIdLmVwbC5wcm90",
            "b2J1Zi52MS5FbnZlbG9wZURhdGESLAoGc2ltcGxlGA4gASgOMhwuZXBsLnBy",
            "b3RvYnVmLnYxLlNpbXBsZVN0YXRlQgYKBGRhdGFKBAgIEA0ixwMKDlByb2pl",
            "Y3Rpb25EYXRhEg4KBGVwc2cYASABKAVIABIPCgVwcm9qNBgCIAEoCUgAEjgK",
            "BmN1c3RvbRgDIAEoCzImLmVwbC5wcm90b2J1Zi52MS5Qcm9qZWN0aW9uRGF0",
            "YS5DdXN0b21IABINCgN3a3QYBCABKAlIABIvCghnZW9tZXRyeRgKIAEoCzId",
            "LmVwbC5wcm90b2J1Zi52MS5HZW9tZXRyeURhdGESKwoEYmJveBgLIAEoCzId",
            "LmVwbC5wcm90b2J1Zi52MS5FbnZlbG9wZURhdGESLwoIY2VudHJvaWQYDCAB",
            "KAsyHS5lcGwucHJvdG9idWYudjEuR2VvbWV0cnlEYXRhEg0KBXNoYXBlGAgg",
            "AygNEhEKCXRyYW5zZm9ybRgJIAMoARpfCgZDdXN0b20SDQoFbG9uXzAYASAB",
            "KAESDQoFbGF0XzAYAiABKAESNwoHY3NfdHlwZRgDIAEoDjImLmVwbC5wcm90",
            "b2J1Zi52MS5Qcm9qZWN0aW9uRGF0YS5DU1R5cGUiGQoGQ1NUeXBlEg8KC0xB",
            "TUJFUlRfQVpJEABCDAoKZGVmaW5pdGlvbkoECAUQBkoECAYQB0oECAcQCCKR",
            "AQoMRW52ZWxvcGVEYXRhEgwKBHhtaW4YASABKAESDAoEeW1pbhgCIAEoARIM",
            "CgR4bWF4GAMgASgBEgwKBHltYXgYBCABKAESLQoEcHJvahgFIAEoCzIfLmVw",
            "bC5wcm90b2J1Zi52MS5Qcm9qZWN0aW9uRGF0YRIMCgR6bWluGAYgASgBEgwK",
            "BHptYXgYByABKAEi3gsKD0dlb21ldHJ5UmVxdWVzdBIxCghnZW9tZXRyeRgB",
            "IAEoCzIdLmVwbC5wcm90b2J1Zi52MS5HZW9tZXRyeURhdGFIABI2Cg1sZWZ0",
            "X2dlb21ldHJ5GAIgASgLMh0uZXBsLnByb3RvYnVmLnYxLkdlb21ldHJ5RGF0",
            "YUgAEjwKEGdlb21ldHJ5X3JlcXVlc3QYAyABKAsyIC5lcGwucHJvdG9idWYu",
            "djEuR2VvbWV0cnlSZXF1ZXN0SAASQQoVbGVmdF9nZW9tZXRyeV9yZXF1ZXN0",
            "GAQgASgLMiAuZXBsLnByb3RvYnVmLnYxLkdlb21ldHJ5UmVxdWVzdEgAEjcK",
            "DnJpZ2h0X2dlb21ldHJ5GAUgASgLMh0uZXBsLnByb3RvYnVmLnYxLkdlb21l",
            "dHJ5RGF0YUgBEkIKFnJpZ2h0X2dlb21ldHJ5X3JlcXVlc3QYBiABKAsyIC5l",
            "cGwucHJvdG9idWYudjEuR2VvbWV0cnlSZXF1ZXN0SAESLwoIb3BlcmF0b3IY",
            "ByABKA4yHS5lcGwucHJvdG9idWYudjEuT3BlcmF0b3JUeXBlEjIKD3Jlc3Vs",
            "dF9lbmNvZGluZxgIIAEoDjIZLmVwbC5wcm90b2J1Zi52MS5FbmNvZGluZxI3",
            "Cg5vcGVyYXRpb25fcHJvahgJIAEoCzIfLmVwbC5wcm90b2J1Zi52MS5Qcm9q",
            "ZWN0aW9uRGF0YRI0CgtyZXN1bHRfcHJvahgKIAEoCzIfLmVwbC5wcm90b2J1",
            "Zi52MS5Qcm9qZWN0aW9uRGF0YRI3Cg1idWZmZXJfcGFyYW1zGAsgASgLMh4u",
            "ZXBsLnByb3RvYnVmLnYxLlBhcmFtcy5CdWZmZXJIAhI3Cg1jb252ZXhfcGFy",
            "YW1zGAwgASgLMh4uZXBsLnByb3RvYnVmLnYxLlBhcmFtcy5Db252ZXhIAhI3",
            "Cg1yZWxhdGVfcGFyYW1zGA0gASgLMh4uZXBsLnByb3RvYnVmLnYxLlBhcmFt",
            "cy5SZWxhdGVIAhJEChRyYW5kb21fcG9pbnRzX3BhcmFtcxgOIAEoCzIkLmVw",
            "bC5wcm90b2J1Zi52MS5QYXJhbXMuUmFuZG9tUG9pbnRzSAISPwoRZ2VuZXJh",
            "bGl6ZV9wYXJhbXMYDyABKAsyIi5lcGwucHJvdG9idWYudjEuUGFyYW1zLkdl",
            "bmVyYWxpemVIAhJDChNpbnRlcnNlY3Rpb25fcGFyYW1zGBAgASgLMiQuZXBs",
            "LnByb3RvYnVmLnYxLlBhcmFtcy5JbnRlcnNlY3Rpb25IAhI3Cg1vZmZzZXRf",
            "cGFyYW1zGBEgASgLMh4uZXBsLnByb3RvYnVmLnYxLlBhcmFtcy5PZmZzZXRI",
            "AhIxCgpjdXRfcGFyYW1zGBIgASgLMhsuZXBsLnByb3RvYnVmLnYxLlBhcmFt",
            "cy5DdXRIAhIzCgtjbGlwX3BhcmFtcxgTIAEoCzIcLmVwbC5wcm90b2J1Zi52",
            "MS5QYXJhbXMuQ2xpcEgCEjkKDmRlbnNpZnlfcGFyYW1zGBQgASgLMh8uZXBs",
            "LnByb3RvYnVmLnYxLlBhcmFtcy5EZW5zaWZ5SAISOwoPc2ltcGxpZnlfcGFy",
            "YW1zGBUgASgLMiAuZXBsLnByb3RvYnVmLnYxLlBhcmFtcy5TaW1wbGlmeUgC",
            "Ek0KGWdlbmVyYWxpemVfYnlfYXJlYV9wYXJhbXMYFiABKAsyKC5lcGwucHJv",
            "dG9idWYudjEuUGFyYW1zLkdlbmVyYWxpemVCeUFyZWFIAhJKChdhZmZpbmVf",
            "dHJhbnNmb3JtX3BhcmFtcxgXIAEoCzInLmVwbC5wcm90b2J1Zi52MS5QYXJh",
            "bXMuQWZmaW5lVHJhbnNmb3JtSAISSAoWZ2VvZGV0aWNfYnVmZmVyX3BhcmFt",
            "cxgYIAEoCzImLmVwbC5wcm90b2J1Zi52MS5QYXJhbXMuR2VvZGV0aWNCdWZm",
            "ZXJIAkIGCgRsZWZ0QgcKBXJpZ2h0QggKBnBhcmFtcyI/Cg9HZW9kZXRpY0lu",
            "dmVyc2USDAoEYXoxMhgBIAEoARIMCgRhejIxGAIgASgBEhAKCGRpc3RhbmNl",
            "GAMgASgBIrgCChBHZW9tZXRyeVJlc3BvbnNlEjEKCGdlb21ldHJ5GAEgASgL",
            "Mh0uZXBsLnByb3RvYnVmLnYxLkdlb21ldHJ5RGF0YUgAEh4KFHNwYXRpYWxf",
            "cmVsYXRpb25zaGlwGAIgASgISAASEQoHbWVhc3VyZRgDIAEoAUgAEjwKEGdl",
            "b2RldGljX2ludmVyc2UYBCABKAsyIC5lcGwucHJvdG9idWYudjEuR2VvZGV0",
            "aWNJbnZlcnNlSAASRAoKcmVsYXRlX21hcBgFIAMoCzIwLmVwbC5wcm90b2J1",
            "Zi52MS5HZW9tZXRyeVJlc3BvbnNlLlJlbGF0ZU1hcEVudHJ5GjAKDlJlbGF0",
            "ZU1hcEVudHJ5EgsKA2tleRgBIAEoAxINCgV2YWx1ZRgCIAEoCDoCOAFCCAoG",
            "cmVzdWx0IuECChBGaWxlUmVxdWVzdENodW5rEjgKDm5lc3RlZF9yZXF1ZXN0",
            "GAEgASgLMiAuZXBsLnByb3RvYnVmLnYxLkdlb21ldHJ5UmVxdWVzdBI3ChRy",
            "ZXN1bHRfZW5jb2RpbmdfdHlwZRgCIAEoDjIZLmVwbC5wcm90b2J1Zi52MS5F",
            "bmNvZGluZxIzCgppbnB1dF9wcm9qGAMgASgLMh8uZXBsLnByb3RvYnVmLnYx",
            "LlByb2plY3Rpb25EYXRhEjQKC3Jlc3VsdF9wcm9qGAUgASgLMh8uZXBsLnBy",
            "b3RvYnVmLnYxLlByb2plY3Rpb25EYXRhEgwKBGRhdGEYBiABKAwSDAoEc2l6",
            "ZRgHIAEoAxIOCgZvZmZzZXQYCCABKAMSEQoJZmlsZV9uYW1lGAkgASgJEhUK",
            "DWlzX2xhc3RfY2h1bmsYCiABKAgiGQoIRmlsZVR5cGUSDQoJU0hBUEVGSUxF",
            "EAAi0wcKBlBhcmFtcxpsCgZCdWZmZXISEAoIZGlzdGFuY2UYASABKAESFQoN",
            "bWF4X2RldmlhdGlvbhgCIAEoARIUCgx1bmlvbl9yZXN1bHQYAyABKAgSIwob",
            "bWF4X3ZlcnRpY2VzX2luX2Z1bGxfY2lyY2xlGAQgASgFGnQKDkdlb2RldGlj",
            "QnVmZmVyEhAKCGRpc3RhbmNlGAEgASgBEhUKDW1heF9kZXZpYXRpb24YAiAB",
            "KAESFAoMdW5pb25fcmVzdWx0GAMgASgIEiMKG21heF92ZXJ0aWNlc19pbl9m",
            "dWxsX2NpcmNsZRgEIAEoBRoXCgZDb252ZXgSDQoFbWVyZ2UYASABKAgaGAoG",
            "UmVsYXRlEg4KBmRlXzlpbRgBIAEoCRo6CgxSYW5kb21Qb2ludHMSHAoUcG9p",
            "bnRzX3Blcl9zcXVhcmVfa20YASABKAESDAoEc2VlZBgCIAEoAxo/CgpHZW5l",
            "cmFsaXplEhUKDW1heF9kZXZpYXRpb24YASABKAESGgoScmVtb3ZlX2RlZ2Vu",
            "ZXJhdGVzGAIgASgIGmIKEEdlbmVyYWxpemVCeUFyZWESGQoRcGVyY2VudF9y",
            "ZWR1Y3Rpb24YASABKAESFwoPbWF4X3BvaW50X2NvdW50GAIgASgFEhoKEnJl",
            "bW92ZV9kZWdlbmVyYXRlcxgDIAEoCBomCgxJbnRlcnNlY3Rpb24SFgoOZGlt",
            "ZW5zaW9uX21hc2sYASABKAUaxwEKBk9mZnNldBIQCghkaXN0YW5jZRgBIAEo",
            "ARJACglqb2luX3R5cGUYAiABKA4yLS5lcGwucHJvdG9idWYudjEuUGFyYW1z",
            "Lk9mZnNldC5PZmZzZXRKb2luVHlwZRITCgtiZXZlbF9yYXRpbxgDIAEoARIV",
            "Cg1mbGF0dGVuX2Vycm9yGAQgASgBIj0KDk9mZnNldEpvaW5UeXBlEgkKBVJP",
            "VU5EEAASCQoFQkVWRUwQARIJCgVNSVRFUhACEgoKBlNRVUFSRRADGh0KA0N1",
            "dBIWCg5jb25zaWRlcl90b3VjaBgBIAEoCBo3CgRDbGlwEi8KCGVudmVsb3Bl",
            "GAEgASgLMh0uZXBsLnByb3RvYnVmLnYxLkVudmVsb3BlRGF0YRodCgdEZW5z",
            "aWZ5EhIKCm1heF9sZW5ndGgYASABKAEaGQoIU2ltcGxpZnkSDQoFZm9yY2UY",
            "ASABKAgaTQoPQWZmaW5lVHJhbnNmb3JtEhAKCGdlb2RldGljGAIgASgIEhAK",
            "CHhfb2Zmc2V0GAMgASgBEhAKCHlfb2Zmc2V0GAQgASgBSgQIARACKsYBCgtT",
            "aW1wbGVTdGF0ZRISCg5TSU1QTEVfVU5LTk9XThAAEg8KC1dFQUtfU0lNUExF",
            "EAESEQoNU1RST05HX1NJTVBMRRACEg4KCk5PTl9TSU1QTEUQAxISCg5TVFJV",
            "Q1RVUkVfRkxBVxAEEhcKE0RFR0VORVJBVEVfU0VHTUVOVFMQBRIOCgpDTFVT",
            "VEVSSU5HEAYSDAoIQ1JBQ0tJTkcQBxIOCgpDUk9TU19PVkVSEAgSFAoQUklO",
            "R19PUklFTlRBVElPThAJKlkKCEVuY29kaW5nEhQKEFVOS05PV05fRU5DT0RJ",
            "TkcQABIHCgNXS0IQARIHCgNXS1QQAhILCgdHRU9KU09OEAMSDgoKRVNSSV9T",
            "SEFQRRAEEggKBEVXS0IQBSr1BgoMT3BlcmF0b3JUeXBlEhQKEFVOS05PV05f",
            "T1BFUkFUT1IQABILCgdQUk9KRUNUEAESEgoORVhQT1JUX1RPX0pTT04QAhIU",
            "ChBJTVBPUlRfRlJPTV9KU09OEAMSGAoURVhQT1JUX1RPX0VTUklfU0hBUEUQ",
            "BBIaChZJTVBPUlRfRlJPTV9FU1JJX1NIQVBFEAUSCQoFVU5JT04QBhIOCgpE",
            "SUZGRVJFTkNFEAcSEAoMUFJPWElNSVRZXzJEEAgSCgoGUkVMQVRFEAkSCgoG",
            "RVFVQUxTEAoSDAoIRElTSk9JTlQQCxIOCgpJTlRFUlNFQ1RTEAwSCgoGV0lU",
            "SElOEA0SDAoIQ09OVEFJTlMQDhILCgdDUk9TU0VTEA8SCwoHVE9VQ0hFUxAQ",
            "EgwKCE9WRVJMQVBTEBESCgoGQlVGRkVSEBISDAoIRElTVEFOQ0UQExIQCgxJ",
            "TlRFUlNFQ1RJT04QFBIICgRDTElQEBUSBwoDQ1VUEBYSFQoRREVOU0lGWV9C",
            "WV9MRU5HVEgQFxITCg9HRU9ERVNJQ19CVUZGRVIQGhIeChpHRU9ERVRJQ19E",
            "RU5TSUZZX0JZX0xFTkdUSBAbEhEKDUdFT0RFVElDX0FSRUEQHhIMCghTSU1Q",
            "TElGWRAfEhAKDFNJTVBMSUZZX09HQxAgEgoKBk9GRlNFVBAhEg4KCkdFTkVS",
            "QUxJWkUQIhIWChJHRU5FUkFMSVpFX0JZX0FSRUEQIxIRCg1FWFBPUlRfVE9f",
            "V0tCECQSEwoPSU1QT1JUX0ZST01fV0tCECUSEQoNRVhQT1JUX1RPX1dLVBAm",
            "EhMKD0lNUE9SVF9GUk9NX1dLVBAnEhcKE0lNUE9SVF9GUk9NX0dFT0pTT04Q",
            "KBIVChFFWFBPUlRfVE9fR0VPSlNPThApEhgKFFNZTU1FVFJJQ19ESUZGRVJF",
            "TkNFECoSDwoLQ09OVkVYX0hVTEwQKxIMCghCT1VOREFSWRAsEhEKDVJBTkRP",
            "TV9QT0lOVFMQLRIUChBFTkNMT1NJTkdfQ0lSQ0xFEC4SFAoQQUZGSU5FX1RS",
            "QU5TRk9STRAvEhMKD0dFT0RFVElDX0xFTkdUSBAwEhQKEEdFT0RFVElDX0lO",
            "VkVSU0UQMRISCg5FWFBPUlRfVE9fRVdLQhAyEhQKEElNUE9SVF9GUk9NX0VX",
            "S0IQM0JzChNjb20uZXBsLnByb3RvYnVmLnYxQg1HZW9tZXRyeVByb3RvUAFa",
            "LmdpdGh1Yi5jb20vZ2VvLWdycGMvYXBpL2dvbGFuZy9lcGwvcHJvdG9idWYv",
            "djGiAgRHTVBCqgITY29tLmVwbC5wcm90b2J1Zi52MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.epl.protobuf.v1.SimpleState), typeof(global::com.epl.protobuf.v1.Encoding), typeof(global::com.epl.protobuf.v1.OperatorType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.GeometryData), global::com.epl.protobuf.v1.GeometryData.Parser, new[]{ "GeometryId", "FeatureId", "Wkt", "Geojson", "Wkb", "EsriShape", "Ewkb", "Proj", "Envelope", "Simple" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.ProjectionData), global::com.epl.protobuf.v1.ProjectionData.Parser, new[]{ "Epsg", "Proj4", "Custom", "Wkt", "Geometry", "Bbox", "Centroid", "Shape", "Transform" }, new[]{ "Definition" }, new[]{ typeof(global::com.epl.protobuf.v1.ProjectionData.Types.CSType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.ProjectionData.Types.Custom), global::com.epl.protobuf.v1.ProjectionData.Types.Custom.Parser, new[]{ "Lon0", "Lat0", "CsType" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.EnvelopeData), global::com.epl.protobuf.v1.EnvelopeData.Parser, new[]{ "Xmin", "Ymin", "Xmax", "Ymax", "Proj", "Zmin", "Zmax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.GeometryRequest), global::com.epl.protobuf.v1.GeometryRequest.Parser, new[]{ "Geometry", "LeftGeometry", "GeometryRequest_", "LeftGeometryRequest", "RightGeometry", "RightGeometryRequest", "Operator", "ResultEncoding", "OperationProj", "ResultProj", "BufferParams", "ConvexParams", "RelateParams", "RandomPointsParams", "GeneralizeParams", "IntersectionParams", "OffsetParams", "CutParams", "ClipParams", "DensifyParams", "SimplifyParams", "GeneralizeByAreaParams", "AffineTransformParams", "GeodeticBufferParams" }, new[]{ "Left", "Right", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.GeodeticInverse), global::com.epl.protobuf.v1.GeodeticInverse.Parser, new[]{ "Az12", "Az21", "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.GeometryResponse), global::com.epl.protobuf.v1.GeometryResponse.Parser, new[]{ "Geometry", "SpatialRelationship", "Measure", "GeodeticInverse", "RelateMap" }, new[]{ "Result" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.FileRequestChunk), global::com.epl.protobuf.v1.FileRequestChunk.Parser, new[]{ "NestedRequest", "ResultEncodingType", "InputProj", "ResultProj", "Data", "Size", "Offset", "FileName", "IsLastChunk" }, null, new[]{ typeof(global::com.epl.protobuf.v1.FileRequestChunk.Types.FileType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params), global::com.epl.protobuf.v1.Params.Parser, null, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Buffer), global::com.epl.protobuf.v1.Params.Types.Buffer.Parser, new[]{ "Distance", "MaxDeviation", "UnionResult", "MaxVerticesInFullCircle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer), global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer.Parser, new[]{ "Distance", "MaxDeviation", "UnionResult", "MaxVerticesInFullCircle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Convex), global::com.epl.protobuf.v1.Params.Types.Convex.Parser, new[]{ "Merge" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Relate), global::com.epl.protobuf.v1.Params.Types.Relate.Parser, new[]{ "De9Im" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.RandomPoints), global::com.epl.protobuf.v1.Params.Types.RandomPoints.Parser, new[]{ "PointsPerSquareKm", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Generalize), global::com.epl.protobuf.v1.Params.Types.Generalize.Parser, new[]{ "MaxDeviation", "RemoveDegenerates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea), global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea.Parser, new[]{ "PercentReduction", "MaxPointCount", "RemoveDegenerates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Intersection), global::com.epl.protobuf.v1.Params.Types.Intersection.Parser, new[]{ "DimensionMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Offset), global::com.epl.protobuf.v1.Params.Types.Offset.Parser, new[]{ "Distance", "JoinType", "BevelRatio", "FlattenError" }, null, new[]{ typeof(global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Cut), global::com.epl.protobuf.v1.Params.Types.Cut.Parser, new[]{ "ConsiderTouch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Clip), global::com.epl.protobuf.v1.Params.Types.Clip.Parser, new[]{ "Envelope" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Densify), global::com.epl.protobuf.v1.Params.Types.Densify.Parser, new[]{ "MaxLength" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.Simplify), global::com.epl.protobuf.v1.Params.Types.Simplify.Parser, new[]{ "Force" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Params.Types.AffineTransform), global::com.epl.protobuf.v1.Params.Types.AffineTransform.Parser, new[]{ "Geodetic", "XOffset", "YOffset" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// the state of a geometry topological correctness
  /// </summary>
  public enum SimpleState {
    /// <summary>
    /// on creation, after projection and after generalization a geometry has state simple unknown (not know if simple or not)
    /// </summary>
    [pbr::OriginalName("SIMPLE_UNKNOWN")] SimpleUnknown = 0,
    /// <summary>
    /// weak simple (no self intersections, ring orientation is correct, but ring order is not)
    /// </summary>
    [pbr::OriginalName("WEAK_SIMPLE")] WeakSimple = 1,
    /// <summary>
    /// same as weak simple + OGC ring order.
    /// </summary>
    [pbr::OriginalName("STRONG_SIMPLE")] StrongSimple = 2,
    /// <summary>
    /// is_simple method has been run on the geometry and it is known to be non-simple, but the reason is unknown
    /// </summary>
    [pbr::OriginalName("NON_SIMPLE")] NonSimple = 3,
    /// <summary>
    /// non-simple, because the structure is bad (0 size path, for example).
    /// </summary>
    [pbr::OriginalName("STRUCTURE_FLAW")] StructureFlaw = 4,
    /// <summary>
    /// Non-simple, because there are degenerate segments.
    /// </summary>
    [pbr::OriginalName("DEGENERATE_SEGMENTS")] DegenerateSegments = 5,
    /// <summary>
    /// Non-simple, because not clustered properly, that is there are non-coincident vertices closer than tolerance.
    /// </summary>
    [pbr::OriginalName("CLUSTERING")] Clustering = 6,
    /// <summary>
    /// Non-simple, because not cracked properly (intersecting segments, overlaping segments)
    /// </summary>
    [pbr::OriginalName("CRACKING")] Cracking = 7,
    /// <summary>
    /// Non-simple, because there are crossovers (self intersections that are not cracking case).
    /// </summary>
    [pbr::OriginalName("CROSS_OVER")] CrossOver = 8,
    /// <summary>
    /// Non-simple, because holes or exteriors have wrong orientation.
    /// </summary>
    [pbr::OriginalName("RING_ORIENTATION")] RingOrientation = 9,
  }

  /// <summary>
  ///
  ///type of geometry encodings
  /// </summary>
  public enum Encoding {
    /// <summary>
    /// unknown type.
    /// </summary>
    [pbr::OriginalName("UNKNOWN_ENCODING")] UnknownEncoding = 0,
    /// <summary>
    /// well-known binary
    /// </summary>
    [pbr::OriginalName("WKB")] Wkb = 1,
    /// <summary>
    /// well-known text
    /// </summary>
    [pbr::OriginalName("WKT")] Wkt = 2,
    /// <summary>
    /// geojson
    /// </summary>
    [pbr::OriginalName("GEOJSON")] Geojson = 3,
    /// <summary>
    /// esri shape binary
    /// </summary>
    [pbr::OriginalName("ESRI_SHAPE")] EsriShape = 4,
    /// <summary>
    /// extended well-known binary
    /// </summary>
    [pbr::OriginalName("EWKB")] Ewkb = 5,
  }

  /// <summary>
  ///
  ///type of geometry operators
  /// </summary>
  public enum OperatorType {
    [pbr::OriginalName("UNKNOWN_OPERATOR")] UnknownOperator = 0,
    /// <summary>
    /// project geometry
    /// </summary>
    [pbr::OriginalName("PROJECT")] Project = 1,
    [pbr::OriginalName("EXPORT_TO_JSON")] ExportToJson = 2,
    [pbr::OriginalName("IMPORT_FROM_JSON")] ImportFromJson = 3,
    [pbr::OriginalName("EXPORT_TO_ESRI_SHAPE")] ExportToEsriShape = 4,
    [pbr::OriginalName("IMPORT_FROM_ESRI_SHAPE")] ImportFromEsriShape = 5,
    /// <summary>
    /// union one or more geometries
    /// </summary>
    [pbr::OriginalName("UNION")] Union = 6,
    /// <summary>
    /// difference two geometries
    /// </summary>
    [pbr::OriginalName("DIFFERENCE")] Difference = 7,
    [pbr::OriginalName("PROXIMITY_2D")] Proximity2D = 8,
    [pbr::OriginalName("RELATE")] Relate = 9,
    [pbr::OriginalName("EQUALS")] Equals = 10,
    [pbr::OriginalName("DISJOINT")] Disjoint = 11,
    [pbr::OriginalName("INTERSECTS")] Intersects = 12,
    [pbr::OriginalName("WITHIN")] Within = 13,
    [pbr::OriginalName("CONTAINS")] Contains = 14,
    [pbr::OriginalName("CROSSES")] Crosses = 15,
    [pbr::OriginalName("TOUCHES")] Touches = 16,
    [pbr::OriginalName("OVERLAPS")] Overlaps = 17,
    [pbr::OriginalName("BUFFER")] Buffer = 18,
    [pbr::OriginalName("DISTANCE")] Distance = 19,
    [pbr::OriginalName("INTERSECTION")] Intersection = 20,
    [pbr::OriginalName("CLIP")] Clip = 21,
    [pbr::OriginalName("CUT")] Cut = 22,
    [pbr::OriginalName("DENSIFY_BY_LENGTH")] DensifyByLength = 23,
    [pbr::OriginalName("GEODESIC_BUFFER")] GeodesicBuffer = 26,
    [pbr::OriginalName("GEODETIC_DENSIFY_BY_LENGTH")] GeodeticDensifyByLength = 27,
    [pbr::OriginalName("GEODETIC_AREA")] GeodeticArea = 30,
    [pbr::OriginalName("SIMPLIFY")] Simplify = 31,
    [pbr::OriginalName("SIMPLIFY_OGC")] SimplifyOgc = 32,
    [pbr::OriginalName("OFFSET")] Offset = 33,
    [pbr::OriginalName("GENERALIZE")] Generalize = 34,
    [pbr::OriginalName("GENERALIZE_BY_AREA")] GeneralizeByArea = 35,
    [pbr::OriginalName("EXPORT_TO_WKB")] ExportToWkb = 36,
    [pbr::OriginalName("IMPORT_FROM_WKB")] ImportFromWkb = 37,
    [pbr::OriginalName("EXPORT_TO_WKT")] ExportToWkt = 38,
    [pbr::OriginalName("IMPORT_FROM_WKT")] ImportFromWkt = 39,
    [pbr::OriginalName("IMPORT_FROM_GEOJSON")] ImportFromGeojson = 40,
    [pbr::OriginalName("EXPORT_TO_GEOJSON")] ExportToGeojson = 41,
    [pbr::OriginalName("SYMMETRIC_DIFFERENCE")] SymmetricDifference = 42,
    [pbr::OriginalName("CONVEX_HULL")] ConvexHull = 43,
    [pbr::OriginalName("BOUNDARY")] Boundary = 44,
    [pbr::OriginalName("RANDOM_POINTS")] RandomPoints = 45,
    [pbr::OriginalName("ENCLOSING_CIRCLE")] EnclosingCircle = 46,
    [pbr::OriginalName("AFFINE_TRANSFORM")] AffineTransform = 47,
    [pbr::OriginalName("GEODETIC_LENGTH")] GeodeticLength = 48,
    [pbr::OriginalName("GEODETIC_INVERSE")] GeodeticInverse = 49,
    [pbr::OriginalName("EXPORT_TO_EWKB")] ExportToEwkb = 50,
    [pbr::OriginalName("IMPORT_FROM_EWKB")] ImportFromEwkb = 51,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// Container for Geometry data, has id, encoded geometry coordinates and shape, spatial reference and envelope
  /// </summary>
  public sealed partial class GeometryData : pb::IMessage<GeometryData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeometryData> _parser = new pb::MessageParser<GeometryData>(() => new GeometryData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeometryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryData(GeometryData other) : this() {
      geometryId_ = other.geometryId_;
      featureId_ = other.featureId_;
      proj_ = other.proj_ != null ? other.proj_.Clone() : null;
      envelope_ = other.envelope_ != null ? other.envelope_.Clone() : null;
      simple_ = other.simple_;
      switch (other.DataCase) {
        case DataOneofCase.Wkt:
          Wkt = other.Wkt;
          break;
        case DataOneofCase.Geojson:
          Geojson = other.Geojson;
          break;
        case DataOneofCase.Wkb:
          Wkb = other.Wkb;
          break;
        case DataOneofCase.EsriShape:
          EsriShape = other.EsriShape;
          break;
        case DataOneofCase.Ewkb:
          Ewkb = other.Ewkb;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryData Clone() {
      return new GeometryData(this);
    }

    /// <summary>Field number for the "geometry_id" field.</summary>
    public const int GeometryIdFieldNumber = 1;
    private ulong geometryId_;
    /// <summary>
    /// geometry id as an integer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GeometryId {
      get { return geometryId_; }
      set {
        geometryId_ = value;
      }
    }

    /// <summary>Field number for the "feature_id" field.</summary>
    public const int FeatureIdFieldNumber = 2;
    private string featureId_ = "";
    /// <summary>
    /// feature id as a string (for guids and other ids that aren't numeric)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureId {
      get { return featureId_; }
      set {
        featureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wkt" field.</summary>
    public const int WktFieldNumber = 3;
    /// <summary>
    /// well known text format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wkt {
      get { return dataCase_ == DataOneofCase.Wkt ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Wkt;
      }
    }

    /// <summary>Field number for the "geojson" field.</summary>
    public const int GeojsonFieldNumber = 4;
    /// <summary>
    /// geojson format for geometry encoding, https://en.wikipedia.org/wiki/GeoJSON
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Geojson {
      get { return dataCase_ == DataOneofCase.Geojson ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Geojson;
      }
    }

    /// <summary>Field number for the "wkb" field.</summary>
    public const int WkbFieldNumber = 5;
    /// <summary>
    /// well known binary format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Wkb {
      get { return dataCase_ == DataOneofCase.Wkb ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Wkb;
      }
    }

    /// <summary>Field number for the "esri_shape" field.</summary>
    public const int EsriShapeFieldNumber = 6;
    /// <summary>
    /// ESRI shape binary format for geometry encoding (fastest decoding and encoding for geometry service) https://www.esri.com/library/whitepapers/pdfs/shapefile.pdf
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EsriShape {
      get { return dataCase_ == DataOneofCase.EsriShape ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.EsriShape;
      }
    }

    /// <summary>Field number for the "ewkb" field.</summary>
    public const int EwkbFieldNumber = 15;
    /// <summary>
    /// extended well known binary format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ewkb {
      get { return dataCase_ == DataOneofCase.Ewkb ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Ewkb;
      }
    }

    /// <summary>Field number for the "proj" field.</summary>
    public const int ProjFieldNumber = 7;
    private global::com.epl.protobuf.v1.ProjectionData proj_;
    /// <summary>
    /// spatial reference of geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData Proj {
      get { return proj_; }
      set {
        proj_ = value;
      }
    }

    /// <summary>Field number for the "envelope" field.</summary>
    public const int EnvelopeFieldNumber = 13;
    private global::com.epl.protobuf.v1.EnvelopeData envelope_;
    /// <summary>
    /// envelope or bounding box of geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EnvelopeData Envelope {
      get { return envelope_; }
      set {
        envelope_ = value;
      }
    }

    /// <summary>Field number for the "simple" field.</summary>
    public const int SimpleFieldNumber = 14;
    private global::com.epl.protobuf.v1.SimpleState simple_ = global::com.epl.protobuf.v1.SimpleState.SimpleUnknown;
    /// <summary>
    /// state of the geometry topological correctness. at geometry creation, it is unknown if it is simple
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.SimpleState Simple {
      get { return simple_; }
      set {
        simple_ = value;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Wkt = 3,
      Geojson = 4,
      Wkb = 5,
      EsriShape = 6,
      Ewkb = 15,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeometryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeometryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GeometryId != other.GeometryId) return false;
      if (FeatureId != other.FeatureId) return false;
      if (Wkt != other.Wkt) return false;
      if (Geojson != other.Geojson) return false;
      if (Wkb != other.Wkb) return false;
      if (EsriShape != other.EsriShape) return false;
      if (Ewkb != other.Ewkb) return false;
      if (!object.Equals(Proj, other.Proj)) return false;
      if (!object.Equals(Envelope, other.Envelope)) return false;
      if (Simple != other.Simple) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GeometryId != 0UL) hash ^= GeometryId.GetHashCode();
      if (FeatureId.Length != 0) hash ^= FeatureId.GetHashCode();
      if (dataCase_ == DataOneofCase.Wkt) hash ^= Wkt.GetHashCode();
      if (dataCase_ == DataOneofCase.Geojson) hash ^= Geojson.GetHashCode();
      if (dataCase_ == DataOneofCase.Wkb) hash ^= Wkb.GetHashCode();
      if (dataCase_ == DataOneofCase.EsriShape) hash ^= EsriShape.GetHashCode();
      if (dataCase_ == DataOneofCase.Ewkb) hash ^= Ewkb.GetHashCode();
      if (proj_ != null) hash ^= Proj.GetHashCode();
      if (envelope_ != null) hash ^= Envelope.GetHashCode();
      if (Simple != global::com.epl.protobuf.v1.SimpleState.SimpleUnknown) hash ^= Simple.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GeometryId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GeometryId);
      }
      if (FeatureId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeatureId);
      }
      if (dataCase_ == DataOneofCase.Wkt) {
        output.WriteRawTag(26);
        output.WriteString(Wkt);
      }
      if (dataCase_ == DataOneofCase.Geojson) {
        output.WriteRawTag(34);
        output.WriteString(Geojson);
      }
      if (dataCase_ == DataOneofCase.Wkb) {
        output.WriteRawTag(42);
        output.WriteBytes(Wkb);
      }
      if (dataCase_ == DataOneofCase.EsriShape) {
        output.WriteRawTag(50);
        output.WriteBytes(EsriShape);
      }
      if (proj_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Proj);
      }
      if (envelope_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Envelope);
      }
      if (Simple != global::com.epl.protobuf.v1.SimpleState.SimpleUnknown) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Simple);
      }
      if (dataCase_ == DataOneofCase.Ewkb) {
        output.WriteRawTag(122);
        output.WriteBytes(Ewkb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GeometryId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GeometryId);
      }
      if (FeatureId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeatureId);
      }
      if (dataCase_ == DataOneofCase.Wkt) {
        output.WriteRawTag(26);
        output.WriteString(Wkt);
      }
      if (dataCase_ == DataOneofCase.Geojson) {
        output.WriteRawTag(34);
        output.WriteString(Geojson);
      }
      if (dataCase_ == DataOneofCase.Wkb) {
        output.WriteRawTag(42);
        output.WriteBytes(Wkb);
      }
      if (dataCase_ == DataOneofCase.EsriShape) {
        output.WriteRawTag(50);
        output.WriteBytes(EsriShape);
      }
      if (proj_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Proj);
      }
      if (envelope_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Envelope);
      }
      if (Simple != global::com.epl.protobuf.v1.SimpleState.SimpleUnknown) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Simple);
      }
      if (dataCase_ == DataOneofCase.Ewkb) {
        output.WriteRawTag(122);
        output.WriteBytes(Ewkb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GeometryId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GeometryId);
      }
      if (FeatureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureId);
      }
      if (dataCase_ == DataOneofCase.Wkt) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wkt);
      }
      if (dataCase_ == DataOneofCase.Geojson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Geojson);
      }
      if (dataCase_ == DataOneofCase.Wkb) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Wkb);
      }
      if (dataCase_ == DataOneofCase.EsriShape) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EsriShape);
      }
      if (dataCase_ == DataOneofCase.Ewkb) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ewkb);
      }
      if (proj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proj);
      }
      if (envelope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
      }
      if (Simple != global::com.epl.protobuf.v1.SimpleState.SimpleUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Simple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeometryData other) {
      if (other == null) {
        return;
      }
      if (other.GeometryId != 0UL) {
        GeometryId = other.GeometryId;
      }
      if (other.FeatureId.Length != 0) {
        FeatureId = other.FeatureId;
      }
      if (other.proj_ != null) {
        if (proj_ == null) {
          Proj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        Proj.MergeFrom(other.Proj);
      }
      if (other.envelope_ != null) {
        if (envelope_ == null) {
          Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
        }
        Envelope.MergeFrom(other.Envelope);
      }
      if (other.Simple != global::com.epl.protobuf.v1.SimpleState.SimpleUnknown) {
        Simple = other.Simple;
      }
      switch (other.DataCase) {
        case DataOneofCase.Wkt:
          Wkt = other.Wkt;
          break;
        case DataOneofCase.Geojson:
          Geojson = other.Geojson;
          break;
        case DataOneofCase.Wkb:
          Wkb = other.Wkb;
          break;
        case DataOneofCase.EsriShape:
          EsriShape = other.EsriShape;
          break;
        case DataOneofCase.Ewkb:
          Ewkb = other.Ewkb;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GeometryId = input.ReadUInt64();
            break;
          }
          case 18: {
            FeatureId = input.ReadString();
            break;
          }
          case 26: {
            Wkt = input.ReadString();
            break;
          }
          case 34: {
            Geojson = input.ReadString();
            break;
          }
          case 42: {
            Wkb = input.ReadBytes();
            break;
          }
          case 50: {
            EsriShape = input.ReadBytes();
            break;
          }
          case 58: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 106: {
            if (envelope_ == null) {
              Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Envelope);
            break;
          }
          case 112: {
            Simple = (global::com.epl.protobuf.v1.SimpleState) input.ReadEnum();
            break;
          }
          case 122: {
            Ewkb = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GeometryId = input.ReadUInt64();
            break;
          }
          case 18: {
            FeatureId = input.ReadString();
            break;
          }
          case 26: {
            Wkt = input.ReadString();
            break;
          }
          case 34: {
            Geojson = input.ReadString();
            break;
          }
          case 42: {
            Wkb = input.ReadBytes();
            break;
          }
          case 50: {
            EsriShape = input.ReadBytes();
            break;
          }
          case 58: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 106: {
            if (envelope_ == null) {
              Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Envelope);
            break;
          }
          case 112: {
            Simple = (global::com.epl.protobuf.v1.SimpleState) input.ReadEnum();
            break;
          }
          case 122: {
            Ewkb = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spatial Reference system. Used with a geometry to define the reference system of the geometry's coordinates
  /// </summary>
  public sealed partial class ProjectionData : pb::IMessage<ProjectionData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProjectionData> _parser = new pb::MessageParser<ProjectionData>(() => new ProjectionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectionData(ProjectionData other) : this() {
      geometry_ = other.geometry_ != null ? other.geometry_.Clone() : null;
      bbox_ = other.bbox_ != null ? other.bbox_.Clone() : null;
      centroid_ = other.centroid_ != null ? other.centroid_.Clone() : null;
      shape_ = other.shape_.Clone();
      transform_ = other.transform_.Clone();
      switch (other.DefinitionCase) {
        case DefinitionOneofCase.Epsg:
          Epsg = other.Epsg;
          break;
        case DefinitionOneofCase.Proj4:
          Proj4 = other.Proj4;
          break;
        case DefinitionOneofCase.Custom:
          Custom = other.Custom.Clone();
          break;
        case DefinitionOneofCase.Wkt:
          Wkt = other.Wkt;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectionData Clone() {
      return new ProjectionData(this);
    }

    /// <summary>Field number for the "epsg" field.</summary>
    public const int EpsgFieldNumber = 1;
    /// <summary>
    /// epsg wkid (well know id), or srid (spatial reference id) of the projected or geographic coordinate system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Epsg {
      get { return definitionCase_ == DefinitionOneofCase.Epsg ? (int) definition_ : 0; }
      set {
        definition_ = value;
        definitionCase_ = DefinitionOneofCase.Epsg;
      }
    }

    /// <summary>Field number for the "proj4" field.</summary>
    public const int Proj4FieldNumber = 2;
    /// <summary>
    /// proj string describing a projection or geographic coordinate system https://proj4.org/usage/projections.html
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Proj4 {
      get { return definitionCase_ == DefinitionOneofCase.Proj4 ? (string) definition_ : ""; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        definitionCase_ = DefinitionOneofCase.Proj4;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 3;
    /// <summary>
    /// custom projection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData.Types.Custom Custom {
      get { return definitionCase_ == DefinitionOneofCase.Custom ? (global::com.epl.protobuf.v1.ProjectionData.Types.Custom) definition_ : null; }
      set {
        definition_ = value;
        definitionCase_ = value == null ? DefinitionOneofCase.None : DefinitionOneofCase.Custom;
      }
    }

    /// <summary>Field number for the "wkt" field.</summary>
    public const int WktFieldNumber = 4;
    /// <summary>
    /// well-known text string of spatial reference
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wkt {
      get { return definitionCase_ == DefinitionOneofCase.Wkt ? (string) definition_ : ""; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        definitionCase_ = DefinitionOneofCase.Wkt;
      }
    }

    /// <summary>Field number for the "geometry" field.</summary>
    public const int GeometryFieldNumber = 10;
    private global::com.epl.protobuf.v1.GeometryData geometry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Geometry {
      get { return geometry_; }
      set {
        geometry_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 11;
    private global::com.epl.protobuf.v1.EnvelopeData bbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EnvelopeData Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "centroid" field.</summary>
    public const int CentroidFieldNumber = 12;
    private global::com.epl.protobuf.v1.GeometryData centroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Centroid {
      get { return centroid_; }
      set {
        centroid_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_shape_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> shape_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_transform_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> transform_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Transform {
      get { return transform_; }
    }

    private object definition_;
    /// <summary>Enum of possible cases for the "definition" oneof.</summary>
    public enum DefinitionOneofCase {
      None = 0,
      Epsg = 1,
      Proj4 = 2,
      Custom = 3,
      Wkt = 4,
    }
    private DefinitionOneofCase definitionCase_ = DefinitionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefinitionOneofCase DefinitionCase {
      get { return definitionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefinition() {
      definitionCase_ = DefinitionOneofCase.None;
      definition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Epsg != other.Epsg) return false;
      if (Proj4 != other.Proj4) return false;
      if (!object.Equals(Custom, other.Custom)) return false;
      if (Wkt != other.Wkt) return false;
      if (!object.Equals(Geometry, other.Geometry)) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(Centroid, other.Centroid)) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!transform_.Equals(other.transform_)) return false;
      if (DefinitionCase != other.DefinitionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (definitionCase_ == DefinitionOneofCase.Epsg) hash ^= Epsg.GetHashCode();
      if (definitionCase_ == DefinitionOneofCase.Proj4) hash ^= Proj4.GetHashCode();
      if (definitionCase_ == DefinitionOneofCase.Custom) hash ^= Custom.GetHashCode();
      if (definitionCase_ == DefinitionOneofCase.Wkt) hash ^= Wkt.GetHashCode();
      if (geometry_ != null) hash ^= Geometry.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (centroid_ != null) hash ^= Centroid.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= transform_.GetHashCode();
      hash ^= (int) definitionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (definitionCase_ == DefinitionOneofCase.Epsg) {
        output.WriteRawTag(8);
        output.WriteInt32(Epsg);
      }
      if (definitionCase_ == DefinitionOneofCase.Proj4) {
        output.WriteRawTag(18);
        output.WriteString(Proj4);
      }
      if (definitionCase_ == DefinitionOneofCase.Custom) {
        output.WriteRawTag(26);
        output.WriteMessage(Custom);
      }
      if (definitionCase_ == DefinitionOneofCase.Wkt) {
        output.WriteRawTag(34);
        output.WriteString(Wkt);
      }
      shape_.WriteTo(output, _repeated_shape_codec);
      transform_.WriteTo(output, _repeated_transform_codec);
      if (geometry_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Geometry);
      }
      if (bbox_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Bbox);
      }
      if (centroid_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Centroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (definitionCase_ == DefinitionOneofCase.Epsg) {
        output.WriteRawTag(8);
        output.WriteInt32(Epsg);
      }
      if (definitionCase_ == DefinitionOneofCase.Proj4) {
        output.WriteRawTag(18);
        output.WriteString(Proj4);
      }
      if (definitionCase_ == DefinitionOneofCase.Custom) {
        output.WriteRawTag(26);
        output.WriteMessage(Custom);
      }
      if (definitionCase_ == DefinitionOneofCase.Wkt) {
        output.WriteRawTag(34);
        output.WriteString(Wkt);
      }
      shape_.WriteTo(ref output, _repeated_shape_codec);
      transform_.WriteTo(ref output, _repeated_transform_codec);
      if (geometry_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Geometry);
      }
      if (bbox_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Bbox);
      }
      if (centroid_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Centroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (definitionCase_ == DefinitionOneofCase.Epsg) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Epsg);
      }
      if (definitionCase_ == DefinitionOneofCase.Proj4) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Proj4);
      }
      if (definitionCase_ == DefinitionOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Custom);
      }
      if (definitionCase_ == DefinitionOneofCase.Wkt) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wkt);
      }
      if (geometry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (centroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Centroid);
      }
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += transform_.CalculateSize(_repeated_transform_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectionData other) {
      if (other == null) {
        return;
      }
      if (other.geometry_ != null) {
        if (geometry_ == null) {
          Geometry = new global::com.epl.protobuf.v1.GeometryData();
        }
        Geometry.MergeFrom(other.Geometry);
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.centroid_ != null) {
        if (centroid_ == null) {
          Centroid = new global::com.epl.protobuf.v1.GeometryData();
        }
        Centroid.MergeFrom(other.Centroid);
      }
      shape_.Add(other.shape_);
      transform_.Add(other.transform_);
      switch (other.DefinitionCase) {
        case DefinitionOneofCase.Epsg:
          Epsg = other.Epsg;
          break;
        case DefinitionOneofCase.Proj4:
          Proj4 = other.Proj4;
          break;
        case DefinitionOneofCase.Custom:
          if (Custom == null) {
            Custom = new global::com.epl.protobuf.v1.ProjectionData.Types.Custom();
          }
          Custom.MergeFrom(other.Custom);
          break;
        case DefinitionOneofCase.Wkt:
          Wkt = other.Wkt;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Epsg = input.ReadInt32();
            break;
          }
          case 18: {
            Proj4 = input.ReadString();
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.ProjectionData.Types.Custom subBuilder = new global::com.epl.protobuf.v1.ProjectionData.Types.Custom();
            if (definitionCase_ == DefinitionOneofCase.Custom) {
              subBuilder.MergeFrom(Custom);
            }
            input.ReadMessage(subBuilder);
            Custom = subBuilder;
            break;
          }
          case 34: {
            Wkt = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 74:
          case 73: {
            transform_.AddEntriesFrom(input, _repeated_transform_codec);
            break;
          }
          case 82: {
            if (geometry_ == null) {
              Geometry = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Geometry);
            break;
          }
          case 90: {
            if (bbox_ == null) {
              Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Bbox);
            break;
          }
          case 98: {
            if (centroid_ == null) {
              Centroid = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Centroid);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Epsg = input.ReadInt32();
            break;
          }
          case 18: {
            Proj4 = input.ReadString();
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.ProjectionData.Types.Custom subBuilder = new global::com.epl.protobuf.v1.ProjectionData.Types.Custom();
            if (definitionCase_ == DefinitionOneofCase.Custom) {
              subBuilder.MergeFrom(Custom);
            }
            input.ReadMessage(subBuilder);
            Custom = subBuilder;
            break;
          }
          case 34: {
            Wkt = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            shape_.AddEntriesFrom(ref input, _repeated_shape_codec);
            break;
          }
          case 74:
          case 73: {
            transform_.AddEntriesFrom(ref input, _repeated_transform_codec);
            break;
          }
          case 82: {
            if (geometry_ == null) {
              Geometry = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Geometry);
            break;
          }
          case 90: {
            if (bbox_ == null) {
              Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Bbox);
            break;
          }
          case 98: {
            if (centroid_ == null) {
              Centroid = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Centroid);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ProjectionData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Projection names
      /// </summary>
      public enum CSType {
        /// <summary>
        /// default is Lambert Azimuthal Equal Area Projection, with x origin x_0=4321000 and y origin y_0=3210000
        /// </summary>
        [pbr::OriginalName("LAMBERT_AZI")] LambertAzi = 0,
      }

      /// <summary>
      /// Projected coordinate system that doesn't have a wkid / srid
      /// </summary>
      public sealed partial class Custom : pb::IMessage<Custom>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Custom> _parser = new pb::MessageParser<Custom>(() => new Custom());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Custom> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.ProjectionData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom(Custom other) : this() {
          lon0_ = other.lon0_;
          lat0_ = other.lat0_;
          csType_ = other.csType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Custom Clone() {
          return new Custom(this);
        }

        /// <summary>Field number for the "lon_0" field.</summary>
        public const int Lon0FieldNumber = 1;
        private double lon0_;
        /// <summary>
        /// longitude of center of projection (central meridian)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Lon0 {
          get { return lon0_; }
          set {
            lon0_ = value;
          }
        }

        /// <summary>Field number for the "lat_0" field.</summary>
        public const int Lat0FieldNumber = 2;
        private double lat0_;
        /// <summary>
        /// latitude of center of projection (latitude of origin)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Lat0 {
          get { return lat0_; }
          set {
            lat0_ = value;
          }
        }

        /// <summary>Field number for the "cs_type" field.</summary>
        public const int CsTypeFieldNumber = 3;
        private global::com.epl.protobuf.v1.ProjectionData.Types.CSType csType_ = global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi;
        /// <summary>
        /// enum defining the type of projection
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::com.epl.protobuf.v1.ProjectionData.Types.CSType CsType {
          get { return csType_; }
          set {
            csType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Custom);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Custom other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon0, other.Lon0)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat0, other.Lat0)) return false;
          if (CsType != other.CsType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Lon0 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon0);
          if (Lat0 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat0);
          if (CsType != global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi) hash ^= CsType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Lon0 != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Lon0);
          }
          if (Lat0 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Lat0);
          }
          if (CsType != global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi) {
            output.WriteRawTag(24);
            output.WriteEnum((int) CsType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Lon0 != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Lon0);
          }
          if (Lat0 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Lat0);
          }
          if (CsType != global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi) {
            output.WriteRawTag(24);
            output.WriteEnum((int) CsType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Lon0 != 0D) {
            size += 1 + 8;
          }
          if (Lat0 != 0D) {
            size += 1 + 8;
          }
          if (CsType != global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CsType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Custom other) {
          if (other == null) {
            return;
          }
          if (other.Lon0 != 0D) {
            Lon0 = other.Lon0;
          }
          if (other.Lat0 != 0D) {
            Lat0 = other.Lat0;
          }
          if (other.CsType != global::com.epl.protobuf.v1.ProjectionData.Types.CSType.LambertAzi) {
            CsType = other.CsType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Lon0 = input.ReadDouble();
                break;
              }
              case 17: {
                Lat0 = input.ReadDouble();
                break;
              }
              case 24: {
                CsType = (global::com.epl.protobuf.v1.ProjectionData.Types.CSType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Lon0 = input.ReadDouble();
                break;
              }
              case 17: {
                Lat0 = input.ReadDouble();
                break;
              }
              case 24: {
                CsType = (global::com.epl.protobuf.v1.ProjectionData.Types.CSType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Container for Envelope data (bounding box), x and y min and max and an optional spatial reference
  /// </summary>
  public sealed partial class EnvelopeData : pb::IMessage<EnvelopeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnvelopeData> _parser = new pb::MessageParser<EnvelopeData>(() => new EnvelopeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnvelopeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnvelopeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnvelopeData(EnvelopeData other) : this() {
      xmin_ = other.xmin_;
      ymin_ = other.ymin_;
      xmax_ = other.xmax_;
      ymax_ = other.ymax_;
      proj_ = other.proj_ != null ? other.proj_.Clone() : null;
      zmin_ = other.zmin_;
      zmax_ = other.zmax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnvelopeData Clone() {
      return new EnvelopeData(this);
    }

    /// <summary>Field number for the "xmin" field.</summary>
    public const int XminFieldNumber = 1;
    private double xmin_;
    /// <summary>
    /// min x value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Xmin {
      get { return xmin_; }
      set {
        xmin_ = value;
      }
    }

    /// <summary>Field number for the "ymin" field.</summary>
    public const int YminFieldNumber = 2;
    private double ymin_;
    /// <summary>
    /// min y value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ymin {
      get { return ymin_; }
      set {
        ymin_ = value;
      }
    }

    /// <summary>Field number for the "xmax" field.</summary>
    public const int XmaxFieldNumber = 3;
    private double xmax_;
    /// <summary>
    /// max x value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Xmax {
      get { return xmax_; }
      set {
        xmax_ = value;
      }
    }

    /// <summary>Field number for the "ymax" field.</summary>
    public const int YmaxFieldNumber = 4;
    private double ymax_;
    /// <summary>
    /// max y value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ymax {
      get { return ymax_; }
      set {
        ymax_ = value;
      }
    }

    /// <summary>Field number for the "proj" field.</summary>
    public const int ProjFieldNumber = 5;
    private global::com.epl.protobuf.v1.ProjectionData proj_;
    /// <summary>
    /// spatial reference of envelope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData Proj {
      get { return proj_; }
      set {
        proj_ = value;
      }
    }

    /// <summary>Field number for the "zmin" field.</summary>
    public const int ZminFieldNumber = 6;
    private double zmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Zmin {
      get { return zmin_; }
      set {
        zmin_ = value;
      }
    }

    /// <summary>Field number for the "zmax" field.</summary>
    public const int ZmaxFieldNumber = 7;
    private double zmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Zmax {
      get { return zmax_; }
      set {
        zmax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnvelopeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnvelopeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Xmin, other.Xmin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ymin, other.Ymin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Xmax, other.Xmax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ymax, other.Ymax)) return false;
      if (!object.Equals(Proj, other.Proj)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Zmin, other.Zmin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Zmax, other.Zmax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Xmin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Xmin);
      if (Ymin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ymin);
      if (Xmax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Xmax);
      if (Ymax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ymax);
      if (proj_ != null) hash ^= Proj.GetHashCode();
      if (Zmin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Zmin);
      if (Zmax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Zmax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Xmin != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Xmin);
      }
      if (Ymin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Ymin);
      }
      if (Xmax != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Xmax);
      }
      if (Ymax != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Ymax);
      }
      if (proj_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Proj);
      }
      if (Zmin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Zmin);
      }
      if (Zmax != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Zmax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Xmin != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Xmin);
      }
      if (Ymin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Ymin);
      }
      if (Xmax != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Xmax);
      }
      if (Ymax != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Ymax);
      }
      if (proj_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Proj);
      }
      if (Zmin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Zmin);
      }
      if (Zmax != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Zmax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Xmin != 0D) {
        size += 1 + 8;
      }
      if (Ymin != 0D) {
        size += 1 + 8;
      }
      if (Xmax != 0D) {
        size += 1 + 8;
      }
      if (Ymax != 0D) {
        size += 1 + 8;
      }
      if (proj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proj);
      }
      if (Zmin != 0D) {
        size += 1 + 8;
      }
      if (Zmax != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnvelopeData other) {
      if (other == null) {
        return;
      }
      if (other.Xmin != 0D) {
        Xmin = other.Xmin;
      }
      if (other.Ymin != 0D) {
        Ymin = other.Ymin;
      }
      if (other.Xmax != 0D) {
        Xmax = other.Xmax;
      }
      if (other.Ymax != 0D) {
        Ymax = other.Ymax;
      }
      if (other.proj_ != null) {
        if (proj_ == null) {
          Proj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        Proj.MergeFrom(other.Proj);
      }
      if (other.Zmin != 0D) {
        Zmin = other.Zmin;
      }
      if (other.Zmax != 0D) {
        Zmax = other.Zmax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Xmin = input.ReadDouble();
            break;
          }
          case 17: {
            Ymin = input.ReadDouble();
            break;
          }
          case 25: {
            Xmax = input.ReadDouble();
            break;
          }
          case 33: {
            Ymax = input.ReadDouble();
            break;
          }
          case 42: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 49: {
            Zmin = input.ReadDouble();
            break;
          }
          case 57: {
            Zmax = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Xmin = input.ReadDouble();
            break;
          }
          case 17: {
            Ymin = input.ReadDouble();
            break;
          }
          case 25: {
            Xmax = input.ReadDouble();
            break;
          }
          case 33: {
            Ymax = input.ReadDouble();
            break;
          }
          case 42: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 49: {
            Zmin = input.ReadDouble();
            break;
          }
          case 57: {
            Zmax = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// response message for insertion and updates to stac db
  /// </summary>
  public sealed partial class GeometryRequest : pb::IMessage<GeometryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeometryRequest> _parser = new pb::MessageParser<GeometryRequest>(() => new GeometryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeometryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryRequest(GeometryRequest other) : this() {
      operator_ = other.operator_;
      resultEncoding_ = other.resultEncoding_;
      operationProj_ = other.operationProj_ != null ? other.operationProj_.Clone() : null;
      resultProj_ = other.resultProj_ != null ? other.resultProj_.Clone() : null;
      switch (other.LeftCase) {
        case LeftOneofCase.Geometry:
          Geometry = other.Geometry.Clone();
          break;
        case LeftOneofCase.LeftGeometry:
          LeftGeometry = other.LeftGeometry.Clone();
          break;
        case LeftOneofCase.GeometryRequest_:
          GeometryRequest_ = other.GeometryRequest_.Clone();
          break;
        case LeftOneofCase.LeftGeometryRequest:
          LeftGeometryRequest = other.LeftGeometryRequest.Clone();
          break;
      }

      switch (other.RightCase) {
        case RightOneofCase.RightGeometry:
          RightGeometry = other.RightGeometry.Clone();
          break;
        case RightOneofCase.RightGeometryRequest:
          RightGeometryRequest = other.RightGeometryRequest.Clone();
          break;
      }

      switch (other.ParamsCase) {
        case ParamsOneofCase.BufferParams:
          BufferParams = other.BufferParams.Clone();
          break;
        case ParamsOneofCase.ConvexParams:
          ConvexParams = other.ConvexParams.Clone();
          break;
        case ParamsOneofCase.RelateParams:
          RelateParams = other.RelateParams.Clone();
          break;
        case ParamsOneofCase.RandomPointsParams:
          RandomPointsParams = other.RandomPointsParams.Clone();
          break;
        case ParamsOneofCase.GeneralizeParams:
          GeneralizeParams = other.GeneralizeParams.Clone();
          break;
        case ParamsOneofCase.IntersectionParams:
          IntersectionParams = other.IntersectionParams.Clone();
          break;
        case ParamsOneofCase.OffsetParams:
          OffsetParams = other.OffsetParams.Clone();
          break;
        case ParamsOneofCase.CutParams:
          CutParams = other.CutParams.Clone();
          break;
        case ParamsOneofCase.ClipParams:
          ClipParams = other.ClipParams.Clone();
          break;
        case ParamsOneofCase.DensifyParams:
          DensifyParams = other.DensifyParams.Clone();
          break;
        case ParamsOneofCase.SimplifyParams:
          SimplifyParams = other.SimplifyParams.Clone();
          break;
        case ParamsOneofCase.GeneralizeByAreaParams:
          GeneralizeByAreaParams = other.GeneralizeByAreaParams.Clone();
          break;
        case ParamsOneofCase.AffineTransformParams:
          AffineTransformParams = other.AffineTransformParams.Clone();
          break;
        case ParamsOneofCase.GeodeticBufferParams:
          GeodeticBufferParams = other.GeodeticBufferParams.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryRequest Clone() {
      return new GeometryRequest(this);
    }

    /// <summary>Field number for the "geometry" field.</summary>
    public const int GeometryFieldNumber = 1;
    /// <summary>
    /// geometry to be operated on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Geometry {
      get { return leftCase_ == LeftOneofCase.Geometry ? (global::com.epl.protobuf.v1.GeometryData) left_ : null; }
      set {
        left_ = value;
        leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.Geometry;
      }
    }

    /// <summary>Field number for the "left_geometry" field.</summary>
    public const int LeftGeometryFieldNumber = 2;
    /// <summary>
    /// if there are two geometries to operate on, then this is the first geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData LeftGeometry {
      get { return leftCase_ == LeftOneofCase.LeftGeometry ? (global::com.epl.protobuf.v1.GeometryData) left_ : null; }
      set {
        left_ = value;
        leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftGeometry;
      }
    }

    /// <summary>Field number for the "geometry_request" field.</summary>
    public const int GeometryRequest_FieldNumber = 3;
    /// <summary>
    /// the result of the geometry request is to be operated on by this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryRequest GeometryRequest_ {
      get { return leftCase_ == LeftOneofCase.GeometryRequest_ ? (global::com.epl.protobuf.v1.GeometryRequest) left_ : null; }
      set {
        left_ = value;
        leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.GeometryRequest_;
      }
    }

    /// <summary>Field number for the "left_geometry_request" field.</summary>
    public const int LeftGeometryRequestFieldNumber = 4;
    /// <summary>
    /// if there are two geometries, the left geometry request is to be operated on by this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryRequest LeftGeometryRequest {
      get { return leftCase_ == LeftOneofCase.LeftGeometryRequest ? (global::com.epl.protobuf.v1.GeometryRequest) left_ : null; }
      set {
        left_ = value;
        leftCase_ = value == null ? LeftOneofCase.None : LeftOneofCase.LeftGeometryRequest;
      }
    }

    /// <summary>Field number for the "right_geometry" field.</summary>
    public const int RightGeometryFieldNumber = 5;
    /// <summary>
    /// if there are two geometries to operate on, then this is the second geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData RightGeometry {
      get { return rightCase_ == RightOneofCase.RightGeometry ? (global::com.epl.protobuf.v1.GeometryData) right_ : null; }
      set {
        right_ = value;
        rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightGeometry;
      }
    }

    /// <summary>Field number for the "right_geometry_request" field.</summary>
    public const int RightGeometryRequestFieldNumber = 6;
    /// <summary>
    /// if there are two geometries, the right geometry request is to be operated on by this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryRequest RightGeometryRequest {
      get { return rightCase_ == RightOneofCase.RightGeometryRequest ? (global::com.epl.protobuf.v1.GeometryRequest) right_ : null; }
      set {
        right_ = value;
        rightCase_ = value == null ? RightOneofCase.None : RightOneofCase.RightGeometryRequest;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 7;
    private global::com.epl.protobuf.v1.OperatorType operator_ = global::com.epl.protobuf.v1.OperatorType.UnknownOperator;
    /// <summary>
    /// (default is PROJECT) geometry operation to perform on input geometries
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.OperatorType Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "result_encoding" field.</summary>
    public const int ResultEncodingFieldNumber = 8;
    private global::com.epl.protobuf.v1.Encoding resultEncoding_ = global::com.epl.protobuf.v1.Encoding.UnknownEncoding;
    /// <summary>
    /// (default is wkb) encoding, wkt, wkb, esri_shape, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Encoding ResultEncoding {
      get { return resultEncoding_; }
      set {
        resultEncoding_ = value;
      }
    }

    /// <summary>Field number for the "operation_proj" field.</summary>
    public const int OperationProjFieldNumber = 9;
    private global::com.epl.protobuf.v1.ProjectionData operationProj_;
    /// <summary>
    /// (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData OperationProj {
      get { return operationProj_; }
      set {
        operationProj_ = value;
      }
    }

    /// <summary>Field number for the "result_proj" field.</summary>
    public const int ResultProjFieldNumber = 10;
    private global::com.epl.protobuf.v1.ProjectionData resultProj_;
    /// <summary>
    /// (optional) after the operation has been completed, project the results to a new spatial reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData ResultProj {
      get { return resultProj_; }
      set {
        resultProj_ = value;
      }
    }

    /// <summary>Field number for the "buffer_params" field.</summary>
    public const int BufferParamsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Buffer BufferParams {
      get { return paramsCase_ == ParamsOneofCase.BufferParams ? (global::com.epl.protobuf.v1.Params.Types.Buffer) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.BufferParams;
      }
    }

    /// <summary>Field number for the "convex_params" field.</summary>
    public const int ConvexParamsFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Convex ConvexParams {
      get { return paramsCase_ == ParamsOneofCase.ConvexParams ? (global::com.epl.protobuf.v1.Params.Types.Convex) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.ConvexParams;
      }
    }

    /// <summary>Field number for the "relate_params" field.</summary>
    public const int RelateParamsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Relate RelateParams {
      get { return paramsCase_ == ParamsOneofCase.RelateParams ? (global::com.epl.protobuf.v1.Params.Types.Relate) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.RelateParams;
      }
    }

    /// <summary>Field number for the "random_points_params" field.</summary>
    public const int RandomPointsParamsFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.RandomPoints RandomPointsParams {
      get { return paramsCase_ == ParamsOneofCase.RandomPointsParams ? (global::com.epl.protobuf.v1.Params.Types.RandomPoints) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.RandomPointsParams;
      }
    }

    /// <summary>Field number for the "generalize_params" field.</summary>
    public const int GeneralizeParamsFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Generalize GeneralizeParams {
      get { return paramsCase_ == ParamsOneofCase.GeneralizeParams ? (global::com.epl.protobuf.v1.Params.Types.Generalize) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.GeneralizeParams;
      }
    }

    /// <summary>Field number for the "intersection_params" field.</summary>
    public const int IntersectionParamsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Intersection IntersectionParams {
      get { return paramsCase_ == ParamsOneofCase.IntersectionParams ? (global::com.epl.protobuf.v1.Params.Types.Intersection) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.IntersectionParams;
      }
    }

    /// <summary>Field number for the "offset_params" field.</summary>
    public const int OffsetParamsFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Offset OffsetParams {
      get { return paramsCase_ == ParamsOneofCase.OffsetParams ? (global::com.epl.protobuf.v1.Params.Types.Offset) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.OffsetParams;
      }
    }

    /// <summary>Field number for the "cut_params" field.</summary>
    public const int CutParamsFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Cut CutParams {
      get { return paramsCase_ == ParamsOneofCase.CutParams ? (global::com.epl.protobuf.v1.Params.Types.Cut) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.CutParams;
      }
    }

    /// <summary>Field number for the "clip_params" field.</summary>
    public const int ClipParamsFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Clip ClipParams {
      get { return paramsCase_ == ParamsOneofCase.ClipParams ? (global::com.epl.protobuf.v1.Params.Types.Clip) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.ClipParams;
      }
    }

    /// <summary>Field number for the "densify_params" field.</summary>
    public const int DensifyParamsFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Densify DensifyParams {
      get { return paramsCase_ == ParamsOneofCase.DensifyParams ? (global::com.epl.protobuf.v1.Params.Types.Densify) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.DensifyParams;
      }
    }

    /// <summary>Field number for the "simplify_params" field.</summary>
    public const int SimplifyParamsFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.Simplify SimplifyParams {
      get { return paramsCase_ == ParamsOneofCase.SimplifyParams ? (global::com.epl.protobuf.v1.Params.Types.Simplify) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.SimplifyParams;
      }
    }

    /// <summary>Field number for the "generalize_by_area_params" field.</summary>
    public const int GeneralizeByAreaParamsFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea GeneralizeByAreaParams {
      get { return paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams ? (global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.GeneralizeByAreaParams;
      }
    }

    /// <summary>Field number for the "affine_transform_params" field.</summary>
    public const int AffineTransformParamsFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.AffineTransform AffineTransformParams {
      get { return paramsCase_ == ParamsOneofCase.AffineTransformParams ? (global::com.epl.protobuf.v1.Params.Types.AffineTransform) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.AffineTransformParams;
      }
    }

    /// <summary>Field number for the "geodetic_buffer_params" field.</summary>
    public const int GeodeticBufferParamsFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer GeodeticBufferParams {
      get { return paramsCase_ == ParamsOneofCase.GeodeticBufferParams ? (global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer) params_ : null; }
      set {
        params_ = value;
        paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.GeodeticBufferParams;
      }
    }

    private object left_;
    /// <summary>Enum of possible cases for the "left" oneof.</summary>
    public enum LeftOneofCase {
      None = 0,
      Geometry = 1,
      LeftGeometry = 2,
      GeometryRequest_ = 3,
      LeftGeometryRequest = 4,
    }
    private LeftOneofCase leftCase_ = LeftOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeftOneofCase LeftCase {
      get { return leftCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeft() {
      leftCase_ = LeftOneofCase.None;
      left_ = null;
    }

    private object right_;
    /// <summary>Enum of possible cases for the "right" oneof.</summary>
    public enum RightOneofCase {
      None = 0,
      RightGeometry = 5,
      RightGeometryRequest = 6,
    }
    private RightOneofCase rightCase_ = RightOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RightOneofCase RightCase {
      get { return rightCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRight() {
      rightCase_ = RightOneofCase.None;
      right_ = null;
    }

    private object params_;
    /// <summary>Enum of possible cases for the "params" oneof.</summary>
    public enum ParamsOneofCase {
      None = 0,
      BufferParams = 11,
      ConvexParams = 12,
      RelateParams = 13,
      RandomPointsParams = 14,
      GeneralizeParams = 15,
      IntersectionParams = 16,
      OffsetParams = 17,
      CutParams = 18,
      ClipParams = 19,
      DensifyParams = 20,
      SimplifyParams = 21,
      GeneralizeByAreaParams = 22,
      AffineTransformParams = 23,
      GeodeticBufferParams = 24,
    }
    private ParamsOneofCase paramsCase_ = ParamsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamsOneofCase ParamsCase {
      get { return paramsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParams() {
      paramsCase_ = ParamsOneofCase.None;
      params_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeometryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeometryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Geometry, other.Geometry)) return false;
      if (!object.Equals(LeftGeometry, other.LeftGeometry)) return false;
      if (!object.Equals(GeometryRequest_, other.GeometryRequest_)) return false;
      if (!object.Equals(LeftGeometryRequest, other.LeftGeometryRequest)) return false;
      if (!object.Equals(RightGeometry, other.RightGeometry)) return false;
      if (!object.Equals(RightGeometryRequest, other.RightGeometryRequest)) return false;
      if (Operator != other.Operator) return false;
      if (ResultEncoding != other.ResultEncoding) return false;
      if (!object.Equals(OperationProj, other.OperationProj)) return false;
      if (!object.Equals(ResultProj, other.ResultProj)) return false;
      if (!object.Equals(BufferParams, other.BufferParams)) return false;
      if (!object.Equals(ConvexParams, other.ConvexParams)) return false;
      if (!object.Equals(RelateParams, other.RelateParams)) return false;
      if (!object.Equals(RandomPointsParams, other.RandomPointsParams)) return false;
      if (!object.Equals(GeneralizeParams, other.GeneralizeParams)) return false;
      if (!object.Equals(IntersectionParams, other.IntersectionParams)) return false;
      if (!object.Equals(OffsetParams, other.OffsetParams)) return false;
      if (!object.Equals(CutParams, other.CutParams)) return false;
      if (!object.Equals(ClipParams, other.ClipParams)) return false;
      if (!object.Equals(DensifyParams, other.DensifyParams)) return false;
      if (!object.Equals(SimplifyParams, other.SimplifyParams)) return false;
      if (!object.Equals(GeneralizeByAreaParams, other.GeneralizeByAreaParams)) return false;
      if (!object.Equals(AffineTransformParams, other.AffineTransformParams)) return false;
      if (!object.Equals(GeodeticBufferParams, other.GeodeticBufferParams)) return false;
      if (LeftCase != other.LeftCase) return false;
      if (RightCase != other.RightCase) return false;
      if (ParamsCase != other.ParamsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (leftCase_ == LeftOneofCase.Geometry) hash ^= Geometry.GetHashCode();
      if (leftCase_ == LeftOneofCase.LeftGeometry) hash ^= LeftGeometry.GetHashCode();
      if (leftCase_ == LeftOneofCase.GeometryRequest_) hash ^= GeometryRequest_.GetHashCode();
      if (leftCase_ == LeftOneofCase.LeftGeometryRequest) hash ^= LeftGeometryRequest.GetHashCode();
      if (rightCase_ == RightOneofCase.RightGeometry) hash ^= RightGeometry.GetHashCode();
      if (rightCase_ == RightOneofCase.RightGeometryRequest) hash ^= RightGeometryRequest.GetHashCode();
      if (Operator != global::com.epl.protobuf.v1.OperatorType.UnknownOperator) hash ^= Operator.GetHashCode();
      if (ResultEncoding != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) hash ^= ResultEncoding.GetHashCode();
      if (operationProj_ != null) hash ^= OperationProj.GetHashCode();
      if (resultProj_ != null) hash ^= ResultProj.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.BufferParams) hash ^= BufferParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.ConvexParams) hash ^= ConvexParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.RelateParams) hash ^= RelateParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.RandomPointsParams) hash ^= RandomPointsParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.GeneralizeParams) hash ^= GeneralizeParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.IntersectionParams) hash ^= IntersectionParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.OffsetParams) hash ^= OffsetParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.CutParams) hash ^= CutParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.ClipParams) hash ^= ClipParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.DensifyParams) hash ^= DensifyParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.SimplifyParams) hash ^= SimplifyParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) hash ^= GeneralizeByAreaParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.AffineTransformParams) hash ^= AffineTransformParams.GetHashCode();
      if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) hash ^= GeodeticBufferParams.GetHashCode();
      hash ^= (int) leftCase_;
      hash ^= (int) rightCase_;
      hash ^= (int) paramsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (leftCase_ == LeftOneofCase.Geometry) {
        output.WriteRawTag(10);
        output.WriteMessage(Geometry);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometry) {
        output.WriteRawTag(18);
        output.WriteMessage(LeftGeometry);
      }
      if (leftCase_ == LeftOneofCase.GeometryRequest_) {
        output.WriteRawTag(26);
        output.WriteMessage(GeometryRequest_);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometryRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(LeftGeometryRequest);
      }
      if (rightCase_ == RightOneofCase.RightGeometry) {
        output.WriteRawTag(42);
        output.WriteMessage(RightGeometry);
      }
      if (rightCase_ == RightOneofCase.RightGeometryRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(RightGeometryRequest);
      }
      if (Operator != global::com.epl.protobuf.v1.OperatorType.UnknownOperator) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Operator);
      }
      if (ResultEncoding != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ResultEncoding);
      }
      if (operationProj_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OperationProj);
      }
      if (resultProj_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ResultProj);
      }
      if (paramsCase_ == ParamsOneofCase.BufferParams) {
        output.WriteRawTag(90);
        output.WriteMessage(BufferParams);
      }
      if (paramsCase_ == ParamsOneofCase.ConvexParams) {
        output.WriteRawTag(98);
        output.WriteMessage(ConvexParams);
      }
      if (paramsCase_ == ParamsOneofCase.RelateParams) {
        output.WriteRawTag(106);
        output.WriteMessage(RelateParams);
      }
      if (paramsCase_ == ParamsOneofCase.RandomPointsParams) {
        output.WriteRawTag(114);
        output.WriteMessage(RandomPointsParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeParams) {
        output.WriteRawTag(122);
        output.WriteMessage(GeneralizeParams);
      }
      if (paramsCase_ == ParamsOneofCase.IntersectionParams) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IntersectionParams);
      }
      if (paramsCase_ == ParamsOneofCase.OffsetParams) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(OffsetParams);
      }
      if (paramsCase_ == ParamsOneofCase.CutParams) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CutParams);
      }
      if (paramsCase_ == ParamsOneofCase.ClipParams) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ClipParams);
      }
      if (paramsCase_ == ParamsOneofCase.DensifyParams) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(DensifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.SimplifyParams) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SimplifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GeneralizeByAreaParams);
      }
      if (paramsCase_ == ParamsOneofCase.AffineTransformParams) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(AffineTransformParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(GeodeticBufferParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (leftCase_ == LeftOneofCase.Geometry) {
        output.WriteRawTag(10);
        output.WriteMessage(Geometry);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometry) {
        output.WriteRawTag(18);
        output.WriteMessage(LeftGeometry);
      }
      if (leftCase_ == LeftOneofCase.GeometryRequest_) {
        output.WriteRawTag(26);
        output.WriteMessage(GeometryRequest_);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometryRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(LeftGeometryRequest);
      }
      if (rightCase_ == RightOneofCase.RightGeometry) {
        output.WriteRawTag(42);
        output.WriteMessage(RightGeometry);
      }
      if (rightCase_ == RightOneofCase.RightGeometryRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(RightGeometryRequest);
      }
      if (Operator != global::com.epl.protobuf.v1.OperatorType.UnknownOperator) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Operator);
      }
      if (ResultEncoding != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ResultEncoding);
      }
      if (operationProj_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OperationProj);
      }
      if (resultProj_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ResultProj);
      }
      if (paramsCase_ == ParamsOneofCase.BufferParams) {
        output.WriteRawTag(90);
        output.WriteMessage(BufferParams);
      }
      if (paramsCase_ == ParamsOneofCase.ConvexParams) {
        output.WriteRawTag(98);
        output.WriteMessage(ConvexParams);
      }
      if (paramsCase_ == ParamsOneofCase.RelateParams) {
        output.WriteRawTag(106);
        output.WriteMessage(RelateParams);
      }
      if (paramsCase_ == ParamsOneofCase.RandomPointsParams) {
        output.WriteRawTag(114);
        output.WriteMessage(RandomPointsParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeParams) {
        output.WriteRawTag(122);
        output.WriteMessage(GeneralizeParams);
      }
      if (paramsCase_ == ParamsOneofCase.IntersectionParams) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IntersectionParams);
      }
      if (paramsCase_ == ParamsOneofCase.OffsetParams) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(OffsetParams);
      }
      if (paramsCase_ == ParamsOneofCase.CutParams) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CutParams);
      }
      if (paramsCase_ == ParamsOneofCase.ClipParams) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ClipParams);
      }
      if (paramsCase_ == ParamsOneofCase.DensifyParams) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(DensifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.SimplifyParams) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SimplifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GeneralizeByAreaParams);
      }
      if (paramsCase_ == ParamsOneofCase.AffineTransformParams) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(AffineTransformParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(GeodeticBufferParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (leftCase_ == LeftOneofCase.Geometry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftGeometry);
      }
      if (leftCase_ == LeftOneofCase.GeometryRequest_) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeometryRequest_);
      }
      if (leftCase_ == LeftOneofCase.LeftGeometryRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftGeometryRequest);
      }
      if (rightCase_ == RightOneofCase.RightGeometry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightGeometry);
      }
      if (rightCase_ == RightOneofCase.RightGeometryRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightGeometryRequest);
      }
      if (Operator != global::com.epl.protobuf.v1.OperatorType.UnknownOperator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (ResultEncoding != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultEncoding);
      }
      if (operationProj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationProj);
      }
      if (resultProj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultProj);
      }
      if (paramsCase_ == ParamsOneofCase.BufferParams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BufferParams);
      }
      if (paramsCase_ == ParamsOneofCase.ConvexParams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvexParams);
      }
      if (paramsCase_ == ParamsOneofCase.RelateParams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelateParams);
      }
      if (paramsCase_ == ParamsOneofCase.RandomPointsParams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomPointsParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeParams) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeneralizeParams);
      }
      if (paramsCase_ == ParamsOneofCase.IntersectionParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IntersectionParams);
      }
      if (paramsCase_ == ParamsOneofCase.OffsetParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffsetParams);
      }
      if (paramsCase_ == ParamsOneofCase.CutParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CutParams);
      }
      if (paramsCase_ == ParamsOneofCase.ClipParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClipParams);
      }
      if (paramsCase_ == ParamsOneofCase.DensifyParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DensifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.SimplifyParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SimplifyParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GeneralizeByAreaParams);
      }
      if (paramsCase_ == ParamsOneofCase.AffineTransformParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AffineTransformParams);
      }
      if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GeodeticBufferParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeometryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Operator != global::com.epl.protobuf.v1.OperatorType.UnknownOperator) {
        Operator = other.Operator;
      }
      if (other.ResultEncoding != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        ResultEncoding = other.ResultEncoding;
      }
      if (other.operationProj_ != null) {
        if (operationProj_ == null) {
          OperationProj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        OperationProj.MergeFrom(other.OperationProj);
      }
      if (other.resultProj_ != null) {
        if (resultProj_ == null) {
          ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        ResultProj.MergeFrom(other.ResultProj);
      }
      switch (other.LeftCase) {
        case LeftOneofCase.Geometry:
          if (Geometry == null) {
            Geometry = new global::com.epl.protobuf.v1.GeometryData();
          }
          Geometry.MergeFrom(other.Geometry);
          break;
        case LeftOneofCase.LeftGeometry:
          if (LeftGeometry == null) {
            LeftGeometry = new global::com.epl.protobuf.v1.GeometryData();
          }
          LeftGeometry.MergeFrom(other.LeftGeometry);
          break;
        case LeftOneofCase.GeometryRequest_:
          if (GeometryRequest_ == null) {
            GeometryRequest_ = new global::com.epl.protobuf.v1.GeometryRequest();
          }
          GeometryRequest_.MergeFrom(other.GeometryRequest_);
          break;
        case LeftOneofCase.LeftGeometryRequest:
          if (LeftGeometryRequest == null) {
            LeftGeometryRequest = new global::com.epl.protobuf.v1.GeometryRequest();
          }
          LeftGeometryRequest.MergeFrom(other.LeftGeometryRequest);
          break;
      }

      switch (other.RightCase) {
        case RightOneofCase.RightGeometry:
          if (RightGeometry == null) {
            RightGeometry = new global::com.epl.protobuf.v1.GeometryData();
          }
          RightGeometry.MergeFrom(other.RightGeometry);
          break;
        case RightOneofCase.RightGeometryRequest:
          if (RightGeometryRequest == null) {
            RightGeometryRequest = new global::com.epl.protobuf.v1.GeometryRequest();
          }
          RightGeometryRequest.MergeFrom(other.RightGeometryRequest);
          break;
      }

      switch (other.ParamsCase) {
        case ParamsOneofCase.BufferParams:
          if (BufferParams == null) {
            BufferParams = new global::com.epl.protobuf.v1.Params.Types.Buffer();
          }
          BufferParams.MergeFrom(other.BufferParams);
          break;
        case ParamsOneofCase.ConvexParams:
          if (ConvexParams == null) {
            ConvexParams = new global::com.epl.protobuf.v1.Params.Types.Convex();
          }
          ConvexParams.MergeFrom(other.ConvexParams);
          break;
        case ParamsOneofCase.RelateParams:
          if (RelateParams == null) {
            RelateParams = new global::com.epl.protobuf.v1.Params.Types.Relate();
          }
          RelateParams.MergeFrom(other.RelateParams);
          break;
        case ParamsOneofCase.RandomPointsParams:
          if (RandomPointsParams == null) {
            RandomPointsParams = new global::com.epl.protobuf.v1.Params.Types.RandomPoints();
          }
          RandomPointsParams.MergeFrom(other.RandomPointsParams);
          break;
        case ParamsOneofCase.GeneralizeParams:
          if (GeneralizeParams == null) {
            GeneralizeParams = new global::com.epl.protobuf.v1.Params.Types.Generalize();
          }
          GeneralizeParams.MergeFrom(other.GeneralizeParams);
          break;
        case ParamsOneofCase.IntersectionParams:
          if (IntersectionParams == null) {
            IntersectionParams = new global::com.epl.protobuf.v1.Params.Types.Intersection();
          }
          IntersectionParams.MergeFrom(other.IntersectionParams);
          break;
        case ParamsOneofCase.OffsetParams:
          if (OffsetParams == null) {
            OffsetParams = new global::com.epl.protobuf.v1.Params.Types.Offset();
          }
          OffsetParams.MergeFrom(other.OffsetParams);
          break;
        case ParamsOneofCase.CutParams:
          if (CutParams == null) {
            CutParams = new global::com.epl.protobuf.v1.Params.Types.Cut();
          }
          CutParams.MergeFrom(other.CutParams);
          break;
        case ParamsOneofCase.ClipParams:
          if (ClipParams == null) {
            ClipParams = new global::com.epl.protobuf.v1.Params.Types.Clip();
          }
          ClipParams.MergeFrom(other.ClipParams);
          break;
        case ParamsOneofCase.DensifyParams:
          if (DensifyParams == null) {
            DensifyParams = new global::com.epl.protobuf.v1.Params.Types.Densify();
          }
          DensifyParams.MergeFrom(other.DensifyParams);
          break;
        case ParamsOneofCase.SimplifyParams:
          if (SimplifyParams == null) {
            SimplifyParams = new global::com.epl.protobuf.v1.Params.Types.Simplify();
          }
          SimplifyParams.MergeFrom(other.SimplifyParams);
          break;
        case ParamsOneofCase.GeneralizeByAreaParams:
          if (GeneralizeByAreaParams == null) {
            GeneralizeByAreaParams = new global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea();
          }
          GeneralizeByAreaParams.MergeFrom(other.GeneralizeByAreaParams);
          break;
        case ParamsOneofCase.AffineTransformParams:
          if (AffineTransformParams == null) {
            AffineTransformParams = new global::com.epl.protobuf.v1.Params.Types.AffineTransform();
          }
          AffineTransformParams.MergeFrom(other.AffineTransformParams);
          break;
        case ParamsOneofCase.GeodeticBufferParams:
          if (GeodeticBufferParams == null) {
            GeodeticBufferParams = new global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer();
          }
          GeodeticBufferParams.MergeFrom(other.GeodeticBufferParams);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (leftCase_ == LeftOneofCase.Geometry) {
              subBuilder.MergeFrom(Geometry);
            }
            input.ReadMessage(subBuilder);
            Geometry = subBuilder;
            break;
          }
          case 18: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (leftCase_ == LeftOneofCase.LeftGeometry) {
              subBuilder.MergeFrom(LeftGeometry);
            }
            input.ReadMessage(subBuilder);
            LeftGeometry = subBuilder;
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (leftCase_ == LeftOneofCase.GeometryRequest_) {
              subBuilder.MergeFrom(GeometryRequest_);
            }
            input.ReadMessage(subBuilder);
            GeometryRequest_ = subBuilder;
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (leftCase_ == LeftOneofCase.LeftGeometryRequest) {
              subBuilder.MergeFrom(LeftGeometryRequest);
            }
            input.ReadMessage(subBuilder);
            LeftGeometryRequest = subBuilder;
            break;
          }
          case 42: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (rightCase_ == RightOneofCase.RightGeometry) {
              subBuilder.MergeFrom(RightGeometry);
            }
            input.ReadMessage(subBuilder);
            RightGeometry = subBuilder;
            break;
          }
          case 50: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (rightCase_ == RightOneofCase.RightGeometryRequest) {
              subBuilder.MergeFrom(RightGeometryRequest);
            }
            input.ReadMessage(subBuilder);
            RightGeometryRequest = subBuilder;
            break;
          }
          case 56: {
            Operator = (global::com.epl.protobuf.v1.OperatorType) input.ReadEnum();
            break;
          }
          case 64: {
            ResultEncoding = (global::com.epl.protobuf.v1.Encoding) input.ReadEnum();
            break;
          }
          case 74: {
            if (operationProj_ == null) {
              OperationProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(OperationProj);
            break;
          }
          case 82: {
            if (resultProj_ == null) {
              ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(ResultProj);
            break;
          }
          case 90: {
            global::com.epl.protobuf.v1.Params.Types.Buffer subBuilder = new global::com.epl.protobuf.v1.Params.Types.Buffer();
            if (paramsCase_ == ParamsOneofCase.BufferParams) {
              subBuilder.MergeFrom(BufferParams);
            }
            input.ReadMessage(subBuilder);
            BufferParams = subBuilder;
            break;
          }
          case 98: {
            global::com.epl.protobuf.v1.Params.Types.Convex subBuilder = new global::com.epl.protobuf.v1.Params.Types.Convex();
            if (paramsCase_ == ParamsOneofCase.ConvexParams) {
              subBuilder.MergeFrom(ConvexParams);
            }
            input.ReadMessage(subBuilder);
            ConvexParams = subBuilder;
            break;
          }
          case 106: {
            global::com.epl.protobuf.v1.Params.Types.Relate subBuilder = new global::com.epl.protobuf.v1.Params.Types.Relate();
            if (paramsCase_ == ParamsOneofCase.RelateParams) {
              subBuilder.MergeFrom(RelateParams);
            }
            input.ReadMessage(subBuilder);
            RelateParams = subBuilder;
            break;
          }
          case 114: {
            global::com.epl.protobuf.v1.Params.Types.RandomPoints subBuilder = new global::com.epl.protobuf.v1.Params.Types.RandomPoints();
            if (paramsCase_ == ParamsOneofCase.RandomPointsParams) {
              subBuilder.MergeFrom(RandomPointsParams);
            }
            input.ReadMessage(subBuilder);
            RandomPointsParams = subBuilder;
            break;
          }
          case 122: {
            global::com.epl.protobuf.v1.Params.Types.Generalize subBuilder = new global::com.epl.protobuf.v1.Params.Types.Generalize();
            if (paramsCase_ == ParamsOneofCase.GeneralizeParams) {
              subBuilder.MergeFrom(GeneralizeParams);
            }
            input.ReadMessage(subBuilder);
            GeneralizeParams = subBuilder;
            break;
          }
          case 130: {
            global::com.epl.protobuf.v1.Params.Types.Intersection subBuilder = new global::com.epl.protobuf.v1.Params.Types.Intersection();
            if (paramsCase_ == ParamsOneofCase.IntersectionParams) {
              subBuilder.MergeFrom(IntersectionParams);
            }
            input.ReadMessage(subBuilder);
            IntersectionParams = subBuilder;
            break;
          }
          case 138: {
            global::com.epl.protobuf.v1.Params.Types.Offset subBuilder = new global::com.epl.protobuf.v1.Params.Types.Offset();
            if (paramsCase_ == ParamsOneofCase.OffsetParams) {
              subBuilder.MergeFrom(OffsetParams);
            }
            input.ReadMessage(subBuilder);
            OffsetParams = subBuilder;
            break;
          }
          case 146: {
            global::com.epl.protobuf.v1.Params.Types.Cut subBuilder = new global::com.epl.protobuf.v1.Params.Types.Cut();
            if (paramsCase_ == ParamsOneofCase.CutParams) {
              subBuilder.MergeFrom(CutParams);
            }
            input.ReadMessage(subBuilder);
            CutParams = subBuilder;
            break;
          }
          case 154: {
            global::com.epl.protobuf.v1.Params.Types.Clip subBuilder = new global::com.epl.protobuf.v1.Params.Types.Clip();
            if (paramsCase_ == ParamsOneofCase.ClipParams) {
              subBuilder.MergeFrom(ClipParams);
            }
            input.ReadMessage(subBuilder);
            ClipParams = subBuilder;
            break;
          }
          case 162: {
            global::com.epl.protobuf.v1.Params.Types.Densify subBuilder = new global::com.epl.protobuf.v1.Params.Types.Densify();
            if (paramsCase_ == ParamsOneofCase.DensifyParams) {
              subBuilder.MergeFrom(DensifyParams);
            }
            input.ReadMessage(subBuilder);
            DensifyParams = subBuilder;
            break;
          }
          case 170: {
            global::com.epl.protobuf.v1.Params.Types.Simplify subBuilder = new global::com.epl.protobuf.v1.Params.Types.Simplify();
            if (paramsCase_ == ParamsOneofCase.SimplifyParams) {
              subBuilder.MergeFrom(SimplifyParams);
            }
            input.ReadMessage(subBuilder);
            SimplifyParams = subBuilder;
            break;
          }
          case 178: {
            global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea subBuilder = new global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea();
            if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) {
              subBuilder.MergeFrom(GeneralizeByAreaParams);
            }
            input.ReadMessage(subBuilder);
            GeneralizeByAreaParams = subBuilder;
            break;
          }
          case 186: {
            global::com.epl.protobuf.v1.Params.Types.AffineTransform subBuilder = new global::com.epl.protobuf.v1.Params.Types.AffineTransform();
            if (paramsCase_ == ParamsOneofCase.AffineTransformParams) {
              subBuilder.MergeFrom(AffineTransformParams);
            }
            input.ReadMessage(subBuilder);
            AffineTransformParams = subBuilder;
            break;
          }
          case 194: {
            global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer subBuilder = new global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer();
            if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) {
              subBuilder.MergeFrom(GeodeticBufferParams);
            }
            input.ReadMessage(subBuilder);
            GeodeticBufferParams = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (leftCase_ == LeftOneofCase.Geometry) {
              subBuilder.MergeFrom(Geometry);
            }
            input.ReadMessage(subBuilder);
            Geometry = subBuilder;
            break;
          }
          case 18: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (leftCase_ == LeftOneofCase.LeftGeometry) {
              subBuilder.MergeFrom(LeftGeometry);
            }
            input.ReadMessage(subBuilder);
            LeftGeometry = subBuilder;
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (leftCase_ == LeftOneofCase.GeometryRequest_) {
              subBuilder.MergeFrom(GeometryRequest_);
            }
            input.ReadMessage(subBuilder);
            GeometryRequest_ = subBuilder;
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (leftCase_ == LeftOneofCase.LeftGeometryRequest) {
              subBuilder.MergeFrom(LeftGeometryRequest);
            }
            input.ReadMessage(subBuilder);
            LeftGeometryRequest = subBuilder;
            break;
          }
          case 42: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (rightCase_ == RightOneofCase.RightGeometry) {
              subBuilder.MergeFrom(RightGeometry);
            }
            input.ReadMessage(subBuilder);
            RightGeometry = subBuilder;
            break;
          }
          case 50: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (rightCase_ == RightOneofCase.RightGeometryRequest) {
              subBuilder.MergeFrom(RightGeometryRequest);
            }
            input.ReadMessage(subBuilder);
            RightGeometryRequest = subBuilder;
            break;
          }
          case 56: {
            Operator = (global::com.epl.protobuf.v1.OperatorType) input.ReadEnum();
            break;
          }
          case 64: {
            ResultEncoding = (global::com.epl.protobuf.v1.Encoding) input.ReadEnum();
            break;
          }
          case 74: {
            if (operationProj_ == null) {
              OperationProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(OperationProj);
            break;
          }
          case 82: {
            if (resultProj_ == null) {
              ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(ResultProj);
            break;
          }
          case 90: {
            global::com.epl.protobuf.v1.Params.Types.Buffer subBuilder = new global::com.epl.protobuf.v1.Params.Types.Buffer();
            if (paramsCase_ == ParamsOneofCase.BufferParams) {
              subBuilder.MergeFrom(BufferParams);
            }
            input.ReadMessage(subBuilder);
            BufferParams = subBuilder;
            break;
          }
          case 98: {
            global::com.epl.protobuf.v1.Params.Types.Convex subBuilder = new global::com.epl.protobuf.v1.Params.Types.Convex();
            if (paramsCase_ == ParamsOneofCase.ConvexParams) {
              subBuilder.MergeFrom(ConvexParams);
            }
            input.ReadMessage(subBuilder);
            ConvexParams = subBuilder;
            break;
          }
          case 106: {
            global::com.epl.protobuf.v1.Params.Types.Relate subBuilder = new global::com.epl.protobuf.v1.Params.Types.Relate();
            if (paramsCase_ == ParamsOneofCase.RelateParams) {
              subBuilder.MergeFrom(RelateParams);
            }
            input.ReadMessage(subBuilder);
            RelateParams = subBuilder;
            break;
          }
          case 114: {
            global::com.epl.protobuf.v1.Params.Types.RandomPoints subBuilder = new global::com.epl.protobuf.v1.Params.Types.RandomPoints();
            if (paramsCase_ == ParamsOneofCase.RandomPointsParams) {
              subBuilder.MergeFrom(RandomPointsParams);
            }
            input.ReadMessage(subBuilder);
            RandomPointsParams = subBuilder;
            break;
          }
          case 122: {
            global::com.epl.protobuf.v1.Params.Types.Generalize subBuilder = new global::com.epl.protobuf.v1.Params.Types.Generalize();
            if (paramsCase_ == ParamsOneofCase.GeneralizeParams) {
              subBuilder.MergeFrom(GeneralizeParams);
            }
            input.ReadMessage(subBuilder);
            GeneralizeParams = subBuilder;
            break;
          }
          case 130: {
            global::com.epl.protobuf.v1.Params.Types.Intersection subBuilder = new global::com.epl.protobuf.v1.Params.Types.Intersection();
            if (paramsCase_ == ParamsOneofCase.IntersectionParams) {
              subBuilder.MergeFrom(IntersectionParams);
            }
            input.ReadMessage(subBuilder);
            IntersectionParams = subBuilder;
            break;
          }
          case 138: {
            global::com.epl.protobuf.v1.Params.Types.Offset subBuilder = new global::com.epl.protobuf.v1.Params.Types.Offset();
            if (paramsCase_ == ParamsOneofCase.OffsetParams) {
              subBuilder.MergeFrom(OffsetParams);
            }
            input.ReadMessage(subBuilder);
            OffsetParams = subBuilder;
            break;
          }
          case 146: {
            global::com.epl.protobuf.v1.Params.Types.Cut subBuilder = new global::com.epl.protobuf.v1.Params.Types.Cut();
            if (paramsCase_ == ParamsOneofCase.CutParams) {
              subBuilder.MergeFrom(CutParams);
            }
            input.ReadMessage(subBuilder);
            CutParams = subBuilder;
            break;
          }
          case 154: {
            global::com.epl.protobuf.v1.Params.Types.Clip subBuilder = new global::com.epl.protobuf.v1.Params.Types.Clip();
            if (paramsCase_ == ParamsOneofCase.ClipParams) {
              subBuilder.MergeFrom(ClipParams);
            }
            input.ReadMessage(subBuilder);
            ClipParams = subBuilder;
            break;
          }
          case 162: {
            global::com.epl.protobuf.v1.Params.Types.Densify subBuilder = new global::com.epl.protobuf.v1.Params.Types.Densify();
            if (paramsCase_ == ParamsOneofCase.DensifyParams) {
              subBuilder.MergeFrom(DensifyParams);
            }
            input.ReadMessage(subBuilder);
            DensifyParams = subBuilder;
            break;
          }
          case 170: {
            global::com.epl.protobuf.v1.Params.Types.Simplify subBuilder = new global::com.epl.protobuf.v1.Params.Types.Simplify();
            if (paramsCase_ == ParamsOneofCase.SimplifyParams) {
              subBuilder.MergeFrom(SimplifyParams);
            }
            input.ReadMessage(subBuilder);
            SimplifyParams = subBuilder;
            break;
          }
          case 178: {
            global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea subBuilder = new global::com.epl.protobuf.v1.Params.Types.GeneralizeByArea();
            if (paramsCase_ == ParamsOneofCase.GeneralizeByAreaParams) {
              subBuilder.MergeFrom(GeneralizeByAreaParams);
            }
            input.ReadMessage(subBuilder);
            GeneralizeByAreaParams = subBuilder;
            break;
          }
          case 186: {
            global::com.epl.protobuf.v1.Params.Types.AffineTransform subBuilder = new global::com.epl.protobuf.v1.Params.Types.AffineTransform();
            if (paramsCase_ == ParamsOneofCase.AffineTransformParams) {
              subBuilder.MergeFrom(AffineTransformParams);
            }
            input.ReadMessage(subBuilder);
            AffineTransformParams = subBuilder;
            break;
          }
          case 194: {
            global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer subBuilder = new global::com.epl.protobuf.v1.Params.Types.GeodeticBuffer();
            if (paramsCase_ == ParamsOneofCase.GeodeticBufferParams) {
              subBuilder.MergeFrom(GeodeticBufferParams);
            }
            input.ReadMessage(subBuilder);
            GeodeticBufferParams = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GeodeticInverse : pb::IMessage<GeodeticInverse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeodeticInverse> _parser = new pb::MessageParser<GeodeticInverse>(() => new GeodeticInverse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeodeticInverse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticInverse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticInverse(GeodeticInverse other) : this() {
      az12_ = other.az12_;
      az21_ = other.az21_;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticInverse Clone() {
      return new GeodeticInverse(this);
    }

    /// <summary>Field number for the "az12" field.</summary>
    public const int Az12FieldNumber = 1;
    private double az12_;
    /// <summary>
    /// Azimuth from the first to the second point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Az12 {
      get { return az12_; }
      set {
        az12_ = value;
      }
    }

    /// <summary>Field number for the "az21" field.</summary>
    public const int Az21FieldNumber = 2;
    private double az21_;
    /// <summary>
    /// Azimuth from the second to the first point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Az21 {
      get { return az21_; }
      set {
        az21_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 3;
    private double distance_;
    /// <summary>
    /// Geodesic distance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeodeticInverse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeodeticInverse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Az12, other.Az12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Az21, other.Az21)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Az12 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Az12);
      if (Az21 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Az21);
      if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Az12 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Az12);
      }
      if (Az21 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Az21);
      }
      if (Distance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Az12 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Az12);
      }
      if (Az21 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Az21);
      }
      if (Distance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Az12 != 0D) {
        size += 1 + 8;
      }
      if (Az21 != 0D) {
        size += 1 + 8;
      }
      if (Distance != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeodeticInverse other) {
      if (other == null) {
        return;
      }
      if (other.Az12 != 0D) {
        Az12 = other.Az12;
      }
      if (other.Az21 != 0D) {
        Az21 = other.Az21;
      }
      if (other.Distance != 0D) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Az12 = input.ReadDouble();
            break;
          }
          case 17: {
            Az21 = input.ReadDouble();
            break;
          }
          case 25: {
            Distance = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Az12 = input.ReadDouble();
            break;
          }
          case 17: {
            Az21 = input.ReadDouble();
            break;
          }
          case 25: {
            Distance = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// response message geometry request
  /// </summary>
  public sealed partial class GeometryResponse : pb::IMessage<GeometryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeometryResponse> _parser = new pb::MessageParser<GeometryResponse>(() => new GeometryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeometryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryResponse(GeometryResponse other) : this() {
      relateMap_ = other.relateMap_.Clone();
      switch (other.ResultCase) {
        case ResultOneofCase.Geometry:
          Geometry = other.Geometry.Clone();
          break;
        case ResultOneofCase.SpatialRelationship:
          SpatialRelationship = other.SpatialRelationship;
          break;
        case ResultOneofCase.Measure:
          Measure = other.Measure;
          break;
        case ResultOneofCase.GeodeticInverse:
          GeodeticInverse = other.GeodeticInverse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryResponse Clone() {
      return new GeometryResponse(this);
    }

    /// <summary>Field number for the "geometry" field.</summary>
    public const int GeometryFieldNumber = 1;
    /// <summary>
    /// if geometry result, then this field holds the geometry data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Geometry {
      get { return resultCase_ == ResultOneofCase.Geometry ? (global::com.epl.protobuf.v1.GeometryData) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Geometry;
      }
    }

    /// <summary>Field number for the "spatial_relationship" field.</summary>
    public const int SpatialRelationshipFieldNumber = 2;
    /// <summary>
    /// if a topo spatial relationship request, then this field holds the true or false result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpatialRelationship {
      get { return resultCase_ == ResultOneofCase.SpatialRelationship ? (bool) result_ : false; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.SpatialRelationship;
      }
    }

    /// <summary>Field number for the "measure" field.</summary>
    public const int MeasureFieldNumber = 3;
    /// <summary>
    /// a measure result will be a float for area and length requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Measure {
      get { return resultCase_ == ResultOneofCase.Measure ? (double) result_ : 0D; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Measure;
      }
    }

    /// <summary>Field number for the "geodetic_inverse" field.</summary>
    public const int GeodeticInverseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeodeticInverse GeodeticInverse {
      get { return resultCase_ == ResultOneofCase.GeodeticInverse ? (global::com.epl.protobuf.v1.GeodeticInverse) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.GeodeticInverse;
      }
    }

    /// <summary>Field number for the "relate_map" field.</summary>
    public const int RelateMapFieldNumber = 5;
    private static readonly pbc::MapField<long, bool>.Codec _map_relateMap_codec
        = new pbc::MapField<long, bool>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForBool(16, false), 42);
    private readonly pbc::MapField<long, bool> relateMap_ = new pbc::MapField<long, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, bool> RelateMap {
      get { return relateMap_; }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Geometry = 1,
      SpatialRelationship = 2,
      Measure = 3,
      GeodeticInverse = 4,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeometryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeometryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Geometry, other.Geometry)) return false;
      if (SpatialRelationship != other.SpatialRelationship) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Measure, other.Measure)) return false;
      if (!object.Equals(GeodeticInverse, other.GeodeticInverse)) return false;
      if (!RelateMap.Equals(other.RelateMap)) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Geometry) hash ^= Geometry.GetHashCode();
      if (resultCase_ == ResultOneofCase.SpatialRelationship) hash ^= SpatialRelationship.GetHashCode();
      if (resultCase_ == ResultOneofCase.Measure) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Measure);
      if (resultCase_ == ResultOneofCase.GeodeticInverse) hash ^= GeodeticInverse.GetHashCode();
      hash ^= RelateMap.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (resultCase_ == ResultOneofCase.Geometry) {
        output.WriteRawTag(10);
        output.WriteMessage(Geometry);
      }
      if (resultCase_ == ResultOneofCase.SpatialRelationship) {
        output.WriteRawTag(16);
        output.WriteBool(SpatialRelationship);
      }
      if (resultCase_ == ResultOneofCase.Measure) {
        output.WriteRawTag(25);
        output.WriteDouble(Measure);
      }
      if (resultCase_ == ResultOneofCase.GeodeticInverse) {
        output.WriteRawTag(34);
        output.WriteMessage(GeodeticInverse);
      }
      relateMap_.WriteTo(output, _map_relateMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (resultCase_ == ResultOneofCase.Geometry) {
        output.WriteRawTag(10);
        output.WriteMessage(Geometry);
      }
      if (resultCase_ == ResultOneofCase.SpatialRelationship) {
        output.WriteRawTag(16);
        output.WriteBool(SpatialRelationship);
      }
      if (resultCase_ == ResultOneofCase.Measure) {
        output.WriteRawTag(25);
        output.WriteDouble(Measure);
      }
      if (resultCase_ == ResultOneofCase.GeodeticInverse) {
        output.WriteRawTag(34);
        output.WriteMessage(GeodeticInverse);
      }
      relateMap_.WriteTo(ref output, _map_relateMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Geometry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
      }
      if (resultCase_ == ResultOneofCase.SpatialRelationship) {
        size += 1 + 1;
      }
      if (resultCase_ == ResultOneofCase.Measure) {
        size += 1 + 8;
      }
      if (resultCase_ == ResultOneofCase.GeodeticInverse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeodeticInverse);
      }
      size += relateMap_.CalculateSize(_map_relateMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeometryResponse other) {
      if (other == null) {
        return;
      }
      relateMap_.Add(other.relateMap_);
      switch (other.ResultCase) {
        case ResultOneofCase.Geometry:
          if (Geometry == null) {
            Geometry = new global::com.epl.protobuf.v1.GeometryData();
          }
          Geometry.MergeFrom(other.Geometry);
          break;
        case ResultOneofCase.SpatialRelationship:
          SpatialRelationship = other.SpatialRelationship;
          break;
        case ResultOneofCase.Measure:
          Measure = other.Measure;
          break;
        case ResultOneofCase.GeodeticInverse:
          if (GeodeticInverse == null) {
            GeodeticInverse = new global::com.epl.protobuf.v1.GeodeticInverse();
          }
          GeodeticInverse.MergeFrom(other.GeodeticInverse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (resultCase_ == ResultOneofCase.Geometry) {
              subBuilder.MergeFrom(Geometry);
            }
            input.ReadMessage(subBuilder);
            Geometry = subBuilder;
            break;
          }
          case 16: {
            SpatialRelationship = input.ReadBool();
            break;
          }
          case 25: {
            Measure = input.ReadDouble();
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.GeodeticInverse subBuilder = new global::com.epl.protobuf.v1.GeodeticInverse();
            if (resultCase_ == ResultOneofCase.GeodeticInverse) {
              subBuilder.MergeFrom(GeodeticInverse);
            }
            input.ReadMessage(subBuilder);
            GeodeticInverse = subBuilder;
            break;
          }
          case 42: {
            relateMap_.AddEntriesFrom(input, _map_relateMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (resultCase_ == ResultOneofCase.Geometry) {
              subBuilder.MergeFrom(Geometry);
            }
            input.ReadMessage(subBuilder);
            Geometry = subBuilder;
            break;
          }
          case 16: {
            SpatialRelationship = input.ReadBool();
            break;
          }
          case 25: {
            Measure = input.ReadDouble();
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.GeodeticInverse subBuilder = new global::com.epl.protobuf.v1.GeodeticInverse();
            if (resultCase_ == ResultOneofCase.GeodeticInverse) {
              subBuilder.MergeFrom(GeodeticInverse);
            }
            input.ReadMessage(subBuilder);
            GeodeticInverse = subBuilder;
            break;
          }
          case 42: {
            relateMap_.AddEntriesFrom(ref input, _map_relateMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FileRequestChunk : pb::IMessage<FileRequestChunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileRequestChunk> _parser = new pb::MessageParser<FileRequestChunk>(() => new FileRequestChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileRequestChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequestChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequestChunk(FileRequestChunk other) : this() {
      nestedRequest_ = other.nestedRequest_ != null ? other.nestedRequest_.Clone() : null;
      resultEncodingType_ = other.resultEncodingType_;
      inputProj_ = other.inputProj_ != null ? other.inputProj_.Clone() : null;
      resultProj_ = other.resultProj_ != null ? other.resultProj_.Clone() : null;
      data_ = other.data_;
      size_ = other.size_;
      offset_ = other.offset_;
      fileName_ = other.fileName_;
      isLastChunk_ = other.isLastChunk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileRequestChunk Clone() {
      return new FileRequestChunk(this);
    }

    /// <summary>Field number for the "nested_request" field.</summary>
    public const int NestedRequestFieldNumber = 1;
    private global::com.epl.protobuf.v1.GeometryRequest nestedRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryRequest NestedRequest {
      get { return nestedRequest_; }
      set {
        nestedRequest_ = value;
      }
    }

    /// <summary>Field number for the "result_encoding_type" field.</summary>
    public const int ResultEncodingTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.Encoding resultEncodingType_ = global::com.epl.protobuf.v1.Encoding.UnknownEncoding;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Encoding ResultEncodingType {
      get { return resultEncodingType_; }
      set {
        resultEncodingType_ = value;
      }
    }

    /// <summary>Field number for the "input_proj" field.</summary>
    public const int InputProjFieldNumber = 3;
    private global::com.epl.protobuf.v1.ProjectionData inputProj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData InputProj {
      get { return inputProj_; }
      set {
        inputProj_ = value;
      }
    }

    /// <summary>Field number for the "result_proj" field.</summary>
    public const int ResultProjFieldNumber = 5;
    private global::com.epl.protobuf.v1.ProjectionData resultProj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData ResultProj {
      get { return resultProj_; }
      set {
        resultProj_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 7;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 9;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_last_chunk" field.</summary>
    public const int IsLastChunkFieldNumber = 10;
    private bool isLastChunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastChunk {
      get { return isLastChunk_; }
      set {
        isLastChunk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileRequestChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileRequestChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NestedRequest, other.NestedRequest)) return false;
      if (ResultEncodingType != other.ResultEncodingType) return false;
      if (!object.Equals(InputProj, other.InputProj)) return false;
      if (!object.Equals(ResultProj, other.ResultProj)) return false;
      if (Data != other.Data) return false;
      if (Size != other.Size) return false;
      if (Offset != other.Offset) return false;
      if (FileName != other.FileName) return false;
      if (IsLastChunk != other.IsLastChunk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nestedRequest_ != null) hash ^= NestedRequest.GetHashCode();
      if (ResultEncodingType != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) hash ^= ResultEncodingType.GetHashCode();
      if (inputProj_ != null) hash ^= InputProj.GetHashCode();
      if (resultProj_ != null) hash ^= ResultProj.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (IsLastChunk != false) hash ^= IsLastChunk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (nestedRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NestedRequest);
      }
      if (ResultEncodingType != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultEncodingType);
      }
      if (inputProj_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputProj);
      }
      if (resultProj_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ResultProj);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      if (Size != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Size);
      }
      if (Offset != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Offset);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FileName);
      }
      if (IsLastChunk != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsLastChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (nestedRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NestedRequest);
      }
      if (ResultEncodingType != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultEncodingType);
      }
      if (inputProj_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputProj);
      }
      if (resultProj_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ResultProj);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      if (Size != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Size);
      }
      if (Offset != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Offset);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FileName);
      }
      if (IsLastChunk != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsLastChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nestedRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NestedRequest);
      }
      if (ResultEncodingType != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultEncodingType);
      }
      if (inputProj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputProj);
      }
      if (resultProj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultProj);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (IsLastChunk != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileRequestChunk other) {
      if (other == null) {
        return;
      }
      if (other.nestedRequest_ != null) {
        if (nestedRequest_ == null) {
          NestedRequest = new global::com.epl.protobuf.v1.GeometryRequest();
        }
        NestedRequest.MergeFrom(other.NestedRequest);
      }
      if (other.ResultEncodingType != global::com.epl.protobuf.v1.Encoding.UnknownEncoding) {
        ResultEncodingType = other.ResultEncodingType;
      }
      if (other.inputProj_ != null) {
        if (inputProj_ == null) {
          InputProj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        InputProj.MergeFrom(other.InputProj);
      }
      if (other.resultProj_ != null) {
        if (resultProj_ == null) {
          ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        ResultProj.MergeFrom(other.ResultProj);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.IsLastChunk != false) {
        IsLastChunk = other.IsLastChunk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nestedRequest_ == null) {
              NestedRequest = new global::com.epl.protobuf.v1.GeometryRequest();
            }
            input.ReadMessage(NestedRequest);
            break;
          }
          case 16: {
            ResultEncodingType = (global::com.epl.protobuf.v1.Encoding) input.ReadEnum();
            break;
          }
          case 26: {
            if (inputProj_ == null) {
              InputProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(InputProj);
            break;
          }
          case 42: {
            if (resultProj_ == null) {
              ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(ResultProj);
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
          case 56: {
            Size = input.ReadInt64();
            break;
          }
          case 64: {
            Offset = input.ReadInt64();
            break;
          }
          case 74: {
            FileName = input.ReadString();
            break;
          }
          case 80: {
            IsLastChunk = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (nestedRequest_ == null) {
              NestedRequest = new global::com.epl.protobuf.v1.GeometryRequest();
            }
            input.ReadMessage(NestedRequest);
            break;
          }
          case 16: {
            ResultEncodingType = (global::com.epl.protobuf.v1.Encoding) input.ReadEnum();
            break;
          }
          case 26: {
            if (inputProj_ == null) {
              InputProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(InputProj);
            break;
          }
          case 42: {
            if (resultProj_ == null) {
              ResultProj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(ResultProj);
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
          case 56: {
            Size = input.ReadInt64();
            break;
          }
          case 64: {
            Offset = input.ReadInt64();
            break;
          }
          case 74: {
            FileName = input.ReadString();
            break;
          }
          case 80: {
            IsLastChunk = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FileRequestChunk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FileType {
        [pbr::OriginalName("SHAPEFILE")] Shapefile = 0,
      }

    }
    #endregion

  }

  public sealed partial class Params : pb::IMessage<Params>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Params> _parser = new pb::MessageParser<Params>(() => new Params());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Params> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.GeometryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params(Params other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Params Clone() {
      return new Params(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Params);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Params other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Params other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Params message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// oneof https://github.com/golang/protobuf/issues/283
      ///        oneof densifier {
      /// </summary>
      public sealed partial class Buffer : pb::IMessage<Buffer>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Buffer> _parser = new pb::MessageParser<Buffer>(() => new Buffer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Buffer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer(Buffer other) : this() {
          distance_ = other.distance_;
          maxDeviation_ = other.maxDeviation_;
          unionResult_ = other.unionResult_;
          maxVerticesInFullCircle_ = other.maxVerticesInFullCircle_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buffer Clone() {
          return new Buffer(this);
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 1;
        private double distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "max_deviation" field.</summary>
        public const int MaxDeviationFieldNumber = 2;
        private double maxDeviation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxDeviation {
          get { return maxDeviation_; }
          set {
            maxDeviation_ = value;
          }
        }

        /// <summary>Field number for the "union_result" field.</summary>
        public const int UnionResultFieldNumber = 3;
        private bool unionResult_;
        /// <summary>
        /// oneof https://github.com/golang/protobuf/issues/283
        ///        }
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnionResult {
          get { return unionResult_; }
          set {
            unionResult_ = value;
          }
        }

        /// <summary>Field number for the "max_vertices_in_full_circle" field.</summary>
        public const int MaxVerticesInFullCircleFieldNumber = 4;
        private int maxVerticesInFullCircle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxVerticesInFullCircle {
          get { return maxVerticesInFullCircle_; }
          set {
            maxVerticesInFullCircle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Buffer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Buffer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxDeviation, other.MaxDeviation)) return false;
          if (UnionResult != other.UnionResult) return false;
          if (MaxVerticesInFullCircle != other.MaxVerticesInFullCircle) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
          if (MaxDeviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxDeviation);
          if (UnionResult != false) hash ^= UnionResult.GetHashCode();
          if (MaxVerticesInFullCircle != 0) hash ^= MaxVerticesInFullCircle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (MaxDeviation != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxDeviation);
          }
          if (UnionResult != false) {
            output.WriteRawTag(24);
            output.WriteBool(UnionResult);
          }
          if (MaxVerticesInFullCircle != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (MaxDeviation != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxDeviation);
          }
          if (UnionResult != false) {
            output.WriteRawTag(24);
            output.WriteBool(UnionResult);
          }
          if (MaxVerticesInFullCircle != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Distance != 0D) {
            size += 1 + 8;
          }
          if (MaxDeviation != 0D) {
            size += 1 + 8;
          }
          if (UnionResult != false) {
            size += 1 + 1;
          }
          if (MaxVerticesInFullCircle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Buffer other) {
          if (other == null) {
            return;
          }
          if (other.Distance != 0D) {
            Distance = other.Distance;
          }
          if (other.MaxDeviation != 0D) {
            MaxDeviation = other.MaxDeviation;
          }
          if (other.UnionResult != false) {
            UnionResult = other.UnionResult;
          }
          if (other.MaxVerticesInFullCircle != 0) {
            MaxVerticesInFullCircle = other.MaxVerticesInFullCircle;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 17: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 24: {
                UnionResult = input.ReadBool();
                break;
              }
              case 32: {
                MaxVerticesInFullCircle = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 17: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 24: {
                UnionResult = input.ReadBool();
                break;
              }
              case 32: {
                MaxVerticesInFullCircle = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// oneof https://github.com/golang/protobuf/issues/283
      ///        oneof densifier {
      /// </summary>
      public sealed partial class GeodeticBuffer : pb::IMessage<GeodeticBuffer>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GeodeticBuffer> _parser = new pb::MessageParser<GeodeticBuffer>(() => new GeodeticBuffer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GeodeticBuffer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeodeticBuffer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeodeticBuffer(GeodeticBuffer other) : this() {
          distance_ = other.distance_;
          maxDeviation_ = other.maxDeviation_;
          unionResult_ = other.unionResult_;
          maxVerticesInFullCircle_ = other.maxVerticesInFullCircle_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeodeticBuffer Clone() {
          return new GeodeticBuffer(this);
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 1;
        private double distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "max_deviation" field.</summary>
        public const int MaxDeviationFieldNumber = 2;
        private double maxDeviation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxDeviation {
          get { return maxDeviation_; }
          set {
            maxDeviation_ = value;
          }
        }

        /// <summary>Field number for the "union_result" field.</summary>
        public const int UnionResultFieldNumber = 3;
        private bool unionResult_;
        /// <summary>
        /// oneof https://github.com/golang/protobuf/issues/283
        ///        }
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnionResult {
          get { return unionResult_; }
          set {
            unionResult_ = value;
          }
        }

        /// <summary>Field number for the "max_vertices_in_full_circle" field.</summary>
        public const int MaxVerticesInFullCircleFieldNumber = 4;
        private int maxVerticesInFullCircle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxVerticesInFullCircle {
          get { return maxVerticesInFullCircle_; }
          set {
            maxVerticesInFullCircle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GeodeticBuffer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GeodeticBuffer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxDeviation, other.MaxDeviation)) return false;
          if (UnionResult != other.UnionResult) return false;
          if (MaxVerticesInFullCircle != other.MaxVerticesInFullCircle) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
          if (MaxDeviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxDeviation);
          if (UnionResult != false) hash ^= UnionResult.GetHashCode();
          if (MaxVerticesInFullCircle != 0) hash ^= MaxVerticesInFullCircle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (MaxDeviation != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxDeviation);
          }
          if (UnionResult != false) {
            output.WriteRawTag(24);
            output.WriteBool(UnionResult);
          }
          if (MaxVerticesInFullCircle != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (MaxDeviation != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxDeviation);
          }
          if (UnionResult != false) {
            output.WriteRawTag(24);
            output.WriteBool(UnionResult);
          }
          if (MaxVerticesInFullCircle != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Distance != 0D) {
            size += 1 + 8;
          }
          if (MaxDeviation != 0D) {
            size += 1 + 8;
          }
          if (UnionResult != false) {
            size += 1 + 1;
          }
          if (MaxVerticesInFullCircle != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVerticesInFullCircle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GeodeticBuffer other) {
          if (other == null) {
            return;
          }
          if (other.Distance != 0D) {
            Distance = other.Distance;
          }
          if (other.MaxDeviation != 0D) {
            MaxDeviation = other.MaxDeviation;
          }
          if (other.UnionResult != false) {
            UnionResult = other.UnionResult;
          }
          if (other.MaxVerticesInFullCircle != 0) {
            MaxVerticesInFullCircle = other.MaxVerticesInFullCircle;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 17: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 24: {
                UnionResult = input.ReadBool();
                break;
              }
              case 32: {
                MaxVerticesInFullCircle = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 17: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 24: {
                UnionResult = input.ReadBool();
                break;
              }
              case 32: {
                MaxVerticesInFullCircle = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Convex : pb::IMessage<Convex>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Convex> _parser = new pb::MessageParser<Convex>(() => new Convex());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Convex> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Convex() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Convex(Convex other) : this() {
          merge_ = other.merge_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Convex Clone() {
          return new Convex(this);
        }

        /// <summary>Field number for the "merge" field.</summary>
        public const int MergeFieldNumber = 1;
        private bool merge_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Merge {
          get { return merge_; }
          set {
            merge_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Convex);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Convex other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Merge != other.Merge) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Merge != false) hash ^= Merge.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Merge != false) {
            output.WriteRawTag(8);
            output.WriteBool(Merge);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Merge != false) {
            output.WriteRawTag(8);
            output.WriteBool(Merge);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Merge != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Convex other) {
          if (other == null) {
            return;
          }
          if (other.Merge != false) {
            Merge = other.Merge;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Merge = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Merge = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Relate : pb::IMessage<Relate>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Relate> _parser = new pb::MessageParser<Relate>(() => new Relate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Relate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Relate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Relate(Relate other) : this() {
          de9Im_ = other.de9Im_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Relate Clone() {
          return new Relate(this);
        }

        /// <summary>Field number for the "de_9im" field.</summary>
        public const int De9ImFieldNumber = 1;
        private string de9Im_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string De9Im {
          get { return de9Im_; }
          set {
            de9Im_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Relate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Relate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (De9Im != other.De9Im) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (De9Im.Length != 0) hash ^= De9Im.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (De9Im.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(De9Im);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (De9Im.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(De9Im);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (De9Im.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(De9Im);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Relate other) {
          if (other == null) {
            return;
          }
          if (other.De9Im.Length != 0) {
            De9Im = other.De9Im;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                De9Im = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                De9Im = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RandomPoints : pb::IMessage<RandomPoints>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RandomPoints> _parser = new pb::MessageParser<RandomPoints>(() => new RandomPoints());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RandomPoints> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RandomPoints() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RandomPoints(RandomPoints other) : this() {
          pointsPerSquareKm_ = other.pointsPerSquareKm_;
          seed_ = other.seed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RandomPoints Clone() {
          return new RandomPoints(this);
        }

        /// <summary>Field number for the "points_per_square_km" field.</summary>
        public const int PointsPerSquareKmFieldNumber = 1;
        private double pointsPerSquareKm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PointsPerSquareKm {
          get { return pointsPerSquareKm_; }
          set {
            pointsPerSquareKm_ = value;
          }
        }

        /// <summary>Field number for the "seed" field.</summary>
        public const int SeedFieldNumber = 2;
        private long seed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Seed {
          get { return seed_; }
          set {
            seed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RandomPoints);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RandomPoints other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PointsPerSquareKm, other.PointsPerSquareKm)) return false;
          if (Seed != other.Seed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PointsPerSquareKm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PointsPerSquareKm);
          if (Seed != 0L) hash ^= Seed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PointsPerSquareKm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PointsPerSquareKm);
          }
          if (Seed != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Seed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PointsPerSquareKm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PointsPerSquareKm);
          }
          if (Seed != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Seed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PointsPerSquareKm != 0D) {
            size += 1 + 8;
          }
          if (Seed != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RandomPoints other) {
          if (other == null) {
            return;
          }
          if (other.PointsPerSquareKm != 0D) {
            PointsPerSquareKm = other.PointsPerSquareKm;
          }
          if (other.Seed != 0L) {
            Seed = other.Seed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                PointsPerSquareKm = input.ReadDouble();
                break;
              }
              case 16: {
                Seed = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                PointsPerSquareKm = input.ReadDouble();
                break;
              }
              case 16: {
                Seed = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Generalize : pb::IMessage<Generalize>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Generalize> _parser = new pb::MessageParser<Generalize>(() => new Generalize());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Generalize> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Generalize() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Generalize(Generalize other) : this() {
          maxDeviation_ = other.maxDeviation_;
          removeDegenerates_ = other.removeDegenerates_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Generalize Clone() {
          return new Generalize(this);
        }

        /// <summary>Field number for the "max_deviation" field.</summary>
        public const int MaxDeviationFieldNumber = 1;
        private double maxDeviation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxDeviation {
          get { return maxDeviation_; }
          set {
            maxDeviation_ = value;
          }
        }

        /// <summary>Field number for the "remove_degenerates" field.</summary>
        public const int RemoveDegeneratesFieldNumber = 2;
        private bool removeDegenerates_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RemoveDegenerates {
          get { return removeDegenerates_; }
          set {
            removeDegenerates_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Generalize);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Generalize other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxDeviation, other.MaxDeviation)) return false;
          if (RemoveDegenerates != other.RemoveDegenerates) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MaxDeviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxDeviation);
          if (RemoveDegenerates != false) hash ^= RemoveDegenerates.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MaxDeviation != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MaxDeviation);
          }
          if (RemoveDegenerates != false) {
            output.WriteRawTag(16);
            output.WriteBool(RemoveDegenerates);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MaxDeviation != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MaxDeviation);
          }
          if (RemoveDegenerates != false) {
            output.WriteRawTag(16);
            output.WriteBool(RemoveDegenerates);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MaxDeviation != 0D) {
            size += 1 + 8;
          }
          if (RemoveDegenerates != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Generalize other) {
          if (other == null) {
            return;
          }
          if (other.MaxDeviation != 0D) {
            MaxDeviation = other.MaxDeviation;
          }
          if (other.RemoveDegenerates != false) {
            RemoveDegenerates = other.RemoveDegenerates;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 16: {
                RemoveDegenerates = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                MaxDeviation = input.ReadDouble();
                break;
              }
              case 16: {
                RemoveDegenerates = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class GeneralizeByArea : pb::IMessage<GeneralizeByArea>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GeneralizeByArea> _parser = new pb::MessageParser<GeneralizeByArea>(() => new GeneralizeByArea());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GeneralizeByArea> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralizeByArea() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralizeByArea(GeneralizeByArea other) : this() {
          percentReduction_ = other.percentReduction_;
          maxPointCount_ = other.maxPointCount_;
          removeDegenerates_ = other.removeDegenerates_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GeneralizeByArea Clone() {
          return new GeneralizeByArea(this);
        }

        /// <summary>Field number for the "percent_reduction" field.</summary>
        public const int PercentReductionFieldNumber = 1;
        private double percentReduction_;
        /// <summary>
        /// oneof https://github.com/golang/protobuf/issues/283
        ///        oneof method {
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PercentReduction {
          get { return percentReduction_; }
          set {
            percentReduction_ = value;
          }
        }

        /// <summary>Field number for the "max_point_count" field.</summary>
        public const int MaxPointCountFieldNumber = 2;
        private int maxPointCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxPointCount {
          get { return maxPointCount_; }
          set {
            maxPointCount_ = value;
          }
        }

        /// <summary>Field number for the "remove_degenerates" field.</summary>
        public const int RemoveDegeneratesFieldNumber = 3;
        private bool removeDegenerates_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RemoveDegenerates {
          get { return removeDegenerates_; }
          set {
            removeDegenerates_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GeneralizeByArea);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GeneralizeByArea other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PercentReduction, other.PercentReduction)) return false;
          if (MaxPointCount != other.MaxPointCount) return false;
          if (RemoveDegenerates != other.RemoveDegenerates) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PercentReduction != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PercentReduction);
          if (MaxPointCount != 0) hash ^= MaxPointCount.GetHashCode();
          if (RemoveDegenerates != false) hash ^= RemoveDegenerates.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PercentReduction != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PercentReduction);
          }
          if (MaxPointCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxPointCount);
          }
          if (RemoveDegenerates != false) {
            output.WriteRawTag(24);
            output.WriteBool(RemoveDegenerates);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PercentReduction != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PercentReduction);
          }
          if (MaxPointCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxPointCount);
          }
          if (RemoveDegenerates != false) {
            output.WriteRawTag(24);
            output.WriteBool(RemoveDegenerates);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PercentReduction != 0D) {
            size += 1 + 8;
          }
          if (MaxPointCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPointCount);
          }
          if (RemoveDegenerates != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GeneralizeByArea other) {
          if (other == null) {
            return;
          }
          if (other.PercentReduction != 0D) {
            PercentReduction = other.PercentReduction;
          }
          if (other.MaxPointCount != 0) {
            MaxPointCount = other.MaxPointCount;
          }
          if (other.RemoveDegenerates != false) {
            RemoveDegenerates = other.RemoveDegenerates;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                PercentReduction = input.ReadDouble();
                break;
              }
              case 16: {
                MaxPointCount = input.ReadInt32();
                break;
              }
              case 24: {
                RemoveDegenerates = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                PercentReduction = input.ReadDouble();
                break;
              }
              case 16: {
                MaxPointCount = input.ReadInt32();
                break;
              }
              case 24: {
                RemoveDegenerates = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Intersection : pb::IMessage<Intersection>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Intersection> _parser = new pb::MessageParser<Intersection>(() => new Intersection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Intersection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection(Intersection other) : this() {
          dimensionMask_ = other.dimensionMask_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection Clone() {
          return new Intersection(this);
        }

        /// <summary>Field number for the "dimension_mask" field.</summary>
        public const int DimensionMaskFieldNumber = 1;
        private int dimensionMask_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DimensionMask {
          get { return dimensionMask_; }
          set {
            dimensionMask_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Intersection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Intersection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DimensionMask != other.DimensionMask) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DimensionMask != 0) hash ^= DimensionMask.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (DimensionMask != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DimensionMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (DimensionMask != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DimensionMask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DimensionMask != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DimensionMask);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Intersection other) {
          if (other == null) {
            return;
          }
          if (other.DimensionMask != 0) {
            DimensionMask = other.DimensionMask;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DimensionMask = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                DimensionMask = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Offset : pb::IMessage<Offset>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Offset> _parser = new pb::MessageParser<Offset>(() => new Offset());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Offset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offset() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offset(Offset other) : this() {
          distance_ = other.distance_;
          joinType_ = other.joinType_;
          bevelRatio_ = other.bevelRatio_;
          flattenError_ = other.flattenError_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offset Clone() {
          return new Offset(this);
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 1;
        private double distance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "join_type" field.</summary>
        public const int JoinTypeFieldNumber = 2;
        private global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType joinType_ = global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType JoinType {
          get { return joinType_; }
          set {
            joinType_ = value;
          }
        }

        /// <summary>Field number for the "bevel_ratio" field.</summary>
        public const int BevelRatioFieldNumber = 3;
        private double bevelRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double BevelRatio {
          get { return bevelRatio_; }
          set {
            bevelRatio_ = value;
          }
        }

        /// <summary>Field number for the "flatten_error" field.</summary>
        public const int FlattenErrorFieldNumber = 4;
        private double flattenError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FlattenError {
          get { return flattenError_; }
          set {
            flattenError_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Offset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Offset other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
          if (JoinType != other.JoinType) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BevelRatio, other.BevelRatio)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FlattenError, other.FlattenError)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
          if (JoinType != global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round) hash ^= JoinType.GetHashCode();
          if (BevelRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BevelRatio);
          if (FlattenError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FlattenError);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (JoinType != global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round) {
            output.WriteRawTag(16);
            output.WriteEnum((int) JoinType);
          }
          if (BevelRatio != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BevelRatio);
          }
          if (FlattenError != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(FlattenError);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Distance != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Distance);
          }
          if (JoinType != global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round) {
            output.WriteRawTag(16);
            output.WriteEnum((int) JoinType);
          }
          if (BevelRatio != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BevelRatio);
          }
          if (FlattenError != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(FlattenError);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Distance != 0D) {
            size += 1 + 8;
          }
          if (JoinType != global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
          }
          if (BevelRatio != 0D) {
            size += 1 + 8;
          }
          if (FlattenError != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Offset other) {
          if (other == null) {
            return;
          }
          if (other.Distance != 0D) {
            Distance = other.Distance;
          }
          if (other.JoinType != global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType.Round) {
            JoinType = other.JoinType;
          }
          if (other.BevelRatio != 0D) {
            BevelRatio = other.BevelRatio;
          }
          if (other.FlattenError != 0D) {
            FlattenError = other.FlattenError;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 16: {
                JoinType = (global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType) input.ReadEnum();
                break;
              }
              case 25: {
                BevelRatio = input.ReadDouble();
                break;
              }
              case 33: {
                FlattenError = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Distance = input.ReadDouble();
                break;
              }
              case 16: {
                JoinType = (global::com.epl.protobuf.v1.Params.Types.Offset.Types.OffsetJoinType) input.ReadEnum();
                break;
              }
              case 25: {
                BevelRatio = input.ReadDouble();
                break;
              }
              case 33: {
                FlattenError = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Offset message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum OffsetJoinType {
            [pbr::OriginalName("ROUND")] Round = 0,
            [pbr::OriginalName("BEVEL")] Bevel = 1,
            [pbr::OriginalName("MITER")] Miter = 2,
            [pbr::OriginalName("SQUARE")] Square = 3,
          }

        }
        #endregion

      }

      public sealed partial class Cut : pb::IMessage<Cut>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Cut> _parser = new pb::MessageParser<Cut>(() => new Cut());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cut> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cut() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cut(Cut other) : this() {
          considerTouch_ = other.considerTouch_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cut Clone() {
          return new Cut(this);
        }

        /// <summary>Field number for the "consider_touch" field.</summary>
        public const int ConsiderTouchFieldNumber = 1;
        private bool considerTouch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ConsiderTouch {
          get { return considerTouch_; }
          set {
            considerTouch_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cut);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cut other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConsiderTouch != other.ConsiderTouch) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConsiderTouch != false) hash ^= ConsiderTouch.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ConsiderTouch != false) {
            output.WriteRawTag(8);
            output.WriteBool(ConsiderTouch);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ConsiderTouch != false) {
            output.WriteRawTag(8);
            output.WriteBool(ConsiderTouch);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConsiderTouch != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cut other) {
          if (other == null) {
            return;
          }
          if (other.ConsiderTouch != false) {
            ConsiderTouch = other.ConsiderTouch;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConsiderTouch = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ConsiderTouch = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Clip : pb::IMessage<Clip>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Clip> _parser = new pb::MessageParser<Clip>(() => new Clip());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Clip> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clip() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clip(Clip other) : this() {
          envelope_ = other.envelope_ != null ? other.envelope_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clip Clone() {
          return new Clip(this);
        }

        /// <summary>Field number for the "envelope" field.</summary>
        public const int EnvelopeFieldNumber = 1;
        private global::com.epl.protobuf.v1.EnvelopeData envelope_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::com.epl.protobuf.v1.EnvelopeData Envelope {
          get { return envelope_; }
          set {
            envelope_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Clip);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Clip other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Envelope, other.Envelope)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (envelope_ != null) hash ^= Envelope.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (envelope_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Envelope);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (envelope_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Envelope);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (envelope_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Envelope);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Clip other) {
          if (other == null) {
            return;
          }
          if (other.envelope_ != null) {
            if (envelope_ == null) {
              Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            Envelope.MergeFrom(other.Envelope);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (envelope_ == null) {
                  Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
                }
                input.ReadMessage(Envelope);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (envelope_ == null) {
                  Envelope = new global::com.epl.protobuf.v1.EnvelopeData();
                }
                input.ReadMessage(Envelope);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Densify : pb::IMessage<Densify>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Densify> _parser = new pb::MessageParser<Densify>(() => new Densify());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Densify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Densify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Densify(Densify other) : this() {
          maxLength_ = other.maxLength_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Densify Clone() {
          return new Densify(this);
        }

        /// <summary>Field number for the "max_length" field.</summary>
        public const int MaxLengthFieldNumber = 1;
        private double maxLength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxLength {
          get { return maxLength_; }
          set {
            maxLength_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Densify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Densify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxLength, other.MaxLength)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MaxLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxLength);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (MaxLength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MaxLength);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (MaxLength != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(MaxLength);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MaxLength != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Densify other) {
          if (other == null) {
            return;
          }
          if (other.MaxLength != 0D) {
            MaxLength = other.MaxLength;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                MaxLength = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                MaxLength = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Simplify : pb::IMessage<Simplify>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Simplify> _parser = new pb::MessageParser<Simplify>(() => new Simplify());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Simplify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Simplify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Simplify(Simplify other) : this() {
          force_ = other.force_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Simplify Clone() {
          return new Simplify(this);
        }

        /// <summary>Field number for the "force" field.</summary>
        public const int ForceFieldNumber = 1;
        private bool force_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Force {
          get { return force_; }
          set {
            force_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Simplify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Simplify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Force != other.Force) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Force != false) hash ^= Force.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Force != false) {
            output.WriteRawTag(8);
            output.WriteBool(Force);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Force != false) {
            output.WriteRawTag(8);
            output.WriteBool(Force);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Force != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Simplify other) {
          if (other == null) {
            return;
          }
          if (other.Force != false) {
            Force = other.Force;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Force = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Force = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AffineTransform : pb::IMessage<AffineTransform>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AffineTransform> _parser = new pb::MessageParser<AffineTransform>(() => new AffineTransform());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AffineTransform> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.epl.protobuf.v1.Params.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AffineTransform() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AffineTransform(AffineTransform other) : this() {
          geodetic_ = other.geodetic_;
          xOffset_ = other.xOffset_;
          yOffset_ = other.yOffset_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AffineTransform Clone() {
          return new AffineTransform(this);
        }

        /// <summary>Field number for the "geodetic" field.</summary>
        public const int GeodeticFieldNumber = 2;
        private bool geodetic_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Geodetic {
          get { return geodetic_; }
          set {
            geodetic_ = value;
          }
        }

        /// <summary>Field number for the "x_offset" field.</summary>
        public const int XOffsetFieldNumber = 3;
        private double xOffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double XOffset {
          get { return xOffset_; }
          set {
            xOffset_ = value;
          }
        }

        /// <summary>Field number for the "y_offset" field.</summary>
        public const int YOffsetFieldNumber = 4;
        private double yOffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double YOffset {
          get { return yOffset_; }
          set {
            yOffset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AffineTransform);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AffineTransform other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Geodetic != other.Geodetic) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XOffset, other.XOffset)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YOffset, other.YOffset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Geodetic != false) hash ^= Geodetic.GetHashCode();
          if (XOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XOffset);
          if (YOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YOffset);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Geodetic != false) {
            output.WriteRawTag(16);
            output.WriteBool(Geodetic);
          }
          if (XOffset != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(XOffset);
          }
          if (YOffset != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(YOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Geodetic != false) {
            output.WriteRawTag(16);
            output.WriteBool(Geodetic);
          }
          if (XOffset != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(XOffset);
          }
          if (YOffset != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(YOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Geodetic != false) {
            size += 1 + 1;
          }
          if (XOffset != 0D) {
            size += 1 + 8;
          }
          if (YOffset != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AffineTransform other) {
          if (other == null) {
            return;
          }
          if (other.Geodetic != false) {
            Geodetic = other.Geodetic;
          }
          if (other.XOffset != 0D) {
            XOffset = other.XOffset;
          }
          if (other.YOffset != 0D) {
            YOffset = other.YOffset;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                Geodetic = input.ReadBool();
                break;
              }
              case 25: {
                XOffset = input.ReadDouble();
                break;
              }
              case 33: {
                YOffset = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 16: {
                Geodetic = input.ReadBool();
                break;
              }
              case 25: {
                XOffset = input.ReadDouble();
                break;
              }
              case 33: {
                YOffset = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
