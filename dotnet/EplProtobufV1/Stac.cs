// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: epl/protobuf/v1/stac.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.epl.protobuf.v1 {

  /// <summary>Holder for reflection information generated from epl/protobuf/v1/stac.proto</summary>
  public static partial class StacReflection {

    #region Descriptor
    /// <summary>File descriptor for epl/protobuf/v1/stac.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StacReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChplcGwvcHJvdG9idWYvdjEvc3RhYy5wcm90bxIPZXBsLnByb3RvYnVmLnYx",
            "Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJv",
            "dG9idWYvd3JhcHBlcnMucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJv",
            "dG8aHmVwbC9wcm90b2J1Zi92MS9nZW9tZXRyeS5wcm90bxobZXBsL3Byb3Rv",
            "YnVmL3YxL3F1ZXJ5LnByb3RvIuECCgpDb2xsZWN0aW9uEhQKDHN0YWNfdmVy",
            "c2lvbhgBIAEoCRIKCgJpZBgDIAEoCRINCgV0aXRsZRgEIAEoCRITCgtkZXNj",
            "cmlwdGlvbhgFIAEoCRIQCghrZXl3b3JkcxgGIAMoCRIPCgdsaWNlbnNlGAcg",
            "ASgJEiwKCXByb3ZpZGVycxgIIAMoCzIZLmVwbC5wcm90b2J1Zi52MS5Qcm92",
            "aWRlchInCgZleHRlbnQYCSABKAsyFy5lcGwucHJvdG9idWYudjEuRXh0ZW50",
            "Ej0KCXN1bW1hcmllcxgKIAMoCzIqLmVwbC5wcm90b2J1Zi52MS5Db2xsZWN0",
            "aW9uLlN1bW1hcmllc0VudHJ5GkgKDlN1bW1hcmllc0VudHJ5EgsKA2tleRgB",
            "IAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmVwbC5wcm90b2J1Zi52MS5TdGF0czoC",
            "OAFKBAgCEANKBAgLEAwijgEKEUNvbGxlY3Rpb25SZXF1ZXN0EgoKAmlkGAEg",
            "ASgJEi0KBGJib3gYAiABKAsyHS5lcGwucHJvdG9idWYudjEuRW52ZWxvcGVE",
            "YXRhSAASMwoKaW50ZXJzZWN0cxgDIAEoCzIdLmVwbC5wcm90b2J1Zi52MS5H",
            "ZW9tZXRyeURhdGFIAEIJCgdzcGF0aWFsIgcKBVN0YXRzImUKBkV4dGVudBIu",
            "CgdzcGF0aWFsGAEgAygLMh0uZXBsLnByb3RvYnVmLnYxLkVudmVsb3BlRGF0",
            "YRIrCgh0ZW1wb3JhbBgCIAMoCzIZLmVwbC5wcm90b2J1Zi52MS5JbnRlcnZh",
            "bCJeCghJbnRlcnZhbBIpCgVzdGFydBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASJwoDZW5kGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcCJJCghQcm92aWRlchIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0",
            "aW9uGAIgASgJEg0KBXJvbGVzGAMgAygJEgsKA3VybBgEIAEoCSLPCgoIU3Rh",
            "Y0l0ZW0SCgoCaWQYASABKAkSDQoFdGl0bGUYAiABKAkSEgoKY29sbGVjdGlv",
            "bhgDIAEoCRIoCgpwcm9wZXJ0aWVzGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVm",
            "LkFueRI1CgZhc3NldHMYBSADKAsyJS5lcGwucHJvdG9idWYudjEuU3RhY0l0",
            "ZW0uQXNzZXRzRW50cnkSLwoIZ2VvbWV0cnkYBiABKAsyHS5lcGwucHJvdG9i",
            "dWYudjEuR2VvbWV0cnlEYXRhEisKBGJib3gYByABKAsyHS5lcGwucHJvdG9i",
            "dWYudjEuRW52ZWxvcGVEYXRhEi4KCGRhdGV0aW1lGAggASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcEgAEjQKDnN0YXJ0X2RhdGV0aW1lGAogASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAEi4KCG9ic2VydmVkGAkg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgBEjcKEXN0YXJ0X29i",
            "c2VydmF0aW9uGAsgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgB",
            "EjAKDGVuZF9kYXRldGltZRgMIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASMwoPZW5kX29ic2VydmF0aW9uGA0gASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIrCgdjcmVhdGVkGA4gASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIrCgd1cGRhdGVkGA8gASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBItCgRwcm9qGBAgASgLMh8uZXBsLnByb3RvYnVmLnYx",
            "LlByb2plY3Rpb25EYXRhEjAKDXBsYXRmb3JtX2VudW0YESABKA4yGS5lcGwu",
            "cHJvdG9idWYudjEuUGxhdGZvcm0SEAoIcGxhdGZvcm0YEiABKAkSNAoPaW5z",
            "dHJ1bWVudF9lbnVtGBMgASgOMhsuZXBsLnByb3RvYnVmLnYxLkluc3RydW1l",
            "bnQSEgoKaW5zdHJ1bWVudBgUIAEoCRI6ChJjb25zdGVsbGF0aW9uX2VudW0Y",
            "FSABKA4yHi5lcGwucHJvdG9idWYudjEuQ29uc3RlbGxhdGlvbhIVCg1jb25z",
            "dGVsbGF0aW9uGBYgASgJEi4KDG1pc3Npb25fZW51bRgXIAEoDjIYLmVwbC5w",
            "cm90b2J1Zi52MS5NaXNzaW9uEg8KB21pc3Npb24YGCABKAkSKAoDZ3NkGBkg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSFAoMc3RhY192ZXJz",
            "aW9uGBogASgJEhcKD3N0YWNfcGJfdmVyc2lvbhgbIAEoCRIXCg9zdGFjX2V4",
            "dGVuc2lvbnMYHCADKAkSHwoCZW8YHSABKAsyEy5lcGwucHJvdG9idWYudjEu",
            "RW8SIwoEdmlldxgiIAEoCzIVLmVwbC5wcm90b2J1Zi52MS5WaWV3EikKB2xh",
            "bmRzYXQYHyABKAsyGC5lcGwucHJvdG9idWYudjEuTGFuZHNhdBInCgZtb3Nh",
            "aWMYICABKAsyFy5lcGwucHJvdG9idWYudjEuTW9zYWljGkUKC0Fzc2V0c0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmVwbC5wcm90b2J1",
            "Zi52MS5Bc3NldDoCOAFCFQoTdGVtcG9yYWxfZGVwcmVjYXRlZEIKCgh0ZW1w",
            "b3JhbCLACAoLU3RhY1JlcXVlc3QSDQoFbGltaXQYASABKA0SDgoGb2Zmc2V0",
            "GAIgASgEEgwKAmlkGAMgASgJSAASMwoKaWRfY29tcGxleBgEIAEoCzIdLmVw",
            "bC5wcm90b2J1Zi52MS5TdHJpbmdGaWx0ZXJIABISCgpjb2xsZWN0aW9uGAUg",
            "ASgJEigKCnByb3BlcnRpZXMYBiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55",
            "EjMKCmludGVyc2VjdHMYByABKAsyHS5lcGwucHJvdG9idWYudjEuR2VvbWV0",
            "cnlEYXRhSAESLQoEYmJveBgIIAEoCzIdLmVwbC5wcm90b2J1Zi52MS5FbnZl",
            "bG9wZURhdGFIARI8ChBnZW9tZXRyeV9yZXF1ZXN0GAkgASgLMiAuZXBsLnBy",
            "b3RvYnVmLnYxLkdlb21ldHJ5UmVxdWVzdEgBEjQKCGRhdGV0aW1lGAogASgL",
            "MiAuZXBsLnByb3RvYnVmLnYxLlRpbWVzdGFtcEZpbHRlckgCEjQKCG9ic2Vy",
            "dmVkGAsgASgLMiAuZXBsLnByb3RvYnVmLnYxLlRpbWVzdGFtcEZpbHRlckgC",
            "EjEKB2NyZWF0ZWQYDCABKAsyIC5lcGwucHJvdG9idWYudjEuVGltZXN0YW1w",
            "RmlsdGVyEjEKB3VwZGF0ZWQYDSABKAsyIC5lcGwucHJvdG9idWYudjEuVGlt",
            "ZXN0YW1wRmlsdGVyEi0KBHByb2oYDiABKAsyHy5lcGwucHJvdG9idWYudjEu",
            "UHJvamVjdGlvbkRhdGESMAoNcGxhdGZvcm1fZW51bRgPIAEoDjIZLmVwbC5w",
            "cm90b2J1Zi52MS5QbGF0Zm9ybRI0Cg9pbnN0cnVtZW50X2VudW0YESABKA4y",
            "Gy5lcGwucHJvdG9idWYudjEuSW5zdHJ1bWVudBI6ChJjb25zdGVsbGF0aW9u",
            "X2VudW0YEyABKA4yHi5lcGwucHJvdG9idWYudjEuQ29uc3RlbGxhdGlvbhIu",
            "CgxtaXNzaW9uX2VudW0YFSABKA4yGC5lcGwucHJvdG9idWYudjEuTWlzc2lv",
            "bhIpCgNnc2QYFyABKAsyHC5lcGwucHJvdG9idWYudjEuRmxvYXRGaWx0ZXIS",
            "JgoCZW8YGCABKAsyGi5lcGwucHJvdG9idWYudjEuRW9SZXF1ZXN0EioKBHZp",
            "ZXcYGSABKAsyHC5lcGwucHJvdG9idWYudjEuVmlld1JlcXVlc3QSMAoHbGFu",
            "ZHNhdBgaIAEoCzIfLmVwbC5wcm90b2J1Zi52MS5MYW5kc2F0UmVxdWVzdBIu",
            "CgZtb3NhaWMYGyABKAsyHi5lcGwucHJvdG9idWYudjEuTW9zYWljUmVxdWVz",
            "dEIKCghpZGVudGl0eUIJCgdzcGF0aWFsQgoKCHRlbXBvcmFsSgQIEBARSgQI",
            "EhATSgQIFBAVSgQIFhAXIoACCgRWaWV3Ei4KCW9mZl9uYWRpchgBIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjQKD2luY2lkZW5jZV9hbmds",
            "ZRgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEiwKB2F6aW11",
            "dGgYAyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRIwCgtzdW5f",
            "YXppbXV0aBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjIK",
            "DXN1bl9lbGV2YXRpb24YBSABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRW",
            "YWx1ZSKMAgoLVmlld1JlcXVlc3QSLwoJb2ZmX25hZGlyGAEgASgLMhwuZXBs",
            "LnByb3RvYnVmLnYxLkZsb2F0RmlsdGVyEjUKD2luY2lkZW5jZV9hbmdsZRgC",
            "IAEoCzIcLmVwbC5wcm90b2J1Zi52MS5GbG9hdEZpbHRlchItCgdhemltdXRo",
            "GAMgASgLMhwuZXBsLnByb3RvYnVmLnYxLkZsb2F0RmlsdGVyEjEKC3N1bl9h",
            "emltdXRoGAQgASgLMhwuZXBsLnByb3RvYnVmLnYxLkZsb2F0RmlsdGVyEjMK",
            "DXN1bl9lbGV2YXRpb24YBSABKAsyHC5lcGwucHJvdG9idWYudjEuRmxvYXRG",
            "aWx0ZXIi2wEKA1NhdBI0Cg5yZWxhdGl2ZV9vcmJpdBgGIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRI0CgtvcmJpdF9zdGF0ZRgBIAEoDjIf",
            "LmVwbC5wcm90b2J1Zi52MS5TYXQuT3JiaXRTdGF0ZSJoCgpPcmJpdFN0YXRl",
            "EhYKElVLTk9XTl9PUkJJVF9TVEFURRAAEhMKD0FTQ0VORElOR19PUkJJVBAB",
            "EhQKEERFU0NFTkRJTkdfT1JCSVQQAhIXChNHRU9TVEFUSU9OQVJZX09SQklU",
            "EAMiWgoKU2F0UmVxdWVzdBIWCg5yZWxhdGl2ZV9vcmJpdBgGIAEoDRI0Cgtv",
            "cmJpdF9zdGF0ZRgBIAEoDjIfLmVwbC5wcm90b2J1Zi52MS5TYXQuT3JiaXRT",
            "dGF0ZSKXAgoCRW8SMAoLY2xvdWRfY292ZXIYASABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuRmxvYXRWYWx1ZRInCgViYW5kcxgCIAEoDjIYLmVwbC5wcm90b2J1",
            "Zi52MS5Fby5CYW5kIrUBCgRCYW5kEhAKDFVOS05PV05fQkFORBAAEgsKB0NP",
            "QVNUQUwQAhIICgRCTFVFEAQSCQoFR1JFRU4QCBIHCgNSRUQQEBIHCgNSR0IQ",
            "HBIHCgNOSVIQIBIJCgVOSVJfMhAhEgkKBVJHQklSEDwSCgoGU1dJUl8xEEAS",
            "CwoGU1dJUl8yEIABEggKA1BBThCAAhILCgZDSVJSVVMQgAQSCwoGTFdJUl8x",
            "EIAIEgsKBkxXSVJfMhCAECJnCglFb1JlcXVlc3QSMQoLY2xvdWRfY292ZXIY",
            "ASABKAsyHC5lcGwucHJvdG9idWYudjEuRmxvYXRGaWx0ZXISJwoFYmFuZHMY",
            "AiABKA4yGC5lcGwucHJvdG9idWYudjEuRW8uQmFuZCKjAgoFQXNzZXQSDAoE",
            "aHJlZhgBIAEoCRIMCgR0eXBlGAIgASgJEioKCGVvX2JhbmRzGAMgASgOMhgu",
            "ZXBsLnByb3RvYnVmLnYxLkVvLkJhbmQSLgoKYXNzZXRfdHlwZRgEIAEoDjIa",
            "LmVwbC5wcm90b2J1Zi52MS5Bc3NldFR5cGUSNgoOY2xvdWRfcGxhdGZvcm0Y",
            "BSABKA4yHi5lcGwucHJvdG9idWYudjEuQ2xvdWRQbGF0Zm9ybRIWCg5idWNr",
            "ZXRfbWFuYWdlchgGIAEoCRIVCg1idWNrZXRfcmVnaW9uGAcgASgJEg4KBmJ1",
            "Y2tldBgIIAEoCRITCgtvYmplY3RfcGF0aBgJIAEoCRIWCg5yZXF1ZXN0ZXJf",
            "cGF5cxgKIAEoCCJjCg1EYXRldGltZVJhbmdlEikKBXN0YXJ0GAEgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBInCgNlbmQYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wIlUKDlN0YWNEYlJlc3BvbnNlEg4KBnN0",
            "YXR1cxgBIAEoCRITCgtzdGF0dXNfY29kZRgCIAEoBRIPCgdkYXRhX2lkGAMg",
            "ASgJEg0KBWNvdW50GAQgASgEIpwBCgNTYXISLwoIcGxhdGZvcm0YASABKA4y",
            "HS5lcGwucHJvdG9idWYudjEuU2FyLlBsYXRmb3JtIj4KCFBsYXRmb3JtEhQK",
            "EFVOS05PV05fUExBVEZPUk0QABILCgdFTlZJU0FUEAESDwoLU0VOVElORUxf",
            "MUEQAiIkCgpJbnN0cnVtZW50EhYKElVOS05PV05fSU5TVFJVTUVOVBAAIvAD",
            "CgdMYW5kc2F0EhAKCHNjZW5lX2lkGAEgASgJEhIKCnByb2R1Y3RfaWQYAiAB",
            "KAkSQgoQcHJvY2Vzc2luZ19sZXZlbBgDIAEoDjIoLmVwbC5wcm90b2J1Zi52",
            "MS5MYW5kc2F0LlByb2Nlc3NpbmdMZXZlbBIQCgh3cnNfcGF0aBgEIAEoBRIP",
            "Cgd3cnNfcm93GAUgASgFEjUKEGNsb3VkX2NvdmVyX2xhbmQYBiABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRIyCgh3cnNfdHlwZRgHIAEoDjIg",
            "LmVwbC5wcm90b2J1Zi52MS5MYW5kc2F0LldSU1R5cGUiXQoSQ29sbGVjdGlv",
            "bkNhdGVnb3J5Eh8KG1VOS05PV05fQ09MTEVDVElPTl9DQVRFR09SWRAAEgYK",
            "AkExEAESBgoCQTIQAhIGCgJUMRADEgYKAlQyEAQSBgoCUlQQBSItCgdXUlNU",
            "eXBlEg4KClVLTk9XTl9XUlMQABIICgRXUlMxEAESCAoEV1JTMhACIl8KD1By",
            "b2Nlc3NpbmdMZXZlbBIcChhVTktOT1dOX1BST0NFU1NJTkdfTEVWRUwQABIH",
            "CgNMMUcQARIICgRMMVRQEAISBwoDTDFUEAMSCAoETDFHVBAEEggKBEwxR1MQ",
            "BSLVAQoOTGFuZHNhdFJlcXVlc3QSEAoIc2NlbmVfaWQYASABKAkSEgoKcHJv",
            "ZHVjdF9pZBgCIAEoCRJCChBwcm9jZXNzaW5nX2xldmVsGAMgASgOMiguZXBs",
            "LnByb3RvYnVmLnYxLkxhbmRzYXQuUHJvY2Vzc2luZ0xldmVsEhAKCHdyc19w",
            "YXRoGAQgASgFEg8KB3dyc19yb3cYBSABKAUSNgoQY2xvdWRfY292ZXJfbGFu",
            "ZBgGIAEoCzIcLmVwbC5wcm90b2J1Zi52MS5GbG9hdEZpbHRlciKKAQoGTW9z",
            "YWljEgwKBG5hbWUYASABKAkSEAoIcXVhZF9rZXkYAiABKAkSDQoFem9vbXMY",
            "AyADKAUSOQoRb2JzZXJ2YXRpb25fcmFuZ2UYBCABKAsyHi5lcGwucHJvdG9i",
            "dWYudjEuRGF0ZXRpbWVSYW5nZRIWCg5wcm92ZW5hbmNlX2lkcxgFIAMoCSIv",
            "Cg1Nb3NhaWNSZXF1ZXN0EgwKBG5hbWUYASABKAkSEAoIcXVhZF9rZXkYAiAB",
            "KAkq6gEKCUFzc2V0VHlwZRIRCg1VTktOT1dOX0FTU0VUEAASCAoESlBFRxAB",
            "EgsKB0dFT1RJRkYQAhIICgRMRVJDEAMSBwoDTVJGEAQSCwoHTVJGX0lEWBAF",
            "EgsKB01SRl9YTUwQBhIOCgpDT19HRU9USUZGEAcSBwoDUkFXEAgSDQoJVEhV",
            "TUJOQUlMEAkSCAoEVElGRhAKEg0KCUpQRUdfMjAwMBALEgcKA1hNTBAMEgcK",
            "A1RYVBANEgcKA1BORxAOEgwKCE9WRVJWSUVXEA8SCAoESlNPThAQEggKBEhU",
            "TUwQERIICgRXRUJQEBIqUQoNQ2xvdWRQbGF0Zm9ybRIaChZVTktOT1dOX0NM",
            "T1VEX1BMQVRGT1JNEAASBwoDQVdTEAESBwoDR0NQEAISCQoFQVpVUkUQAxIH",
            "CgNJQk0QBCrHAQoIUGxhdGZvcm0SFAoQVU5LTk9XTl9QTEFURk9STRAAEg0K",
            "CUxBTkRTQVRfMRACEg0KCUxBTkRTQVRfMhAEEg0KCUxBTkRTQVRfMxAIEg8K",
            "C0xBTkRTQVRfMTIzEA4SDQoJTEFORFNBVF80EBASDQoJTEFORFNBVF81ECAS",
            "DgoKTEFORFNBVF80NRAwEg0KCUxBTkRTQVRfNxBAEg4KCUxBTkRTQVRfOBCA",
            "ARIMCgdTV0lGVF8yEIACEgwKB1NXSUZUXzMQgAQqdgoKSW5zdHJ1bWVudBIW",
            "ChJVTktOT1dOX0lOU1RSVU1FTlQQABIHCgNPTEkQAhIICgRUSVJTEAQSDAoI",
            "T0xJX1RJUlMQBhIJCgVQT01fMRAIEgYKAlRNEBASBwoDRVRNECASBwoDTVNT",
            "EEASCgoFUE9NXzIQgAEqKgoNQ29uc3RlbGxhdGlvbhIZChVVTktOT1dOX0NP",
            "TlNURUxMQVRJT04QACpKCgdNaXNzaW9uEhMKD1VOS05PV05fTUlTU0lPThAA",
            "EgsKB0xBTkRTQVQQAhIICgROQUlQEAQSCAoEUE5PQRAIEgkKBVNXSUZUEBBC",
            "bwoTY29tLmVwbC5wcm90b2J1Zi52MUIJU3RhY1Byb3RvUAFaLmdpdGh1Yi5j",
            "b20vZ2VvLWdycGMvYXBpL2dvbGFuZy9lcGwvcHJvdG9idWYvdjGiAgRTVFBC",
            "qgITY29tLmVwbC5wcm90b2J1Zi52MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::com.epl.protobuf.v1.GeometryReflection.Descriptor, global::com.epl.protobuf.v1.QueryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.epl.protobuf.v1.AssetType), typeof(global::com.epl.protobuf.v1.CloudPlatform), typeof(global::com.epl.protobuf.v1.Platform), typeof(global::com.epl.protobuf.v1.Instrument), typeof(global::com.epl.protobuf.v1.Constellation), typeof(global::com.epl.protobuf.v1.Mission), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Collection), global::com.epl.protobuf.v1.Collection.Parser, new[]{ "StacVersion", "Id", "Title", "Description", "Keywords", "License", "Providers", "Extent", "Summaries" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.CollectionRequest), global::com.epl.protobuf.v1.CollectionRequest.Parser, new[]{ "Id", "Bbox", "Intersects" }, new[]{ "Spatial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Stats), global::com.epl.protobuf.v1.Stats.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Extent), global::com.epl.protobuf.v1.Extent.Parser, new[]{ "Spatial", "Temporal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Interval), global::com.epl.protobuf.v1.Interval.Parser, new[]{ "Start", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Provider), global::com.epl.protobuf.v1.Provider.Parser, new[]{ "Name", "Description", "Roles", "Url" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.StacItem), global::com.epl.protobuf.v1.StacItem.Parser, new[]{ "Id", "Title", "Collection", "Properties", "Assets", "Geometry", "Bbox", "Datetime", "StartDatetime", "Observed", "StartObservation", "EndDatetime", "EndObservation", "Created", "Updated", "Proj", "PlatformEnum", "Platform", "InstrumentEnum", "Instrument", "ConstellationEnum", "Constellation", "MissionEnum", "Mission", "Gsd", "StacVersion", "StacPbVersion", "StacExtensions", "Eo", "View", "Landsat", "Mosaic" }, new[]{ "TemporalDeprecated", "Temporal" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.StacRequest), global::com.epl.protobuf.v1.StacRequest.Parser, new[]{ "Limit", "Offset", "Id", "IdComplex", "Collection", "Properties", "Intersects", "Bbox", "GeometryRequest", "Datetime", "Observed", "Created", "Updated", "Proj", "PlatformEnum", "InstrumentEnum", "ConstellationEnum", "MissionEnum", "Gsd", "Eo", "View", "Landsat", "Mosaic" }, new[]{ "Identity", "Spatial", "Temporal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.View), global::com.epl.protobuf.v1.View.Parser, new[]{ "OffNadir", "IncidenceAngle", "Azimuth", "SunAzimuth", "SunElevation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.ViewRequest), global::com.epl.protobuf.v1.ViewRequest.Parser, new[]{ "OffNadir", "IncidenceAngle", "Azimuth", "SunAzimuth", "SunElevation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Sat), global::com.epl.protobuf.v1.Sat.Parser, new[]{ "RelativeOrbit", "OrbitState" }, null, new[]{ typeof(global::com.epl.protobuf.v1.Sat.Types.OrbitState) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.SatRequest), global::com.epl.protobuf.v1.SatRequest.Parser, new[]{ "RelativeOrbit", "OrbitState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Eo), global::com.epl.protobuf.v1.Eo.Parser, new[]{ "CloudCover", "Bands" }, null, new[]{ typeof(global::com.epl.protobuf.v1.Eo.Types.Band) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.EoRequest), global::com.epl.protobuf.v1.EoRequest.Parser, new[]{ "CloudCover", "Bands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Asset), global::com.epl.protobuf.v1.Asset.Parser, new[]{ "Href", "Type", "EoBands", "AssetType", "CloudPlatform", "BucketManager", "BucketRegion", "Bucket", "ObjectPath", "RequesterPays" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.DatetimeRange), global::com.epl.protobuf.v1.DatetimeRange.Parser, new[]{ "Start", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.StacDbResponse), global::com.epl.protobuf.v1.StacDbResponse.Parser, new[]{ "Status", "StatusCode", "DataId", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Sar), global::com.epl.protobuf.v1.Sar.Parser, new[]{ "Platform" }, null, new[]{ typeof(global::com.epl.protobuf.v1.Sar.Types.Platform), typeof(global::com.epl.protobuf.v1.Sar.Types.Instrument) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Landsat), global::com.epl.protobuf.v1.Landsat.Parser, new[]{ "SceneId", "ProductId", "ProcessingLevel", "WrsPath", "WrsRow", "CloudCoverLand", "WrsType" }, null, new[]{ typeof(global::com.epl.protobuf.v1.Landsat.Types.CollectionCategory), typeof(global::com.epl.protobuf.v1.Landsat.Types.WRSType), typeof(global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.LandsatRequest), global::com.epl.protobuf.v1.LandsatRequest.Parser, new[]{ "SceneId", "ProductId", "ProcessingLevel", "WrsPath", "WrsRow", "CloudCoverLand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.Mosaic), global::com.epl.protobuf.v1.Mosaic.Parser, new[]{ "Name", "QuadKey", "Zooms", "ObservationRange", "ProvenanceIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.MosaicRequest), global::com.epl.protobuf.v1.MosaicRequest.Parser, new[]{ "Name", "QuadKey" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AssetType {
    [pbr::OriginalName("UNKNOWN_ASSET")] UnknownAsset = 0,
    [pbr::OriginalName("JPEG")] Jpeg = 1,
    /// <summary>
    /// geotiff https://www.gdal.org/frmt_gtiff.html
    /// </summary>
    [pbr::OriginalName("GEOTIFF")] Geotiff = 2,
    /// <summary>
    /// Limited Error Raster Compression
    /// </summary>
    [pbr::OriginalName("LERC")] Lerc = 3,
    /// <summary>
    /// metadata raster file https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-metadata-file-mrf
    /// </summary>
    [pbr::OriginalName("MRF")] Mrf = 4,
    /// <summary>
    /// metadata raster file index https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-index-file-idx
    /// </summary>
    [pbr::OriginalName("MRF_IDX")] MrfIdx = 5,
    [pbr::OriginalName("MRF_XML")] MrfXml = 6,
    /// <summary>
    /// cloud optimized geotiff https://www.cogeo.org/
    /// </summary>
    [pbr::OriginalName("CO_GEOTIFF")] CoGeotiff = 7,
    /// <summary>
    /// Generic raw data
    /// </summary>
    [pbr::OriginalName("RAW")] Raw = 8,
    /// <summary>
    /// thumbnail. could be jpg or png
    /// </summary>
    [pbr::OriginalName("THUMBNAIL")] Thumbnail = 9,
    [pbr::OriginalName("TIFF")] Tiff = 10,
    [pbr::OriginalName("JPEG_2000")] Jpeg2000 = 11,
    [pbr::OriginalName("XML")] Xml = 12,
    [pbr::OriginalName("TXT")] Txt = 13,
    [pbr::OriginalName("PNG")] Png = 14,
    /// <summary>
    /// GDAL overview file https://gdal.org/programs/gdaladdo.html
    /// </summary>
    [pbr::OriginalName("OVERVIEW")] Overview = 15,
    [pbr::OriginalName("JSON")] Json = 16,
    [pbr::OriginalName("HTML")] Html = 17,
    [pbr::OriginalName("WEBP")] Webp = 18,
  }

  public enum CloudPlatform {
    [pbr::OriginalName("UNKNOWN_CLOUD_PLATFORM")] UnknownCloudPlatform = 0,
    /// <summary>
    /// Amazon Web Services
    /// </summary>
    [pbr::OriginalName("AWS")] Aws = 1,
    /// <summary>
    /// Google Cloud Platform
    /// </summary>
    [pbr::OriginalName("GCP")] Gcp = 2,
    /// <summary>
    /// Microsoft's Azure
    /// </summary>
    [pbr::OriginalName("AZURE")] Azure = 3,
    /// <summary>
    /// IBM
    /// </summary>
    [pbr::OriginalName("IBM")] Ibm = 4,
  }

  public enum Platform {
    [pbr::OriginalName("UNKNOWN_PLATFORM")] UnknownPlatform = 0,
    [pbr::OriginalName("LANDSAT_1")] Landsat1 = 2,
    [pbr::OriginalName("LANDSAT_2")] Landsat2 = 4,
    [pbr::OriginalName("LANDSAT_3")] Landsat3 = 8,
    [pbr::OriginalName("LANDSAT_123")] Landsat123 = 14,
    [pbr::OriginalName("LANDSAT_4")] Landsat4 = 16,
    [pbr::OriginalName("LANDSAT_5")] Landsat5 = 32,
    [pbr::OriginalName("LANDSAT_45")] Landsat45 = 48,
    [pbr::OriginalName("LANDSAT_7")] Landsat7 = 64,
    [pbr::OriginalName("LANDSAT_8")] Landsat8 = 128,
    /// <summary>
    /// near space labs platform
    /// </summary>
    [pbr::OriginalName("SWIFT_2")] Swift2 = 256,
    [pbr::OriginalName("SWIFT_3")] Swift3 = 512,
  }

  public enum Instrument {
    [pbr::OriginalName("UNKNOWN_INSTRUMENT")] UnknownInstrument = 0,
    [pbr::OriginalName("OLI")] Oli = 2,
    [pbr::OriginalName("TIRS")] Tirs = 4,
    [pbr::OriginalName("OLI_TIRS")] OliTirs = 6,
    /// <summary>
    /// near space labs instrument 1
    /// </summary>
    [pbr::OriginalName("POM_1")] Pom1 = 8,
    [pbr::OriginalName("TM")] Tm = 16,
    [pbr::OriginalName("ETM")] Etm = 32,
    [pbr::OriginalName("MSS")] Mss = 64,
    /// <summary>
    /// near space labs instrument 2
    /// </summary>
    [pbr::OriginalName("POM_2")] Pom2 = 128,
  }

  public enum Constellation {
    [pbr::OriginalName("UNKNOWN_CONSTELLATION")] UnknownConstellation = 0,
  }

  public enum Mission {
    [pbr::OriginalName("UNKNOWN_MISSION")] UnknownMission = 0,
    [pbr::OriginalName("LANDSAT")] Landsat = 2,
    [pbr::OriginalName("NAIP")] Naip = 4,
    /// <summary>
    /// spanish aerial dataset
    /// </summary>
    [pbr::OriginalName("PNOA")] Pnoa = 8,
    /// <summary>
    /// near space labs dataset
    /// </summary>
    [pbr::OriginalName("SWIFT")] Swift = 16,
  }

  #endregion

  #region Messages
  public sealed partial class Collection : pb::IMessage<Collection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Collection> _parser = new pb::MessageParser<Collection>(() => new Collection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Collection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collection(Collection other) : this() {
      stacVersion_ = other.stacVersion_;
      id_ = other.id_;
      title_ = other.title_;
      description_ = other.description_;
      keywords_ = other.keywords_.Clone();
      license_ = other.license_;
      providers_ = other.providers_.Clone();
      extent_ = other.extent_ != null ? other.extent_.Clone() : null;
      summaries_ = other.summaries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Collection Clone() {
      return new Collection(this);
    }

    /// <summary>Field number for the "stac_version" field.</summary>
    public const int StacVersionFieldNumber = 1;
    private string stacVersion_ = "";
    /// <summary>
    /// REQUIRED. The STAC version the Collection implements. STAC versions
    /// can be mixed, but please keep the recommended best practices in mind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StacVersion {
      get { return stacVersion_; }
      set {
        stacVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// REQUIRED. Identifier for the collection that is unique across the provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    /// <summary>
    /// A short descriptive one-line title for the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// REQUIRED. Detailed multi-line description to fully explain the collection. CommonMark 0.29 syntax MAY be used for rich text representation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_keywords_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> keywords_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of keywords describing the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keywords {
      get { return keywords_; }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 7;
    private string license_ = "";
    /// <summary>
    /// REQUIRED. Collection's license(s), either a SPDX License identifier, various if multiple licenses apply or proprietary for all other cases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "providers" field.</summary>
    public const int ProvidersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::com.epl.protobuf.v1.Provider> _repeated_providers_codec
        = pb::FieldCodec.ForMessage(66, global::com.epl.protobuf.v1.Provider.Parser);
    private readonly pbc::RepeatedField<global::com.epl.protobuf.v1.Provider> providers_ = new pbc::RepeatedField<global::com.epl.protobuf.v1.Provider>();
    /// <summary>
    /// A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.epl.protobuf.v1.Provider> Providers {
      get { return providers_; }
    }

    /// <summary>Field number for the "extent" field.</summary>
    public const int ExtentFieldNumber = 9;
    private global::com.epl.protobuf.v1.Extent extent_;
    /// <summary>
    /// REQUIRED. Spatial and temporal extents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Extent Extent {
      get { return extent_; }
      set {
        extent_ = value;
      }
    }

    /// <summary>Field number for the "summaries" field.</summary>
    public const int SummariesFieldNumber = 10;
    private static readonly pbc::MapField<string, global::com.epl.protobuf.v1.Stats>.Codec _map_summaries_codec
        = new pbc::MapField<string, global::com.epl.protobuf.v1.Stats>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::com.epl.protobuf.v1.Stats.Parser), 82);
    private readonly pbc::MapField<string, global::com.epl.protobuf.v1.Stats> summaries_ = new pbc::MapField<string, global::com.epl.protobuf.v1.Stats>();
    /// <summary>
    /// A map of property summaries, either a set of values or statistics such as a range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::com.epl.protobuf.v1.Stats> Summaries {
      get { return summaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Collection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Collection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StacVersion != other.StacVersion) return false;
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if(!keywords_.Equals(other.keywords_)) return false;
      if (License != other.License) return false;
      if(!providers_.Equals(other.providers_)) return false;
      if (!object.Equals(Extent, other.Extent)) return false;
      if (!Summaries.Equals(other.Summaries)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StacVersion.Length != 0) hash ^= StacVersion.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= keywords_.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      hash ^= providers_.GetHashCode();
      if (extent_ != null) hash ^= Extent.GetHashCode();
      hash ^= Summaries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StacVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StacVersion);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      keywords_.WriteTo(output, _repeated_keywords_codec);
      if (License.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(License);
      }
      providers_.WriteTo(output, _repeated_providers_codec);
      if (extent_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Extent);
      }
      summaries_.WriteTo(output, _map_summaries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StacVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StacVersion);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      keywords_.WriteTo(ref output, _repeated_keywords_codec);
      if (License.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(License);
      }
      providers_.WriteTo(ref output, _repeated_providers_codec);
      if (extent_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Extent);
      }
      summaries_.WriteTo(ref output, _map_summaries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StacVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StacVersion);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += keywords_.CalculateSize(_repeated_keywords_codec);
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      size += providers_.CalculateSize(_repeated_providers_codec);
      if (extent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extent);
      }
      size += summaries_.CalculateSize(_map_summaries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Collection other) {
      if (other == null) {
        return;
      }
      if (other.StacVersion.Length != 0) {
        StacVersion = other.StacVersion;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      keywords_.Add(other.keywords_);
      if (other.License.Length != 0) {
        License = other.License;
      }
      providers_.Add(other.providers_);
      if (other.extent_ != null) {
        if (extent_ == null) {
          Extent = new global::com.epl.protobuf.v1.Extent();
        }
        Extent.MergeFrom(other.Extent);
      }
      summaries_.Add(other.summaries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StacVersion = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            keywords_.AddEntriesFrom(input, _repeated_keywords_codec);
            break;
          }
          case 58: {
            License = input.ReadString();
            break;
          }
          case 66: {
            providers_.AddEntriesFrom(input, _repeated_providers_codec);
            break;
          }
          case 74: {
            if (extent_ == null) {
              Extent = new global::com.epl.protobuf.v1.Extent();
            }
            input.ReadMessage(Extent);
            break;
          }
          case 82: {
            summaries_.AddEntriesFrom(input, _map_summaries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StacVersion = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            keywords_.AddEntriesFrom(ref input, _repeated_keywords_codec);
            break;
          }
          case 58: {
            License = input.ReadString();
            break;
          }
          case 66: {
            providers_.AddEntriesFrom(ref input, _repeated_providers_codec);
            break;
          }
          case 74: {
            if (extent_ == null) {
              Extent = new global::com.epl.protobuf.v1.Extent();
            }
            input.ReadMessage(Extent);
            break;
          }
          case 82: {
            summaries_.AddEntriesFrom(ref input, _map_summaries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CollectionRequest : pb::IMessage<CollectionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CollectionRequest> _parser = new pb::MessageParser<CollectionRequest>(() => new CollectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionRequest(CollectionRequest other) : this() {
      id_ = other.id_;
      switch (other.SpatialCase) {
        case SpatialOneofCase.Bbox:
          Bbox = other.Bbox.Clone();
          break;
        case SpatialOneofCase.Intersects:
          Intersects = other.Intersects.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionRequest Clone() {
      return new CollectionRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EnvelopeData Bbox {
      get { return spatialCase_ == SpatialOneofCase.Bbox ? (global::com.epl.protobuf.v1.EnvelopeData) spatial_ : null; }
      set {
        spatial_ = value;
        spatialCase_ = value == null ? SpatialOneofCase.None : SpatialOneofCase.Bbox;
      }
    }

    /// <summary>Field number for the "intersects" field.</summary>
    public const int IntersectsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Intersects {
      get { return spatialCase_ == SpatialOneofCase.Intersects ? (global::com.epl.protobuf.v1.GeometryData) spatial_ : null; }
      set {
        spatial_ = value;
        spatialCase_ = value == null ? SpatialOneofCase.None : SpatialOneofCase.Intersects;
      }
    }

    private object spatial_;
    /// <summary>Enum of possible cases for the "spatial" oneof.</summary>
    public enum SpatialOneofCase {
      None = 0,
      Bbox = 2,
      Intersects = 3,
    }
    private SpatialOneofCase spatialCase_ = SpatialOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatialOneofCase SpatialCase {
      get { return spatialCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpatial() {
      spatialCase_ = SpatialOneofCase.None;
      spatial_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(Intersects, other.Intersects)) return false;
      if (SpatialCase != other.SpatialCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (spatialCase_ == SpatialOneofCase.Bbox) hash ^= Bbox.GetHashCode();
      if (spatialCase_ == SpatialOneofCase.Intersects) hash ^= Intersects.GetHashCode();
      hash ^= (int) spatialCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        output.WriteRawTag(26);
        output.WriteMessage(Intersects);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        output.WriteRawTag(26);
        output.WriteMessage(Intersects);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intersects);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      switch (other.SpatialCase) {
        case SpatialOneofCase.Bbox:
          if (Bbox == null) {
            Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
          }
          Bbox.MergeFrom(other.Bbox);
          break;
        case SpatialOneofCase.Intersects:
          if (Intersects == null) {
            Intersects = new global::com.epl.protobuf.v1.GeometryData();
          }
          Intersects.MergeFrom(other.Intersects);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            global::com.epl.protobuf.v1.EnvelopeData subBuilder = new global::com.epl.protobuf.v1.EnvelopeData();
            if (spatialCase_ == SpatialOneofCase.Bbox) {
              subBuilder.MergeFrom(Bbox);
            }
            input.ReadMessage(subBuilder);
            Bbox = subBuilder;
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (spatialCase_ == SpatialOneofCase.Intersects) {
              subBuilder.MergeFrom(Intersects);
            }
            input.ReadMessage(subBuilder);
            Intersects = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            global::com.epl.protobuf.v1.EnvelopeData subBuilder = new global::com.epl.protobuf.v1.EnvelopeData();
            if (spatialCase_ == SpatialOneofCase.Bbox) {
              subBuilder.MergeFrom(Bbox);
            }
            input.ReadMessage(subBuilder);
            Bbox = subBuilder;
            break;
          }
          case 26: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (spatialCase_ == SpatialOneofCase.Intersects) {
              subBuilder.MergeFrom(Intersects);
            }
            input.ReadMessage(subBuilder);
            Intersects = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Stats : pb::IMessage<Stats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Stats> _parser = new pb::MessageParser<Stats>(() => new Stats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats(Stats other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stats Clone() {
      return new Stats(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stats other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The object describes the spatio-temporal extents of the Collection. Both spatial and temporal extents are required to be specified.
  /// </summary>
  public sealed partial class Extent : pb::IMessage<Extent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Extent> _parser = new pb::MessageParser<Extent>(() => new Extent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Extent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extent(Extent other) : this() {
      spatial_ = other.spatial_.Clone();
      temporal_ = other.temporal_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extent Clone() {
      return new Extent(this);
    }

    /// <summary>Field number for the "spatial" field.</summary>
    public const int SpatialFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.epl.protobuf.v1.EnvelopeData> _repeated_spatial_codec
        = pb::FieldCodec.ForMessage(10, global::com.epl.protobuf.v1.EnvelopeData.Parser);
    private readonly pbc::RepeatedField<global::com.epl.protobuf.v1.EnvelopeData> spatial_ = new pbc::RepeatedField<global::com.epl.protobuf.v1.EnvelopeData>();
    /// <summary>
    /// REQUIRED. Potential spatial extent covered by the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.epl.protobuf.v1.EnvelopeData> Spatial {
      get { return spatial_; }
    }

    /// <summary>Field number for the "temporal" field.</summary>
    public const int TemporalFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.epl.protobuf.v1.Interval> _repeated_temporal_codec
        = pb::FieldCodec.ForMessage(18, global::com.epl.protobuf.v1.Interval.Parser);
    private readonly pbc::RepeatedField<global::com.epl.protobuf.v1.Interval> temporal_ = new pbc::RepeatedField<global::com.epl.protobuf.v1.Interval>();
    /// <summary>
    /// REQUIRED. Potential temporal extent covered by the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.epl.protobuf.v1.Interval> Temporal {
      get { return temporal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Extent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Extent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spatial_.Equals(other.spatial_)) return false;
      if(!temporal_.Equals(other.temporal_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spatial_.GetHashCode();
      hash ^= temporal_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      spatial_.WriteTo(output, _repeated_spatial_codec);
      temporal_.WriteTo(output, _repeated_temporal_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      spatial_.WriteTo(ref output, _repeated_spatial_codec);
      temporal_.WriteTo(ref output, _repeated_temporal_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spatial_.CalculateSize(_repeated_spatial_codec);
      size += temporal_.CalculateSize(_repeated_temporal_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Extent other) {
      if (other == null) {
        return;
      }
      spatial_.Add(other.spatial_);
      temporal_.Add(other.temporal_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spatial_.AddEntriesFrom(input, _repeated_spatial_codec);
            break;
          }
          case 18: {
            temporal_.AddEntriesFrom(input, _repeated_temporal_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            spatial_.AddEntriesFrom(ref input, _repeated_spatial_codec);
            break;
          }
          case 18: {
            temporal_.AddEntriesFrom(ref input, _repeated_temporal_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md#temporal-extent-object
  /// The object describes the temporal extents of the Collection.
  /// </summary>
  public sealed partial class Interval : pb::IMessage<Interval>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Interval> _parser = new pb::MessageParser<Interval>(() => new Interval());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Interval> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interval() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interval(Interval other) : this() {
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interval Clone() {
      return new Interval(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Interval);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Interval other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Interval other) {
      if (other == null) {
        return;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (start_ == null) {
              Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Start);
            break;
          }
          case 18: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (start_ == null) {
              Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Start);
            break;
          }
          case 18: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The object provides information about a provider. A provider is any of the organizations that captures or processes the content of the collection and therefore influences the data offered by this collection. May also include information about the final storage provider hosting the data.
  /// </summary>
  public sealed partial class Provider : pb::IMessage<Provider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Provider> _parser = new pb::MessageParser<Provider>(() => new Provider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Provider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Provider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Provider(Provider other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      roles_ = other.roles_.Clone();
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Provider Clone() {
      return new Provider(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// REQUIRED. The name of the organization or the individual.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.29 syntax MAY be used for rich text representation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_roles_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> roles_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Roles of the provider. Any of licensor, producer, processor or host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 4;
    private string url_ = "";
    /// <summary>
    /// Homepage on which the provider describes the dataset and publishes contact information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Provider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Provider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!roles_.Equals(other.roles_)) return false;
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= roles_.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      roles_.WriteTo(ref output, _repeated_roles_codec);
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Provider other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      roles_.Add(other.roles_);
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            roles_.AddEntriesFrom(ref input, _repeated_roles_codec);
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Spatio-Temporal Asset Catalog Item. This data item has a spatial and temporal extent. It has a unique identifier
  /// downloadable assets. It may have an extension with details beyond the spatial and temporal extents. It may have
  /// additional properties in the properties field
  /// </summary>
  public sealed partial class StacItem : pb::IMessage<StacItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StacItem> _parser = new pb::MessageParser<StacItem>(() => new StacItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StacItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacItem(StacItem other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      collection_ = other.collection_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      assets_ = other.assets_.Clone();
      geometry_ = other.geometry_ != null ? other.geometry_.Clone() : null;
      bbox_ = other.bbox_ != null ? other.bbox_.Clone() : null;
      endDatetime_ = other.endDatetime_ != null ? other.endDatetime_.Clone() : null;
      endObservation_ = other.endObservation_ != null ? other.endObservation_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      proj_ = other.proj_ != null ? other.proj_.Clone() : null;
      platformEnum_ = other.platformEnum_;
      platform_ = other.platform_;
      instrumentEnum_ = other.instrumentEnum_;
      instrument_ = other.instrument_;
      constellationEnum_ = other.constellationEnum_;
      constellation_ = other.constellation_;
      missionEnum_ = other.missionEnum_;
      mission_ = other.mission_;
      Gsd = other.Gsd;
      stacVersion_ = other.stacVersion_;
      stacPbVersion_ = other.stacPbVersion_;
      stacExtensions_ = other.stacExtensions_.Clone();
      eo_ = other.eo_ != null ? other.eo_.Clone() : null;
      view_ = other.view_ != null ? other.view_.Clone() : null;
      landsat_ = other.landsat_ != null ? other.landsat_.Clone() : null;
      mosaic_ = other.mosaic_ != null ? other.mosaic_.Clone() : null;
      switch (other.TemporalDeprecatedCase) {
        case TemporalDeprecatedOneofCase.Datetime:
          Datetime = other.Datetime.Clone();
          break;
        case TemporalDeprecatedOneofCase.StartDatetime:
          StartDatetime = other.StartDatetime.Clone();
          break;
      }

      switch (other.TemporalCase) {
        case TemporalOneofCase.Observed:
          Observed = other.Observed.Clone();
          break;
        case TemporalOneofCase.StartObservation:
          StartObservation = other.StartObservation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacItem Clone() {
      return new StacItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Provider identifier. As most geospatial assets are already defined by some identification scheme by the data
    /// provider it is recommended to simply use that ID. Data providers are advised to include sufficient information
    /// to make their IDs globally unique, including things like unique satellite IDs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    /// (optional) A human readable title describing the item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    /// <summary>
    /// (optional) The id of the STAC Collection this Item references to (see collection relation type below). This
    /// field is required if such a relation type is present. This field provides an easy way for a user to search for
    /// any Items that belong in a specified Collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any properties_;
    /// <summary>
    /// the properties of an item that are not defined within the STAC specification. Requires marshalling and
    /// un-marshalling https://developers.google.com/protocol-buffers/docs/proto3#any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::com.epl.protobuf.v1.Asset>.Codec _map_assets_codec
        = new pbc::MapField<string, global::com.epl.protobuf.v1.Asset>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::com.epl.protobuf.v1.Asset.Parser), 42);
    private readonly pbc::MapField<string, global::com.epl.protobuf.v1.Asset> assets_ = new pbc::MapField<string, global::com.epl.protobuf.v1.Asset>();
    /// <summary>
    /// Dictionary of asset objects that can be downloaded, each with a unique key. Some pre-defined keys are listed
    /// in the chapter 'Asset types'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::com.epl.protobuf.v1.Asset> Assets {
      get { return assets_; }
    }

    /// <summary>Field number for the "geometry" field.</summary>
    public const int GeometryFieldNumber = 6;
    private global::com.epl.protobuf.v1.GeometryData geometry_;
    /// <summary>
    /// the spatial shape of the item. must have a spatial reference defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Geometry {
      get { return geometry_; }
      set {
        geometry_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 7;
    private global::com.epl.protobuf.v1.EnvelopeData bbox_;
    /// <summary>
    /// the bounding box of the spatial shape of the item. must have a spatial reference defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EnvelopeData Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 8;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Datetime {
      get { return temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) temporalDeprecated_ : null; }
      set {
        temporalDeprecated_ = value;
        temporalDeprecatedCase_ = value == null ? TemporalDeprecatedOneofCase.None : TemporalDeprecatedOneofCase.Datetime;
      }
    }

    /// <summary>Field number for the "start_datetime" field.</summary>
    public const int StartDatetimeFieldNumber = 10;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDatetime {
      get { return temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) temporalDeprecated_ : null; }
      set {
        temporalDeprecated_ = value;
        temporalDeprecatedCase_ = value == null ? TemporalDeprecatedOneofCase.None : TemporalDeprecatedOneofCase.StartDatetime;
      }
    }

    /// <summary>Field number for the "observed" field.</summary>
    public const int ObservedFieldNumber = 9;
    /// <summary>
    /// timestamp at which data was observed (optional if datetime set)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Observed {
      get { return temporalCase_ == TemporalOneofCase.Observed ? (global::Google.Protobuf.WellKnownTypes.Timestamp) temporal_ : null; }
      set {
        temporal_ = value;
        temporalCase_ = value == null ? TemporalOneofCase.None : TemporalOneofCase.Observed;
      }
    }

    /// <summary>Field number for the "start_observation" field.</summary>
    public const int StartObservationFieldNumber = 11;
    /// <summary>
    /// start timestamp for a period of observation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartObservation {
      get { return temporalCase_ == TemporalOneofCase.StartObservation ? (global::Google.Protobuf.WellKnownTypes.Timestamp) temporal_ : null; }
      set {
        temporal_ = value;
        temporalCase_ = value == null ? TemporalOneofCase.None : TemporalOneofCase.StartObservation;
      }
    }

    /// <summary>Field number for the "end_datetime" field.</summary>
    public const int EndDatetimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endDatetime_;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndDatetime {
      get { return endDatetime_; }
      set {
        endDatetime_ = value;
      }
    }

    /// <summary>Field number for the "end_observation" field.</summary>
    public const int EndObservationFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endObservation_;
    /// <summary>
    /// end timestamp for a period of observation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndObservation {
      get { return endObservation_; }
      set {
        endObservation_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// timestamp when it was created (according to STAC spec this applies to metadata only,
    /// but in our case we haven't implemented the asset level created date yet, so we don't have a
    /// differentiation yet between metadata creation and asset creation. used to be `processed`)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// last timestamp when STAC metadata itself was updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "proj" field.</summary>
    public const int ProjFieldNumber = 16;
    private global::com.epl.protobuf.v1.ProjectionData proj_;
    /// <summary>
    /// spatial reference of the assets (if assets have different projections, those can be assigned on
    /// the assets and any not defined default to this projection)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData Proj {
      get { return proj_; }
      set {
        proj_ = value;
      }
    }

    /// <summary>Field number for the "platform_enum" field.</summary>
    public const int PlatformEnumFieldNumber = 17;
    private global::com.epl.protobuf.v1.Platform platformEnum_ = global::com.epl.protobuf.v1.Platform.UnknownPlatform;
    /// <summary>
    /// platform from which the data was collected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Platform PlatformEnum {
      get { return platformEnum_; }
      set {
        platformEnum_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 18;
    private string platform_ = "";
    /// <summary>
    /// platform from which the data was collected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_enum" field.</summary>
    public const int InstrumentEnumFieldNumber = 19;
    private global::com.epl.protobuf.v1.Instrument instrumentEnum_ = global::com.epl.protobuf.v1.Instrument.UnknownInstrument;
    /// <summary>
    /// instrument which collected the data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Instrument InstrumentEnum {
      get { return instrumentEnum_; }
      set {
        instrumentEnum_ = value;
      }
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 20;
    private string instrument_ = "";
    /// <summary>
    /// instrument which collected the data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instrument {
      get { return instrument_; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "constellation_enum" field.</summary>
    public const int ConstellationEnumFieldNumber = 21;
    private global::com.epl.protobuf.v1.Constellation constellationEnum_ = global::com.epl.protobuf.v1.Constellation.UnknownConstellation;
    /// <summary>
    /// constellation of data collectors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Constellation ConstellationEnum {
      get { return constellationEnum_; }
      set {
        constellationEnum_ = value;
      }
    }

    /// <summary>Field number for the "constellation" field.</summary>
    public const int ConstellationFieldNumber = 22;
    private string constellation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Constellation {
      get { return constellation_; }
      set {
        constellation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mission_enum" field.</summary>
    public const int MissionEnumFieldNumber = 23;
    private global::com.epl.protobuf.v1.Mission missionEnum_ = global::com.epl.protobuf.v1.Mission.UnknownMission;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Mission MissionEnum {
      get { return missionEnum_; }
      set {
        missionEnum_ = value;
      }
    }

    /// <summary>Field number for the "mission" field.</summary>
    public const int MissionFieldNumber = 24;
    private string mission_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mission {
      get { return mission_; }
      set {
        mission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsd" field.</summary>
    public const int GsdFieldNumber = 25;
    private static readonly pb::FieldCodec<float?> _single_gsd_codec = pb::FieldCodec.ForStructWrapper<float>(202);
    private float? gsd_;
    /// <summary>
    /// ground sampling distance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Gsd {
      get { return gsd_; }
      set {
        gsd_ = value;
      }
    }


    /// <summary>Field number for the "stac_version" field.</summary>
    public const int StacVersionFieldNumber = 26;
    private string stacVersion_ = "";
    /// <summary>
    /// version of JSON STAC that this protobuf attempts to match
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StacVersion {
      get { return stacVersion_; }
      set {
        stacVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stac_pb_version" field.</summary>
    public const int StacPbVersionFieldNumber = 27;
    private string stacPbVersion_ = "";
    /// <summary>
    /// version of protobuf STAC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StacPbVersion {
      get { return stacPbVersion_; }
      set {
        stacPbVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stac_extensions" field.</summary>
    public const int StacExtensionsFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _repeated_stacExtensions_codec
        = pb::FieldCodec.ForString(226);
    private readonly pbc::RepeatedField<string> stacExtensions_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// STAC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StacExtensions {
      get { return stacExtensions_; }
    }

    /// <summary>Field number for the "eo" field.</summary>
    public const int EoFieldNumber = 29;
    private global::com.epl.protobuf.v1.Eo eo_;
    /// <summary>
    /// electro-optical data message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Eo Eo {
      get { return eo_; }
      set {
        eo_ = value;
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 34;
    private global::com.epl.protobuf.v1.View view_;
    /// <summary>
    /// view of the asset, includes all relevant angular information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.View View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    /// <summary>Field number for the "landsat" field.</summary>
    public const int LandsatFieldNumber = 31;
    private global::com.epl.protobuf.v1.Landsat landsat_;
    /// <summary>
    /// Landsat Message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Landsat Landsat {
      get { return landsat_; }
      set {
        landsat_ = value;
      }
    }

    /// <summary>Field number for the "mosaic" field.</summary>
    public const int MosaicFieldNumber = 32;
    private global::com.epl.protobuf.v1.Mosaic mosaic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Mosaic Mosaic {
      get { return mosaic_; }
      set {
        mosaic_ = value;
      }
    }

    private object temporalDeprecated_;
    /// <summary>Enum of possible cases for the "temporal_deprecated" oneof.</summary>
    public enum TemporalDeprecatedOneofCase {
      None = 0,
      Datetime = 8,
      StartDatetime = 10,
    }
    private TemporalDeprecatedOneofCase temporalDeprecatedCase_ = TemporalDeprecatedOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporalDeprecatedOneofCase TemporalDeprecatedCase {
      get { return temporalDeprecatedCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemporalDeprecated() {
      temporalDeprecatedCase_ = TemporalDeprecatedOneofCase.None;
      temporalDeprecated_ = null;
    }

    private object temporal_;
    /// <summary>Enum of possible cases for the "temporal" oneof.</summary>
    public enum TemporalOneofCase {
      None = 0,
      Observed = 9,
      StartObservation = 11,
    }
    private TemporalOneofCase temporalCase_ = TemporalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporalOneofCase TemporalCase {
      get { return temporalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemporal() {
      temporalCase_ = TemporalOneofCase.None;
      temporal_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StacItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StacItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Collection != other.Collection) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if (!Assets.Equals(other.Assets)) return false;
      if (!object.Equals(Geometry, other.Geometry)) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (!object.Equals(StartDatetime, other.StartDatetime)) return false;
      if (!object.Equals(Observed, other.Observed)) return false;
      if (!object.Equals(StartObservation, other.StartObservation)) return false;
      if (!object.Equals(EndDatetime, other.EndDatetime)) return false;
      if (!object.Equals(EndObservation, other.EndObservation)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (!object.Equals(Proj, other.Proj)) return false;
      if (PlatformEnum != other.PlatformEnum) return false;
      if (Platform != other.Platform) return false;
      if (InstrumentEnum != other.InstrumentEnum) return false;
      if (Instrument != other.Instrument) return false;
      if (ConstellationEnum != other.ConstellationEnum) return false;
      if (Constellation != other.Constellation) return false;
      if (MissionEnum != other.MissionEnum) return false;
      if (Mission != other.Mission) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Gsd, other.Gsd)) return false;
      if (StacVersion != other.StacVersion) return false;
      if (StacPbVersion != other.StacPbVersion) return false;
      if(!stacExtensions_.Equals(other.stacExtensions_)) return false;
      if (!object.Equals(Eo, other.Eo)) return false;
      if (!object.Equals(View, other.View)) return false;
      if (!object.Equals(Landsat, other.Landsat)) return false;
      if (!object.Equals(Mosaic, other.Mosaic)) return false;
      if (TemporalDeprecatedCase != other.TemporalDeprecatedCase) return false;
      if (TemporalCase != other.TemporalCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      hash ^= Assets.GetHashCode();
      if (geometry_ != null) hash ^= Geometry.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) hash ^= Datetime.GetHashCode();
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) hash ^= StartDatetime.GetHashCode();
      if (temporalCase_ == TemporalOneofCase.Observed) hash ^= Observed.GetHashCode();
      if (temporalCase_ == TemporalOneofCase.StartObservation) hash ^= StartObservation.GetHashCode();
      if (endDatetime_ != null) hash ^= EndDatetime.GetHashCode();
      if (endObservation_ != null) hash ^= EndObservation.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (proj_ != null) hash ^= Proj.GetHashCode();
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) hash ^= PlatformEnum.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) hash ^= InstrumentEnum.GetHashCode();
      if (Instrument.Length != 0) hash ^= Instrument.GetHashCode();
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) hash ^= ConstellationEnum.GetHashCode();
      if (Constellation.Length != 0) hash ^= Constellation.GetHashCode();
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) hash ^= MissionEnum.GetHashCode();
      if (Mission.Length != 0) hash ^= Mission.GetHashCode();
      if (gsd_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Gsd);
      if (StacVersion.Length != 0) hash ^= StacVersion.GetHashCode();
      if (StacPbVersion.Length != 0) hash ^= StacPbVersion.GetHashCode();
      hash ^= stacExtensions_.GetHashCode();
      if (eo_ != null) hash ^= Eo.GetHashCode();
      if (view_ != null) hash ^= View.GetHashCode();
      if (landsat_ != null) hash ^= Landsat.GetHashCode();
      if (mosaic_ != null) hash ^= Mosaic.GetHashCode();
      hash ^= (int) temporalDeprecatedCase_;
      hash ^= (int) temporalCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (properties_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Properties);
      }
      assets_.WriteTo(output, _map_assets_codec);
      if (geometry_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Geometry);
      }
      if (bbox_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bbox);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) {
        output.WriteRawTag(66);
        output.WriteMessage(Datetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        output.WriteRawTag(74);
        output.WriteMessage(Observed);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) {
        output.WriteRawTag(82);
        output.WriteMessage(StartDatetime);
      }
      if (temporalCase_ == TemporalOneofCase.StartObservation) {
        output.WriteRawTag(90);
        output.WriteMessage(StartObservation);
      }
      if (endDatetime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EndDatetime);
      }
      if (endObservation_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EndObservation);
      }
      if (created_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Updated);
      }
      if (proj_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) PlatformEnum);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) InstrumentEnum);
      }
      if (Instrument.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Instrument);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ConstellationEnum);
      }
      if (Constellation.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Constellation);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) MissionEnum);
      }
      if (Mission.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Mission);
      }
      if (gsd_ != null) {
        _single_gsd_codec.WriteTagAndValue(output, Gsd);
      }
      if (StacVersion.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(StacVersion);
      }
      if (StacPbVersion.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(StacPbVersion);
      }
      stacExtensions_.WriteTo(output, _repeated_stacExtensions_codec);
      if (eo_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Eo);
      }
      if (landsat_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Landsat);
      }
      if (mosaic_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Mosaic);
      }
      if (view_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(View);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (properties_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Properties);
      }
      assets_.WriteTo(ref output, _map_assets_codec);
      if (geometry_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Geometry);
      }
      if (bbox_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bbox);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) {
        output.WriteRawTag(66);
        output.WriteMessage(Datetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        output.WriteRawTag(74);
        output.WriteMessage(Observed);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) {
        output.WriteRawTag(82);
        output.WriteMessage(StartDatetime);
      }
      if (temporalCase_ == TemporalOneofCase.StartObservation) {
        output.WriteRawTag(90);
        output.WriteMessage(StartObservation);
      }
      if (endDatetime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EndDatetime);
      }
      if (endObservation_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EndObservation);
      }
      if (created_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Updated);
      }
      if (proj_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) PlatformEnum);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) InstrumentEnum);
      }
      if (Instrument.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Instrument);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ConstellationEnum);
      }
      if (Constellation.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Constellation);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) MissionEnum);
      }
      if (Mission.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Mission);
      }
      if (gsd_ != null) {
        _single_gsd_codec.WriteTagAndValue(ref output, Gsd);
      }
      if (StacVersion.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(StacVersion);
      }
      if (StacPbVersion.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(StacPbVersion);
      }
      stacExtensions_.WriteTo(ref output, _repeated_stacExtensions_codec);
      if (eo_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Eo);
      }
      if (landsat_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Landsat);
      }
      if (mosaic_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Mosaic);
      }
      if (view_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(View);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      size += assets_.CalculateSize(_map_assets_codec);
      if (geometry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geometry);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDatetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observed);
      }
      if (temporalCase_ == TemporalOneofCase.StartObservation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartObservation);
      }
      if (endDatetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDatetime);
      }
      if (endObservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndObservation);
      }
      if (created_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (proj_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PlatformEnum);
      }
      if (Platform.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentEnum);
      }
      if (Instrument.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ConstellationEnum);
      }
      if (Constellation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Constellation);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MissionEnum);
      }
      if (Mission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mission);
      }
      if (gsd_ != null) {
        size += _single_gsd_codec.CalculateSizeWithTag(Gsd);
      }
      if (StacVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StacVersion);
      }
      if (StacPbVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StacPbVersion);
      }
      size += stacExtensions_.CalculateSize(_repeated_stacExtensions_codec);
      if (eo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Eo);
      }
      if (view_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(View);
      }
      if (landsat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Landsat);
      }
      if (mosaic_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mosaic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StacItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Properties.MergeFrom(other.Properties);
      }
      assets_.Add(other.assets_);
      if (other.geometry_ != null) {
        if (geometry_ == null) {
          Geometry = new global::com.epl.protobuf.v1.GeometryData();
        }
        Geometry.MergeFrom(other.Geometry);
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.endDatetime_ != null) {
        if (endDatetime_ == null) {
          EndDatetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndDatetime.MergeFrom(other.EndDatetime);
      }
      if (other.endObservation_ != null) {
        if (endObservation_ == null) {
          EndObservation = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndObservation.MergeFrom(other.EndObservation);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      if (other.proj_ != null) {
        if (proj_ == null) {
          Proj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        Proj.MergeFrom(other.Proj);
      }
      if (other.PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        PlatformEnum = other.PlatformEnum;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        InstrumentEnum = other.InstrumentEnum;
      }
      if (other.Instrument.Length != 0) {
        Instrument = other.Instrument;
      }
      if (other.ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        ConstellationEnum = other.ConstellationEnum;
      }
      if (other.Constellation.Length != 0) {
        Constellation = other.Constellation;
      }
      if (other.MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        MissionEnum = other.MissionEnum;
      }
      if (other.Mission.Length != 0) {
        Mission = other.Mission;
      }
      if (other.gsd_ != null) {
        if (gsd_ == null || other.Gsd != 0F) {
          Gsd = other.Gsd;
        }
      }
      if (other.StacVersion.Length != 0) {
        StacVersion = other.StacVersion;
      }
      if (other.StacPbVersion.Length != 0) {
        StacPbVersion = other.StacPbVersion;
      }
      stacExtensions_.Add(other.stacExtensions_);
      if (other.eo_ != null) {
        if (eo_ == null) {
          Eo = new global::com.epl.protobuf.v1.Eo();
        }
        Eo.MergeFrom(other.Eo);
      }
      if (other.view_ != null) {
        if (view_ == null) {
          View = new global::com.epl.protobuf.v1.View();
        }
        View.MergeFrom(other.View);
      }
      if (other.landsat_ != null) {
        if (landsat_ == null) {
          Landsat = new global::com.epl.protobuf.v1.Landsat();
        }
        Landsat.MergeFrom(other.Landsat);
      }
      if (other.mosaic_ != null) {
        if (mosaic_ == null) {
          Mosaic = new global::com.epl.protobuf.v1.Mosaic();
        }
        Mosaic.MergeFrom(other.Mosaic);
      }
      switch (other.TemporalDeprecatedCase) {
        case TemporalDeprecatedOneofCase.Datetime:
          if (Datetime == null) {
            Datetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Datetime.MergeFrom(other.Datetime);
          break;
        case TemporalDeprecatedOneofCase.StartDatetime:
          if (StartDatetime == null) {
            StartDatetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          StartDatetime.MergeFrom(other.StartDatetime);
          break;
      }

      switch (other.TemporalCase) {
        case TemporalOneofCase.Observed:
          if (Observed == null) {
            Observed = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Observed.MergeFrom(other.Observed);
          break;
        case TemporalOneofCase.StartObservation:
          if (StartObservation == null) {
            StartObservation = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          StartObservation.MergeFrom(other.StartObservation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 34: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 42: {
            assets_.AddEntriesFrom(input, _map_assets_codec);
            break;
          }
          case 50: {
            if (geometry_ == null) {
              Geometry = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Geometry);
            break;
          }
          case 58: {
            if (bbox_ == null) {
              Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Bbox);
            break;
          }
          case 66: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) {
              subBuilder.MergeFrom(Datetime);
            }
            input.ReadMessage(subBuilder);
            Datetime = subBuilder;
            break;
          }
          case 74: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalCase_ == TemporalOneofCase.Observed) {
              subBuilder.MergeFrom(Observed);
            }
            input.ReadMessage(subBuilder);
            Observed = subBuilder;
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) {
              subBuilder.MergeFrom(StartDatetime);
            }
            input.ReadMessage(subBuilder);
            StartDatetime = subBuilder;
            break;
          }
          case 90: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalCase_ == TemporalOneofCase.StartObservation) {
              subBuilder.MergeFrom(StartObservation);
            }
            input.ReadMessage(subBuilder);
            StartObservation = subBuilder;
            break;
          }
          case 98: {
            if (endDatetime_ == null) {
              EndDatetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDatetime);
            break;
          }
          case 106: {
            if (endObservation_ == null) {
              EndObservation = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndObservation);
            break;
          }
          case 114: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 122: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 130: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 136: {
            PlatformEnum = (global::com.epl.protobuf.v1.Platform) input.ReadEnum();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 152: {
            InstrumentEnum = (global::com.epl.protobuf.v1.Instrument) input.ReadEnum();
            break;
          }
          case 162: {
            Instrument = input.ReadString();
            break;
          }
          case 168: {
            ConstellationEnum = (global::com.epl.protobuf.v1.Constellation) input.ReadEnum();
            break;
          }
          case 178: {
            Constellation = input.ReadString();
            break;
          }
          case 184: {
            MissionEnum = (global::com.epl.protobuf.v1.Mission) input.ReadEnum();
            break;
          }
          case 194: {
            Mission = input.ReadString();
            break;
          }
          case 202: {
            float? value = _single_gsd_codec.Read(input);
            if (gsd_ == null || value != 0F) {
              Gsd = value;
            }
            break;
          }
          case 210: {
            StacVersion = input.ReadString();
            break;
          }
          case 218: {
            StacPbVersion = input.ReadString();
            break;
          }
          case 226: {
            stacExtensions_.AddEntriesFrom(input, _repeated_stacExtensions_codec);
            break;
          }
          case 234: {
            if (eo_ == null) {
              Eo = new global::com.epl.protobuf.v1.Eo();
            }
            input.ReadMessage(Eo);
            break;
          }
          case 250: {
            if (landsat_ == null) {
              Landsat = new global::com.epl.protobuf.v1.Landsat();
            }
            input.ReadMessage(Landsat);
            break;
          }
          case 258: {
            if (mosaic_ == null) {
              Mosaic = new global::com.epl.protobuf.v1.Mosaic();
            }
            input.ReadMessage(Mosaic);
            break;
          }
          case 274: {
            if (view_ == null) {
              View = new global::com.epl.protobuf.v1.View();
            }
            input.ReadMessage(View);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 34: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 42: {
            assets_.AddEntriesFrom(ref input, _map_assets_codec);
            break;
          }
          case 50: {
            if (geometry_ == null) {
              Geometry = new global::com.epl.protobuf.v1.GeometryData();
            }
            input.ReadMessage(Geometry);
            break;
          }
          case 58: {
            if (bbox_ == null) {
              Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
            }
            input.ReadMessage(Bbox);
            break;
          }
          case 66: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.Datetime) {
              subBuilder.MergeFrom(Datetime);
            }
            input.ReadMessage(subBuilder);
            Datetime = subBuilder;
            break;
          }
          case 74: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalCase_ == TemporalOneofCase.Observed) {
              subBuilder.MergeFrom(Observed);
            }
            input.ReadMessage(subBuilder);
            Observed = subBuilder;
            break;
          }
          case 82: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalDeprecatedCase_ == TemporalDeprecatedOneofCase.StartDatetime) {
              subBuilder.MergeFrom(StartDatetime);
            }
            input.ReadMessage(subBuilder);
            StartDatetime = subBuilder;
            break;
          }
          case 90: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (temporalCase_ == TemporalOneofCase.StartObservation) {
              subBuilder.MergeFrom(StartObservation);
            }
            input.ReadMessage(subBuilder);
            StartObservation = subBuilder;
            break;
          }
          case 98: {
            if (endDatetime_ == null) {
              EndDatetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDatetime);
            break;
          }
          case 106: {
            if (endObservation_ == null) {
              EndObservation = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndObservation);
            break;
          }
          case 114: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 122: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 130: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 136: {
            PlatformEnum = (global::com.epl.protobuf.v1.Platform) input.ReadEnum();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 152: {
            InstrumentEnum = (global::com.epl.protobuf.v1.Instrument) input.ReadEnum();
            break;
          }
          case 162: {
            Instrument = input.ReadString();
            break;
          }
          case 168: {
            ConstellationEnum = (global::com.epl.protobuf.v1.Constellation) input.ReadEnum();
            break;
          }
          case 178: {
            Constellation = input.ReadString();
            break;
          }
          case 184: {
            MissionEnum = (global::com.epl.protobuf.v1.Mission) input.ReadEnum();
            break;
          }
          case 194: {
            Mission = input.ReadString();
            break;
          }
          case 202: {
            float? value = _single_gsd_codec.Read(ref input);
            if (gsd_ == null || value != 0F) {
              Gsd = value;
            }
            break;
          }
          case 210: {
            StacVersion = input.ReadString();
            break;
          }
          case 218: {
            StacPbVersion = input.ReadString();
            break;
          }
          case 226: {
            stacExtensions_.AddEntriesFrom(ref input, _repeated_stacExtensions_codec);
            break;
          }
          case 234: {
            if (eo_ == null) {
              Eo = new global::com.epl.protobuf.v1.Eo();
            }
            input.ReadMessage(Eo);
            break;
          }
          case 250: {
            if (landsat_ == null) {
              Landsat = new global::com.epl.protobuf.v1.Landsat();
            }
            input.ReadMessage(Landsat);
            break;
          }
          case 258: {
            if (mosaic_ == null) {
              Mosaic = new global::com.epl.protobuf.v1.Mosaic();
            }
            input.ReadMessage(Mosaic);
            break;
          }
          case 274: {
            if (view_ == null) {
              View = new global::com.epl.protobuf.v1.View();
            }
            input.ReadMessage(View);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// message for making a request for STAC items.
  /// </summary>
  public sealed partial class StacRequest : pb::IMessage<StacRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StacRequest> _parser = new pb::MessageParser<StacRequest>(() => new StacRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StacRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacRequest(StacRequest other) : this() {
      limit_ = other.limit_;
      offset_ = other.offset_;
      collection_ = other.collection_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      proj_ = other.proj_ != null ? other.proj_.Clone() : null;
      platformEnum_ = other.platformEnum_;
      instrumentEnum_ = other.instrumentEnum_;
      constellationEnum_ = other.constellationEnum_;
      missionEnum_ = other.missionEnum_;
      gsd_ = other.gsd_ != null ? other.gsd_.Clone() : null;
      eo_ = other.eo_ != null ? other.eo_.Clone() : null;
      view_ = other.view_ != null ? other.view_.Clone() : null;
      landsat_ = other.landsat_ != null ? other.landsat_.Clone() : null;
      mosaic_ = other.mosaic_ != null ? other.mosaic_.Clone() : null;
      switch (other.IdentityCase) {
        case IdentityOneofCase.Id:
          Id = other.Id;
          break;
        case IdentityOneofCase.IdComplex:
          IdComplex = other.IdComplex.Clone();
          break;
      }

      switch (other.SpatialCase) {
        case SpatialOneofCase.Intersects:
          Intersects = other.Intersects.Clone();
          break;
        case SpatialOneofCase.Bbox:
          Bbox = other.Bbox.Clone();
          break;
        case SpatialOneofCase.GeometryRequest:
          GeometryRequest = other.GeometryRequest.Clone();
          break;
      }

      switch (other.TemporalCase) {
        case TemporalOneofCase.Datetime:
          Datetime = other.Datetime.Clone();
          break;
        case TemporalOneofCase.Observed:
          Observed = other.Observed.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacRequest Clone() {
      return new StacRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private uint limit_;
    /// <summary>
    /// limit the number of results returned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private ulong offset_;
    /// <summary>
    /// the offset from which the query should start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    /// <summary>
    /// if id matches, return the one matching STAC item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return identityCase_ == IdentityOneofCase.Id ? (string) identity_ : ""; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        identityCase_ = IdentityOneofCase.Id;
      }
    }

    /// <summary>Field number for the "id_complex" field.</summary>
    public const int IdComplexFieldNumber = 4;
    /// <summary>
    /// more complex id search. allows for searching by pattern or by IN or NOT_IN sets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.StringFilter IdComplex {
      get { return identityCase_ == IdentityOneofCase.IdComplex ? (global::com.epl.protobuf.v1.StringFilter) identity_ : null; }
      set {
        identity_ = value;
        identityCase_ = value == null ? IdentityOneofCase.None : IdentityOneofCase.IdComplex;
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 5;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Any properties_;
    /// <summary>
    /// search by properties specified by user using a request object known by user and the Any marshalling pattern
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "intersects" field.</summary>
    public const int IntersectsFieldNumber = 7;
    /// <summary>
    /// search by the spatial extent as defined by geometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryData Intersects {
      get { return spatialCase_ == SpatialOneofCase.Intersects ? (global::com.epl.protobuf.v1.GeometryData) spatial_ : null; }
      set {
        spatial_ = value;
        spatialCase_ = value == null ? SpatialOneofCase.None : SpatialOneofCase.Intersects;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 8;
    /// <summary>
    /// search by the spatial extent as defined by the envelope bounds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EnvelopeData Bbox {
      get { return spatialCase_ == SpatialOneofCase.Bbox ? (global::com.epl.protobuf.v1.EnvelopeData) spatial_ : null; }
      set {
        spatial_ = value;
        spatialCase_ = value == null ? SpatialOneofCase.None : SpatialOneofCase.Bbox;
      }
    }

    /// <summary>Field number for the "geometry_request" field.</summary>
    public const int GeometryRequestFieldNumber = 9;
    /// <summary>
    /// search by a geometry request. this sends a geometry operator to a geometry service, and the returned geometry
    /// is in turn used as the spatial extent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.GeometryRequest GeometryRequest {
      get { return spatialCase_ == SpatialOneofCase.GeometryRequest ? (global::com.epl.protobuf.v1.GeometryRequest) spatial_ : null; }
      set {
        spatial_ = value;
        spatialCase_ = value == null ? SpatialOneofCase.None : SpatialOneofCase.GeometryRequest;
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 10;
    /// <summary>
    /// search for the datetime that matched by bounds defined by the exact timestamp or a range of timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.TimestampFilter Datetime {
      get { return temporalCase_ == TemporalOneofCase.Datetime ? (global::com.epl.protobuf.v1.TimestampFilter) temporal_ : null; }
      set {
        temporal_ = value;
        temporalCase_ = value == null ? TemporalOneofCase.None : TemporalOneofCase.Datetime;
      }
    }

    /// <summary>Field number for the "observed" field.</summary>
    public const int ObservedFieldNumber = 11;
    /// <summary>
    /// search for the moment the data was observed by bounds defined by the exact timestamp or a range of timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.TimestampFilter Observed {
      get { return temporalCase_ == TemporalOneofCase.Observed ? (global::com.epl.protobuf.v1.TimestampFilter) temporal_ : null; }
      set {
        temporal_ = value;
        temporalCase_ = value == null ? TemporalOneofCase.None : TemporalOneofCase.Observed;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 12;
    private global::com.epl.protobuf.v1.TimestampFilter created_;
    /// <summary>
    /// search for the moment the asset data was created by bounds defined by the exact timestamp or a range of timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.TimestampFilter Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 13;
    private global::com.epl.protobuf.v1.TimestampFilter updated_;
    /// <summary>
    /// search for the moment the STAC item metadata was updated by bounds defined by the exact timestamp or a range of
    /// timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.TimestampFilter Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "proj" field.</summary>
    public const int ProjFieldNumber = 14;
    private global::com.epl.protobuf.v1.ProjectionData proj_;
    /// <summary>
    /// spatial reference. (currently only supports epsg field)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ProjectionData Proj {
      get { return proj_; }
      set {
        proj_ = value;
      }
    }

    /// <summary>Field number for the "platform_enum" field.</summary>
    public const int PlatformEnumFieldNumber = 15;
    private global::com.epl.protobuf.v1.Platform platformEnum_ = global::com.epl.protobuf.v1.Platform.UnknownPlatform;
    /// <summary>
    /// only data from the platform specified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Platform PlatformEnum {
      get { return platformEnum_; }
      set {
        platformEnum_ = value;
      }
    }

    /// <summary>Field number for the "instrument_enum" field.</summary>
    public const int InstrumentEnumFieldNumber = 17;
    private global::com.epl.protobuf.v1.Instrument instrumentEnum_ = global::com.epl.protobuf.v1.Instrument.UnknownInstrument;
    /// <summary>
    /// only data from the instrument specified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Instrument InstrumentEnum {
      get { return instrumentEnum_; }
      set {
        instrumentEnum_ = value;
      }
    }

    /// <summary>Field number for the "constellation_enum" field.</summary>
    public const int ConstellationEnumFieldNumber = 19;
    private global::com.epl.protobuf.v1.Constellation constellationEnum_ = global::com.epl.protobuf.v1.Constellation.UnknownConstellation;
    /// <summary>
    /// only data from the constellation specified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Constellation ConstellationEnum {
      get { return constellationEnum_; }
      set {
        constellationEnum_ = value;
      }
    }

    /// <summary>Field number for the "mission_enum" field.</summary>
    public const int MissionEnumFieldNumber = 21;
    private global::com.epl.protobuf.v1.Mission missionEnum_ = global::com.epl.protobuf.v1.Mission.UnknownMission;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Mission MissionEnum {
      get { return missionEnum_; }
      set {
        missionEnum_ = value;
      }
    }

    /// <summary>Field number for the "gsd" field.</summary>
    public const int GsdFieldNumber = 23;
    private global::com.epl.protobuf.v1.FloatFilter gsd_;
    /// <summary>
    /// data with a gsd equal to or in the range specified in gsd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter Gsd {
      get { return gsd_; }
      set {
        gsd_ = value;
      }
    }

    /// <summary>Field number for the "eo" field.</summary>
    public const int EoFieldNumber = 24;
    private global::com.epl.protobuf.v1.EoRequest eo_;
    /// <summary>
    /// use certain electro-optical search parameters in your query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.EoRequest Eo {
      get { return eo_; }
      set {
        eo_ = value;
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 25;
    private global::com.epl.protobuf.v1.ViewRequest view_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.ViewRequest View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    /// <summary>Field number for the "landsat" field.</summary>
    public const int LandsatFieldNumber = 26;
    private global::com.epl.protobuf.v1.LandsatRequest landsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.LandsatRequest Landsat {
      get { return landsat_; }
      set {
        landsat_ = value;
      }
    }

    /// <summary>Field number for the "mosaic" field.</summary>
    public const int MosaicFieldNumber = 27;
    private global::com.epl.protobuf.v1.MosaicRequest mosaic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.MosaicRequest Mosaic {
      get { return mosaic_; }
      set {
        mosaic_ = value;
      }
    }

    private object identity_;
    /// <summary>Enum of possible cases for the "identity" oneof.</summary>
    public enum IdentityOneofCase {
      None = 0,
      Id = 3,
      IdComplex = 4,
    }
    private IdentityOneofCase identityCase_ = IdentityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentityOneofCase IdentityCase {
      get { return identityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentity() {
      identityCase_ = IdentityOneofCase.None;
      identity_ = null;
    }

    private object spatial_;
    /// <summary>Enum of possible cases for the "spatial" oneof.</summary>
    public enum SpatialOneofCase {
      None = 0,
      Intersects = 7,
      Bbox = 8,
      GeometryRequest = 9,
    }
    private SpatialOneofCase spatialCase_ = SpatialOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatialOneofCase SpatialCase {
      get { return spatialCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpatial() {
      spatialCase_ = SpatialOneofCase.None;
      spatial_ = null;
    }

    private object temporal_;
    /// <summary>Enum of possible cases for the "temporal" oneof.</summary>
    public enum TemporalOneofCase {
      None = 0,
      Datetime = 10,
      Observed = 11,
    }
    private TemporalOneofCase temporalCase_ = TemporalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemporalOneofCase TemporalCase {
      get { return temporalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemporal() {
      temporalCase_ = TemporalOneofCase.None;
      temporal_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StacRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StacRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(IdComplex, other.IdComplex)) return false;
      if (Collection != other.Collection) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if (!object.Equals(Intersects, other.Intersects)) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(GeometryRequest, other.GeometryRequest)) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (!object.Equals(Observed, other.Observed)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (!object.Equals(Proj, other.Proj)) return false;
      if (PlatformEnum != other.PlatformEnum) return false;
      if (InstrumentEnum != other.InstrumentEnum) return false;
      if (ConstellationEnum != other.ConstellationEnum) return false;
      if (MissionEnum != other.MissionEnum) return false;
      if (!object.Equals(Gsd, other.Gsd)) return false;
      if (!object.Equals(Eo, other.Eo)) return false;
      if (!object.Equals(View, other.View)) return false;
      if (!object.Equals(Landsat, other.Landsat)) return false;
      if (!object.Equals(Mosaic, other.Mosaic)) return false;
      if (IdentityCase != other.IdentityCase) return false;
      if (SpatialCase != other.SpatialCase) return false;
      if (TemporalCase != other.TemporalCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (identityCase_ == IdentityOneofCase.Id) hash ^= Id.GetHashCode();
      if (identityCase_ == IdentityOneofCase.IdComplex) hash ^= IdComplex.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (spatialCase_ == SpatialOneofCase.Intersects) hash ^= Intersects.GetHashCode();
      if (spatialCase_ == SpatialOneofCase.Bbox) hash ^= Bbox.GetHashCode();
      if (spatialCase_ == SpatialOneofCase.GeometryRequest) hash ^= GeometryRequest.GetHashCode();
      if (temporalCase_ == TemporalOneofCase.Datetime) hash ^= Datetime.GetHashCode();
      if (temporalCase_ == TemporalOneofCase.Observed) hash ^= Observed.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (proj_ != null) hash ^= Proj.GetHashCode();
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) hash ^= PlatformEnum.GetHashCode();
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) hash ^= InstrumentEnum.GetHashCode();
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) hash ^= ConstellationEnum.GetHashCode();
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) hash ^= MissionEnum.GetHashCode();
      if (gsd_ != null) hash ^= Gsd.GetHashCode();
      if (eo_ != null) hash ^= Eo.GetHashCode();
      if (view_ != null) hash ^= View.GetHashCode();
      if (landsat_ != null) hash ^= Landsat.GetHashCode();
      if (mosaic_ != null) hash ^= Mosaic.GetHashCode();
      hash ^= (int) identityCase_;
      hash ^= (int) spatialCase_;
      hash ^= (int) temporalCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Limit);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (identityCase_ == IdentityOneofCase.Id) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (identityCase_ == IdentityOneofCase.IdComplex) {
        output.WriteRawTag(34);
        output.WriteMessage(IdComplex);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Collection);
      }
      if (properties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Properties);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        output.WriteRawTag(58);
        output.WriteMessage(Intersects);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        output.WriteRawTag(66);
        output.WriteMessage(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.GeometryRequest) {
        output.WriteRawTag(74);
        output.WriteMessage(GeometryRequest);
      }
      if (temporalCase_ == TemporalOneofCase.Datetime) {
        output.WriteRawTag(82);
        output.WriteMessage(Datetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        output.WriteRawTag(90);
        output.WriteMessage(Observed);
      }
      if (created_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Updated);
      }
      if (proj_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        output.WriteRawTag(120);
        output.WriteEnum((int) PlatformEnum);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) InstrumentEnum);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) ConstellationEnum);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) MissionEnum);
      }
      if (gsd_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Gsd);
      }
      if (eo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Eo);
      }
      if (view_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(View);
      }
      if (landsat_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Landsat);
      }
      if (mosaic_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Mosaic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Limit);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (identityCase_ == IdentityOneofCase.Id) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (identityCase_ == IdentityOneofCase.IdComplex) {
        output.WriteRawTag(34);
        output.WriteMessage(IdComplex);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Collection);
      }
      if (properties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Properties);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        output.WriteRawTag(58);
        output.WriteMessage(Intersects);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        output.WriteRawTag(66);
        output.WriteMessage(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.GeometryRequest) {
        output.WriteRawTag(74);
        output.WriteMessage(GeometryRequest);
      }
      if (temporalCase_ == TemporalOneofCase.Datetime) {
        output.WriteRawTag(82);
        output.WriteMessage(Datetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        output.WriteRawTag(90);
        output.WriteMessage(Observed);
      }
      if (created_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Updated);
      }
      if (proj_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        output.WriteRawTag(120);
        output.WriteEnum((int) PlatformEnum);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) InstrumentEnum);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) ConstellationEnum);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) MissionEnum);
      }
      if (gsd_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Gsd);
      }
      if (eo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Eo);
      }
      if (view_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(View);
      }
      if (landsat_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Landsat);
      }
      if (mosaic_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Mosaic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (identityCase_ == IdentityOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (identityCase_ == IdentityOneofCase.IdComplex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdComplex);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (spatialCase_ == SpatialOneofCase.Intersects) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intersects);
      }
      if (spatialCase_ == SpatialOneofCase.Bbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (spatialCase_ == SpatialOneofCase.GeometryRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeometryRequest);
      }
      if (temporalCase_ == TemporalOneofCase.Datetime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (temporalCase_ == TemporalOneofCase.Observed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observed);
      }
      if (created_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (proj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proj);
      }
      if (PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlatformEnum);
      }
      if (InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentEnum);
      }
      if (ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ConstellationEnum);
      }
      if (MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MissionEnum);
      }
      if (gsd_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gsd);
      }
      if (eo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Eo);
      }
      if (view_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(View);
      }
      if (landsat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Landsat);
      }
      if (mosaic_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mosaic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StacRequest other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Properties.MergeFrom(other.Properties);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::com.epl.protobuf.v1.TimestampFilter();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::com.epl.protobuf.v1.TimestampFilter();
        }
        Updated.MergeFrom(other.Updated);
      }
      if (other.proj_ != null) {
        if (proj_ == null) {
          Proj = new global::com.epl.protobuf.v1.ProjectionData();
        }
        Proj.MergeFrom(other.Proj);
      }
      if (other.PlatformEnum != global::com.epl.protobuf.v1.Platform.UnknownPlatform) {
        PlatformEnum = other.PlatformEnum;
      }
      if (other.InstrumentEnum != global::com.epl.protobuf.v1.Instrument.UnknownInstrument) {
        InstrumentEnum = other.InstrumentEnum;
      }
      if (other.ConstellationEnum != global::com.epl.protobuf.v1.Constellation.UnknownConstellation) {
        ConstellationEnum = other.ConstellationEnum;
      }
      if (other.MissionEnum != global::com.epl.protobuf.v1.Mission.UnknownMission) {
        MissionEnum = other.MissionEnum;
      }
      if (other.gsd_ != null) {
        if (gsd_ == null) {
          Gsd = new global::com.epl.protobuf.v1.FloatFilter();
        }
        Gsd.MergeFrom(other.Gsd);
      }
      if (other.eo_ != null) {
        if (eo_ == null) {
          Eo = new global::com.epl.protobuf.v1.EoRequest();
        }
        Eo.MergeFrom(other.Eo);
      }
      if (other.view_ != null) {
        if (view_ == null) {
          View = new global::com.epl.protobuf.v1.ViewRequest();
        }
        View.MergeFrom(other.View);
      }
      if (other.landsat_ != null) {
        if (landsat_ == null) {
          Landsat = new global::com.epl.protobuf.v1.LandsatRequest();
        }
        Landsat.MergeFrom(other.Landsat);
      }
      if (other.mosaic_ != null) {
        if (mosaic_ == null) {
          Mosaic = new global::com.epl.protobuf.v1.MosaicRequest();
        }
        Mosaic.MergeFrom(other.Mosaic);
      }
      switch (other.IdentityCase) {
        case IdentityOneofCase.Id:
          Id = other.Id;
          break;
        case IdentityOneofCase.IdComplex:
          if (IdComplex == null) {
            IdComplex = new global::com.epl.protobuf.v1.StringFilter();
          }
          IdComplex.MergeFrom(other.IdComplex);
          break;
      }

      switch (other.SpatialCase) {
        case SpatialOneofCase.Intersects:
          if (Intersects == null) {
            Intersects = new global::com.epl.protobuf.v1.GeometryData();
          }
          Intersects.MergeFrom(other.Intersects);
          break;
        case SpatialOneofCase.Bbox:
          if (Bbox == null) {
            Bbox = new global::com.epl.protobuf.v1.EnvelopeData();
          }
          Bbox.MergeFrom(other.Bbox);
          break;
        case SpatialOneofCase.GeometryRequest:
          if (GeometryRequest == null) {
            GeometryRequest = new global::com.epl.protobuf.v1.GeometryRequest();
          }
          GeometryRequest.MergeFrom(other.GeometryRequest);
          break;
      }

      switch (other.TemporalCase) {
        case TemporalOneofCase.Datetime:
          if (Datetime == null) {
            Datetime = new global::com.epl.protobuf.v1.TimestampFilter();
          }
          Datetime.MergeFrom(other.Datetime);
          break;
        case TemporalOneofCase.Observed:
          if (Observed == null) {
            Observed = new global::com.epl.protobuf.v1.TimestampFilter();
          }
          Observed.MergeFrom(other.Observed);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Limit = input.ReadUInt32();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.StringFilter subBuilder = new global::com.epl.protobuf.v1.StringFilter();
            if (identityCase_ == IdentityOneofCase.IdComplex) {
              subBuilder.MergeFrom(IdComplex);
            }
            input.ReadMessage(subBuilder);
            IdComplex = subBuilder;
            break;
          }
          case 42: {
            Collection = input.ReadString();
            break;
          }
          case 50: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 58: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (spatialCase_ == SpatialOneofCase.Intersects) {
              subBuilder.MergeFrom(Intersects);
            }
            input.ReadMessage(subBuilder);
            Intersects = subBuilder;
            break;
          }
          case 66: {
            global::com.epl.protobuf.v1.EnvelopeData subBuilder = new global::com.epl.protobuf.v1.EnvelopeData();
            if (spatialCase_ == SpatialOneofCase.Bbox) {
              subBuilder.MergeFrom(Bbox);
            }
            input.ReadMessage(subBuilder);
            Bbox = subBuilder;
            break;
          }
          case 74: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (spatialCase_ == SpatialOneofCase.GeometryRequest) {
              subBuilder.MergeFrom(GeometryRequest);
            }
            input.ReadMessage(subBuilder);
            GeometryRequest = subBuilder;
            break;
          }
          case 82: {
            global::com.epl.protobuf.v1.TimestampFilter subBuilder = new global::com.epl.protobuf.v1.TimestampFilter();
            if (temporalCase_ == TemporalOneofCase.Datetime) {
              subBuilder.MergeFrom(Datetime);
            }
            input.ReadMessage(subBuilder);
            Datetime = subBuilder;
            break;
          }
          case 90: {
            global::com.epl.protobuf.v1.TimestampFilter subBuilder = new global::com.epl.protobuf.v1.TimestampFilter();
            if (temporalCase_ == TemporalOneofCase.Observed) {
              subBuilder.MergeFrom(Observed);
            }
            input.ReadMessage(subBuilder);
            Observed = subBuilder;
            break;
          }
          case 98: {
            if (created_ == null) {
              Created = new global::com.epl.protobuf.v1.TimestampFilter();
            }
            input.ReadMessage(Created);
            break;
          }
          case 106: {
            if (updated_ == null) {
              Updated = new global::com.epl.protobuf.v1.TimestampFilter();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 114: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 120: {
            PlatformEnum = (global::com.epl.protobuf.v1.Platform) input.ReadEnum();
            break;
          }
          case 136: {
            InstrumentEnum = (global::com.epl.protobuf.v1.Instrument) input.ReadEnum();
            break;
          }
          case 152: {
            ConstellationEnum = (global::com.epl.protobuf.v1.Constellation) input.ReadEnum();
            break;
          }
          case 168: {
            MissionEnum = (global::com.epl.protobuf.v1.Mission) input.ReadEnum();
            break;
          }
          case 186: {
            if (gsd_ == null) {
              Gsd = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(Gsd);
            break;
          }
          case 194: {
            if (eo_ == null) {
              Eo = new global::com.epl.protobuf.v1.EoRequest();
            }
            input.ReadMessage(Eo);
            break;
          }
          case 202: {
            if (view_ == null) {
              View = new global::com.epl.protobuf.v1.ViewRequest();
            }
            input.ReadMessage(View);
            break;
          }
          case 210: {
            if (landsat_ == null) {
              Landsat = new global::com.epl.protobuf.v1.LandsatRequest();
            }
            input.ReadMessage(Landsat);
            break;
          }
          case 218: {
            if (mosaic_ == null) {
              Mosaic = new global::com.epl.protobuf.v1.MosaicRequest();
            }
            input.ReadMessage(Mosaic);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Limit = input.ReadUInt32();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            global::com.epl.protobuf.v1.StringFilter subBuilder = new global::com.epl.protobuf.v1.StringFilter();
            if (identityCase_ == IdentityOneofCase.IdComplex) {
              subBuilder.MergeFrom(IdComplex);
            }
            input.ReadMessage(subBuilder);
            IdComplex = subBuilder;
            break;
          }
          case 42: {
            Collection = input.ReadString();
            break;
          }
          case 50: {
            if (properties_ == null) {
              Properties = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 58: {
            global::com.epl.protobuf.v1.GeometryData subBuilder = new global::com.epl.protobuf.v1.GeometryData();
            if (spatialCase_ == SpatialOneofCase.Intersects) {
              subBuilder.MergeFrom(Intersects);
            }
            input.ReadMessage(subBuilder);
            Intersects = subBuilder;
            break;
          }
          case 66: {
            global::com.epl.protobuf.v1.EnvelopeData subBuilder = new global::com.epl.protobuf.v1.EnvelopeData();
            if (spatialCase_ == SpatialOneofCase.Bbox) {
              subBuilder.MergeFrom(Bbox);
            }
            input.ReadMessage(subBuilder);
            Bbox = subBuilder;
            break;
          }
          case 74: {
            global::com.epl.protobuf.v1.GeometryRequest subBuilder = new global::com.epl.protobuf.v1.GeometryRequest();
            if (spatialCase_ == SpatialOneofCase.GeometryRequest) {
              subBuilder.MergeFrom(GeometryRequest);
            }
            input.ReadMessage(subBuilder);
            GeometryRequest = subBuilder;
            break;
          }
          case 82: {
            global::com.epl.protobuf.v1.TimestampFilter subBuilder = new global::com.epl.protobuf.v1.TimestampFilter();
            if (temporalCase_ == TemporalOneofCase.Datetime) {
              subBuilder.MergeFrom(Datetime);
            }
            input.ReadMessage(subBuilder);
            Datetime = subBuilder;
            break;
          }
          case 90: {
            global::com.epl.protobuf.v1.TimestampFilter subBuilder = new global::com.epl.protobuf.v1.TimestampFilter();
            if (temporalCase_ == TemporalOneofCase.Observed) {
              subBuilder.MergeFrom(Observed);
            }
            input.ReadMessage(subBuilder);
            Observed = subBuilder;
            break;
          }
          case 98: {
            if (created_ == null) {
              Created = new global::com.epl.protobuf.v1.TimestampFilter();
            }
            input.ReadMessage(Created);
            break;
          }
          case 106: {
            if (updated_ == null) {
              Updated = new global::com.epl.protobuf.v1.TimestampFilter();
            }
            input.ReadMessage(Updated);
            break;
          }
          case 114: {
            if (proj_ == null) {
              Proj = new global::com.epl.protobuf.v1.ProjectionData();
            }
            input.ReadMessage(Proj);
            break;
          }
          case 120: {
            PlatformEnum = (global::com.epl.protobuf.v1.Platform) input.ReadEnum();
            break;
          }
          case 136: {
            InstrumentEnum = (global::com.epl.protobuf.v1.Instrument) input.ReadEnum();
            break;
          }
          case 152: {
            ConstellationEnum = (global::com.epl.protobuf.v1.Constellation) input.ReadEnum();
            break;
          }
          case 168: {
            MissionEnum = (global::com.epl.protobuf.v1.Mission) input.ReadEnum();
            break;
          }
          case 186: {
            if (gsd_ == null) {
              Gsd = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(Gsd);
            break;
          }
          case 194: {
            if (eo_ == null) {
              Eo = new global::com.epl.protobuf.v1.EoRequest();
            }
            input.ReadMessage(Eo);
            break;
          }
          case 202: {
            if (view_ == null) {
              View = new global::com.epl.protobuf.v1.ViewRequest();
            }
            input.ReadMessage(View);
            break;
          }
          case 210: {
            if (landsat_ == null) {
              Landsat = new global::com.epl.protobuf.v1.LandsatRequest();
            }
            input.ReadMessage(Landsat);
            break;
          }
          case 218: {
            if (mosaic_ == null) {
              Mosaic = new global::com.epl.protobuf.v1.MosaicRequest();
            }
            input.ReadMessage(Mosaic);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class View : pb::IMessage<View>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<View> _parser = new pb::MessageParser<View>(() => new View());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<View> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View(View other) : this() {
      OffNadir = other.OffNadir;
      IncidenceAngle = other.IncidenceAngle;
      Azimuth = other.Azimuth;
      SunAzimuth = other.SunAzimuth;
      SunElevation = other.SunElevation;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View Clone() {
      return new View(this);
    }

    /// <summary>Field number for the "off_nadir" field.</summary>
    public const int OffNadirFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_offNadir_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? offNadir_;
    /// <summary>
    /// Viewing angle. The angle from the sensor between nadir (straight down) and the scene center. Measured in
    /// degrees (0-90).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OffNadir {
      get { return offNadir_; }
      set {
        offNadir_ = value;
      }
    }


    /// <summary>Field number for the "incidence_angle" field.</summary>
    public const int IncidenceAngleFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_incidenceAngle_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? incidenceAngle_;
    /// <summary>
    /// The incidence angle is the angle between the vertical (normal) to the intercepting surface and the line of sight
    /// back to the satellite at the scene center. Measured in degrees (0-90).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? IncidenceAngle {
      get { return incidenceAngle_; }
      set {
        incidenceAngle_ = value;
      }
    }


    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_azimuth_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? azimuth_;
    /// <summary>
    /// The angle measured from the sub-sensor point (point on the ground below the platform) between the scene center
    /// and true north. Measured clockwise from north in degrees (0-360).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Azimuth {
      get { return azimuth_; }
      set {
        azimuth_ = value;
      }
    }


    /// <summary>Field number for the "sun_azimuth" field.</summary>
    public const int SunAzimuthFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_sunAzimuth_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? sunAzimuth_;
    /// <summary>
    /// Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun.
    /// Measured clockwise in degrees (0-360).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SunAzimuth {
      get { return sunAzimuth_; }
      set {
        sunAzimuth_ = value;
      }
    }


    /// <summary>Field number for the "sun_elevation" field.</summary>
    public const int SunElevationFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_sunElevation_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? sunElevation_;
    /// <summary>
    /// Sun elevation angle. The angle from the tangent of the scene center point to the sun. Measured from the horizon
    /// in degrees (0-90).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SunElevation {
      get { return sunElevation_; }
      set {
        sunElevation_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as View);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(View other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OffNadir, other.OffNadir)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(IncidenceAngle, other.IncidenceAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Azimuth, other.Azimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SunAzimuth, other.SunAzimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SunElevation, other.SunElevation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offNadir_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OffNadir);
      if (incidenceAngle_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(IncidenceAngle);
      if (azimuth_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Azimuth);
      if (sunAzimuth_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SunAzimuth);
      if (sunElevation_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SunElevation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (offNadir_ != null) {
        _single_offNadir_codec.WriteTagAndValue(output, OffNadir);
      }
      if (incidenceAngle_ != null) {
        _single_incidenceAngle_codec.WriteTagAndValue(output, IncidenceAngle);
      }
      if (azimuth_ != null) {
        _single_azimuth_codec.WriteTagAndValue(output, Azimuth);
      }
      if (sunAzimuth_ != null) {
        _single_sunAzimuth_codec.WriteTagAndValue(output, SunAzimuth);
      }
      if (sunElevation_ != null) {
        _single_sunElevation_codec.WriteTagAndValue(output, SunElevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (offNadir_ != null) {
        _single_offNadir_codec.WriteTagAndValue(ref output, OffNadir);
      }
      if (incidenceAngle_ != null) {
        _single_incidenceAngle_codec.WriteTagAndValue(ref output, IncidenceAngle);
      }
      if (azimuth_ != null) {
        _single_azimuth_codec.WriteTagAndValue(ref output, Azimuth);
      }
      if (sunAzimuth_ != null) {
        _single_sunAzimuth_codec.WriteTagAndValue(ref output, SunAzimuth);
      }
      if (sunElevation_ != null) {
        _single_sunElevation_codec.WriteTagAndValue(ref output, SunElevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offNadir_ != null) {
        size += _single_offNadir_codec.CalculateSizeWithTag(OffNadir);
      }
      if (incidenceAngle_ != null) {
        size += _single_incidenceAngle_codec.CalculateSizeWithTag(IncidenceAngle);
      }
      if (azimuth_ != null) {
        size += _single_azimuth_codec.CalculateSizeWithTag(Azimuth);
      }
      if (sunAzimuth_ != null) {
        size += _single_sunAzimuth_codec.CalculateSizeWithTag(SunAzimuth);
      }
      if (sunElevation_ != null) {
        size += _single_sunElevation_codec.CalculateSizeWithTag(SunElevation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(View other) {
      if (other == null) {
        return;
      }
      if (other.offNadir_ != null) {
        if (offNadir_ == null || other.OffNadir != 0F) {
          OffNadir = other.OffNadir;
        }
      }
      if (other.incidenceAngle_ != null) {
        if (incidenceAngle_ == null || other.IncidenceAngle != 0F) {
          IncidenceAngle = other.IncidenceAngle;
        }
      }
      if (other.azimuth_ != null) {
        if (azimuth_ == null || other.Azimuth != 0F) {
          Azimuth = other.Azimuth;
        }
      }
      if (other.sunAzimuth_ != null) {
        if (sunAzimuth_ == null || other.SunAzimuth != 0F) {
          SunAzimuth = other.SunAzimuth;
        }
      }
      if (other.sunElevation_ != null) {
        if (sunElevation_ == null || other.SunElevation != 0F) {
          SunElevation = other.SunElevation;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_offNadir_codec.Read(input);
            if (offNadir_ == null || value != 0F) {
              OffNadir = value;
            }
            break;
          }
          case 18: {
            float? value = _single_incidenceAngle_codec.Read(input);
            if (incidenceAngle_ == null || value != 0F) {
              IncidenceAngle = value;
            }
            break;
          }
          case 26: {
            float? value = _single_azimuth_codec.Read(input);
            if (azimuth_ == null || value != 0F) {
              Azimuth = value;
            }
            break;
          }
          case 34: {
            float? value = _single_sunAzimuth_codec.Read(input);
            if (sunAzimuth_ == null || value != 0F) {
              SunAzimuth = value;
            }
            break;
          }
          case 42: {
            float? value = _single_sunElevation_codec.Read(input);
            if (sunElevation_ == null || value != 0F) {
              SunElevation = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_offNadir_codec.Read(ref input);
            if (offNadir_ == null || value != 0F) {
              OffNadir = value;
            }
            break;
          }
          case 18: {
            float? value = _single_incidenceAngle_codec.Read(ref input);
            if (incidenceAngle_ == null || value != 0F) {
              IncidenceAngle = value;
            }
            break;
          }
          case 26: {
            float? value = _single_azimuth_codec.Read(ref input);
            if (azimuth_ == null || value != 0F) {
              Azimuth = value;
            }
            break;
          }
          case 34: {
            float? value = _single_sunAzimuth_codec.Read(ref input);
            if (sunAzimuth_ == null || value != 0F) {
              SunAzimuth = value;
            }
            break;
          }
          case 42: {
            float? value = _single_sunElevation_codec.Read(ref input);
            if (sunElevation_ == null || value != 0F) {
              SunElevation = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ViewRequest : pb::IMessage<ViewRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ViewRequest> _parser = new pb::MessageParser<ViewRequest>(() => new ViewRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewRequest(ViewRequest other) : this() {
      offNadir_ = other.offNadir_ != null ? other.offNadir_.Clone() : null;
      incidenceAngle_ = other.incidenceAngle_ != null ? other.incidenceAngle_.Clone() : null;
      azimuth_ = other.azimuth_ != null ? other.azimuth_.Clone() : null;
      sunAzimuth_ = other.sunAzimuth_ != null ? other.sunAzimuth_.Clone() : null;
      sunElevation_ = other.sunElevation_ != null ? other.sunElevation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewRequest Clone() {
      return new ViewRequest(this);
    }

    /// <summary>Field number for the "off_nadir" field.</summary>
    public const int OffNadirFieldNumber = 1;
    private global::com.epl.protobuf.v1.FloatFilter offNadir_;
    /// <summary>
    /// data with a off_nadir equal to or in the range specified in off_nadir
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter OffNadir {
      get { return offNadir_; }
      set {
        offNadir_ = value;
      }
    }

    /// <summary>Field number for the "incidence_angle" field.</summary>
    public const int IncidenceAngleFieldNumber = 2;
    private global::com.epl.protobuf.v1.FloatFilter incidenceAngle_;
    /// <summary>
    /// data with a incidence equal to or in the range specified in incidence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter IncidenceAngle {
      get { return incidenceAngle_; }
      set {
        incidenceAngle_ = value;
      }
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 3;
    private global::com.epl.protobuf.v1.FloatFilter azimuth_;
    /// <summary>
    /// data with a azimuth equal to or in the range specified in azimuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter Azimuth {
      get { return azimuth_; }
      set {
        azimuth_ = value;
      }
    }

    /// <summary>Field number for the "sun_azimuth" field.</summary>
    public const int SunAzimuthFieldNumber = 4;
    private global::com.epl.protobuf.v1.FloatFilter sunAzimuth_;
    /// <summary>
    /// data with a sun_azimuth equal to or in the range specified in sun_azimuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter SunAzimuth {
      get { return sunAzimuth_; }
      set {
        sunAzimuth_ = value;
      }
    }

    /// <summary>Field number for the "sun_elevation" field.</summary>
    public const int SunElevationFieldNumber = 5;
    private global::com.epl.protobuf.v1.FloatFilter sunElevation_;
    /// <summary>
    /// data with a sun_elevation equal to or in the range specified in sun_elevation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter SunElevation {
      get { return sunElevation_; }
      set {
        sunElevation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OffNadir, other.OffNadir)) return false;
      if (!object.Equals(IncidenceAngle, other.IncidenceAngle)) return false;
      if (!object.Equals(Azimuth, other.Azimuth)) return false;
      if (!object.Equals(SunAzimuth, other.SunAzimuth)) return false;
      if (!object.Equals(SunElevation, other.SunElevation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offNadir_ != null) hash ^= OffNadir.GetHashCode();
      if (incidenceAngle_ != null) hash ^= IncidenceAngle.GetHashCode();
      if (azimuth_ != null) hash ^= Azimuth.GetHashCode();
      if (sunAzimuth_ != null) hash ^= SunAzimuth.GetHashCode();
      if (sunElevation_ != null) hash ^= SunElevation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (offNadir_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OffNadir);
      }
      if (incidenceAngle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IncidenceAngle);
      }
      if (azimuth_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Azimuth);
      }
      if (sunAzimuth_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SunAzimuth);
      }
      if (sunElevation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SunElevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (offNadir_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OffNadir);
      }
      if (incidenceAngle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IncidenceAngle);
      }
      if (azimuth_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Azimuth);
      }
      if (sunAzimuth_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SunAzimuth);
      }
      if (sunElevation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SunElevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offNadir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffNadir);
      }
      if (incidenceAngle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncidenceAngle);
      }
      if (azimuth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Azimuth);
      }
      if (sunAzimuth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SunAzimuth);
      }
      if (sunElevation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SunElevation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewRequest other) {
      if (other == null) {
        return;
      }
      if (other.offNadir_ != null) {
        if (offNadir_ == null) {
          OffNadir = new global::com.epl.protobuf.v1.FloatFilter();
        }
        OffNadir.MergeFrom(other.OffNadir);
      }
      if (other.incidenceAngle_ != null) {
        if (incidenceAngle_ == null) {
          IncidenceAngle = new global::com.epl.protobuf.v1.FloatFilter();
        }
        IncidenceAngle.MergeFrom(other.IncidenceAngle);
      }
      if (other.azimuth_ != null) {
        if (azimuth_ == null) {
          Azimuth = new global::com.epl.protobuf.v1.FloatFilter();
        }
        Azimuth.MergeFrom(other.Azimuth);
      }
      if (other.sunAzimuth_ != null) {
        if (sunAzimuth_ == null) {
          SunAzimuth = new global::com.epl.protobuf.v1.FloatFilter();
        }
        SunAzimuth.MergeFrom(other.SunAzimuth);
      }
      if (other.sunElevation_ != null) {
        if (sunElevation_ == null) {
          SunElevation = new global::com.epl.protobuf.v1.FloatFilter();
        }
        SunElevation.MergeFrom(other.SunElevation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offNadir_ == null) {
              OffNadir = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(OffNadir);
            break;
          }
          case 18: {
            if (incidenceAngle_ == null) {
              IncidenceAngle = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(IncidenceAngle);
            break;
          }
          case 26: {
            if (azimuth_ == null) {
              Azimuth = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(Azimuth);
            break;
          }
          case 34: {
            if (sunAzimuth_ == null) {
              SunAzimuth = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(SunAzimuth);
            break;
          }
          case 42: {
            if (sunElevation_ == null) {
              SunElevation = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(SunElevation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (offNadir_ == null) {
              OffNadir = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(OffNadir);
            break;
          }
          case 18: {
            if (incidenceAngle_ == null) {
              IncidenceAngle = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(IncidenceAngle);
            break;
          }
          case 26: {
            if (azimuth_ == null) {
              Azimuth = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(Azimuth);
            break;
          }
          case 34: {
            if (sunAzimuth_ == null) {
              SunAzimuth = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(SunAzimuth);
            break;
          }
          case 42: {
            if (sunElevation_ == null) {
              SunElevation = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(SunElevation);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Sat : pb::IMessage<Sat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sat> _parser = new pb::MessageParser<Sat>(() => new Sat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sat(Sat other) : this() {
      RelativeOrbit = other.RelativeOrbit;
      orbitState_ = other.orbitState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sat Clone() {
      return new Sat(this);
    }

    /// <summary>Field number for the "relative_orbit" field.</summary>
    public const int RelativeOrbitFieldNumber = 6;
    private static readonly pb::FieldCodec<uint?> _single_relativeOrbit_codec = pb::FieldCodec.ForStructWrapper<uint>(50);
    private uint? relativeOrbit_;
    /// <summary>
    /// The relative orbit number at the time of acquisition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? RelativeOrbit {
      get { return relativeOrbit_; }
      set {
        relativeOrbit_ = value;
      }
    }


    /// <summary>Field number for the "orbit_state" field.</summary>
    public const int OrbitStateFieldNumber = 1;
    private global::com.epl.protobuf.v1.Sat.Types.OrbitState orbitState_ = global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState;
    /// <summary>
    /// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
    /// geosynchronous satellites
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Sat.Types.OrbitState OrbitState {
      get { return orbitState_; }
      set {
        orbitState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelativeOrbit != other.RelativeOrbit) return false;
      if (OrbitState != other.OrbitState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (relativeOrbit_ != null) hash ^= RelativeOrbit.GetHashCode();
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) hash ^= OrbitState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OrbitState);
      }
      if (relativeOrbit_ != null) {
        _single_relativeOrbit_codec.WriteTagAndValue(output, RelativeOrbit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OrbitState);
      }
      if (relativeOrbit_ != null) {
        _single_relativeOrbit_codec.WriteTagAndValue(ref output, RelativeOrbit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (relativeOrbit_ != null) {
        size += _single_relativeOrbit_codec.CalculateSizeWithTag(RelativeOrbit);
      }
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrbitState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sat other) {
      if (other == null) {
        return;
      }
      if (other.relativeOrbit_ != null) {
        if (relativeOrbit_ == null || other.RelativeOrbit != 0) {
          RelativeOrbit = other.RelativeOrbit;
        }
      }
      if (other.OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        OrbitState = other.OrbitState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrbitState = (global::com.epl.protobuf.v1.Sat.Types.OrbitState) input.ReadEnum();
            break;
          }
          case 50: {
            uint? value = _single_relativeOrbit_codec.Read(input);
            if (relativeOrbit_ == null || value != 0) {
              RelativeOrbit = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrbitState = (global::com.epl.protobuf.v1.Sat.Types.OrbitState) input.ReadEnum();
            break;
          }
          case 50: {
            uint? value = _single_relativeOrbit_codec.Read(ref input);
            if (relativeOrbit_ == null || value != 0) {
              RelativeOrbit = value;
            }
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Sat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OrbitState {
        [pbr::OriginalName("UKNOWN_ORBIT_STATE")] UknownOrbitState = 0,
        [pbr::OriginalName("ASCENDING_ORBIT")] AscendingOrbit = 1,
        [pbr::OriginalName("DESCENDING_ORBIT")] DescendingOrbit = 2,
        [pbr::OriginalName("GEOSTATIONARY_ORBIT")] GeostationaryOrbit = 3,
      }

    }
    #endregion

  }

  public sealed partial class SatRequest : pb::IMessage<SatRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SatRequest> _parser = new pb::MessageParser<SatRequest>(() => new SatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatRequest(SatRequest other) : this() {
      relativeOrbit_ = other.relativeOrbit_;
      orbitState_ = other.orbitState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatRequest Clone() {
      return new SatRequest(this);
    }

    /// <summary>Field number for the "relative_orbit" field.</summary>
    public const int RelativeOrbitFieldNumber = 6;
    private uint relativeOrbit_;
    /// <summary>
    /// The relative orbit number at the time of acquisition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RelativeOrbit {
      get { return relativeOrbit_; }
      set {
        relativeOrbit_ = value;
      }
    }

    /// <summary>Field number for the "orbit_state" field.</summary>
    public const int OrbitStateFieldNumber = 1;
    private global::com.epl.protobuf.v1.Sat.Types.OrbitState orbitState_ = global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState;
    /// <summary>
    /// The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
    /// geosynchronous satellites
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Sat.Types.OrbitState OrbitState {
      get { return orbitState_; }
      set {
        orbitState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelativeOrbit != other.RelativeOrbit) return false;
      if (OrbitState != other.OrbitState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelativeOrbit != 0) hash ^= RelativeOrbit.GetHashCode();
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) hash ^= OrbitState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OrbitState);
      }
      if (RelativeOrbit != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RelativeOrbit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OrbitState);
      }
      if (RelativeOrbit != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RelativeOrbit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelativeOrbit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelativeOrbit);
      }
      if (OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrbitState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SatRequest other) {
      if (other == null) {
        return;
      }
      if (other.RelativeOrbit != 0) {
        RelativeOrbit = other.RelativeOrbit;
      }
      if (other.OrbitState != global::com.epl.protobuf.v1.Sat.Types.OrbitState.UknownOrbitState) {
        OrbitState = other.OrbitState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrbitState = (global::com.epl.protobuf.v1.Sat.Types.OrbitState) input.ReadEnum();
            break;
          }
          case 48: {
            RelativeOrbit = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrbitState = (global::com.epl.protobuf.v1.Sat.Types.OrbitState) input.ReadEnum();
            break;
          }
          case 48: {
            RelativeOrbit = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// message for electro-optical details of STAC items.
  /// </summary>
  public sealed partial class Eo : pb::IMessage<Eo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Eo> _parser = new pb::MessageParser<Eo>(() => new Eo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Eo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eo(Eo other) : this() {
      CloudCover = other.CloudCover;
      bands_ = other.bands_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eo Clone() {
      return new Eo(this);
    }

    /// <summary>Field number for the "cloud_cover" field.</summary>
    public const int CloudCoverFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_cloudCover_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? cloudCover_;
    /// <summary>
    /// percent cloud cover. 0 no clouds, 100 completely covered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? CloudCover {
      get { return cloudCover_; }
      set {
        cloudCover_ = value;
      }
    }


    /// <summary>Field number for the "bands" field.</summary>
    public const int BandsFieldNumber = 2;
    private global::com.epl.protobuf.v1.Eo.Types.Band bands_ = global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand;
    /// <summary>
    /// band or bands represented in data. If multiple bands, then use a bitwise operator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Eo.Types.Band Bands {
      get { return bands_; }
      set {
        bands_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Eo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Eo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(CloudCover, other.CloudCover)) return false;
      if (Bands != other.Bands) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cloudCover_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(CloudCover);
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) hash ^= Bands.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cloudCover_ != null) {
        _single_cloudCover_codec.WriteTagAndValue(output, CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Bands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cloudCover_ != null) {
        _single_cloudCover_codec.WriteTagAndValue(ref output, CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Bands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cloudCover_ != null) {
        size += _single_cloudCover_codec.CalculateSizeWithTag(CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bands);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Eo other) {
      if (other == null) {
        return;
      }
      if (other.cloudCover_ != null) {
        if (cloudCover_ == null || other.CloudCover != 0F) {
          CloudCover = other.CloudCover;
        }
      }
      if (other.Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        Bands = other.Bands;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_cloudCover_codec.Read(input);
            if (cloudCover_ == null || value != 0F) {
              CloudCover = value;
            }
            break;
          }
          case 16: {
            Bands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_cloudCover_codec.Read(ref input);
            if (cloudCover_ == null || value != 0F) {
              CloudCover = value;
            }
            break;
          }
          case 16: {
            Bands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Eo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Band {
        /// <summary>
        /// band type not specified. default value. if used in query, any band type is acceptable
        /// </summary>
        [pbr::OriginalName("UNKNOWN_BAND")] UnknownBand = 0,
        [pbr::OriginalName("COASTAL")] Coastal = 2,
        [pbr::OriginalName("BLUE")] Blue = 4,
        [pbr::OriginalName("GREEN")] Green = 8,
        [pbr::OriginalName("RED")] Red = 16,
        [pbr::OriginalName("RGB")] Rgb = 28,
        [pbr::OriginalName("NIR")] Nir = 32,
        /// <summary>
        /// special case for landsat 1-3
        /// </summary>
        [pbr::OriginalName("NIR_2")] Nir2 = 33,
        [pbr::OriginalName("RGBIR")] Rgbir = 60,
        [pbr::OriginalName("SWIR_1")] Swir1 = 64,
        [pbr::OriginalName("SWIR_2")] Swir2 = 128,
        [pbr::OriginalName("PAN")] Pan = 256,
        [pbr::OriginalName("CIRRUS")] Cirrus = 512,
        [pbr::OriginalName("LWIR_1")] Lwir1 = 1024,
        [pbr::OriginalName("LWIR_2")] Lwir2 = 2048,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// sub message request for specifying electro-optical details in STAC request
  /// </summary>
  public sealed partial class EoRequest : pb::IMessage<EoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EoRequest> _parser = new pb::MessageParser<EoRequest>(() => new EoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EoRequest(EoRequest other) : this() {
      cloudCover_ = other.cloudCover_ != null ? other.cloudCover_.Clone() : null;
      bands_ = other.bands_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EoRequest Clone() {
      return new EoRequest(this);
    }

    /// <summary>Field number for the "cloud_cover" field.</summary>
    public const int CloudCoverFieldNumber = 1;
    private global::com.epl.protobuf.v1.FloatFilter cloudCover_;
    /// <summary>
    /// data with a cloud_cover equal to or in the range specified in cloud_cover
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter CloudCover {
      get { return cloudCover_; }
      set {
        cloudCover_ = value;
      }
    }

    /// <summary>Field number for the "bands" field.</summary>
    public const int BandsFieldNumber = 2;
    private global::com.epl.protobuf.v1.Eo.Types.Band bands_ = global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand;
    /// <summary>
    /// data that possesses the bands specified in bands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Eo.Types.Band Bands {
      get { return bands_; }
      set {
        bands_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CloudCover, other.CloudCover)) return false;
      if (Bands != other.Bands) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cloudCover_ != null) hash ^= CloudCover.GetHashCode();
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) hash ^= Bands.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cloudCover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Bands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cloudCover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Bands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cloudCover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudCover);
      }
      if (Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bands);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EoRequest other) {
      if (other == null) {
        return;
      }
      if (other.cloudCover_ != null) {
        if (cloudCover_ == null) {
          CloudCover = new global::com.epl.protobuf.v1.FloatFilter();
        }
        CloudCover.MergeFrom(other.CloudCover);
      }
      if (other.Bands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        Bands = other.Bands;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cloudCover_ == null) {
              CloudCover = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(CloudCover);
            break;
          }
          case 16: {
            Bands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cloudCover_ == null) {
              CloudCover = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(CloudCover);
            break;
          }
          case 16: {
            Bands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// message for an asset of a STAC item.
  /// </summary>
  public sealed partial class Asset : pb::IMessage<Asset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      href_ = other.href_;
      type_ = other.type_;
      eoBands_ = other.eoBands_;
      assetType_ = other.assetType_;
      cloudPlatform_ = other.cloudPlatform_;
      bucketManager_ = other.bucketManager_;
      bucketRegion_ = other.bucketRegion_;
      bucket_ = other.bucket_;
      objectPath_ = other.objectPath_;
      requesterPays_ = other.requesterPays_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "href" field.</summary>
    public const int HrefFieldNumber = 1;
    private string href_ = "";
    /// <summary>
    /// href for downloading item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Href {
      get { return href_; }
      set {
        href_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// asset type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eo_bands" field.</summary>
    public const int EoBandsFieldNumber = 3;
    private global::com.epl.protobuf.v1.Eo.Types.Band eoBands_ = global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand;
    /// <summary>
    /// band(s) of data in asset.
    /// https://github.com/radiantearth/stac-spec/blob/612ee4fb4f979c049d2416e7f5374a5301b8a277/extensions/eo/README.md
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Eo.Types.Band EoBands {
      get { return eoBands_; }
      set {
        eoBands_ = value;
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 4;
    private global::com.epl.protobuf.v1.AssetType assetType_ = global::com.epl.protobuf.v1.AssetType.UnknownAsset;
    /// <summary>
    /// enum for asset type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.AssetType AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }

    /// <summary>Field number for the "cloud_platform" field.</summary>
    public const int CloudPlatformFieldNumber = 5;
    private global::com.epl.protobuf.v1.CloudPlatform cloudPlatform_ = global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform;
    /// <summary>
    /// cloud platform enum (Google cloud, Azure, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.CloudPlatform CloudPlatform {
      get { return cloudPlatform_; }
      set {
        cloudPlatform_ = value;
      }
    }

    /// <summary>Field number for the "bucket_manager" field.</summary>
    public const int BucketManagerFieldNumber = 6;
    private string bucketManager_ = "";
    /// <summary>
    /// manager of the bucket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BucketManager {
      get { return bucketManager_; }
      set {
        bucketManager_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bucket_region" field.</summary>
    public const int BucketRegionFieldNumber = 7;
    private string bucketRegion_ = "";
    /// <summary>
    /// bucket region. useful when concerned about egress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BucketRegion {
      get { return bucketRegion_; }
      set {
        bucketRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 8;
    private string bucket_ = "";
    /// <summary>
    /// bucket name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bucket {
      get { return bucket_; }
      set {
        bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_path" field.</summary>
    public const int ObjectPathFieldNumber = 9;
    private string objectPath_ = "";
    /// <summary>
    /// path to the object in the bucket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectPath {
      get { return objectPath_; }
      set {
        objectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requester_pays" field.</summary>
    public const int RequesterPaysFieldNumber = 10;
    private bool requesterPays_;
    /// <summary>
    /// requester_pays pertains to egress cost. Some buckets are hosted with the egress costs assigned to the requester.
    /// some hosts pay the regress costs for the requester.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequesterPays {
      get { return requesterPays_; }
      set {
        requesterPays_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Href != other.Href) return false;
      if (Type != other.Type) return false;
      if (EoBands != other.EoBands) return false;
      if (AssetType != other.AssetType) return false;
      if (CloudPlatform != other.CloudPlatform) return false;
      if (BucketManager != other.BucketManager) return false;
      if (BucketRegion != other.BucketRegion) return false;
      if (Bucket != other.Bucket) return false;
      if (ObjectPath != other.ObjectPath) return false;
      if (RequesterPays != other.RequesterPays) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Href.Length != 0) hash ^= Href.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (EoBands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) hash ^= EoBands.GetHashCode();
      if (AssetType != global::com.epl.protobuf.v1.AssetType.UnknownAsset) hash ^= AssetType.GetHashCode();
      if (CloudPlatform != global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform) hash ^= CloudPlatform.GetHashCode();
      if (BucketManager.Length != 0) hash ^= BucketManager.GetHashCode();
      if (BucketRegion.Length != 0) hash ^= BucketRegion.GetHashCode();
      if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
      if (ObjectPath.Length != 0) hash ^= ObjectPath.GetHashCode();
      if (RequesterPays != false) hash ^= RequesterPays.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Href.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Href);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (EoBands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EoBands);
      }
      if (AssetType != global::com.epl.protobuf.v1.AssetType.UnknownAsset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AssetType);
      }
      if (CloudPlatform != global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CloudPlatform);
      }
      if (BucketManager.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BucketManager);
      }
      if (BucketRegion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BucketRegion);
      }
      if (Bucket.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Bucket);
      }
      if (ObjectPath.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ObjectPath);
      }
      if (RequesterPays != false) {
        output.WriteRawTag(80);
        output.WriteBool(RequesterPays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Href.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Href);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (EoBands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EoBands);
      }
      if (AssetType != global::com.epl.protobuf.v1.AssetType.UnknownAsset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AssetType);
      }
      if (CloudPlatform != global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CloudPlatform);
      }
      if (BucketManager.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BucketManager);
      }
      if (BucketRegion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BucketRegion);
      }
      if (Bucket.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Bucket);
      }
      if (ObjectPath.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ObjectPath);
      }
      if (RequesterPays != false) {
        output.WriteRawTag(80);
        output.WriteBool(RequesterPays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Href.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Href);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (EoBands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EoBands);
      }
      if (AssetType != global::com.epl.protobuf.v1.AssetType.UnknownAsset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
      }
      if (CloudPlatform != global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloudPlatform);
      }
      if (BucketManager.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BucketManager);
      }
      if (BucketRegion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BucketRegion);
      }
      if (Bucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
      }
      if (ObjectPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectPath);
      }
      if (RequesterPays != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Href.Length != 0) {
        Href = other.Href;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.EoBands != global::com.epl.protobuf.v1.Eo.Types.Band.UnknownBand) {
        EoBands = other.EoBands;
      }
      if (other.AssetType != global::com.epl.protobuf.v1.AssetType.UnknownAsset) {
        AssetType = other.AssetType;
      }
      if (other.CloudPlatform != global::com.epl.protobuf.v1.CloudPlatform.UnknownCloudPlatform) {
        CloudPlatform = other.CloudPlatform;
      }
      if (other.BucketManager.Length != 0) {
        BucketManager = other.BucketManager;
      }
      if (other.BucketRegion.Length != 0) {
        BucketRegion = other.BucketRegion;
      }
      if (other.Bucket.Length != 0) {
        Bucket = other.Bucket;
      }
      if (other.ObjectPath.Length != 0) {
        ObjectPath = other.ObjectPath;
      }
      if (other.RequesterPays != false) {
        RequesterPays = other.RequesterPays;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Href = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            EoBands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
          case 32: {
            AssetType = (global::com.epl.protobuf.v1.AssetType) input.ReadEnum();
            break;
          }
          case 40: {
            CloudPlatform = (global::com.epl.protobuf.v1.CloudPlatform) input.ReadEnum();
            break;
          }
          case 50: {
            BucketManager = input.ReadString();
            break;
          }
          case 58: {
            BucketRegion = input.ReadString();
            break;
          }
          case 66: {
            Bucket = input.ReadString();
            break;
          }
          case 74: {
            ObjectPath = input.ReadString();
            break;
          }
          case 80: {
            RequesterPays = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Href = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            EoBands = (global::com.epl.protobuf.v1.Eo.Types.Band) input.ReadEnum();
            break;
          }
          case 32: {
            AssetType = (global::com.epl.protobuf.v1.AssetType) input.ReadEnum();
            break;
          }
          case 40: {
            CloudPlatform = (global::com.epl.protobuf.v1.CloudPlatform) input.ReadEnum();
            break;
          }
          case 50: {
            BucketManager = input.ReadString();
            break;
          }
          case 58: {
            BucketRegion = input.ReadString();
            break;
          }
          case 66: {
            Bucket = input.ReadString();
            break;
          }
          case 74: {
            ObjectPath = input.ReadString();
            break;
          }
          case 80: {
            RequesterPays = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DatetimeRange : pb::IMessage<DatetimeRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatetimeRange> _parser = new pb::MessageParser<DatetimeRange>(() => new DatetimeRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatetimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatetimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatetimeRange(DatetimeRange other) : this() {
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatetimeRange Clone() {
      return new DatetimeRange(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatetimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatetimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatetimeRange other) {
      if (other == null) {
        return;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (start_ == null) {
              Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Start);
            break;
          }
          case 18: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (start_ == null) {
              Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Start);
            break;
          }
          case 18: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// response message for insertion and updates to STAC db
  /// </summary>
  public sealed partial class StacDbResponse : pb::IMessage<StacDbResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StacDbResponse> _parser = new pb::MessageParser<StacDbResponse>(() => new StacDbResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StacDbResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacDbResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacDbResponse(StacDbResponse other) : this() {
      status_ = other.status_;
      statusCode_ = other.statusCode_;
      dataId_ = other.dataId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StacDbResponse Clone() {
      return new StacDbResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 3;
    private string dataId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataId {
      get { return dataId_; }
      set {
        dataId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private ulong count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StacDbResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StacDbResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (StatusCode != other.StatusCode) return false;
      if (DataId != other.DataId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (DataId.Length != 0) hash ^= DataId.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StatusCode);
      }
      if (DataId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataId);
      }
      if (Count != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (StatusCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StatusCode);
      }
      if (DataId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataId);
      }
      if (Count != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (DataId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataId);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StacDbResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.DataId.Length != 0) {
        DataId = other.DataId;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 16: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 26: {
            DataId = input.ReadString();
            break;
          }
          case 32: {
            Count = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 16: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 26: {
            DataId = input.ReadString();
            break;
          }
          case 32: {
            Count = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// place holder for SAR
  /// </summary>
  public sealed partial class Sar : pb::IMessage<Sar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sar> _parser = new pb::MessageParser<Sar>(() => new Sar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sar(Sar other) : this() {
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sar Clone() {
      return new Sar(this);
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private global::com.epl.protobuf.v1.Sar.Types.Platform platform_ = global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Sar.Types.Platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform != global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Platform != global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Platform != global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform != global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sar other) {
      if (other == null) {
        return;
      }
      if (other.Platform != global::com.epl.protobuf.v1.Sar.Types.Platform.UnknownPlatform) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Platform = (global::com.epl.protobuf.v1.Sar.Types.Platform) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Platform = (global::com.epl.protobuf.v1.Sar.Types.Platform) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Sar message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Platform {
        [pbr::OriginalName("UNKNOWN_PLATFORM")] UnknownPlatform = 0,
        [pbr::OriginalName("ENVISAT")] Envisat = 1,
        [pbr::OriginalName("SENTINEL_1A")] Sentinel1A = 2,
      }

      public enum Instrument {
        [pbr::OriginalName("UNKNOWN_INSTRUMENT")] UnknownInstrument = 0,
      }

    }
    #endregion

  }

  /// <summary>
  /// https://landsat.usgs.gov/stac/landsat-extension/schema.json
  /// </summary>
  public sealed partial class Landsat : pb::IMessage<Landsat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Landsat> _parser = new pb::MessageParser<Landsat>(() => new Landsat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Landsat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Landsat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Landsat(Landsat other) : this() {
      sceneId_ = other.sceneId_;
      productId_ = other.productId_;
      processingLevel_ = other.processingLevel_;
      wrsPath_ = other.wrsPath_;
      wrsRow_ = other.wrsRow_;
      CloudCoverLand = other.CloudCoverLand;
      wrsType_ = other.wrsType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Landsat Clone() {
      return new Landsat(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private string sceneId_ = "";
    /// <summary>
    /// id of scene should be id of STAC item, but there may be a use case where someone does not want that
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processing_level" field.</summary>
    public const int ProcessingLevelFieldNumber = 3;
    private global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel processingLevel_ = global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel ProcessingLevel {
      get { return processingLevel_; }
      set {
        processingLevel_ = value;
      }
    }

    /// <summary>Field number for the "wrs_path" field.</summary>
    public const int WrsPathFieldNumber = 4;
    private int wrsPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WrsPath {
      get { return wrsPath_; }
      set {
        wrsPath_ = value;
      }
    }

    /// <summary>Field number for the "wrs_row" field.</summary>
    public const int WrsRowFieldNumber = 5;
    private int wrsRow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WrsRow {
      get { return wrsRow_; }
      set {
        wrsRow_ = value;
      }
    }

    /// <summary>Field number for the "cloud_cover_land" field.</summary>
    public const int CloudCoverLandFieldNumber = 6;
    private static readonly pb::FieldCodec<float?> _single_cloudCoverLand_codec = pb::FieldCodec.ForStructWrapper<float>(50);
    private float? cloudCoverLand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? CloudCoverLand {
      get { return cloudCoverLand_; }
      set {
        cloudCoverLand_ = value;
      }
    }


    /// <summary>Field number for the "wrs_type" field.</summary>
    public const int WrsTypeFieldNumber = 7;
    private global::com.epl.protobuf.v1.Landsat.Types.WRSType wrsType_ = global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Landsat.Types.WRSType WrsType {
      get { return wrsType_; }
      set {
        wrsType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Landsat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Landsat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (ProductId != other.ProductId) return false;
      if (ProcessingLevel != other.ProcessingLevel) return false;
      if (WrsPath != other.WrsPath) return false;
      if (WrsRow != other.WrsRow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(CloudCoverLand, other.CloudCoverLand)) return false;
      if (WrsType != other.WrsType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) hash ^= ProcessingLevel.GetHashCode();
      if (WrsPath != 0) hash ^= WrsPath.GetHashCode();
      if (WrsRow != 0) hash ^= WrsRow.GetHashCode();
      if (cloudCoverLand_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(CloudCoverLand);
      if (WrsType != global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs) hash ^= WrsType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WrsPath);
      }
      if (WrsRow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        _single_cloudCoverLand_codec.WriteTagAndValue(output, CloudCoverLand);
      }
      if (WrsType != global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WrsType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WrsPath);
      }
      if (WrsRow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        _single_cloudCoverLand_codec.WriteTagAndValue(ref output, CloudCoverLand);
      }
      if (WrsType != global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WrsType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WrsPath);
      }
      if (WrsRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        size += _single_cloudCoverLand_codec.CalculateSizeWithTag(CloudCoverLand);
      }
      if (WrsType != global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WrsType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Landsat other) {
      if (other == null) {
        return;
      }
      if (other.SceneId.Length != 0) {
        SceneId = other.SceneId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        ProcessingLevel = other.ProcessingLevel;
      }
      if (other.WrsPath != 0) {
        WrsPath = other.WrsPath;
      }
      if (other.WrsRow != 0) {
        WrsRow = other.WrsRow;
      }
      if (other.cloudCoverLand_ != null) {
        if (cloudCoverLand_ == null || other.CloudCoverLand != 0F) {
          CloudCoverLand = other.CloudCoverLand;
        }
      }
      if (other.WrsType != global::com.epl.protobuf.v1.Landsat.Types.WRSType.UknownWrs) {
        WrsType = other.WrsType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SceneId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 24: {
            ProcessingLevel = (global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel) input.ReadEnum();
            break;
          }
          case 32: {
            WrsPath = input.ReadInt32();
            break;
          }
          case 40: {
            WrsRow = input.ReadInt32();
            break;
          }
          case 50: {
            float? value = _single_cloudCoverLand_codec.Read(input);
            if (cloudCoverLand_ == null || value != 0F) {
              CloudCoverLand = value;
            }
            break;
          }
          case 56: {
            WrsType = (global::com.epl.protobuf.v1.Landsat.Types.WRSType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SceneId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 24: {
            ProcessingLevel = (global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel) input.ReadEnum();
            break;
          }
          case 32: {
            WrsPath = input.ReadInt32();
            break;
          }
          case 40: {
            WrsRow = input.ReadInt32();
            break;
          }
          case 50: {
            float? value = _single_cloudCoverLand_codec.Read(ref input);
            if (cloudCoverLand_ == null || value != 0F) {
              CloudCoverLand = value;
            }
            break;
          }
          case 56: {
            WrsType = (global::com.epl.protobuf.v1.Landsat.Types.WRSType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Landsat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CollectionCategory {
        [pbr::OriginalName("UNKNOWN_COLLECTION_CATEGORY")] UnknownCollectionCategory = 0,
        [pbr::OriginalName("A1")] A1 = 1,
        [pbr::OriginalName("A2")] A2 = 2,
        [pbr::OriginalName("T1")] T1 = 3,
        [pbr::OriginalName("T2")] T2 = 4,
        [pbr::OriginalName("RT")] Rt = 5,
      }

      public enum WRSType {
        [pbr::OriginalName("UKNOWN_WRS")] UknownWrs = 0,
        [pbr::OriginalName("WRS1")] Wrs1 = 1,
        [pbr::OriginalName("WRS2")] Wrs2 = 2,
      }

      public enum ProcessingLevel {
        [pbr::OriginalName("UNKNOWN_PROCESSING_LEVEL")] UnknownProcessingLevel = 0,
        [pbr::OriginalName("L1G")] L1G = 1,
        [pbr::OriginalName("L1TP")] L1Tp = 2,
        [pbr::OriginalName("L1T")] L1T = 3,
        [pbr::OriginalName("L1GT")] L1Gt = 4,
        [pbr::OriginalName("L1GS")] L1Gs = 5,
      }

    }
    #endregion

  }

  public sealed partial class LandsatRequest : pb::IMessage<LandsatRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LandsatRequest> _parser = new pb::MessageParser<LandsatRequest>(() => new LandsatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandsatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsatRequest(LandsatRequest other) : this() {
      sceneId_ = other.sceneId_;
      productId_ = other.productId_;
      processingLevel_ = other.processingLevel_;
      wrsPath_ = other.wrsPath_;
      wrsRow_ = other.wrsRow_;
      cloudCoverLand_ = other.cloudCoverLand_ != null ? other.cloudCoverLand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsatRequest Clone() {
      return new LandsatRequest(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private string sceneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processing_level" field.</summary>
    public const int ProcessingLevelFieldNumber = 3;
    private global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel processingLevel_ = global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel ProcessingLevel {
      get { return processingLevel_; }
      set {
        processingLevel_ = value;
      }
    }

    /// <summary>Field number for the "wrs_path" field.</summary>
    public const int WrsPathFieldNumber = 4;
    private int wrsPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WrsPath {
      get { return wrsPath_; }
      set {
        wrsPath_ = value;
      }
    }

    /// <summary>Field number for the "wrs_row" field.</summary>
    public const int WrsRowFieldNumber = 5;
    private int wrsRow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WrsRow {
      get { return wrsRow_; }
      set {
        wrsRow_ = value;
      }
    }

    /// <summary>Field number for the "cloud_cover_land" field.</summary>
    public const int CloudCoverLandFieldNumber = 6;
    private global::com.epl.protobuf.v1.FloatFilter cloudCoverLand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FloatFilter CloudCoverLand {
      get { return cloudCoverLand_; }
      set {
        cloudCoverLand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandsatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandsatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (ProductId != other.ProductId) return false;
      if (ProcessingLevel != other.ProcessingLevel) return false;
      if (WrsPath != other.WrsPath) return false;
      if (WrsRow != other.WrsRow) return false;
      if (!object.Equals(CloudCoverLand, other.CloudCoverLand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) hash ^= ProcessingLevel.GetHashCode();
      if (WrsPath != 0) hash ^= WrsPath.GetHashCode();
      if (WrsRow != 0) hash ^= WrsRow.GetHashCode();
      if (cloudCoverLand_ != null) hash ^= CloudCoverLand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WrsPath);
      }
      if (WrsRow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CloudCoverLand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WrsPath);
      }
      if (WrsRow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CloudCoverLand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProcessingLevel);
      }
      if (WrsPath != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WrsPath);
      }
      if (WrsRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WrsRow);
      }
      if (cloudCoverLand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudCoverLand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandsatRequest other) {
      if (other == null) {
        return;
      }
      if (other.SceneId.Length != 0) {
        SceneId = other.SceneId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProcessingLevel != global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel.UnknownProcessingLevel) {
        ProcessingLevel = other.ProcessingLevel;
      }
      if (other.WrsPath != 0) {
        WrsPath = other.WrsPath;
      }
      if (other.WrsRow != 0) {
        WrsRow = other.WrsRow;
      }
      if (other.cloudCoverLand_ != null) {
        if (cloudCoverLand_ == null) {
          CloudCoverLand = new global::com.epl.protobuf.v1.FloatFilter();
        }
        CloudCoverLand.MergeFrom(other.CloudCoverLand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SceneId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 24: {
            ProcessingLevel = (global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel) input.ReadEnum();
            break;
          }
          case 32: {
            WrsPath = input.ReadInt32();
            break;
          }
          case 40: {
            WrsRow = input.ReadInt32();
            break;
          }
          case 50: {
            if (cloudCoverLand_ == null) {
              CloudCoverLand = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(CloudCoverLand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SceneId = input.ReadString();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 24: {
            ProcessingLevel = (global::com.epl.protobuf.v1.Landsat.Types.ProcessingLevel) input.ReadEnum();
            break;
          }
          case 32: {
            WrsPath = input.ReadInt32();
            break;
          }
          case 40: {
            WrsRow = input.ReadInt32();
            break;
          }
          case 50: {
            if (cloudCoverLand_ == null) {
              CloudCoverLand = new global::com.epl.protobuf.v1.FloatFilter();
            }
            input.ReadMessage(CloudCoverLand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Experimental
  /// </summary>
  public sealed partial class Mosaic : pb::IMessage<Mosaic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Mosaic> _parser = new pb::MessageParser<Mosaic>(() => new Mosaic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mosaic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mosaic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mosaic(Mosaic other) : this() {
      name_ = other.name_;
      quadKey_ = other.quadKey_;
      zooms_ = other.zooms_.Clone();
      observationRange_ = other.observationRange_ != null ? other.observationRange_.Clone() : null;
      provenanceIds_ = other.provenanceIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mosaic Clone() {
      return new Mosaic(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// experimental name of the mosaic this item is a member of
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quad_key" field.</summary>
    public const int QuadKeyFieldNumber = 2;
    private string quadKey_ = "";
    /// <summary>
    /// experimental the quad_key of this specific item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuadKey {
      get { return quadKey_; }
      set {
        quadKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zooms" field.</summary>
    public const int ZoomsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_zooms_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> zooms_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// experimental an array of the zooms contained within the asset(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Zooms {
      get { return zooms_; }
    }

    /// <summary>Field number for the "observation_range" field.</summary>
    public const int ObservationRangeFieldNumber = 4;
    private global::com.epl.protobuf.v1.DatetimeRange observationRange_;
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.DatetimeRange ObservationRange {
      get { return observationRange_; }
      set {
        observationRange_ = value;
      }
    }

    /// <summary>Field number for the "provenance_ids" field.</summary>
    public const int ProvenanceIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_provenanceIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> provenanceIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// experimental scene provenance. ordered list of STAC item ids that contribute to the mosaic. The 0th STAC item in provenance_ids is the front-most contributor to the mosaic, the last STAC item in bottom contributor and is likely to be partially covered by other contributing scenes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProvenanceIds {
      get { return provenanceIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mosaic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mosaic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (QuadKey != other.QuadKey) return false;
      if(!zooms_.Equals(other.zooms_)) return false;
      if (!object.Equals(ObservationRange, other.ObservationRange)) return false;
      if(!provenanceIds_.Equals(other.provenanceIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (QuadKey.Length != 0) hash ^= QuadKey.GetHashCode();
      hash ^= zooms_.GetHashCode();
      if (observationRange_ != null) hash ^= ObservationRange.GetHashCode();
      hash ^= provenanceIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (QuadKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuadKey);
      }
      zooms_.WriteTo(output, _repeated_zooms_codec);
      if (observationRange_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ObservationRange);
      }
      provenanceIds_.WriteTo(output, _repeated_provenanceIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (QuadKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuadKey);
      }
      zooms_.WriteTo(ref output, _repeated_zooms_codec);
      if (observationRange_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ObservationRange);
      }
      provenanceIds_.WriteTo(ref output, _repeated_provenanceIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (QuadKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuadKey);
      }
      size += zooms_.CalculateSize(_repeated_zooms_codec);
      if (observationRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObservationRange);
      }
      size += provenanceIds_.CalculateSize(_repeated_provenanceIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mosaic other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.QuadKey.Length != 0) {
        QuadKey = other.QuadKey;
      }
      zooms_.Add(other.zooms_);
      if (other.observationRange_ != null) {
        if (observationRange_ == null) {
          ObservationRange = new global::com.epl.protobuf.v1.DatetimeRange();
        }
        ObservationRange.MergeFrom(other.ObservationRange);
      }
      provenanceIds_.Add(other.provenanceIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            QuadKey = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            zooms_.AddEntriesFrom(input, _repeated_zooms_codec);
            break;
          }
          case 34: {
            if (observationRange_ == null) {
              ObservationRange = new global::com.epl.protobuf.v1.DatetimeRange();
            }
            input.ReadMessage(ObservationRange);
            break;
          }
          case 42: {
            provenanceIds_.AddEntriesFrom(input, _repeated_provenanceIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            QuadKey = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            zooms_.AddEntriesFrom(ref input, _repeated_zooms_codec);
            break;
          }
          case 34: {
            if (observationRange_ == null) {
              ObservationRange = new global::com.epl.protobuf.v1.DatetimeRange();
            }
            input.ReadMessage(ObservationRange);
            break;
          }
          case 42: {
            provenanceIds_.AddEntriesFrom(ref input, _repeated_provenanceIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Experimental
  /// </summary>
  public sealed partial class MosaicRequest : pb::IMessage<MosaicRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MosaicRequest> _parser = new pb::MessageParser<MosaicRequest>(() => new MosaicRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MosaicRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.StacReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MosaicRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MosaicRequest(MosaicRequest other) : this() {
      name_ = other.name_;
      quadKey_ = other.quadKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MosaicRequest Clone() {
      return new MosaicRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// experimental mosaic to search for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quad_key" field.</summary>
    public const int QuadKeyFieldNumber = 2;
    private string quadKey_ = "";
    /// <summary>
    /// experimental quad_key to search by
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuadKey {
      get { return quadKey_; }
      set {
        quadKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MosaicRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MosaicRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (QuadKey != other.QuadKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (QuadKey.Length != 0) hash ^= QuadKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (QuadKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuadKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (QuadKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(QuadKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (QuadKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuadKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MosaicRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.QuadKey.Length != 0) {
        QuadKey = other.QuadKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            QuadKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            QuadKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
