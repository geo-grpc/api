// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: epl/protobuf/v1/query.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.epl.protobuf.v1 {

  /// <summary>Holder for reflection information generated from epl/protobuf/v1/query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for epl/protobuf/v1/query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtlcGwvcHJvdG9idWYvdjEvcXVlcnkucHJvdG8SD2VwbC5wcm90b2J1Zi52",
            "MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLAAQoLRmxvYXRG",
            "aWx0ZXISNQoIcmVsX3R5cGUYAiABKA4yIy5lcGwucHJvdG9idWYudjEuRmls",
            "dGVyUmVsYXRpb25zaGlwEg8KBXZhbHVlGAEgASgCSAASDwoFc3RhcnQYAyAB",
            "KAJIABILCgNlbmQYBCABKAISNgoOc29ydF9kaXJlY3Rpb24YBSABKA4yHi5l",
            "cGwucHJvdG9idWYudjEuU29ydERpcmVjdGlvbhILCgNzZXQYBiADKAJCBgoE",
            "ZGF0YSLBAQoMRG91YmxlRmlsdGVyEjUKCHJlbF90eXBlGAIgASgOMiMuZXBs",
            "LnByb3RvYnVmLnYxLkZpbHRlclJlbGF0aW9uc2hpcBIPCgV2YWx1ZRgBIAEo",
            "AUgAEg8KBXN0YXJ0GAMgASgBSAASCwoDZW5kGAQgASgBEjYKDnNvcnRfZGly",
            "ZWN0aW9uGAUgASgOMh4uZXBsLnByb3RvYnVmLnYxLlNvcnREaXJlY3Rpb24S",
            "CwoDc2V0GAYgAygBQgYKBGRhdGEiiwIKD1RpbWVzdGFtcEZpbHRlchI1Cghy",
            "ZWxfdHlwZRgCIAEoDjIjLmVwbC5wcm90b2J1Zi52MS5GaWx0ZXJSZWxhdGlv",
            "bnNoaXASKwoFdmFsdWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wSAASKwoFc3RhcnQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wSAASJwoDZW5kGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBI2Cg5zb3J0X2RpcmVjdGlvbhgFIAEoDjIeLmVwbC5wcm90b2J1Zi52MS5T",
            "b3J0RGlyZWN0aW9uQgYKBGRhdGEiwQEKDFVJbnQzMkZpbHRlchI1CghyZWxf",
            "dHlwZRgCIAEoDjIjLmVwbC5wcm90b2J1Zi52MS5GaWx0ZXJSZWxhdGlvbnNo",
            "aXASDwoFdmFsdWUYASABKA1IABIPCgVzdGFydBgDIAEoDUgAEgsKA2VuZBgE",
            "IAEoDRI2Cg5zb3J0X2RpcmVjdGlvbhgFIAEoDjIeLmVwbC5wcm90b2J1Zi52",
            "MS5Tb3J0RGlyZWN0aW9uEgsKA3NldBgGIAMoDUIGCgRkYXRhImEKDFN0cmlu",
            "Z0ZpbHRlchINCgV2YWx1ZRgBIAEoCRI1CghyZWxfdHlwZRgCIAEoDjIjLmVw",
            "bC5wcm90b2J1Zi52MS5GaWx0ZXJSZWxhdGlvbnNoaXASCwoDc2V0GAYgAygJ",
            "KjIKDVNvcnREaXJlY3Rpb24SDgoKTk9UX1NPUlRFRBAAEggKBERFU0MQARIH",
            "CgNBU0MQAiqWAQoSRmlsdGVyUmVsYXRpb25zaGlwEgYKAkVREAASBwoDTFRF",
            "EAISBwoDR1RFEAQSBgoCTFQQCBIGCgJHVBAQEgsKB0JFVFdFRU4QIBIPCgtO",
            "T1RfQkVUV0VFThBAEggKA05FURCAARIHCgJJThCAAhILCgZOT1RfSU4QgAQS",
            "CQoETElLRRCACBINCghOT1RfTElLRRCAEEJvChNjb20uZXBsLnByb3RvYnVm",
            "LnYxQgpRdWVyeVByb3RvUAFaLmdpdGh1Yi5jb20vZ2VvLWdycGMvYXBpL2dv",
            "bGFuZy9lcGwvcHJvdG9idWYvdjGiAgNRUEKqAhNjb20uZXBsLnByb3RvYnVm",
            "LnYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.epl.protobuf.v1.SortDirection), typeof(global::com.epl.protobuf.v1.FilterRelationship), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.FloatFilter), global::com.epl.protobuf.v1.FloatFilter.Parser, new[]{ "RelType", "Value", "Start", "End", "SortDirection", "Set" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.DoubleFilter), global::com.epl.protobuf.v1.DoubleFilter.Parser, new[]{ "RelType", "Value", "Start", "End", "SortDirection", "Set" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.TimestampFilter), global::com.epl.protobuf.v1.TimestampFilter.Parser, new[]{ "RelType", "Value", "Start", "End", "SortDirection" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.UInt32Filter), global::com.epl.protobuf.v1.UInt32Filter.Parser, new[]{ "RelType", "Value", "Start", "End", "SortDirection", "Set" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.epl.protobuf.v1.StringFilter), global::com.epl.protobuf.v1.StringFilter.Parser, new[]{ "Value", "RelType", "Set" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///Not currently in use
  /// </summary>
  public enum SortDirection {
    [pbr::OriginalName("NOT_SORTED")] NotSorted = 0,
    [pbr::OriginalName("DESC")] Desc = 1,
    [pbr::OriginalName("ASC")] Asc = 2,
  }

  /// <summary>
  ///
  ///Default Value is equals, `EQ`, so if you don't set rel_type, it is assumed you mean equals.
  /// </summary>
  public enum FilterRelationship {
    /// <summary>
    /// for use with `value` field. return anything equaling the `value`
    /// </summary>
    [pbr::OriginalName("EQ")] Eq = 0,
    /// <summary>
    /// for use with `value` field. return anything less than or equal to the `value`
    /// </summary>
    [pbr::OriginalName("LTE")] Lte = 2,
    /// <summary>
    /// for use with `value` field. return anything greater than or equal to the `value`
    /// </summary>
    [pbr::OriginalName("GTE")] Gte = 4,
    /// <summary>
    /// for use with `value` field. return anything less than the `value`
    /// </summary>
    [pbr::OriginalName("LT")] Lt = 8,
    /// <summary>
    /// for use with `value` field. return anything greater than the `value`
    /// </summary>
    [pbr::OriginalName("GT")] Gt = 16,
    /// <summary>
    /// for use with `start` and `end`. return anything between `start` and `end`
    /// </summary>
    [pbr::OriginalName("BETWEEN")] Between = 32,
    /// <summary>
    /// for use with `start` and `end`. return anything not between `start` and `end`
    /// </summary>
    [pbr::OriginalName("NOT_BETWEEN")] NotBetween = 64,
    /// <summary>
    /// for use with `value` field. return everything not equal to the `value1
    /// </summary>
    [pbr::OriginalName("NEQ")] Neq = 128,
    /// <summary>
    /// for use with with `set` field
    /// </summary>
    [pbr::OriginalName("IN")] In = 256,
    /// <summary>
    /// for use with `set` field
    /// </summary>
    [pbr::OriginalName("NOT_IN")] NotIn = 512,
    /// <summary>
    /// for use with `value` and StringField
    /// </summary>
    [pbr::OriginalName("LIKE")] Like = 1024,
    /// <summary>
    /// for use with `value` and StringField
    /// </summary>
    [pbr::OriginalName("NOT_LIKE")] NotLike = 2048,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  ///Query language for float fields.
  /// </summary>
  public sealed partial class FloatFilter : pb::IMessage<FloatFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FloatFilter> _parser = new pb::MessageParser<FloatFilter>(() => new FloatFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatFilter(FloatFilter other) : this() {
      relType_ = other.relType_;
      end_ = other.end_;
      sortDirection_ = other.sortDirection_;
      set_ = other.set_.Clone();
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatFilter Clone() {
      return new FloatFilter(this);
    }

    /// <summary>Field number for the "rel_type" field.</summary>
    public const int RelTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.FilterRelationship relType_ = global::com.epl.protobuf.v1.FilterRelationship.Eq;
    /// <summary>
    ///
    ///relationship type of the query.
    ///EQ, LTE, GTE, LT, GT, NEQ for `value`
    ///BETWEEN or NOT_BETWEEN for `start` with `end`
    ///IN or NOT_IN for use with `set`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FilterRelationship RelType {
      get { return relType_; }
      set {
        relType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    /// <summary>
    ///
    ///Singular float value that, combined with rel_type, allows you to search for floats that relate to this `value`.
    ///`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
    ///you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return dataCase_ == DataOneofCase.Value ? (float) data_ : 0F; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    /// <summary>
    ///
    ///For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
    ///`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `end` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Start {
      get { return dataCase_ == DataOneofCase.Start ? (float) data_ : 0F; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Start;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private float end_;
    /// <summary>
    ///
    ///For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    ///`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `start` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "sort_direction" field.</summary>
    public const int SortDirectionFieldNumber = 5;
    private global::com.epl.protobuf.v1.SortDirection sortDirection_ = global::com.epl.protobuf.v1.SortDirection.NotSorted;
    /// <summary>
    ///
    ///sort direction for the return values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.SortDirection SortDirection {
      get { return sortDirection_; }
      set {
        sortDirection_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_set_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> set_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///
    ///'IN' or 'NOT IN' sql operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Set {
      get { return set_; }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Value = 1,
      Start = 3,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelType != other.RelType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Start, other.Start)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(End, other.End)) return false;
      if (SortDirection != other.SortDirection) return false;
      if(!set_.Equals(other.set_)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) hash ^= RelType.GetHashCode();
      if (dataCase_ == DataOneofCase.Value) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (dataCase_ == DataOneofCase.Start) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Start);
      if (End != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(End);
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) hash ^= SortDirection.GetHashCode();
      hash ^= set_.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(29);
        output.WriteFloat(Start);
      }
      if (End != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(29);
        output.WriteFloat(Start);
      }
      if (End != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Value) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.Start) {
        size += 1 + 4;
      }
      if (End != 0F) {
        size += 1 + 4;
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortDirection);
      }
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatFilter other) {
      if (other == null) {
        return;
      }
      if (other.RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        RelType = other.RelType;
      }
      if (other.End != 0F) {
        End = other.End;
      }
      if (other.SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        SortDirection = other.SortDirection;
      }
      set_.Add(other.set_);
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 29: {
            Start = input.ReadFloat();
            break;
          }
          case 37: {
            End = input.ReadFloat();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 53: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 29: {
            Start = input.ReadFloat();
            break;
          }
          case 37: {
            End = input.ReadFloat();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 53: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DoubleFilter : pb::IMessage<DoubleFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DoubleFilter> _parser = new pb::MessageParser<DoubleFilter>(() => new DoubleFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFilter(DoubleFilter other) : this() {
      relType_ = other.relType_;
      end_ = other.end_;
      sortDirection_ = other.sortDirection_;
      set_ = other.set_.Clone();
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleFilter Clone() {
      return new DoubleFilter(this);
    }

    /// <summary>Field number for the "rel_type" field.</summary>
    public const int RelTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.FilterRelationship relType_ = global::com.epl.protobuf.v1.FilterRelationship.Eq;
    /// <summary>
    ///
    ///relationship type of the query.
    ///EQ, LTE, GTE, LT, GT, NEQ for `value`
    ///BETWEEN or NOT_BETWEEN for `start` with `end`
    ///IN or NOT_IN for use with `set`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FilterRelationship RelType {
      get { return relType_; }
      set {
        relType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    /// <summary>
    ///
    ///Singular double value that, combined with rel_type, allows you to search for floats that relate to this `value`.
    ///`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
    ///you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return dataCase_ == DataOneofCase.Value ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    /// <summary>
    ///
    ///For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
    ///`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `end` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Start {
      get { return dataCase_ == DataOneofCase.Start ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Start;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private double end_;
    /// <summary>
    ///
    ///For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    ///`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `start` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "sort_direction" field.</summary>
    public const int SortDirectionFieldNumber = 5;
    private global::com.epl.protobuf.v1.SortDirection sortDirection_ = global::com.epl.protobuf.v1.SortDirection.NotSorted;
    /// <summary>
    ///
    ///sort direction for the return values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.SortDirection SortDirection {
      get { return sortDirection_; }
      set {
        sortDirection_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_set_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> set_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///
    ///'IN' or 'NOT IN' sql operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Set {
      get { return set_; }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Value = 1,
      Start = 3,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelType != other.RelType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Start, other.Start)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(End, other.End)) return false;
      if (SortDirection != other.SortDirection) return false;
      if(!set_.Equals(other.set_)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) hash ^= RelType.GetHashCode();
      if (dataCase_ == DataOneofCase.Value) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (dataCase_ == DataOneofCase.Start) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Start);
      if (End != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(End);
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) hash ^= SortDirection.GetHashCode();
      hash ^= set_.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(25);
        output.WriteDouble(Start);
      }
      if (End != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(25);
        output.WriteDouble(Start);
      }
      if (End != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Value) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.Start) {
        size += 1 + 8;
      }
      if (End != 0D) {
        size += 1 + 8;
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortDirection);
      }
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleFilter other) {
      if (other == null) {
        return;
      }
      if (other.RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        RelType = other.RelType;
      }
      if (other.End != 0D) {
        End = other.End;
      }
      if (other.SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        SortDirection = other.SortDirection;
      }
      set_.Add(other.set_);
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 25: {
            Start = input.ReadDouble();
            break;
          }
          case 33: {
            End = input.ReadDouble();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 49: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 25: {
            Start = input.ReadDouble();
            break;
          }
          case 33: {
            End = input.ReadDouble();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 49: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimestampFilter : pb::IMessage<TimestampFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampFilter> _parser = new pb::MessageParser<TimestampFilter>(() => new TimestampFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimestampFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.QueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampFilter(TimestampFilter other) : this() {
      relType_ = other.relType_;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      sortDirection_ = other.sortDirection_;
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value.Clone();
          break;
        case DataOneofCase.Start:
          Start = other.Start.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampFilter Clone() {
      return new TimestampFilter(this);
    }

    /// <summary>Field number for the "rel_type" field.</summary>
    public const int RelTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.FilterRelationship relType_ = global::com.epl.protobuf.v1.FilterRelationship.Eq;
    /// <summary>
    ///
    ///relationship type of the query.
    ///EQ, LTE, GTE, LT, GT, NEQ for `value`
    ///BETWEEN or NOT_BETWEEN for `start` with `end`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FilterRelationship RelType {
      get { return relType_; }
      set {
        relType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    /// <summary>
    ///
    ///Singular Timestamp value that, combined with rel_type, allows you to search for floats that relate to this `value`.
    ///`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
    ///you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Value {
      get { return dataCase_ == DataOneofCase.Value ? (global::Google.Protobuf.WellKnownTypes.Timestamp) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    /// <summary>
    ///
    ///For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
    ///`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `end` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return dataCase_ == DataOneofCase.Start ? (global::Google.Protobuf.WellKnownTypes.Timestamp) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Start;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    /// <summary>
    ///
    ///For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    ///`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `start` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "sort_direction" field.</summary>
    public const int SortDirectionFieldNumber = 5;
    private global::com.epl.protobuf.v1.SortDirection sortDirection_ = global::com.epl.protobuf.v1.SortDirection.NotSorted;
    /// <summary>
    ///
    ///sort direction for the return values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.SortDirection SortDirection {
      get { return sortDirection_; }
      set {
        sortDirection_ = value;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Value = 1,
      Start = 3,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimestampFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimestampFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelType != other.RelType) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      if (SortDirection != other.SortDirection) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) hash ^= RelType.GetHashCode();
      if (dataCase_ == DataOneofCase.Value) hash ^= Value.GetHashCode();
      if (dataCase_ == DataOneofCase.Start) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) hash ^= SortDirection.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(26);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(26);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (dataCase_ == DataOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimestampFilter other) {
      if (other == null) {
        return;
      }
      if (other.RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        RelType = other.RelType;
      }
      if (other.end_ != null) {
        if (end_ == null) {
          End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
      if (other.SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        SortDirection = other.SortDirection;
      }
      switch (other.DataCase) {
        case DataOneofCase.Value:
          if (Value == null) {
            Value = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Value.MergeFrom(other.Value);
          break;
        case DataOneofCase.Start:
          if (Start == null) {
            Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Start.MergeFrom(other.Start);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (dataCase_ == DataOneofCase.Value) {
              subBuilder.MergeFrom(Value);
            }
            input.ReadMessage(subBuilder);
            Value = subBuilder;
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (dataCase_ == DataOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 34: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (dataCase_ == DataOneofCase.Value) {
              subBuilder.MergeFrom(Value);
            }
            input.ReadMessage(subBuilder);
            Value = subBuilder;
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (dataCase_ == DataOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 34: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UInt32Filter : pb::IMessage<UInt32Filter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt32Filter> _parser = new pb::MessageParser<UInt32Filter>(() => new UInt32Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UInt32Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.QueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UInt32Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UInt32Filter(UInt32Filter other) : this() {
      relType_ = other.relType_;
      end_ = other.end_;
      sortDirection_ = other.sortDirection_;
      set_ = other.set_.Clone();
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UInt32Filter Clone() {
      return new UInt32Filter(this);
    }

    /// <summary>Field number for the "rel_type" field.</summary>
    public const int RelTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.FilterRelationship relType_ = global::com.epl.protobuf.v1.FilterRelationship.Eq;
    /// <summary>
    ///
    ///relationship type of the query.
    ///EQ, LTE, GTE, LT, GT, NEQ for `value`
    ///BETWEEN or NOT_BETWEEN for `start` with `end`
    ///IN or NOT_IN for use with `set`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FilterRelationship RelType {
      get { return relType_; }
      set {
        relType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    /// <summary>
    ///
    ///Singular unint32 value that, combined with rel_type, allows you to search for floats that relate to this `value`.
    ///`value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
    ///you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return dataCase_ == DataOneofCase.Value ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    /// <summary>
    ///
    ///For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
    ///`start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `end` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Start {
      get { return dataCase_ == DataOneofCase.Start ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Start;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private uint end_;
    /// <summary>
    ///
    ///For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    ///`end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    ///by a `start` value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "sort_direction" field.</summary>
    public const int SortDirectionFieldNumber = 5;
    private global::com.epl.protobuf.v1.SortDirection sortDirection_ = global::com.epl.protobuf.v1.SortDirection.NotSorted;
    /// <summary>
    ///
    ///sort direction for the return values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.SortDirection SortDirection {
      get { return sortDirection_; }
      set {
        sortDirection_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_set_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> set_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///
    ///'IN' or 'NOT IN' sql operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Set {
      get { return set_; }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Value = 1,
      Start = 3,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UInt32Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UInt32Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RelType != other.RelType) return false;
      if (Value != other.Value) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (SortDirection != other.SortDirection) return false;
      if(!set_.Equals(other.set_)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) hash ^= RelType.GetHashCode();
      if (dataCase_ == DataOneofCase.Value) hash ^= Value.GetHashCode();
      if (dataCase_ == DataOneofCase.Start) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) hash ^= SortDirection.GetHashCode();
      hash ^= set_.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(24);
        output.WriteUInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataCase_ == DataOneofCase.Value) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Start) {
        output.WriteRawTag(24);
        output.WriteUInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortDirection);
      }
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelType);
      }
      if (dataCase_ == DataOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (dataCase_ == DataOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(End);
      }
      if (SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortDirection);
      }
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UInt32Filter other) {
      if (other == null) {
        return;
      }
      if (other.RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        RelType = other.RelType;
      }
      if (other.End != 0) {
        End = other.End;
      }
      if (other.SortDirection != global::com.epl.protobuf.v1.SortDirection.NotSorted) {
        SortDirection = other.SortDirection;
      }
      set_.Add(other.set_);
      switch (other.DataCase) {
        case DataOneofCase.Value:
          Value = other.Value;
          break;
        case DataOneofCase.Start:
          Start = other.Start;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 24: {
            Start = input.ReadUInt32();
            break;
          }
          case 32: {
            End = input.ReadUInt32();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 24: {
            Start = input.ReadUInt32();
            break;
          }
          case 32: {
            End = input.ReadUInt32();
            break;
          }
          case 40: {
            SortDirection = (global::com.epl.protobuf.v1.SortDirection) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StringFilter : pb::IMessage<StringFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringFilter> _parser = new pb::MessageParser<StringFilter>(() => new StringFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.epl.protobuf.v1.QueryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFilter(StringFilter other) : this() {
      value_ = other.value_;
      relType_ = other.relType_;
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringFilter Clone() {
      return new StringFilter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    ///
    ///for use with EQ, NEQ, LIKE and NOT_LIKE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rel_type" field.</summary>
    public const int RelTypeFieldNumber = 2;
    private global::com.epl.protobuf.v1.FilterRelationship relType_ = global::com.epl.protobuf.v1.FilterRelationship.Eq;
    /// <summary>
    ///
    ///relationship type of the query.
    ///EQ, NEQ for `value`
    ///IN or NOT_IN for use with `set`
    ///LIKE or NOT_LIKE test if the string in `value` matches or does not match the supplied pattern
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.epl.protobuf.v1.FilterRelationship RelType {
      get { return relType_; }
      set {
        relType_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_set_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> set_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///
    ///For use with 'IN' or 'NOT IN' sql operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (RelType != other.RelType) return false;
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) hash ^= RelType.GetHashCode();
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RelType);
      }
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelType);
      }
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringFilter other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.RelType != global::com.epl.protobuf.v1.FilterRelationship.Eq) {
        RelType = other.RelType;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 50: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 16: {
            RelType = (global::com.epl.protobuf.v1.FilterRelationship) input.ReadEnum();
            break;
          }
          case 50: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
