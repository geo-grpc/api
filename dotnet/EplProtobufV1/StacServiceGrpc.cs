// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: epl/protobuf/v1/stac_service.proto
// </auto-generated>
// Original file comments:
//
// Copyright 2017-2019 Echo Park Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// For additional information, contact:
//
// email: info@echoparklabs.io
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace com.epl.protobuf.v1 {
  /// <summary>
  ///
  ///gRPC Interfaces for working with stac metadata
  /// </summary>
  public static partial class StacService
  {
    static readonly string __ServiceName = "epl.protobuf.v1.StacService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::com.epl.protobuf.v1.StacRequest> __Marshaller_epl_protobuf_v1_StacRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.epl.protobuf.v1.StacRequest.Parser));
    static readonly grpc::Marshaller<global::com.epl.protobuf.v1.StacItem> __Marshaller_epl_protobuf_v1_StacItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.epl.protobuf.v1.StacItem.Parser));
    static readonly grpc::Marshaller<global::com.epl.protobuf.v1.CollectionRequest> __Marshaller_epl_protobuf_v1_CollectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.epl.protobuf.v1.CollectionRequest.Parser));
    static readonly grpc::Marshaller<global::com.epl.protobuf.v1.Collection> __Marshaller_epl_protobuf_v1_Collection = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.epl.protobuf.v1.Collection.Parser));
    static readonly grpc::Marshaller<global::com.epl.protobuf.v1.StacDbResponse> __Marshaller_epl_protobuf_v1_StacDbResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::com.epl.protobuf.v1.StacDbResponse.Parser));

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem> __Method_SearchItems = new grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchItems",
        __Marshaller_epl_protobuf_v1_StacRequest,
        __Marshaller_epl_protobuf_v1_StacItem);

    static readonly grpc::Method<global::com.epl.protobuf.v1.CollectionRequest, global::com.epl.protobuf.v1.Collection> __Method_SearchCollections = new grpc::Method<global::com.epl.protobuf.v1.CollectionRequest, global::com.epl.protobuf.v1.Collection>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchCollections",
        __Marshaller_epl_protobuf_v1_CollectionRequest,
        __Marshaller_epl_protobuf_v1_Collection);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> __Method_InsertItems = new grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "InsertItems",
        __Marshaller_epl_protobuf_v1_StacItem,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> __Method_UpdateItems = new grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "UpdateItems",
        __Marshaller_epl_protobuf_v1_StacItem,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacDbResponse> __Method_CountItems = new grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CountItems",
        __Marshaller_epl_protobuf_v1_StacRequest,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> __Method_DeleteOneItem = new grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOneItem",
        __Marshaller_epl_protobuf_v1_StacItem,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem> __Method_SearchOneItem = new grpc::Method<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchOneItem",
        __Marshaller_epl_protobuf_v1_StacRequest,
        __Marshaller_epl_protobuf_v1_StacItem);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> __Method_InsertOneItem = new grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOneItem",
        __Marshaller_epl_protobuf_v1_StacItem,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.Collection, global::com.epl.protobuf.v1.StacDbResponse> __Method_InsertOneCollection = new grpc::Method<global::com.epl.protobuf.v1.Collection, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOneCollection",
        __Marshaller_epl_protobuf_v1_Collection,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    static readonly grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> __Method_UpdateOneItem = new grpc::Method<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOneItem",
        __Marshaller_epl_protobuf_v1_StacItem,
        __Marshaller_epl_protobuf_v1_StacDbResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::com.epl.protobuf.v1.StacServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StacService</summary>
    [grpc::BindServiceMethod(typeof(StacService), "BindService")]
    public abstract partial class StacServiceBase
    {
      /// <summary>
      ///
      ///using a search request, stream all the results that match the search filter
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchItems(global::com.epl.protobuf.v1.StacRequest request, grpc::IServerStreamWriter<global::com.epl.protobuf.v1.StacItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchCollections(global::com.epl.protobuf.v1.CollectionRequest request, grpc::IServerStreamWriter<global::com.epl.protobuf.v1.Collection> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///insert a stream of items into the STAC service
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task InsertItems(grpc::IAsyncStreamReader<global::com.epl.protobuf.v1.StacItem> requestStream, grpc::IServerStreamWriter<global::com.epl.protobuf.v1.StacDbResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///update a stream of items in the STAC service
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task UpdateItems(grpc::IAsyncStreamReader<global::com.epl.protobuf.v1.StacItem> requestStream, grpc::IServerStreamWriter<global::com.epl.protobuf.v1.StacDbResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///count all the items in the Stac service according to the StacRequest filter
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacDbResponse> CountItems(global::com.epl.protobuf.v1.StacRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///delete an item from the STAC service
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacDbResponse> DeleteOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///using a search request get the first item that matches the request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacItem> SearchOneItem(global::com.epl.protobuf.v1.StacRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacDbResponse> InsertOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacDbResponse> InsertOneCollection(global::com.epl.protobuf.v1.Collection request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///Update one item in the STAC service
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::com.epl.protobuf.v1.StacDbResponse> UpdateOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StacService</summary>
    public partial class StacServiceClient : grpc::ClientBase<StacServiceClient>
    {
      /// <summary>Creates a new client for StacService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StacServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StacService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StacServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StacServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StacServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///using a search request, stream all the results that match the search filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::com.epl.protobuf.v1.StacItem> SearchItems(global::com.epl.protobuf.v1.StacRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///using a search request, stream all the results that match the search filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::com.epl.protobuf.v1.StacItem> SearchItems(global::com.epl.protobuf.v1.StacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchItems, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::com.epl.protobuf.v1.Collection> SearchCollections(global::com.epl.protobuf.v1.CollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchCollections(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::com.epl.protobuf.v1.Collection> SearchCollections(global::com.epl.protobuf.v1.CollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchCollections, null, options, request);
      }
      /// <summary>
      ///
      ///insert a stream of items into the STAC service
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> InsertItems(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertItems(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///insert a stream of items into the STAC service
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> InsertItems(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_InsertItems, null, options);
      }
      /// <summary>
      ///
      ///update a stream of items in the STAC service
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> UpdateItems(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateItems(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///update a stream of items in the STAC service
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse> UpdateItems(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_UpdateItems, null, options);
      }
      /// <summary>
      ///
      ///count all the items in the Stac service according to the StacRequest filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse CountItems(global::com.epl.protobuf.v1.StacRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CountItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///count all the items in the Stac service according to the StacRequest filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse CountItems(global::com.epl.protobuf.v1.StacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CountItems, null, options, request);
      }
      /// <summary>
      ///
      ///count all the items in the Stac service according to the StacRequest filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> CountItemsAsync(global::com.epl.protobuf.v1.StacRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CountItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///count all the items in the Stac service according to the StacRequest filter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> CountItemsAsync(global::com.epl.protobuf.v1.StacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CountItems, null, options, request);
      }
      /// <summary>
      ///
      ///delete an item from the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse DeleteOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOneItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///delete an item from the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse DeleteOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///delete an item from the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> DeleteOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOneItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///delete an item from the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> DeleteOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///using a search request get the first item that matches the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacItem SearchOneItem(global::com.epl.protobuf.v1.StacRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchOneItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///using a search request get the first item that matches the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacItem SearchOneItem(global::com.epl.protobuf.v1.StacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///using a search request get the first item that matches the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacItem> SearchOneItemAsync(global::com.epl.protobuf.v1.StacRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchOneItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///using a search request get the first item that matches the request
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacItem> SearchOneItemAsync(global::com.epl.protobuf.v1.StacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse InsertOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOneItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse InsertOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> InsertOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOneItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> InsertOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse InsertOneCollection(global::com.epl.protobuf.v1.Collection request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOneCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse InsertOneCollection(global::com.epl.protobuf.v1.Collection request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOneCollection, null, options, request);
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> InsertOneCollectionAsync(global::com.epl.protobuf.v1.Collection request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOneCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Insert one item into the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> InsertOneCollectionAsync(global::com.epl.protobuf.v1.Collection request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOneCollection, null, options, request);
      }
      /// <summary>
      ///
      ///Update one item in the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse UpdateOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOneItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Update one item in the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::com.epl.protobuf.v1.StacDbResponse UpdateOneItem(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOneItem, null, options, request);
      }
      /// <summary>
      ///
      ///Update one item in the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> UpdateOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOneItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///Update one item in the STAC service
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::com.epl.protobuf.v1.StacDbResponse> UpdateOneItemAsync(global::com.epl.protobuf.v1.StacItem request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOneItem, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StacServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StacServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StacServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SearchItems, serviceImpl.SearchItems)
          .AddMethod(__Method_SearchCollections, serviceImpl.SearchCollections)
          .AddMethod(__Method_InsertItems, serviceImpl.InsertItems)
          .AddMethod(__Method_UpdateItems, serviceImpl.UpdateItems)
          .AddMethod(__Method_CountItems, serviceImpl.CountItems)
          .AddMethod(__Method_DeleteOneItem, serviceImpl.DeleteOneItem)
          .AddMethod(__Method_SearchOneItem, serviceImpl.SearchOneItem)
          .AddMethod(__Method_InsertOneItem, serviceImpl.InsertOneItem)
          .AddMethod(__Method_InsertOneCollection, serviceImpl.InsertOneCollection)
          .AddMethod(__Method_UpdateOneItem, serviceImpl.UpdateOneItem).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StacServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SearchItems, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem>(serviceImpl.SearchItems));
      serviceBinder.AddMethod(__Method_SearchCollections, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::com.epl.protobuf.v1.CollectionRequest, global::com.epl.protobuf.v1.Collection>(serviceImpl.SearchCollections));
      serviceBinder.AddMethod(__Method_InsertItems, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.InsertItems));
      serviceBinder.AddMethod(__Method_UpdateItems, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.UpdateItems));
      serviceBinder.AddMethod(__Method_CountItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.CountItems));
      serviceBinder.AddMethod(__Method_DeleteOneItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.DeleteOneItem));
      serviceBinder.AddMethod(__Method_SearchOneItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.StacRequest, global::com.epl.protobuf.v1.StacItem>(serviceImpl.SearchOneItem));
      serviceBinder.AddMethod(__Method_InsertOneItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.InsertOneItem));
      serviceBinder.AddMethod(__Method_InsertOneCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.Collection, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.InsertOneCollection));
      serviceBinder.AddMethod(__Method_UpdateOneItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::com.epl.protobuf.v1.StacItem, global::com.epl.protobuf.v1.StacDbResponse>(serviceImpl.UpdateOneItem));
    }

  }
}
#endregion
