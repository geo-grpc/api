apply plugin: 'java'
apply plugin: 'com.google.protobuf'
// Provide convenience executables for trying out the examples.
apply plugin: 'application'
// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.28.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.11.0'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-core:${grpcVersion}"

    compile "io.fabric8:kubernetes-client:2.0.5"
    compile 'javax.annotation:javax.annotation-api:1.3.2'

    compile files('/usr/local/lib/proj.jar')
    compile project(':epl-geometry-api')
    compile project(':epl-geometry-api-ex')
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.6'

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    // https://github.com/grpc/grpc-java/issues/3633#issuecomment-340553225
    compile 'javax.annotation:javax.annotation-api:1.3.2'

    testCompile group: 'org.json', name: 'json', version:'20170516'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}




idea {
    module {
    // Not using generatedSourceDirs because of
    // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/protobuf");
  }
}



startScripts.enabled = false

// help with defaultJvmOpts
//https://docs.gradle.org/current/dsl/org.gradle.jvm.application.tasks.CreateStartScripts.html
task geometryOperatorsServer(type: CreateStartScripts) {
    mainClassName = 'com.epl.protobuf.v1.GeometryServer'
    applicationName = 'geometry-operators-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts = ['-Djava.library.path=/usr/local/lib/']
}

task geometryOperatorsClient(type: CreateStartScripts) {
    mainClassName = 'com.epl.protobuf.v1.GeometryServiceClient'
    applicationName = 'geometry-operators-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}


applicationDistribution.into('bin') {
    from(geometryOperatorsServer)
    from(geometryOperatorsClient)
    fileMode = 0755
}

tasks.withType(Test) {
    systemProperty "java.library.path", "/usr/local/lib/"
}


//task localAPICheck(type:Exec) {
//    workingDir './'
//
//    //on windows:
//    commandLine 'cmd', '/c', 'stop.bat'
//
//    //on linux
//    commandLine './local_api_check.sh'
//
//    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method stopTomcat.output() can be used to obtain the output:
//    ext.output = {
//        return standardOutput.toString()
//    }
//}
//
//test.finalizedBy(localAPICheck)
