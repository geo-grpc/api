/*
Copyright 2017-2019 Echo Park Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For additional information, contact:

email: info@echoparklabs.io
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.epl.protobuf.v1";
option java_outer_classname = "StacProto";
option objc_class_prefix = "STPB";
option go_package = "github.com/geo-grpc/api/golang/epl/protobuf/v1";

package epl.protobuf.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

import "epl/protobuf/v1/geometry.proto";
import "epl/protobuf/v1/query.proto";

enum AssetType {
    UNKNOWN_ASSET = 0;
    JPEG = 1;

    GEOTIFF = 2; // geotiff https://www.gdal.org/frmt_gtiff.html
    LERC = 3;// Limited Error Raster Compression
    MRF = 4; // metadata raster file https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-metadata-file-mrf
    MRF_IDX = 5; // metadata raster file index https://github.com/nasa-gibs/mrf/blob/master/spec/mrf_spec.md#mrf-index-file-idx
    MRF_XML = 6;
    CO_GEOTIFF = 7; // cloud optimized geotiff https://www.cogeo.org/
    RAW = 8; // Generic raw data
    THUMBNAIL = 9; // thumbnail. could be jpg or png
    TIFF = 10;
    JPEG_2000 = 11;
    XML = 12;
    TXT = 13;
    PNG = 14;
    OVERVIEW = 15; // GDAL overview file https://gdal.org/programs/gdaladdo.html
    JSON = 16;
    HTML = 17;
    WEBP = 18;
}

enum CloudPlatform {
    UNKNOWN_CLOUD_PLATFORM = 0;
    AWS = 1; // Amazon Web Services
    GCP = 2; // Google Cloud Platform
    AZURE = 3; // Microsoft's Azure
    IBM = 4; // IBM
}

enum Platform {
    UNKNOWN_PLATFORM = 0;
    LANDSAT_1 = 2;
    LANDSAT_2 = 4;
    LANDSAT_3 = 8;
    LANDSAT_123 = 14;
    LANDSAT_4 = 16;
    LANDSAT_5 = 32;
    LANDSAT_45 = 48;
    LANDSAT_7 = 64;
    LANDSAT_8 = 128;

    // near space labs platform
    SWIFT_2 = 256;
}

enum Instrument {
    UNKNOWN_INSTRUMENT = 0;
    OLI = 2;
    TIRS = 4;
    OLI_TIRS = 6;

    // near space labs instrument 1
    POM_1 = 8;

    TM = 16;
    ETM = 32;
    MSS = 64;

    // near space labs instrument 2
    POM_2 = 128;
}

enum Constellation {
    UNKNOWN_CONSTELLATION = 0;
}

enum Mission {
    UNKNOWN_MISSION = 0;
    LANDSAT = 2;
    NAIP = 4;
    // spanish aerial dataset
    PNOA = 8;
    // near space labs dataset
    SWIFT = 16;
}

message Collection {
    // REQUIRED. The STAC version the Collection implements. STAC versions
    // can be mixed, but please keep the recommended best practices in mind.
    string stac_version = 1;

    // A list of extension identifiers the Collection implements.
    reserved 2;

    // REQUIRED. Identifier for the collection that is unique across the provider.
    string id = 3;

    // A short descriptive one-line title for the collection.
    string title = 4;

    // REQUIRED. Detailed multi-line description to fully explain the collection. CommonMark 0.29 syntax MAY be used for rich text representation.
    string description = 5;

    // List of keywords describing the collection.
    repeated string keywords = 6;

    // REQUIRED. Collection's license(s), either a SPDX License identifier, various if multiple licenses apply or proprietary for all other cases.
    string license = 7;

    // A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.
    repeated Provider providers = 8;

    // REQUIRED. Spatial and temporal extents.
    Extent extent = 9;

    // A map of property summaries, either a set of values or statistics such as a range.
    map<string, Stats> summaries = 10;

    // REQUIRED. A list of references to other documents.
    reserved 11;
}

message CollectionRequest {
    string id = 1;
    oneof spatial {
        epl.protobuf.v1.EnvelopeData bbox = 2;
        epl.protobuf.v1.GeometryData intersects = 3;
    }
}

message Stats {

}

// The object describes the spatio-temporal extents of the Collection. Both spatial and temporal extents are required to be specified.
message Extent {
    // REQUIRED. Potential spatial extent covered by the collection.
    repeated epl.protobuf.v1.EnvelopeData spatial = 1;
    // REQUIRED. Potential temporal extent covered by the collection.
    repeated Interval temporal = 2;
}

// https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md#temporal-extent-object
// The object describes the temporal extents of the Collection.
message Interval {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

// The object provides information about a provider. A provider is any of the organizations that captures or processes the content of the collection and therefore influences the data offered by this collection. May also include information about the final storage provider hosting the data.
message Provider {
    // REQUIRED. The name of the organization or the individual.
    string name = 1;

    // Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information. CommonMark 0.29 syntax MAY be used for rich text representation.
    string description = 2;

    // Roles of the provider. Any of licensor, producer, processor or host.
    repeated string roles = 3;

    // Homepage on which the provider describes the dataset and publishes contact information.
    string url = 4;
}

/**
 * Spatio-Temporal Asset Catalog Item. This data item has a spatial and temporal extent. It has a unique identifier
 * downloadable assets. It may have an extension with details beyond the spatial and temporal extents. It may have
 * additional properties in the properties field
 */
message StacItem {
    // Provider identifier. As most geospatial assets are already defined by some identification scheme by the data
    // provider it is recommended to simply use that ID. Data providers are advised to include sufficient information
    // to make their IDs globally unique, including things like unique satellite IDs.
    string id = 1;
    // (optional) A human readable title describing the item.
    string title = 2;
    // (optional) The id of the STAC Collection this Item references to (see collection relation type below). This
    // field is required if such a relation type is present. This field provides an easy way for a user to search for
    // any Items that belong in a specified Collection.
    string collection = 3;

    // the properties of an item that are not defined within the STAC specification. Requires marshalling and
    // un-marshalling https://developers.google.com/protocol-buffers/docs/proto3#any
    google.protobuf.Any properties = 4;

    // Dictionary of asset objects that can be downloaded, each with a unique key. Some pre-defined keys are listed
    // in the chapter 'Asset types'.
    map<string, Asset> assets = 5;

    // the spatial shape of the item. must have a spatial reference defined.
    epl.protobuf.v1.GeometryData geometry = 6;
    // the bounding box of the spatial shape of the item. must have a spatial reference defined.
    epl.protobuf.v1.EnvelopeData bbox = 7;

    oneof temporal_deprecated {
        // deprecated
        google.protobuf.Timestamp datetime = 8;
        // deprecated
        google.protobuf.Timestamp start_datetime = 10;
    }

    oneof temporal {
        // timestamp at which data was observed (optional if datetime set)
        google.protobuf.Timestamp observed = 9;
        // start timestamp for a period of observation
        google.protobuf.Timestamp start_observation = 11;
    }
    // deprecated
    google.protobuf.Timestamp end_datetime = 12;

    // end timestamp for a period of observation
    google.protobuf.Timestamp end_observation = 13;

    // timestamp when it was created (according to STAC spec this applies to metadata only,
    // but in our case we haven't implemented the asset level created date yet, so we don't have a
    // differentiation yet between metadata creation and asset creation. used to be `processed`)
    google.protobuf.Timestamp created = 14;
    // last timestamp when STAC metadata itself was updated
    google.protobuf.Timestamp updated = 15;

    // spatial reference of the assets (if assets have different projections, those can be assigned on
    // the assets and any not defined default to this projection)
    epl.protobuf.v1.ProjectionData proj = 16;

    // platform from which the data was collected
    Platform platform_enum = 17;
    // platform from which the data was collected
    string platform = 18;
    // instrument which collected the data
    Instrument instrument_enum = 19;
    // instrument which collected the data
    string instrument = 20;
    // constellation of data collectors
    Constellation constellation_enum = 21;
    string constellation = 22;

    Mission mission_enum = 23;
    string mission = 24;
    // ground sampling distance
    google.protobuf.FloatValue gsd = 25;
    // version of JSON STAC that this protobuf attempts to match
    string stac_version = 26;

    // version of protobuf STAC
    string stac_pb_version = 27;

    // STAC
    repeated string stac_extensions = 28;

    // electro-optical data message
    Eo eo = 29;

    // view of the asset, includes all relevant angular information
    View view = 34;

    // Landsat Message
    Landsat landsat = 31;
    Mosaic mosaic = 32;
}

/**
 * message for making a request for STAC items.
 */
message StacRequest {
    // limit the number of results returned
    uint32 limit = 1;
    // the offset from which the query should start
    uint64 offset = 2;

    oneof identity {
        // if id matches, return the one matching STAC item
        string id = 3;
        // more complex id search. allows for searching by pattern or by IN or NOT_IN sets
        StringFilter id_complex = 4;
    }

    string collection = 5;

    // search by properties specified by user using a request object known by user and the Any marshalling pattern
    google.protobuf.Any properties = 6;

    oneof spatial {
        // search by the spatial extent as defined by geometry
        epl.protobuf.v1.GeometryData intersects = 7;
        // search by the spatial extent as defined by the envelope bounds
        epl.protobuf.v1.EnvelopeData bbox = 8;
        // search by a geometry request. this sends a geometry operator to a geometry service, and the returned geometry
        // is in turn used as the spatial extent
        epl.protobuf.v1.GeometryRequest geometry_request = 9;
    }

    oneof temporal {
        // search for the datetime that matched by bounds defined by the exact timestamp or a range of timestamp
        TimestampFilter datetime = 10;
        // search for the moment the data was observed by bounds defined by the exact timestamp or a range of timestamp
        TimestampFilter observed = 11;
    }

    // search for the moment the asset data was created by bounds defined by the exact timestamp or a range of timestamp
    TimestampFilter created = 12;
    // search for the moment the STAC item metadata was updated by bounds defined by the exact timestamp or a range of
    // timestamp
    TimestampFilter updated = 13;

    // spatial reference. (currently only supports epsg field)
    epl.protobuf.v1.ProjectionData proj = 14;

    // only data from the platform specified
    Platform platform_enum = 15;
    reserved 16;
    // only data from the instrument specified
    Instrument instrument_enum = 17;
    reserved 18;
    // only data from the constellation specified
    Constellation constellation_enum = 19;
    reserved 20;
    Mission mission_enum = 21;
    reserved 22;

    // data with a gsd equal to or in the range specified in gsd
    FloatFilter gsd = 23;

    // use certain electro-optical search parameters in your query
    EoRequest eo = 24;
    ViewRequest view = 25;
    LandsatRequest landsat = 26;

    MosaicRequest mosaic = 27;
}

message View {
    // Viewing angle. The angle from the sensor between nadir (straight down) and the scene center. Measured in
    // degrees (0-90).
    google.protobuf.FloatValue off_nadir = 1;

    // The incidence angle is the angle between the vertical (normal) to the intercepting surface and the line of sight
    // back to the satellite at the scene center. Measured in degrees (0-90).
    google.protobuf.FloatValue incidence_angle = 2;

    // The angle measured from the sub-sensor point (point on the ground below the platform) between the scene center
    // and true north. Measured clockwise from north in degrees (0-360).
    google.protobuf.FloatValue azimuth = 3;

    // Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun.
    // Measured clockwise in degrees (0-360).
    google.protobuf.FloatValue sun_azimuth = 4;

    // Sun elevation angle. The angle from the tangent of the scene center point to the sun. Measured from the horizon
    // in degrees (0-90).
    google.protobuf.FloatValue sun_elevation = 5;
}

message ViewRequest {
    // data with a off_nadir equal to or in the range specified in off_nadir
    FloatFilter off_nadir = 1;
    // data with a incidence equal to or in the range specified in incidence
    FloatFilter incidence_angle = 2;
    // data with a azimuth equal to or in the range specified in azimuth
    FloatFilter azimuth = 3;
    // data with a sun_azimuth equal to or in the range specified in sun_azimuth
    FloatFilter sun_azimuth = 4;
    // data with a sun_elevation equal to or in the range specified in sun_elevation
    FloatFilter sun_elevation = 5;
}

message Sat {
    enum OrbitState {
        UKNOWN_ORBIT_STATE = 0;
        ASCENDING_ORBIT = 1;
        DESCENDING_ORBIT = 2;
        GEOSTATIONARY_ORBIT = 3;
    }

    // The relative orbit number at the time of acquisition.
    google.protobuf.UInt32Value relative_orbit = 6;

    // The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
    // geosynchronous satellites
    OrbitState orbit_state = 1;
}

message SatRequest {
    // The relative orbit number at the time of acquisition.
    uint32 relative_orbit = 6;

    // The state of the orbit. Either ascending or descending for polar orbiting satellites, or geostationary for
    // geosynchronous satellites
    Sat.OrbitState orbit_state = 1;
}

/**
 * message for electro-optical details of STAC items.
 */
message Eo {
    enum Band {
        // band type not specified. default value. if used in query, any band type is acceptable
        UNKNOWN_BAND = 0;
        COASTAL = 2;
        BLUE = 4;
        GREEN = 8;
        RED = 16;
        RGB = 28;
        NIR = 32;
        // special case for landsat 1-3
        NIR_2 = 33;
        RGBIR = 60;
        SWIR_1 = 64;
        SWIR_2 = 128;
        PAN = 256;
        CIRRUS = 512;
        LWIR_1 = 1024;
        LWIR_2 = 2048;
    }
    // percent cloud cover. 0 no clouds, 100 completely covered
    google.protobuf.FloatValue cloud_cover = 1;

    // band or bands represented in data. If multiple bands, then use a bitwise operator
    Band bands = 2;
}

/**
 * sub message request for specifying electro-optical details in STAC request
 */
message EoRequest {
    // data with a cloud_cover equal to or in the range specified in cloud_cover
    FloatFilter cloud_cover = 1;
    // data that possesses the bands specified in bands
    Eo.Band bands = 2;
}

/**
 * message for an asset of a STAC item.
 */
message Asset {
    // href for downloading item
    string href = 1;
    // asset type
    string type = 2;
    // band(s) of data in asset.
    // https://github.com/radiantearth/stac-spec/blob/612ee4fb4f979c049d2416e7f5374a5301b8a277/extensions/eo/README.md
    Eo.Band eo_bands = 3;
    // enum for asset type
    AssetType asset_type = 4;

    // cloud platform enum (Google cloud, Azure, etc)
    CloudPlatform cloud_platform = 5;
    // manager of the bucket
    string bucket_manager = 6;
    // bucket region. useful when concerned about egress
    string bucket_region = 7;
    // bucket name
    string bucket = 8;
    // path to the object in the bucket
    string object_path = 9;
    // requester_pays pertains to egress cost. Some buckets are hosted with the egress costs assigned to the requester.
    // some hosts pay the regress costs for the requester.
    bool requester_pays = 10;
}

message DatetimeRange {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

/**
 * response message for insertion and updates to STAC db
 */
message StacDbResponse {
    string status = 1;
    int32 status_code = 2;
    string data_id = 3;
    uint64 count = 4;
}

/**
 * place holder for SAR
 */
message Sar {
    enum Platform {
        UNKNOWN_PLATFORM = 0;
        ENVISAT = 1;
        SENTINEL_1A = 2;
    }
    Platform platform = 1;

    enum Instrument {
        UNKNOWN_INSTRUMENT = 0;
    }
}

// https://landsat.usgs.gov/stac/landsat-extension/schema.json
message Landsat {
    enum CollectionCategory {
        UNKNOWN_COLLECTION_CATEGORY = 0;
        A1 = 1;
        A2 = 2;
        T1 = 3;
        T2 = 4;
        RT = 5;
    }
    enum WRSType {
        UKNOWN_WRS = 0;
        WRS1 = 1;
        WRS2 = 2;
    }

    enum ProcessingLevel {
        UNKNOWN_PROCESSING_LEVEL = 0;
        L1G = 1;
        L1TP = 2;
        L1T = 3;
        L1GT = 4;
        L1GS = 5;
    }
    // id of scene should be id of STAC item, but there may be a use case where someone does not want that
    string scene_id = 1;
    string product_id = 2;
    ProcessingLevel processing_level = 3;
    int32 wrs_path = 4;
    int32 wrs_row = 5;
    google.protobuf.FloatValue cloud_cover_land = 6;
    WRSType wrs_type = 7;
}

message LandsatRequest {
    string scene_id = 1;
    string product_id = 2;
    Landsat.ProcessingLevel processing_level = 3;
    int32 wrs_path = 4;
    int32 wrs_row = 5;
    FloatFilter cloud_cover_land = 6;
}

// Experimental
message Mosaic {
    // experimental name of the mosaic this item is a member of
    string name = 1;
    // experimental the quad_key of this specific item
    string quad_key = 2;
    // experimental an array of the zooms contained within the asset(s)
    repeated int32 zooms = 3;
    // deprecated
    DatetimeRange observation_range = 4;
    // experimental scene provenance. ordered list of STAC item ids that contribute to the mosaic. The 0th STAC item in provenance_ids is the front-most contributor to the mosaic, the last STAC item in bottom contributor and is likely to be partially covered by other contributing scenes
    repeated string provenance_ids = 5;
}

// Experimental
message MosaicRequest {
    // experimental mosaic to search for
    string name = 1;
    // experimental quad_key to search by
    string quad_key = 2;
}

//// Right now this isn't included in the response as it's a bit messy
//message BandDetails {
//    string name = 1;
//    string common_name = 2;
//    string description = 3;
//    google.protobuf.FloatValue gsd = 4;
//    google.protobuf.FloatValue accuracy = 5;
//    google.protobuf.FloatValue center_wavelength = 6;
//    google.protobuf.FloatValue full_width_half_max = 7;
//}