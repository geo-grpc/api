/*
Copyright 2017-2019 Echo Park Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For additional information, contact:

email: info@echoparklabs.io
*/

syntax = "proto3";

option csharp_namespace = "com.epl.protobuf.v1";
option java_multiple_files = true;
option java_package = "com.epl.protobuf.v1";
option java_outer_classname = "QueryProto";
option objc_class_prefix = "QPB";
option go_package = "github.com/geo-grpc/api/golang/epl/protobuf/v1";

package epl.protobuf.v1;

import "google/protobuf/timestamp.proto";

/*
Not currently in use
*/
enum SortDirection {
    NOT_SORTED = 0;
    DESC = 1;
    ASC = 2;
}

/*
Default Value is equals, `EQ`, so if you don't set rel_type, it is assumed you mean equals.
*/
enum FilterRelationship {
    EQ = 0; // for use with `value` field. return anything equaling the `value`
    LTE = 2; // for use with `value` field. return anything less than or equal to the `value`
    GTE = 4; // for use with `value` field. return anything greater than or equal to the `value`
    LT = 8; // for use with `value` field. return anything less than the `value`
    GT = 16; // for use with `value` field. return anything greater than the `value`
    BETWEEN = 32; // for use with `start` and `end`. return anything between `start` and `end`
    NOT_BETWEEN = 64; // for use with `start` and `end`. return anything not between `start` and `end`
    NEQ = 128; // for use with `value` field. return everything not equal to the `value1
    IN = 256; // for use with with `set` field
    NOT_IN = 512; // for use with `set` field
    LIKE = 1024; // for use with `value` and StringField
    NOT_LIKE = 2048; // for use with `value` and StringField
}

/*
Query language for float fields.
*/
message FloatFilter {
    /*
    relationship type of the query.
    EQ, LTE, GTE, LT, GT, NEQ for `value`
    BETWEEN or NOT_BETWEEN for `start` with `end`
    IN or NOT_IN for use with `set`
    */
    FilterRelationship rel_type = 2;

    oneof data {
        /*
        Singular float value that, combined with rel_type, allows you to search for floats that relate to this `value`.
        `value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
        you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
        */
        float value = 1;
        /*
        For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
        `start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
        by a `end` value
        */
        float start = 3;
    }

    /*
    For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    `end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    by a `start` value
    */
    float end = 4;
    /*
    sort direction for the return values
    */
    SortDirection sort_direction = 5;
    /*
    'IN' or 'NOT IN' sql operations
    */
    repeated float set = 6;
}

message DoubleFilter {
    /*
    relationship type of the query.
    EQ, LTE, GTE, LT, GT, NEQ for `value`
    BETWEEN or NOT_BETWEEN for `start` with `end`
    IN or NOT_IN for use with `set`
    */
    FilterRelationship rel_type = 2;
    oneof data {
        /*
        Singular double value that, combined with rel_type, allows you to search for floats that relate to this `value`.
        `value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
        you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
        */
        double value = 1;
        /*
        For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
        `start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
        by a `end` value
        */
        double start = 3;
    }

    /*
    For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    `end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    by a `start` value
    */
    double end = 4;
    /*
    sort direction for the return values
    */
    SortDirection sort_direction = 5;
    /*
    'IN' or 'NOT IN' sql operations
    */
    repeated double set = 6;
}

message TimestampFilter {
    /*
    relationship type of the query.
    EQ, LTE, GTE, LT, GT, NEQ for `value`
    BETWEEN or NOT_BETWEEN for `start` with `end`
    */
    FilterRelationship rel_type = 2;
    oneof data {
        /*
        Singular Timestamp value that, combined with rel_type, allows you to search for floats that relate to this `value`.
        `value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
        you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
        */
        google.protobuf.Timestamp value = 1;
        /*
        For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
        `start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
        by a `end` value
        */
        google.protobuf.Timestamp start = 3;
    }

    /*
    For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    `end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    by a `start` value
    */
    google.protobuf.Timestamp end = 4;
    /*
    sort direction for the return values
    */
    SortDirection sort_direction = 5;
}

message UInt32Filter {
    /*
    relationship type of the query.
    EQ, LTE, GTE, LT, GT, NEQ for `value`
    BETWEEN or NOT_BETWEEN for `start` with `end`
    IN or NOT_IN for use with `set`
    */
    FilterRelationship rel_type = 2;
    oneof data {
        /*
        Singular unint32 value that, combined with rel_type, allows you to search for floats that relate to this `value`.
        `value` field cannot be combined with BETWEEN or the NOT_BETWEEN FilterRelationship `rel_type`. That means
        you can use the EQ, LTE, GTE, LT, GT, NEQ FilterRelationship `rel_type`
        */
        uint32 value = 1;
        /*
        For searching by a range. `start` with BETWEEN searches for everything in the range from `start` to `end`
        `start` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
        by a `end` value
        */
        uint32 start = 3;
    }

    /*
    For searching by a range. `end` with BETWEEN searches for everything in the range from `start` to `end`
    `end` with NOT_BETWEEN searches for everything not in the range from `start` and `end`. must be accompanied
    by a `start` value
    */
    uint32 end = 4;
    /*
    sort direction for the return values
    */
    SortDirection sort_direction = 5;
    /*
    'IN' or 'NOT IN' sql operations
    */
    repeated uint32 set = 6;
}

message StringFilter {
    /*
    for use with EQ, NEQ, LIKE and NOT_LIKE
    */
    string value = 1;

    /*
    relationship type of the query.
    EQ, NEQ for `value`
    IN or NOT_IN for use with `set`
    LIKE or NOT_LIKE test if the string in `value` matches or does not match the supplied pattern
    */
    FilterRelationship rel_type = 2;

    /*
    For use with 'IN' or 'NOT IN' sql operations
    */
    repeated string set = 6;
}