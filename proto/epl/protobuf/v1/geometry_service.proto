/*
Copyright 2017-2020 David Raleigh

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For additional information, contact:

email: davidraleigh@gmail.com
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.epl.protobuf.v1";
option java_outer_classname = "GeometryServiceProto";
option objc_class_prefix = "GMS";
option go_package = "github.com/geo-grpc/api/golang/epl/protobuf/v1";

package epl.protobuf.v1;

import "epl/protobuf/v1/geometry.proto";

/*
 gRPC Interfaces for working with geometry operators
*/
service GeometryService {
    // Execute a single blocking geometry operation
    rpc Operate(epl.protobuf.v1.GeometryRequest) returns (epl.protobuf.v1.GeometryResponse) {}

    // stream in operator requests and get back a stream of results
    rpc OperateBiStream(stream epl.protobuf.v1.GeometryRequest) returns (stream epl.protobuf.v1.GeometryResponse) {}

    // manual flow control bi-directional stream. example
    // go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
    rpc OperateBiStreamFlow(stream epl.protobuf.v1.GeometryRequest) returns (stream epl.protobuf.v1.GeometryResponse) {}

    // Maybe a cut operation that returns a lot of different geometries? for now, this is not implemented.
    rpc OperateServerStream(epl.protobuf.v1.GeometryRequest) returns (stream epl.protobuf.v1.GeometryResponse) {}

    // Maybe something like a union operation. for now, this is not implemented.
    rpc OperateClientStream(stream epl.protobuf.v1.GeometryRequest) returns (epl.protobuf.v1.GeometryResponse) {}

    // stream in file chunks for a geometry file type and stream back results for each geometry encountered
    rpc FileOperateBiStreamFlow(stream epl.protobuf.v1.FileRequestChunk) returns (stream epl.protobuf.v1.GeometryResponse) {}
}
