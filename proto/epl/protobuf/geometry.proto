/*
Copyright 2017-2019 Echo Park Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For additional information, contact:

email: info@echoparklabs.io
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.epl.protobuf";
option java_outer_classname = "GeometryProto";
option objc_class_prefix = "GMPB";
option go_package = "github.com/geo-grpc/api/golang/epl/protobuf";

package epl.protobuf;

/**
 * Container for Geometry data, has id, encoded geometry coordinates and shape, spatial reference and envelope
 */
message GeometryData {
    // geometry id as an integer
    uint64 geometry_id = 1;
    // feature id as a string (for guids and other ids that aren't numeric)
    string feature_id = 2;

    // oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // well known text format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry
    string wkt = 3;
    // geojson format for geometry encoding, https://en.wikipedia.org/wiki/GeoJSON
    string geojson = 4;
    // well known binary format for geometry encoding, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary
    bytes wkb = 5;
    // ESRI shape binary format for geometry encoding (fastest decoding and encoding for geometry service) https://www.esri.com/library/whitepapers/pdfs/shapefile.pdf
    bytes esri_shape = 6;

    // end oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // spatial reference of geometry
    SpatialReferenceData sr = 7;

    // reserved for xy array, z array, m array, vertex attributes?
    reserved 8 to 12;

    // envelope or bounding box of geometry
    EnvelopeData envelope = 13;
    // state of the geometry topological correctness. at geometry creation, it is unknown if it is simple
    SimpleState simple = 14;
}

/**
 * the state of a geometry topological correctness
 */
enum SimpleState {
    // on creation, after projection and after generalization a geometry has state simple unknown (not know if simple or not)
    SIMPLE_UNKNOWN = 0;
    // weak simple (no self intersections, ring orientation is correct, but ring order is not)
    WEAK_SIMPLE = 1;
    // same as weak simple + OGC ring order.
    STRONG_SIMPLE = 2;
    // is_simple method has been run on the geometry and it is known to be non-simple, but the reason is unknown
    NON_SIMPLE = 3;
    // non-simple, because the structure is bad (0 size path, for example).
    STRUCTURE_FLAW = 4;
    // Non-simple, because there are degenerate segments.
    DEGENERATE_SEGMENTS = 5;
    // Non-simple, because not clustered properly, that is there are non-coincident vertices closer than tolerance.
    CLUSTERING = 6;
    // Non-simple, because not cracked properly (intersecting segments, overlaping segments)
    CRACKING = 7;
    // Non-simple, because there are crossovers (self intersections that are not cracking case).
    CROSS_OVER = 8;
    // Non-simple, because holes or exteriors have wrong orientation.
    RING_ORIENTATION = 9;
    //    /**
    //     * The geometry is simple, but not strong-simple, because exteriors
    //     * and holes are not in the correct order, and separation into sub polygons is not possible.
    //     * Geometry needs to be resimplified with the bForceTest = true to fix this.
    //     */
    //    RingOrder,
    //    /**
    //     * There is a self tangency or cross-over situation (strong simple, but not OGC simple)
    //     * Only OperatorSimplifyOGC returns this.
    //     */
    //    OGCPolylineSelfTangency,
    //    /**
    //     * There is a self tangency situation (strong simple, but not OGC simple)
    //     * Only OperatorSimplifyOGC returns this.
    //     */
    //    OGCPolygonSelfTangency,
    //    /**
    //     * Touching interioir rings make a disconnected point set from polygon interior
    //     * (strong simple, but not OGC simple).
    //     * Only OperatorSimplifyOGC returns this.
    //     */
    //    OGCDisconnectedInterior
}

/**
 * Spatial Reference system. Used with a geometry to define the reference system of the geometry's coordinates
 */
message SpatialReferenceData {
    // oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // epsg wkid (well know id), or srid (spatial reference id) of the projected or geographic coordinate system
    int32 wkid = 1;
    // proj string describing a projection or geographic coordinate system https://proj4.org/usage/projections.html
    string proj4 = 2;
    // custom projection
    Custom custom = 3;
    // well-known text string of spatial reference
    string wkt = 4;
    // esri wkid (if not yet approved by epsg)
    int32 esri_wkid = 5;

    // end oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // Projection names
    enum CSType {
        // default is Lambert Azimuthal Equal Area Projection, with x origin x_0=4321000 and y origin y_0=3210000
        LAMBERT_AZI = 0;
    }

    // Projected coordinate system that doesn't have a wkid / srid
    message Custom {
        // longitude of center of projection (central meridian)
        double lon_0 = 1;
        // latitude of center of projection (latitude of origin)
        double lat_0 = 2;

        // enum defining the type of projection
        CSType cs_type = 3;
    }
}

/**
 * Container for Envelope data (bounding box), x and y min and max and an optional spatial reference
 */
message EnvelopeData {
    // min x value
    double xmin = 1;
    // min y value
    double ymin = 2;
    // max x value
    double xmax = 3;
    // max y value
    double ymax = 4;

    // spatial reference of envelope
    SpatialReferenceData sr = 5;

    double zmin = 6;
    double zmax = 7;
}

/*
    type of geometry encodings
*/
enum Encoding {
    UNKNOWN_ENCODING = 0; // unknown type.
    WKB = 1; // well-known binary
    WKT = 2; // well-known text
    GEOJSON = 3; // geojson
    ESRI_SHAPE = 4; // esri shape binary
    ENVELOPE = 5; // @exclude deprecated
}

/*
    type of geometry operators
*/
enum OperatorType {
    UNKNOWN_OPERATOR = 0;
    PROJECT = 1; // project geometry
    EXPORT_TO_JSON = 2;
    IMPORT_FROM_JSON = 3;
    EXPORT_TO_ESRI_SHAPE = 4;
    IMPORT_FROM_ESRI_SHAPE = 5;
    UNION = 6; // union one or more geometries
    DIFFERENCE = 7; // difference two geometries
    PROXIMITY_2D = 8;
    RELATE = 9;
    EQUALS = 10;
    DISJOINT = 11;
    INTERSECTS = 12;
    WITHIN = 13;
    CONTAINS = 14;
    CROSSES = 15;
    TOUCHES = 16;
    OVERLAPS = 17;
    BUFFER = 18;
    DISTANCE = 19;
    INTERSECTION = 20;
    CLIP = 21;
    CUT = 22;
    DENSIFY_BY_LENGTH = 23;

    // DENSIFY_BY_ANGLE = 24;
    // LABEL_POINT = 25;

    GEODESIC_BUFFER = 26;
    GEODETIC_DENSIFY_BY_LENGTH = 27;

    // SHAPE_PRESERVING_DENSIFY = 28;
    // GEODETIC_LENGTH = 29;

    GEODETIC_AREA = 30;
    SIMPLIFY = 31;
    SIMPLIFY_OGC = 32;
    OFFSET = 33;
    GENERALIZE = 34;
    GENERALIZE_BY_AREA = 35;
    EXPORT_TO_WKB = 36;
    IMPORT_FROM_WKB = 37;
    EXPORT_TO_WKT = 38;
    IMPORT_FROM_WKT = 39;
    IMPORT_FROM_GEOJSON = 40;
    EXPORT_TO_GEOJSON = 41;
    SYMMETRIC_DIFFERENCE = 42;
    CONVEX_HULL = 43;
    BOUNDARY = 44;
    RANDOM_POINTS = 45;
    ENCLOSING_CIRCLE = 46;
    AFFINE_TRANSFORM = 47;
    GEODETIC_LENGTH = 48;
    GEODETIC_INVERSE = 49;
}

/**
 * response message for insertion and updates to stac db
 */
message GeometryRequest {
    // oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // geometry to be operated on
    GeometryData geometry = 1;
    // if there are two geometries to operate on, then this is the first geometry
    GeometryData left_geometry = 2;
    // the result of the geometry request is to be operated on by this request
    GeometryRequest geometry_request = 3;
    // if there are two geometries, the left geometry request is to be operated on by this request
    GeometryRequest left_geometry_request = 4;

    // end oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // if there are two geometries to operate on, then this is the second geometry
    GeometryData right_geometry = 5;
    // if there are two geometries, the right geometry request is to be operated on by this request
    GeometryRequest right_geometry_request = 6;

    // end oneof block not currently used: https://github.com/golang/protobuf/issues/283

    // (default is PROJECT) geometry operation to perform on input geometries
    OperatorType operator = 7;

    // (default is wkb) encoding, wkt, wkb, esri_shape, etc
    Encoding result_encoding = 8;

    // (optional) the spatial reference the geometric operation should take place in. If both inputs are in different spatial references, you can use this to define a common reference system for the geometric operation.
    SpatialReferenceData operation_sr = 9;

    // (optional) after the operation has been completed, project the results to a new spatial reference.
    SpatialReferenceData result_sr = 10;


    message BufferParams {
        double distance = 1;
        double max_deviation = 2;
        bool union_result = 3;
        int32 max_vertices_in_full_circle = 4;
    }

    message GeodeticBufferParams {
        double distance = 1;
        double max_deviation = 2;
        bool union_result = 3;
        int32 max_vertices_in_full_circle = 4;
    }

    message ConvexParams {
        bool merge = 1;
    }

    message RelateParams {
        string de_9im = 1;
    }

    message RandomPointsParams {
        double points_per_square_km = 1;
        int64 seed = 2;
    }

    message GeneralizeParams {
        double max_deviation = 1;
        bool remove_degenerates = 2;
    }

    message GeneralizeByAreaParams {
        double percent_reduction = 1;
        bool remove_degenerates = 2;
        int32 max_point_count = 3;
    }

    message IntersectionParams {
        int32 dimension_mask = 1;
    }

    message OffsetParams {
        enum OffsetJoinType {
            ROUND = 0;
            BEVEL = 1;
            MITER = 2;
            SQUARE =3;
        }

        double distance = 1;
        OffsetJoinType join_type = 2;
        double bevel_ratio = 3;
        double flatten_error = 4;
    }

    message CutParams {
        bool consider_touch = 1;
    }

    message ClipParams {
        EnvelopeData envelope = 1;
    }

    message DensifyParams {
        double max_length = 1;
    }

    message SimplifyParams {
        bool force = 1;
    }

    message AffineTransformParams {
        //        repeated double transform_matrix = 1; // @exclude deprecated
        reserved 1;
        bool geodetic = 2;
        double x_offset = 3;
        double y_offset = 4;
    }

    // oneof https://github.com/golang/protobuf/issues/283

    BufferParams buffer_params = 11;
    ConvexParams convex_params = 12;
    RelateParams relate_params = 13;
    RandomPointsParams random_points_params = 14;
    GeneralizeParams generalize_params = 15;
    IntersectionParams intersection_params = 16;
    OffsetParams offset_params = 17;
    CutParams cut_params = 18;
    ClipParams clip_params = 19;
    DensifyParams densify_params = 20;
    SimplifyParams simplify_params = 21;
    GeneralizeByAreaParams generalize_by_area_params = 22;
    AffineTransformParams affine_transform_params = 23;

    // end oneof https://github.com/golang/protobuf/issues/283
}

message GeodeticInverse {
    // Azimuth from the first to the second point
    double az12 = 1;
    // Azimuth from the second to the first point
    double az21 = 2;
    // Geodesic distance
    double distance = 3;
}

/**
 * response message geometry request
 */
message GeometryResponse {
    // oneof https://github.com/golang/protobuf/issues/283

    // if geometry result, then this field holds the geometry data
    GeometryData geometry = 1;
    // if a topo spatial relationship request, then this field holds the true or false result
    bool spatial_relationship = 2;
    // a measure result will be a float for area and length requests
    double measure = 3;

    map<int64, bool> relate_map = 4;

    EnvelopeData envelope = 5;

    GeodeticInverse geodetic_inverse = 6;

    // end oneof https://github.com/golang/protobuf/issues/283
}

message FileRequestChunk {
    enum FileType {
        SHAPEFILE = 0;
    }

    GeometryRequest nested_request = 1;
    Encoding result_encoding_type = 2;

    SpatialReferenceData input_sr = 3;
    SpatialReferenceData result_sr = 5;

    bytes data = 6;
    int64 size = 7;
    int64 offset = 8;
    string file_name = 9;

    bool is_last_chunk = 10;
}
