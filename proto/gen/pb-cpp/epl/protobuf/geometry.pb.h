// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_epl_2fprotobuf_2fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fgeometry_2eproto;
namespace epl {
namespace protobuf {
class EnvelopeData;
class EnvelopeDataDefaultTypeInternal;
extern EnvelopeDataDefaultTypeInternal _EnvelopeData_default_instance_;
class FileRequestChunk;
class FileRequestChunkDefaultTypeInternal;
extern FileRequestChunkDefaultTypeInternal _FileRequestChunk_default_instance_;
class GeodeticInverse;
class GeodeticInverseDefaultTypeInternal;
extern GeodeticInverseDefaultTypeInternal _GeodeticInverse_default_instance_;
class GeometryData;
class GeometryDataDefaultTypeInternal;
extern GeometryDataDefaultTypeInternal _GeometryData_default_instance_;
class GeometryRequest;
class GeometryRequestDefaultTypeInternal;
extern GeometryRequestDefaultTypeInternal _GeometryRequest_default_instance_;
class GeometryRequest_AffineTransformParams;
class GeometryRequest_AffineTransformParamsDefaultTypeInternal;
extern GeometryRequest_AffineTransformParamsDefaultTypeInternal _GeometryRequest_AffineTransformParams_default_instance_;
class GeometryRequest_BufferParams;
class GeometryRequest_BufferParamsDefaultTypeInternal;
extern GeometryRequest_BufferParamsDefaultTypeInternal _GeometryRequest_BufferParams_default_instance_;
class GeometryRequest_ClipParams;
class GeometryRequest_ClipParamsDefaultTypeInternal;
extern GeometryRequest_ClipParamsDefaultTypeInternal _GeometryRequest_ClipParams_default_instance_;
class GeometryRequest_ConvexParams;
class GeometryRequest_ConvexParamsDefaultTypeInternal;
extern GeometryRequest_ConvexParamsDefaultTypeInternal _GeometryRequest_ConvexParams_default_instance_;
class GeometryRequest_CutParams;
class GeometryRequest_CutParamsDefaultTypeInternal;
extern GeometryRequest_CutParamsDefaultTypeInternal _GeometryRequest_CutParams_default_instance_;
class GeometryRequest_DensifyParams;
class GeometryRequest_DensifyParamsDefaultTypeInternal;
extern GeometryRequest_DensifyParamsDefaultTypeInternal _GeometryRequest_DensifyParams_default_instance_;
class GeometryRequest_GeneralizeByAreaParams;
class GeometryRequest_GeneralizeByAreaParamsDefaultTypeInternal;
extern GeometryRequest_GeneralizeByAreaParamsDefaultTypeInternal _GeometryRequest_GeneralizeByAreaParams_default_instance_;
class GeometryRequest_GeneralizeParams;
class GeometryRequest_GeneralizeParamsDefaultTypeInternal;
extern GeometryRequest_GeneralizeParamsDefaultTypeInternal _GeometryRequest_GeneralizeParams_default_instance_;
class GeometryRequest_GeodeticBufferParams;
class GeometryRequest_GeodeticBufferParamsDefaultTypeInternal;
extern GeometryRequest_GeodeticBufferParamsDefaultTypeInternal _GeometryRequest_GeodeticBufferParams_default_instance_;
class GeometryRequest_IntersectionParams;
class GeometryRequest_IntersectionParamsDefaultTypeInternal;
extern GeometryRequest_IntersectionParamsDefaultTypeInternal _GeometryRequest_IntersectionParams_default_instance_;
class GeometryRequest_OffsetParams;
class GeometryRequest_OffsetParamsDefaultTypeInternal;
extern GeometryRequest_OffsetParamsDefaultTypeInternal _GeometryRequest_OffsetParams_default_instance_;
class GeometryRequest_RandomPointsParams;
class GeometryRequest_RandomPointsParamsDefaultTypeInternal;
extern GeometryRequest_RandomPointsParamsDefaultTypeInternal _GeometryRequest_RandomPointsParams_default_instance_;
class GeometryRequest_RelateParams;
class GeometryRequest_RelateParamsDefaultTypeInternal;
extern GeometryRequest_RelateParamsDefaultTypeInternal _GeometryRequest_RelateParams_default_instance_;
class GeometryRequest_SimplifyParams;
class GeometryRequest_SimplifyParamsDefaultTypeInternal;
extern GeometryRequest_SimplifyParamsDefaultTypeInternal _GeometryRequest_SimplifyParams_default_instance_;
class GeometryResponse;
class GeometryResponseDefaultTypeInternal;
extern GeometryResponseDefaultTypeInternal _GeometryResponse_default_instance_;
class GeometryResponse_RelateMapEntry_DoNotUse;
class GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal;
extern GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal _GeometryResponse_RelateMapEntry_DoNotUse_default_instance_;
class SpatialReferenceData;
class SpatialReferenceDataDefaultTypeInternal;
extern SpatialReferenceDataDefaultTypeInternal _SpatialReferenceData_default_instance_;
class SpatialReferenceData_Custom;
class SpatialReferenceData_CustomDefaultTypeInternal;
extern SpatialReferenceData_CustomDefaultTypeInternal _SpatialReferenceData_Custom_default_instance_;
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> ::epl::protobuf::EnvelopeData* Arena::CreateMaybeMessage<::epl::protobuf::EnvelopeData>(Arena*);
template<> ::epl::protobuf::FileRequestChunk* Arena::CreateMaybeMessage<::epl::protobuf::FileRequestChunk>(Arena*);
template<> ::epl::protobuf::GeodeticInverse* Arena::CreateMaybeMessage<::epl::protobuf::GeodeticInverse>(Arena*);
template<> ::epl::protobuf::GeometryData* Arena::CreateMaybeMessage<::epl::protobuf::GeometryData>(Arena*);
template<> ::epl::protobuf::GeometryRequest* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest>(Arena*);
template<> ::epl::protobuf::GeometryRequest_AffineTransformParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_AffineTransformParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_BufferParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_BufferParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_ClipParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_ClipParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_ConvexParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_ConvexParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_CutParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_CutParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_DensifyParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_DensifyParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_GeneralizeByAreaParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_GeneralizeParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_GeneralizeParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_GeodeticBufferParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_GeodeticBufferParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_IntersectionParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_IntersectionParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_OffsetParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_OffsetParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_RandomPointsParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_RandomPointsParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_RelateParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_RelateParams>(Arena*);
template<> ::epl::protobuf::GeometryRequest_SimplifyParams* Arena::CreateMaybeMessage<::epl::protobuf::GeometryRequest_SimplifyParams>(Arena*);
template<> ::epl::protobuf::GeometryResponse* Arena::CreateMaybeMessage<::epl::protobuf::GeometryResponse>(Arena*);
template<> ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse* Arena::CreateMaybeMessage<::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse>(Arena*);
template<> ::epl::protobuf::SpatialReferenceData* Arena::CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(Arena*);
template<> ::epl::protobuf::SpatialReferenceData_Custom* Arena::CreateMaybeMessage<::epl::protobuf::SpatialReferenceData_Custom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace epl {
namespace protobuf {

enum SpatialReferenceData_CSType : int {
  SpatialReferenceData_CSType_LAMBERT_AZI = 0,
  SpatialReferenceData_CSType_SpatialReferenceData_CSType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpatialReferenceData_CSType_SpatialReferenceData_CSType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpatialReferenceData_CSType_IsValid(int value);
constexpr SpatialReferenceData_CSType SpatialReferenceData_CSType_CSType_MIN = SpatialReferenceData_CSType_LAMBERT_AZI;
constexpr SpatialReferenceData_CSType SpatialReferenceData_CSType_CSType_MAX = SpatialReferenceData_CSType_LAMBERT_AZI;
constexpr int SpatialReferenceData_CSType_CSType_ARRAYSIZE = SpatialReferenceData_CSType_CSType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpatialReferenceData_CSType_descriptor();
template<typename T>
inline const std::string& SpatialReferenceData_CSType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpatialReferenceData_CSType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpatialReferenceData_CSType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpatialReferenceData_CSType_descriptor(), enum_t_value);
}
inline bool SpatialReferenceData_CSType_Parse(
    const std::string& name, SpatialReferenceData_CSType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpatialReferenceData_CSType>(
    SpatialReferenceData_CSType_descriptor(), name, value);
}
enum GeometryRequest_OffsetParams_OffsetJoinType : int {
  GeometryRequest_OffsetParams_OffsetJoinType_ROUND = 0,
  GeometryRequest_OffsetParams_OffsetJoinType_BEVEL = 1,
  GeometryRequest_OffsetParams_OffsetJoinType_MITER = 2,
  GeometryRequest_OffsetParams_OffsetJoinType_SQUARE = 3,
  GeometryRequest_OffsetParams_OffsetJoinType_GeometryRequest_OffsetParams_OffsetJoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeometryRequest_OffsetParams_OffsetJoinType_GeometryRequest_OffsetParams_OffsetJoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeometryRequest_OffsetParams_OffsetJoinType_IsValid(int value);
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_MIN = GeometryRequest_OffsetParams_OffsetJoinType_ROUND;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_MAX = GeometryRequest_OffsetParams_OffsetJoinType_SQUARE;
constexpr int GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_ARRAYSIZE = GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryRequest_OffsetParams_OffsetJoinType_descriptor();
template<typename T>
inline const std::string& GeometryRequest_OffsetParams_OffsetJoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeometryRequest_OffsetParams_OffsetJoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeometryRequest_OffsetParams_OffsetJoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeometryRequest_OffsetParams_OffsetJoinType_descriptor(), enum_t_value);
}
inline bool GeometryRequest_OffsetParams_OffsetJoinType_Parse(
    const std::string& name, GeometryRequest_OffsetParams_OffsetJoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeometryRequest_OffsetParams_OffsetJoinType>(
    GeometryRequest_OffsetParams_OffsetJoinType_descriptor(), name, value);
}
enum FileRequestChunk_FileType : int {
  FileRequestChunk_FileType_SHAPEFILE = 0,
  FileRequestChunk_FileType_FileRequestChunk_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileRequestChunk_FileType_FileRequestChunk_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileRequestChunk_FileType_IsValid(int value);
constexpr FileRequestChunk_FileType FileRequestChunk_FileType_FileType_MIN = FileRequestChunk_FileType_SHAPEFILE;
constexpr FileRequestChunk_FileType FileRequestChunk_FileType_FileType_MAX = FileRequestChunk_FileType_SHAPEFILE;
constexpr int FileRequestChunk_FileType_FileType_ARRAYSIZE = FileRequestChunk_FileType_FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileRequestChunk_FileType_descriptor();
template<typename T>
inline const std::string& FileRequestChunk_FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileRequestChunk_FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileRequestChunk_FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileRequestChunk_FileType_descriptor(), enum_t_value);
}
inline bool FileRequestChunk_FileType_Parse(
    const std::string& name, FileRequestChunk_FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileRequestChunk_FileType>(
    FileRequestChunk_FileType_descriptor(), name, value);
}
enum SimpleState : int {
  SIMPLE_UNKNOWN = 0,
  WEAK_SIMPLE = 1,
  STRONG_SIMPLE = 2,
  NON_SIMPLE = 3,
  STRUCTURE_FLAW = 4,
  DEGENERATE_SEGMENTS = 5,
  CLUSTERING = 6,
  CRACKING = 7,
  CROSS_OVER = 8,
  RING_ORIENTATION = 9,
  SimpleState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SimpleState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SimpleState_IsValid(int value);
constexpr SimpleState SimpleState_MIN = SIMPLE_UNKNOWN;
constexpr SimpleState SimpleState_MAX = RING_ORIENTATION;
constexpr int SimpleState_ARRAYSIZE = SimpleState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleState_descriptor();
template<typename T>
inline const std::string& SimpleState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimpleState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimpleState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimpleState_descriptor(), enum_t_value);
}
inline bool SimpleState_Parse(
    const std::string& name, SimpleState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimpleState>(
    SimpleState_descriptor(), name, value);
}
enum Encoding : int {
  UNKNOWN_ENCODING = 0,
  WKB = 1,
  WKT = 2,
  GEOJSON = 3,
  ESRI_SHAPE = 4,
  ENVELOPE = 5,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = UNKNOWN_ENCODING;
constexpr Encoding Encoding_MAX = ENVELOPE;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    const std::string& name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
enum OperatorType : int {
  UNKNOWN_OPERATOR = 0,
  PROJECT = 1,
  EXPORT_TO_JSON = 2,
  IMPORT_FROM_JSON = 3,
  EXPORT_TO_ESRI_SHAPE = 4,
  IMPORT_FROM_ESRI_SHAPE = 5,
  UNION = 6,
  DIFFERENCE = 7,
  PROXIMITY_2D = 8,
  RELATE = 9,
  EQUALS = 10,
  DISJOINT = 11,
  INTERSECTS = 12,
  WITHIN = 13,
  CONTAINS = 14,
  CROSSES = 15,
  TOUCHES = 16,
  OVERLAPS = 17,
  BUFFER = 18,
  DISTANCE = 19,
  INTERSECTION = 20,
  CLIP = 21,
  CUT = 22,
  DENSIFY_BY_LENGTH = 23,
  GEODESIC_BUFFER = 26,
  GEODETIC_DENSIFY_BY_LENGTH = 27,
  GEODETIC_AREA = 30,
  SIMPLIFY = 31,
  SIMPLIFY_OGC = 32,
  OFFSET = 33,
  GENERALIZE = 34,
  GENERALIZE_BY_AREA = 35,
  EXPORT_TO_WKB = 36,
  IMPORT_FROM_WKB = 37,
  EXPORT_TO_WKT = 38,
  IMPORT_FROM_WKT = 39,
  IMPORT_FROM_GEOJSON = 40,
  EXPORT_TO_GEOJSON = 41,
  SYMMETRIC_DIFFERENCE = 42,
  CONVEX_HULL = 43,
  BOUNDARY = 44,
  RANDOM_POINTS = 45,
  ENCLOSING_CIRCLE = 46,
  AFFINE_TRANSFORM = 47,
  GEODETIC_LENGTH = 48,
  GEODETIC_INVERSE = 49,
  OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperatorType_IsValid(int value);
constexpr OperatorType OperatorType_MIN = UNKNOWN_OPERATOR;
constexpr OperatorType OperatorType_MAX = GEODETIC_INVERSE;
constexpr int OperatorType_ARRAYSIZE = OperatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorType_descriptor();
template<typename T>
inline const std::string& OperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperatorType_descriptor(), enum_t_value);
}
inline bool OperatorType_Parse(
    const std::string& name, OperatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperatorType>(
    OperatorType_descriptor(), name, value);
}
// ===================================================================

class GeometryData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryData) */ {
 public:
  GeometryData();
  virtual ~GeometryData();

  GeometryData(const GeometryData& from);
  GeometryData(GeometryData&& from) noexcept
    : GeometryData() {
    *this = ::std::move(from);
  }

  inline GeometryData& operator=(const GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryData& operator=(GeometryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryData* internal_default_instance() {
    return reinterpret_cast<const GeometryData*>(
               &_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeometryData* other);
  friend void swap(GeometryData& a, GeometryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryData* New() const final {
    return CreateMaybeMessage<GeometryData>(nullptr);
  }

  GeometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryData& from);
  void MergeFrom(const GeometryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string feature_id = 2;
  void clear_feature_id();
  static const int kFeatureIdFieldNumber = 2;
  const std::string& feature_id() const;
  void set_feature_id(const std::string& value);
  void set_feature_id(std::string&& value);
  void set_feature_id(const char* value);
  void set_feature_id(const char* value, size_t size);
  std::string* mutable_feature_id();
  std::string* release_feature_id();
  void set_allocated_feature_id(std::string* feature_id);

  // string wkt = 3;
  void clear_wkt();
  static const int kWktFieldNumber = 3;
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);

  // string geojson = 4;
  void clear_geojson();
  static const int kGeojsonFieldNumber = 4;
  const std::string& geojson() const;
  void set_geojson(const std::string& value);
  void set_geojson(std::string&& value);
  void set_geojson(const char* value);
  void set_geojson(const char* value, size_t size);
  std::string* mutable_geojson();
  std::string* release_geojson();
  void set_allocated_geojson(std::string* geojson);

  // bytes wkb = 5;
  void clear_wkb();
  static const int kWkbFieldNumber = 5;
  const std::string& wkb() const;
  void set_wkb(const std::string& value);
  void set_wkb(std::string&& value);
  void set_wkb(const char* value);
  void set_wkb(const void* value, size_t size);
  std::string* mutable_wkb();
  std::string* release_wkb();
  void set_allocated_wkb(std::string* wkb);

  // bytes esri_shape = 6;
  void clear_esri_shape();
  static const int kEsriShapeFieldNumber = 6;
  const std::string& esri_shape() const;
  void set_esri_shape(const std::string& value);
  void set_esri_shape(std::string&& value);
  void set_esri_shape(const char* value);
  void set_esri_shape(const void* value, size_t size);
  std::string* mutable_esri_shape();
  std::string* release_esri_shape();
  void set_allocated_esri_shape(std::string* esri_shape);

  // .epl.protobuf.SpatialReferenceData sr = 7;
  bool has_sr() const;
  void clear_sr();
  static const int kSrFieldNumber = 7;
  const ::epl::protobuf::SpatialReferenceData& sr() const;
  ::epl::protobuf::SpatialReferenceData* release_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_sr();
  void set_allocated_sr(::epl::protobuf::SpatialReferenceData* sr);

  // .epl.protobuf.EnvelopeData envelope = 13;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 13;
  const ::epl::protobuf::EnvelopeData& envelope() const;
  ::epl::protobuf::EnvelopeData* release_envelope();
  ::epl::protobuf::EnvelopeData* mutable_envelope();
  void set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope);

  // uint64 geometry_id = 1;
  void clear_geometry_id();
  static const int kGeometryIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 geometry_id() const;
  void set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .epl.protobuf.SimpleState simple = 14;
  void clear_simple();
  static const int kSimpleFieldNumber = 14;
  ::epl::protobuf::SimpleState simple() const;
  void set_simple(::epl::protobuf::SimpleState value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geojson_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr esri_shape_;
  ::epl::protobuf::SpatialReferenceData* sr_;
  ::epl::protobuf::EnvelopeData* envelope_;
  ::PROTOBUF_NAMESPACE_ID::uint64 geometry_id_;
  int simple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SpatialReferenceData_Custom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.SpatialReferenceData.Custom) */ {
 public:
  SpatialReferenceData_Custom();
  virtual ~SpatialReferenceData_Custom();

  SpatialReferenceData_Custom(const SpatialReferenceData_Custom& from);
  SpatialReferenceData_Custom(SpatialReferenceData_Custom&& from) noexcept
    : SpatialReferenceData_Custom() {
    *this = ::std::move(from);
  }

  inline SpatialReferenceData_Custom& operator=(const SpatialReferenceData_Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialReferenceData_Custom& operator=(SpatialReferenceData_Custom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpatialReferenceData_Custom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialReferenceData_Custom* internal_default_instance() {
    return reinterpret_cast<const SpatialReferenceData_Custom*>(
               &_SpatialReferenceData_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SpatialReferenceData_Custom* other);
  friend void swap(SpatialReferenceData_Custom& a, SpatialReferenceData_Custom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialReferenceData_Custom* New() const final {
    return CreateMaybeMessage<SpatialReferenceData_Custom>(nullptr);
  }

  SpatialReferenceData_Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpatialReferenceData_Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpatialReferenceData_Custom& from);
  void MergeFrom(const SpatialReferenceData_Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialReferenceData_Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.SpatialReferenceData.Custom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lon_0 = 1;
  void clear_lon_0();
  static const int kLon0FieldNumber = 1;
  double lon_0() const;
  void set_lon_0(double value);

  // double lat_0 = 2;
  void clear_lat_0();
  static const int kLat0FieldNumber = 2;
  double lat_0() const;
  void set_lat_0(double value);

  // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
  void clear_cs_type();
  static const int kCsTypeFieldNumber = 3;
  ::epl::protobuf::SpatialReferenceData_CSType cs_type() const;
  void set_cs_type(::epl::protobuf::SpatialReferenceData_CSType value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.SpatialReferenceData.Custom)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double lon_0_;
  double lat_0_;
  int cs_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SpatialReferenceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.SpatialReferenceData) */ {
 public:
  SpatialReferenceData();
  virtual ~SpatialReferenceData();

  SpatialReferenceData(const SpatialReferenceData& from);
  SpatialReferenceData(SpatialReferenceData&& from) noexcept
    : SpatialReferenceData() {
    *this = ::std::move(from);
  }

  inline SpatialReferenceData& operator=(const SpatialReferenceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialReferenceData& operator=(SpatialReferenceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpatialReferenceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialReferenceData* internal_default_instance() {
    return reinterpret_cast<const SpatialReferenceData*>(
               &_SpatialReferenceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpatialReferenceData* other);
  friend void swap(SpatialReferenceData& a, SpatialReferenceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialReferenceData* New() const final {
    return CreateMaybeMessage<SpatialReferenceData>(nullptr);
  }

  SpatialReferenceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpatialReferenceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpatialReferenceData& from);
  void MergeFrom(const SpatialReferenceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialReferenceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.SpatialReferenceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SpatialReferenceData_Custom Custom;

  typedef SpatialReferenceData_CSType CSType;
  static constexpr CSType LAMBERT_AZI =
    SpatialReferenceData_CSType_LAMBERT_AZI;
  static inline bool CSType_IsValid(int value) {
    return SpatialReferenceData_CSType_IsValid(value);
  }
  static constexpr CSType CSType_MIN =
    SpatialReferenceData_CSType_CSType_MIN;
  static constexpr CSType CSType_MAX =
    SpatialReferenceData_CSType_CSType_MAX;
  static constexpr int CSType_ARRAYSIZE =
    SpatialReferenceData_CSType_CSType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CSType_descriptor() {
    return SpatialReferenceData_CSType_descriptor();
  }
  template<typename T>
  static inline const std::string& CSType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CSType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CSType_Name.");
    return SpatialReferenceData_CSType_Name(enum_t_value);
  }
  static inline bool CSType_Parse(const std::string& name,
      CSType* value) {
    return SpatialReferenceData_CSType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string proj4 = 2;
  void clear_proj4();
  static const int kProj4FieldNumber = 2;
  const std::string& proj4() const;
  void set_proj4(const std::string& value);
  void set_proj4(std::string&& value);
  void set_proj4(const char* value);
  void set_proj4(const char* value, size_t size);
  std::string* mutable_proj4();
  std::string* release_proj4();
  void set_allocated_proj4(std::string* proj4);

  // string wkt = 4;
  void clear_wkt();
  static const int kWktFieldNumber = 4;
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);

  // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 3;
  const ::epl::protobuf::SpatialReferenceData_Custom& custom() const;
  ::epl::protobuf::SpatialReferenceData_Custom* release_custom();
  ::epl::protobuf::SpatialReferenceData_Custom* mutable_custom();
  void set_allocated_custom(::epl::protobuf::SpatialReferenceData_Custom* custom);

  // int32 wkid = 1;
  void clear_wkid();
  static const int kWkidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 wkid() const;
  void set_wkid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.SpatialReferenceData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proj4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
  ::epl::protobuf::SpatialReferenceData_Custom* custom_;
  ::PROTOBUF_NAMESPACE_ID::int32 wkid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class EnvelopeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.EnvelopeData) */ {
 public:
  EnvelopeData();
  virtual ~EnvelopeData();

  EnvelopeData(const EnvelopeData& from);
  EnvelopeData(EnvelopeData&& from) noexcept
    : EnvelopeData() {
    *this = ::std::move(from);
  }

  inline EnvelopeData& operator=(const EnvelopeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeData& operator=(EnvelopeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvelopeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvelopeData* internal_default_instance() {
    return reinterpret_cast<const EnvelopeData*>(
               &_EnvelopeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EnvelopeData* other);
  friend void swap(EnvelopeData& a, EnvelopeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvelopeData* New() const final {
    return CreateMaybeMessage<EnvelopeData>(nullptr);
  }

  EnvelopeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvelopeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvelopeData& from);
  void MergeFrom(const EnvelopeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.EnvelopeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .epl.protobuf.SpatialReferenceData sr = 5;
  bool has_sr() const;
  void clear_sr();
  static const int kSrFieldNumber = 5;
  const ::epl::protobuf::SpatialReferenceData& sr() const;
  ::epl::protobuf::SpatialReferenceData* release_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_sr();
  void set_allocated_sr(::epl::protobuf::SpatialReferenceData* sr);

  // double xmin = 1;
  void clear_xmin();
  static const int kXminFieldNumber = 1;
  double xmin() const;
  void set_xmin(double value);

  // double ymin = 2;
  void clear_ymin();
  static const int kYminFieldNumber = 2;
  double ymin() const;
  void set_ymin(double value);

  // double xmax = 3;
  void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  double xmax() const;
  void set_xmax(double value);

  // double ymax = 4;
  void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  double ymax() const;
  void set_ymax(double value);

  // double zmin = 6;
  void clear_zmin();
  static const int kZminFieldNumber = 6;
  double zmin() const;
  void set_zmin(double value);

  // double zmax = 7;
  void clear_zmax();
  static const int kZmaxFieldNumber = 7;
  double zmax() const;
  void set_zmax(double value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.EnvelopeData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::epl::protobuf::SpatialReferenceData* sr_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  double zmin_;
  double zmax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_BufferParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.BufferParams) */ {
 public:
  GeometryRequest_BufferParams();
  virtual ~GeometryRequest_BufferParams();

  GeometryRequest_BufferParams(const GeometryRequest_BufferParams& from);
  GeometryRequest_BufferParams(GeometryRequest_BufferParams&& from) noexcept
    : GeometryRequest_BufferParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_BufferParams& operator=(const GeometryRequest_BufferParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_BufferParams& operator=(GeometryRequest_BufferParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_BufferParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_BufferParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_BufferParams*>(
               &_GeometryRequest_BufferParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GeometryRequest_BufferParams* other);
  friend void swap(GeometryRequest_BufferParams& a, GeometryRequest_BufferParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_BufferParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_BufferParams>(nullptr);
  }

  GeometryRequest_BufferParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_BufferParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_BufferParams& from);
  void MergeFrom(const GeometryRequest_BufferParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_BufferParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.BufferParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // double max_deviation = 2;
  void clear_max_deviation();
  static const int kMaxDeviationFieldNumber = 2;
  double max_deviation() const;
  void set_max_deviation(double value);

  // bool union_result = 3;
  void clear_union_result();
  static const int kUnionResultFieldNumber = 3;
  bool union_result() const;
  void set_union_result(bool value);

  // int32 max_vertices_in_full_circle = 4;
  void clear_max_vertices_in_full_circle();
  static const int kMaxVerticesInFullCircleFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle() const;
  void set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.BufferParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  double max_deviation_;
  bool union_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_GeodeticBufferParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.GeodeticBufferParams) */ {
 public:
  GeometryRequest_GeodeticBufferParams();
  virtual ~GeometryRequest_GeodeticBufferParams();

  GeometryRequest_GeodeticBufferParams(const GeometryRequest_GeodeticBufferParams& from);
  GeometryRequest_GeodeticBufferParams(GeometryRequest_GeodeticBufferParams&& from) noexcept
    : GeometryRequest_GeodeticBufferParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_GeodeticBufferParams& operator=(const GeometryRequest_GeodeticBufferParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_GeodeticBufferParams& operator=(GeometryRequest_GeodeticBufferParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_GeodeticBufferParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_GeodeticBufferParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_GeodeticBufferParams*>(
               &_GeometryRequest_GeodeticBufferParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GeometryRequest_GeodeticBufferParams* other);
  friend void swap(GeometryRequest_GeodeticBufferParams& a, GeometryRequest_GeodeticBufferParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_GeodeticBufferParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_GeodeticBufferParams>(nullptr);
  }

  GeometryRequest_GeodeticBufferParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_GeodeticBufferParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_GeodeticBufferParams& from);
  void MergeFrom(const GeometryRequest_GeodeticBufferParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_GeodeticBufferParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.GeodeticBufferParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // double max_deviation = 2;
  void clear_max_deviation();
  static const int kMaxDeviationFieldNumber = 2;
  double max_deviation() const;
  void set_max_deviation(double value);

  // bool union_result = 3;
  void clear_union_result();
  static const int kUnionResultFieldNumber = 3;
  bool union_result() const;
  void set_union_result(bool value);

  // int32 max_vertices_in_full_circle = 4;
  void clear_max_vertices_in_full_circle();
  static const int kMaxVerticesInFullCircleFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle() const;
  void set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.GeodeticBufferParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  double max_deviation_;
  bool union_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_vertices_in_full_circle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_ConvexParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.ConvexParams) */ {
 public:
  GeometryRequest_ConvexParams();
  virtual ~GeometryRequest_ConvexParams();

  GeometryRequest_ConvexParams(const GeometryRequest_ConvexParams& from);
  GeometryRequest_ConvexParams(GeometryRequest_ConvexParams&& from) noexcept
    : GeometryRequest_ConvexParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_ConvexParams& operator=(const GeometryRequest_ConvexParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_ConvexParams& operator=(GeometryRequest_ConvexParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_ConvexParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_ConvexParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_ConvexParams*>(
               &_GeometryRequest_ConvexParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GeometryRequest_ConvexParams* other);
  friend void swap(GeometryRequest_ConvexParams& a, GeometryRequest_ConvexParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_ConvexParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_ConvexParams>(nullptr);
  }

  GeometryRequest_ConvexParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_ConvexParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_ConvexParams& from);
  void MergeFrom(const GeometryRequest_ConvexParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_ConvexParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.ConvexParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool merge = 1;
  void clear_merge();
  static const int kMergeFieldNumber = 1;
  bool merge() const;
  void set_merge(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.ConvexParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool merge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_RelateParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.RelateParams) */ {
 public:
  GeometryRequest_RelateParams();
  virtual ~GeometryRequest_RelateParams();

  GeometryRequest_RelateParams(const GeometryRequest_RelateParams& from);
  GeometryRequest_RelateParams(GeometryRequest_RelateParams&& from) noexcept
    : GeometryRequest_RelateParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_RelateParams& operator=(const GeometryRequest_RelateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_RelateParams& operator=(GeometryRequest_RelateParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_RelateParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_RelateParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_RelateParams*>(
               &_GeometryRequest_RelateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GeometryRequest_RelateParams* other);
  friend void swap(GeometryRequest_RelateParams& a, GeometryRequest_RelateParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_RelateParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_RelateParams>(nullptr);
  }

  GeometryRequest_RelateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_RelateParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_RelateParams& from);
  void MergeFrom(const GeometryRequest_RelateParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_RelateParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.RelateParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string de_9im = 1;
  void clear_de_9im();
  static const int kDe9ImFieldNumber = 1;
  const std::string& de_9im() const;
  void set_de_9im(const std::string& value);
  void set_de_9im(std::string&& value);
  void set_de_9im(const char* value);
  void set_de_9im(const char* value, size_t size);
  std::string* mutable_de_9im();
  std::string* release_de_9im();
  void set_allocated_de_9im(std::string* de_9im);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.RelateParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr de_9im_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_RandomPointsParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.RandomPointsParams) */ {
 public:
  GeometryRequest_RandomPointsParams();
  virtual ~GeometryRequest_RandomPointsParams();

  GeometryRequest_RandomPointsParams(const GeometryRequest_RandomPointsParams& from);
  GeometryRequest_RandomPointsParams(GeometryRequest_RandomPointsParams&& from) noexcept
    : GeometryRequest_RandomPointsParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_RandomPointsParams& operator=(const GeometryRequest_RandomPointsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_RandomPointsParams& operator=(GeometryRequest_RandomPointsParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_RandomPointsParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_RandomPointsParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_RandomPointsParams*>(
               &_GeometryRequest_RandomPointsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GeometryRequest_RandomPointsParams* other);
  friend void swap(GeometryRequest_RandomPointsParams& a, GeometryRequest_RandomPointsParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_RandomPointsParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_RandomPointsParams>(nullptr);
  }

  GeometryRequest_RandomPointsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_RandomPointsParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_RandomPointsParams& from);
  void MergeFrom(const GeometryRequest_RandomPointsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_RandomPointsParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.RandomPointsParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double points_per_square_km = 1;
  void clear_points_per_square_km();
  static const int kPointsPerSquareKmFieldNumber = 1;
  double points_per_square_km() const;
  void set_points_per_square_km(double value);

  // int64 seed = 2;
  void clear_seed();
  static const int kSeedFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.RandomPointsParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double points_per_square_km_;
  ::PROTOBUF_NAMESPACE_ID::int64 seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_GeneralizeParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.GeneralizeParams) */ {
 public:
  GeometryRequest_GeneralizeParams();
  virtual ~GeometryRequest_GeneralizeParams();

  GeometryRequest_GeneralizeParams(const GeometryRequest_GeneralizeParams& from);
  GeometryRequest_GeneralizeParams(GeometryRequest_GeneralizeParams&& from) noexcept
    : GeometryRequest_GeneralizeParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_GeneralizeParams& operator=(const GeometryRequest_GeneralizeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_GeneralizeParams& operator=(GeometryRequest_GeneralizeParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_GeneralizeParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_GeneralizeParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_GeneralizeParams*>(
               &_GeometryRequest_GeneralizeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GeometryRequest_GeneralizeParams* other);
  friend void swap(GeometryRequest_GeneralizeParams& a, GeometryRequest_GeneralizeParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_GeneralizeParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_GeneralizeParams>(nullptr);
  }

  GeometryRequest_GeneralizeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_GeneralizeParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_GeneralizeParams& from);
  void MergeFrom(const GeometryRequest_GeneralizeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_GeneralizeParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.GeneralizeParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max_deviation = 1;
  void clear_max_deviation();
  static const int kMaxDeviationFieldNumber = 1;
  double max_deviation() const;
  void set_max_deviation(double value);

  // bool remove_degenerates = 2;
  void clear_remove_degenerates();
  static const int kRemoveDegeneratesFieldNumber = 2;
  bool remove_degenerates() const;
  void set_remove_degenerates(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.GeneralizeParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double max_deviation_;
  bool remove_degenerates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_GeneralizeByAreaParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.GeneralizeByAreaParams) */ {
 public:
  GeometryRequest_GeneralizeByAreaParams();
  virtual ~GeometryRequest_GeneralizeByAreaParams();

  GeometryRequest_GeneralizeByAreaParams(const GeometryRequest_GeneralizeByAreaParams& from);
  GeometryRequest_GeneralizeByAreaParams(GeometryRequest_GeneralizeByAreaParams&& from) noexcept
    : GeometryRequest_GeneralizeByAreaParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_GeneralizeByAreaParams& operator=(const GeometryRequest_GeneralizeByAreaParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_GeneralizeByAreaParams& operator=(GeometryRequest_GeneralizeByAreaParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_GeneralizeByAreaParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_GeneralizeByAreaParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_GeneralizeByAreaParams*>(
               &_GeometryRequest_GeneralizeByAreaParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GeometryRequest_GeneralizeByAreaParams* other);
  friend void swap(GeometryRequest_GeneralizeByAreaParams& a, GeometryRequest_GeneralizeByAreaParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_GeneralizeByAreaParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_GeneralizeByAreaParams>(nullptr);
  }

  GeometryRequest_GeneralizeByAreaParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_GeneralizeByAreaParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_GeneralizeByAreaParams& from);
  void MergeFrom(const GeometryRequest_GeneralizeByAreaParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_GeneralizeByAreaParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.GeneralizeByAreaParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double percent_reduction = 1;
  void clear_percent_reduction();
  static const int kPercentReductionFieldNumber = 1;
  double percent_reduction() const;
  void set_percent_reduction(double value);

  // bool remove_degenerates = 2;
  void clear_remove_degenerates();
  static const int kRemoveDegeneratesFieldNumber = 2;
  bool remove_degenerates() const;
  void set_remove_degenerates(bool value);

  // int32 max_point_count = 3;
  void clear_max_point_count();
  static const int kMaxPointCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 max_point_count() const;
  void set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double percent_reduction_;
  bool remove_degenerates_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_point_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_IntersectionParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.IntersectionParams) */ {
 public:
  GeometryRequest_IntersectionParams();
  virtual ~GeometryRequest_IntersectionParams();

  GeometryRequest_IntersectionParams(const GeometryRequest_IntersectionParams& from);
  GeometryRequest_IntersectionParams(GeometryRequest_IntersectionParams&& from) noexcept
    : GeometryRequest_IntersectionParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_IntersectionParams& operator=(const GeometryRequest_IntersectionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_IntersectionParams& operator=(GeometryRequest_IntersectionParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_IntersectionParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_IntersectionParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_IntersectionParams*>(
               &_GeometryRequest_IntersectionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GeometryRequest_IntersectionParams* other);
  friend void swap(GeometryRequest_IntersectionParams& a, GeometryRequest_IntersectionParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_IntersectionParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_IntersectionParams>(nullptr);
  }

  GeometryRequest_IntersectionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_IntersectionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_IntersectionParams& from);
  void MergeFrom(const GeometryRequest_IntersectionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_IntersectionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.IntersectionParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 dimension_mask = 1;
  void clear_dimension_mask();
  static const int kDimensionMaskFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_mask() const;
  void set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.IntersectionParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_OffsetParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.OffsetParams) */ {
 public:
  GeometryRequest_OffsetParams();
  virtual ~GeometryRequest_OffsetParams();

  GeometryRequest_OffsetParams(const GeometryRequest_OffsetParams& from);
  GeometryRequest_OffsetParams(GeometryRequest_OffsetParams&& from) noexcept
    : GeometryRequest_OffsetParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_OffsetParams& operator=(const GeometryRequest_OffsetParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_OffsetParams& operator=(GeometryRequest_OffsetParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_OffsetParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_OffsetParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_OffsetParams*>(
               &_GeometryRequest_OffsetParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GeometryRequest_OffsetParams* other);
  friend void swap(GeometryRequest_OffsetParams& a, GeometryRequest_OffsetParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_OffsetParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_OffsetParams>(nullptr);
  }

  GeometryRequest_OffsetParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_OffsetParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_OffsetParams& from);
  void MergeFrom(const GeometryRequest_OffsetParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_OffsetParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.OffsetParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeometryRequest_OffsetParams_OffsetJoinType OffsetJoinType;
  static constexpr OffsetJoinType ROUND =
    GeometryRequest_OffsetParams_OffsetJoinType_ROUND;
  static constexpr OffsetJoinType BEVEL =
    GeometryRequest_OffsetParams_OffsetJoinType_BEVEL;
  static constexpr OffsetJoinType MITER =
    GeometryRequest_OffsetParams_OffsetJoinType_MITER;
  static constexpr OffsetJoinType SQUARE =
    GeometryRequest_OffsetParams_OffsetJoinType_SQUARE;
  static inline bool OffsetJoinType_IsValid(int value) {
    return GeometryRequest_OffsetParams_OffsetJoinType_IsValid(value);
  }
  static constexpr OffsetJoinType OffsetJoinType_MIN =
    GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_MIN;
  static constexpr OffsetJoinType OffsetJoinType_MAX =
    GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_MAX;
  static constexpr int OffsetJoinType_ARRAYSIZE =
    GeometryRequest_OffsetParams_OffsetJoinType_OffsetJoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OffsetJoinType_descriptor() {
    return GeometryRequest_OffsetParams_OffsetJoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& OffsetJoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OffsetJoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OffsetJoinType_Name.");
    return GeometryRequest_OffsetParams_OffsetJoinType_Name(enum_t_value);
  }
  static inline bool OffsetJoinType_Parse(const std::string& name,
      OffsetJoinType* value) {
    return GeometryRequest_OffsetParams_OffsetJoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // double distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // double bevel_ratio = 3;
  void clear_bevel_ratio();
  static const int kBevelRatioFieldNumber = 3;
  double bevel_ratio() const;
  void set_bevel_ratio(double value);

  // double flatten_error = 4;
  void clear_flatten_error();
  static const int kFlattenErrorFieldNumber = 4;
  double flatten_error() const;
  void set_flatten_error(double value);

  // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
  void clear_join_type();
  static const int kJoinTypeFieldNumber = 2;
  ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType join_type() const;
  void set_join_type(::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.OffsetParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double distance_;
  double bevel_ratio_;
  double flatten_error_;
  int join_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_CutParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.CutParams) */ {
 public:
  GeometryRequest_CutParams();
  virtual ~GeometryRequest_CutParams();

  GeometryRequest_CutParams(const GeometryRequest_CutParams& from);
  GeometryRequest_CutParams(GeometryRequest_CutParams&& from) noexcept
    : GeometryRequest_CutParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_CutParams& operator=(const GeometryRequest_CutParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_CutParams& operator=(GeometryRequest_CutParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_CutParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_CutParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_CutParams*>(
               &_GeometryRequest_CutParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GeometryRequest_CutParams* other);
  friend void swap(GeometryRequest_CutParams& a, GeometryRequest_CutParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_CutParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_CutParams>(nullptr);
  }

  GeometryRequest_CutParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_CutParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_CutParams& from);
  void MergeFrom(const GeometryRequest_CutParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_CutParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.CutParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool consider_touch = 1;
  void clear_consider_touch();
  static const int kConsiderTouchFieldNumber = 1;
  bool consider_touch() const;
  void set_consider_touch(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.CutParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool consider_touch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_ClipParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.ClipParams) */ {
 public:
  GeometryRequest_ClipParams();
  virtual ~GeometryRequest_ClipParams();

  GeometryRequest_ClipParams(const GeometryRequest_ClipParams& from);
  GeometryRequest_ClipParams(GeometryRequest_ClipParams&& from) noexcept
    : GeometryRequest_ClipParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_ClipParams& operator=(const GeometryRequest_ClipParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_ClipParams& operator=(GeometryRequest_ClipParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_ClipParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_ClipParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_ClipParams*>(
               &_GeometryRequest_ClipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GeometryRequest_ClipParams* other);
  friend void swap(GeometryRequest_ClipParams& a, GeometryRequest_ClipParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_ClipParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_ClipParams>(nullptr);
  }

  GeometryRequest_ClipParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_ClipParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_ClipParams& from);
  void MergeFrom(const GeometryRequest_ClipParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_ClipParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.ClipParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .epl.protobuf.EnvelopeData envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  const ::epl::protobuf::EnvelopeData& envelope() const;
  ::epl::protobuf::EnvelopeData* release_envelope();
  ::epl::protobuf::EnvelopeData* mutable_envelope();
  void set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.ClipParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::epl::protobuf::EnvelopeData* envelope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_DensifyParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.DensifyParams) */ {
 public:
  GeometryRequest_DensifyParams();
  virtual ~GeometryRequest_DensifyParams();

  GeometryRequest_DensifyParams(const GeometryRequest_DensifyParams& from);
  GeometryRequest_DensifyParams(GeometryRequest_DensifyParams&& from) noexcept
    : GeometryRequest_DensifyParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_DensifyParams& operator=(const GeometryRequest_DensifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_DensifyParams& operator=(GeometryRequest_DensifyParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_DensifyParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_DensifyParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_DensifyParams*>(
               &_GeometryRequest_DensifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GeometryRequest_DensifyParams* other);
  friend void swap(GeometryRequest_DensifyParams& a, GeometryRequest_DensifyParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_DensifyParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_DensifyParams>(nullptr);
  }

  GeometryRequest_DensifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_DensifyParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_DensifyParams& from);
  void MergeFrom(const GeometryRequest_DensifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_DensifyParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.DensifyParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max_length = 1;
  void clear_max_length();
  static const int kMaxLengthFieldNumber = 1;
  double max_length() const;
  void set_max_length(double value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.DensifyParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double max_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_SimplifyParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.SimplifyParams) */ {
 public:
  GeometryRequest_SimplifyParams();
  virtual ~GeometryRequest_SimplifyParams();

  GeometryRequest_SimplifyParams(const GeometryRequest_SimplifyParams& from);
  GeometryRequest_SimplifyParams(GeometryRequest_SimplifyParams&& from) noexcept
    : GeometryRequest_SimplifyParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_SimplifyParams& operator=(const GeometryRequest_SimplifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_SimplifyParams& operator=(GeometryRequest_SimplifyParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_SimplifyParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_SimplifyParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_SimplifyParams*>(
               &_GeometryRequest_SimplifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GeometryRequest_SimplifyParams* other);
  friend void swap(GeometryRequest_SimplifyParams& a, GeometryRequest_SimplifyParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_SimplifyParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_SimplifyParams>(nullptr);
  }

  GeometryRequest_SimplifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_SimplifyParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_SimplifyParams& from);
  void MergeFrom(const GeometryRequest_SimplifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_SimplifyParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.SimplifyParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool force = 1;
  void clear_force();
  static const int kForceFieldNumber = 1;
  bool force() const;
  void set_force(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.SimplifyParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest_AffineTransformParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest.AffineTransformParams) */ {
 public:
  GeometryRequest_AffineTransformParams();
  virtual ~GeometryRequest_AffineTransformParams();

  GeometryRequest_AffineTransformParams(const GeometryRequest_AffineTransformParams& from);
  GeometryRequest_AffineTransformParams(GeometryRequest_AffineTransformParams&& from) noexcept
    : GeometryRequest_AffineTransformParams() {
    *this = ::std::move(from);
  }

  inline GeometryRequest_AffineTransformParams& operator=(const GeometryRequest_AffineTransformParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest_AffineTransformParams& operator=(GeometryRequest_AffineTransformParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest_AffineTransformParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest_AffineTransformParams* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest_AffineTransformParams*>(
               &_GeometryRequest_AffineTransformParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GeometryRequest_AffineTransformParams* other);
  friend void swap(GeometryRequest_AffineTransformParams& a, GeometryRequest_AffineTransformParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest_AffineTransformParams* New() const final {
    return CreateMaybeMessage<GeometryRequest_AffineTransformParams>(nullptr);
  }

  GeometryRequest_AffineTransformParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest_AffineTransformParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest_AffineTransformParams& from);
  void MergeFrom(const GeometryRequest_AffineTransformParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest_AffineTransformParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest.AffineTransformParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x_offset = 3;
  void clear_x_offset();
  static const int kXOffsetFieldNumber = 3;
  double x_offset() const;
  void set_x_offset(double value);

  // double y_offset = 4;
  void clear_y_offset();
  static const int kYOffsetFieldNumber = 4;
  double y_offset() const;
  void set_y_offset(double value);

  // bool geodetic = 2;
  void clear_geodetic();
  static const int kGeodeticFieldNumber = 2;
  bool geodetic() const;
  void set_geodetic(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest.AffineTransformParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_offset_;
  double y_offset_;
  bool geodetic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryRequest) */ {
 public:
  GeometryRequest();
  virtual ~GeometryRequest();

  GeometryRequest(const GeometryRequest& from);
  GeometryRequest(GeometryRequest&& from) noexcept
    : GeometryRequest() {
    *this = ::std::move(from);
  }

  inline GeometryRequest& operator=(const GeometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryRequest& operator=(GeometryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryRequest* internal_default_instance() {
    return reinterpret_cast<const GeometryRequest*>(
               &_GeometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GeometryRequest* other);
  friend void swap(GeometryRequest& a, GeometryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryRequest* New() const final {
    return CreateMaybeMessage<GeometryRequest>(nullptr);
  }

  GeometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryRequest& from);
  void MergeFrom(const GeometryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeometryRequest_BufferParams BufferParams;
  typedef GeometryRequest_GeodeticBufferParams GeodeticBufferParams;
  typedef GeometryRequest_ConvexParams ConvexParams;
  typedef GeometryRequest_RelateParams RelateParams;
  typedef GeometryRequest_RandomPointsParams RandomPointsParams;
  typedef GeometryRequest_GeneralizeParams GeneralizeParams;
  typedef GeometryRequest_GeneralizeByAreaParams GeneralizeByAreaParams;
  typedef GeometryRequest_IntersectionParams IntersectionParams;
  typedef GeometryRequest_OffsetParams OffsetParams;
  typedef GeometryRequest_CutParams CutParams;
  typedef GeometryRequest_ClipParams ClipParams;
  typedef GeometryRequest_DensifyParams DensifyParams;
  typedef GeometryRequest_SimplifyParams SimplifyParams;
  typedef GeometryRequest_AffineTransformParams AffineTransformParams;

  // accessors -------------------------------------------------------

  // .epl.protobuf.GeometryData geometry = 1;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 1;
  const ::epl::protobuf::GeometryData& geometry() const;
  ::epl::protobuf::GeometryData* release_geometry();
  ::epl::protobuf::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::GeometryData* geometry);

  // .epl.protobuf.GeometryData left_geometry = 2;
  bool has_left_geometry() const;
  void clear_left_geometry();
  static const int kLeftGeometryFieldNumber = 2;
  const ::epl::protobuf::GeometryData& left_geometry() const;
  ::epl::protobuf::GeometryData* release_left_geometry();
  ::epl::protobuf::GeometryData* mutable_left_geometry();
  void set_allocated_left_geometry(::epl::protobuf::GeometryData* left_geometry);

  // .epl.protobuf.GeometryRequest geometry_request = 3;
  bool has_geometry_request() const;
  void clear_geometry_request();
  static const int kGeometryRequestFieldNumber = 3;
  const ::epl::protobuf::GeometryRequest& geometry_request() const;
  ::epl::protobuf::GeometryRequest* release_geometry_request();
  ::epl::protobuf::GeometryRequest* mutable_geometry_request();
  void set_allocated_geometry_request(::epl::protobuf::GeometryRequest* geometry_request);

  // .epl.protobuf.GeometryRequest left_geometry_request = 4;
  bool has_left_geometry_request() const;
  void clear_left_geometry_request();
  static const int kLeftGeometryRequestFieldNumber = 4;
  const ::epl::protobuf::GeometryRequest& left_geometry_request() const;
  ::epl::protobuf::GeometryRequest* release_left_geometry_request();
  ::epl::protobuf::GeometryRequest* mutable_left_geometry_request();
  void set_allocated_left_geometry_request(::epl::protobuf::GeometryRequest* left_geometry_request);

  // .epl.protobuf.GeometryData right_geometry = 5;
  bool has_right_geometry() const;
  void clear_right_geometry();
  static const int kRightGeometryFieldNumber = 5;
  const ::epl::protobuf::GeometryData& right_geometry() const;
  ::epl::protobuf::GeometryData* release_right_geometry();
  ::epl::protobuf::GeometryData* mutable_right_geometry();
  void set_allocated_right_geometry(::epl::protobuf::GeometryData* right_geometry);

  // .epl.protobuf.GeometryRequest right_geometry_request = 6;
  bool has_right_geometry_request() const;
  void clear_right_geometry_request();
  static const int kRightGeometryRequestFieldNumber = 6;
  const ::epl::protobuf::GeometryRequest& right_geometry_request() const;
  ::epl::protobuf::GeometryRequest* release_right_geometry_request();
  ::epl::protobuf::GeometryRequest* mutable_right_geometry_request();
  void set_allocated_right_geometry_request(::epl::protobuf::GeometryRequest* right_geometry_request);

  // .epl.protobuf.SpatialReferenceData operation_sr = 9;
  bool has_operation_sr() const;
  void clear_operation_sr();
  static const int kOperationSrFieldNumber = 9;
  const ::epl::protobuf::SpatialReferenceData& operation_sr() const;
  ::epl::protobuf::SpatialReferenceData* release_operation_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_operation_sr();
  void set_allocated_operation_sr(::epl::protobuf::SpatialReferenceData* operation_sr);

  // .epl.protobuf.SpatialReferenceData result_sr = 10;
  bool has_result_sr() const;
  void clear_result_sr();
  static const int kResultSrFieldNumber = 10;
  const ::epl::protobuf::SpatialReferenceData& result_sr() const;
  ::epl::protobuf::SpatialReferenceData* release_result_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_result_sr();
  void set_allocated_result_sr(::epl::protobuf::SpatialReferenceData* result_sr);

  // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
  bool has_buffer_params() const;
  void clear_buffer_params();
  static const int kBufferParamsFieldNumber = 11;
  const ::epl::protobuf::GeometryRequest_BufferParams& buffer_params() const;
  ::epl::protobuf::GeometryRequest_BufferParams* release_buffer_params();
  ::epl::protobuf::GeometryRequest_BufferParams* mutable_buffer_params();
  void set_allocated_buffer_params(::epl::protobuf::GeometryRequest_BufferParams* buffer_params);

  // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
  bool has_convex_params() const;
  void clear_convex_params();
  static const int kConvexParamsFieldNumber = 12;
  const ::epl::protobuf::GeometryRequest_ConvexParams& convex_params() const;
  ::epl::protobuf::GeometryRequest_ConvexParams* release_convex_params();
  ::epl::protobuf::GeometryRequest_ConvexParams* mutable_convex_params();
  void set_allocated_convex_params(::epl::protobuf::GeometryRequest_ConvexParams* convex_params);

  // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
  bool has_relate_params() const;
  void clear_relate_params();
  static const int kRelateParamsFieldNumber = 13;
  const ::epl::protobuf::GeometryRequest_RelateParams& relate_params() const;
  ::epl::protobuf::GeometryRequest_RelateParams* release_relate_params();
  ::epl::protobuf::GeometryRequest_RelateParams* mutable_relate_params();
  void set_allocated_relate_params(::epl::protobuf::GeometryRequest_RelateParams* relate_params);

  // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
  bool has_random_points_params() const;
  void clear_random_points_params();
  static const int kRandomPointsParamsFieldNumber = 14;
  const ::epl::protobuf::GeometryRequest_RandomPointsParams& random_points_params() const;
  ::epl::protobuf::GeometryRequest_RandomPointsParams* release_random_points_params();
  ::epl::protobuf::GeometryRequest_RandomPointsParams* mutable_random_points_params();
  void set_allocated_random_points_params(::epl::protobuf::GeometryRequest_RandomPointsParams* random_points_params);

  // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
  bool has_generalize_params() const;
  void clear_generalize_params();
  static const int kGeneralizeParamsFieldNumber = 15;
  const ::epl::protobuf::GeometryRequest_GeneralizeParams& generalize_params() const;
  ::epl::protobuf::GeometryRequest_GeneralizeParams* release_generalize_params();
  ::epl::protobuf::GeometryRequest_GeneralizeParams* mutable_generalize_params();
  void set_allocated_generalize_params(::epl::protobuf::GeometryRequest_GeneralizeParams* generalize_params);

  // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
  bool has_intersection_params() const;
  void clear_intersection_params();
  static const int kIntersectionParamsFieldNumber = 16;
  const ::epl::protobuf::GeometryRequest_IntersectionParams& intersection_params() const;
  ::epl::protobuf::GeometryRequest_IntersectionParams* release_intersection_params();
  ::epl::protobuf::GeometryRequest_IntersectionParams* mutable_intersection_params();
  void set_allocated_intersection_params(::epl::protobuf::GeometryRequest_IntersectionParams* intersection_params);

  // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
  bool has_offset_params() const;
  void clear_offset_params();
  static const int kOffsetParamsFieldNumber = 17;
  const ::epl::protobuf::GeometryRequest_OffsetParams& offset_params() const;
  ::epl::protobuf::GeometryRequest_OffsetParams* release_offset_params();
  ::epl::protobuf::GeometryRequest_OffsetParams* mutable_offset_params();
  void set_allocated_offset_params(::epl::protobuf::GeometryRequest_OffsetParams* offset_params);

  // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
  bool has_cut_params() const;
  void clear_cut_params();
  static const int kCutParamsFieldNumber = 18;
  const ::epl::protobuf::GeometryRequest_CutParams& cut_params() const;
  ::epl::protobuf::GeometryRequest_CutParams* release_cut_params();
  ::epl::protobuf::GeometryRequest_CutParams* mutable_cut_params();
  void set_allocated_cut_params(::epl::protobuf::GeometryRequest_CutParams* cut_params);

  // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
  bool has_clip_params() const;
  void clear_clip_params();
  static const int kClipParamsFieldNumber = 19;
  const ::epl::protobuf::GeometryRequest_ClipParams& clip_params() const;
  ::epl::protobuf::GeometryRequest_ClipParams* release_clip_params();
  ::epl::protobuf::GeometryRequest_ClipParams* mutable_clip_params();
  void set_allocated_clip_params(::epl::protobuf::GeometryRequest_ClipParams* clip_params);

  // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
  bool has_densify_params() const;
  void clear_densify_params();
  static const int kDensifyParamsFieldNumber = 20;
  const ::epl::protobuf::GeometryRequest_DensifyParams& densify_params() const;
  ::epl::protobuf::GeometryRequest_DensifyParams* release_densify_params();
  ::epl::protobuf::GeometryRequest_DensifyParams* mutable_densify_params();
  void set_allocated_densify_params(::epl::protobuf::GeometryRequest_DensifyParams* densify_params);

  // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
  bool has_simplify_params() const;
  void clear_simplify_params();
  static const int kSimplifyParamsFieldNumber = 21;
  const ::epl::protobuf::GeometryRequest_SimplifyParams& simplify_params() const;
  ::epl::protobuf::GeometryRequest_SimplifyParams* release_simplify_params();
  ::epl::protobuf::GeometryRequest_SimplifyParams* mutable_simplify_params();
  void set_allocated_simplify_params(::epl::protobuf::GeometryRequest_SimplifyParams* simplify_params);

  // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
  bool has_generalize_by_area_params() const;
  void clear_generalize_by_area_params();
  static const int kGeneralizeByAreaParamsFieldNumber = 22;
  const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams& generalize_by_area_params() const;
  ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* release_generalize_by_area_params();
  ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* mutable_generalize_by_area_params();
  void set_allocated_generalize_by_area_params(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* generalize_by_area_params);

  // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
  bool has_affine_transform_params() const;
  void clear_affine_transform_params();
  static const int kAffineTransformParamsFieldNumber = 23;
  const ::epl::protobuf::GeometryRequest_AffineTransformParams& affine_transform_params() const;
  ::epl::protobuf::GeometryRequest_AffineTransformParams* release_affine_transform_params();
  ::epl::protobuf::GeometryRequest_AffineTransformParams* mutable_affine_transform_params();
  void set_allocated_affine_transform_params(::epl::protobuf::GeometryRequest_AffineTransformParams* affine_transform_params);

  // .epl.protobuf.OperatorType operator = 7;
  void clear_operator_();
  static const int kOperatorFieldNumber = 7;
  ::epl::protobuf::OperatorType operator_() const;
  void set_operator_(::epl::protobuf::OperatorType value);

  // .epl.protobuf.Encoding result_encoding = 8;
  void clear_result_encoding();
  static const int kResultEncodingFieldNumber = 8;
  ::epl::protobuf::Encoding result_encoding() const;
  void set_result_encoding(::epl::protobuf::Encoding value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::epl::protobuf::GeometryData* geometry_;
  ::epl::protobuf::GeometryData* left_geometry_;
  ::epl::protobuf::GeometryRequest* geometry_request_;
  ::epl::protobuf::GeometryRequest* left_geometry_request_;
  ::epl::protobuf::GeometryData* right_geometry_;
  ::epl::protobuf::GeometryRequest* right_geometry_request_;
  ::epl::protobuf::SpatialReferenceData* operation_sr_;
  ::epl::protobuf::SpatialReferenceData* result_sr_;
  ::epl::protobuf::GeometryRequest_BufferParams* buffer_params_;
  ::epl::protobuf::GeometryRequest_ConvexParams* convex_params_;
  ::epl::protobuf::GeometryRequest_RelateParams* relate_params_;
  ::epl::protobuf::GeometryRequest_RandomPointsParams* random_points_params_;
  ::epl::protobuf::GeometryRequest_GeneralizeParams* generalize_params_;
  ::epl::protobuf::GeometryRequest_IntersectionParams* intersection_params_;
  ::epl::protobuf::GeometryRequest_OffsetParams* offset_params_;
  ::epl::protobuf::GeometryRequest_CutParams* cut_params_;
  ::epl::protobuf::GeometryRequest_ClipParams* clip_params_;
  ::epl::protobuf::GeometryRequest_DensifyParams* densify_params_;
  ::epl::protobuf::GeometryRequest_SimplifyParams* simplify_params_;
  ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* generalize_by_area_params_;
  ::epl::protobuf::GeometryRequest_AffineTransformParams* affine_transform_params_;
  int operator__;
  int result_encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeodeticInverse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeodeticInverse) */ {
 public:
  GeodeticInverse();
  virtual ~GeodeticInverse();

  GeodeticInverse(const GeodeticInverse& from);
  GeodeticInverse(GeodeticInverse&& from) noexcept
    : GeodeticInverse() {
    *this = ::std::move(from);
  }

  inline GeodeticInverse& operator=(const GeodeticInverse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeodeticInverse& operator=(GeodeticInverse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeodeticInverse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeodeticInverse* internal_default_instance() {
    return reinterpret_cast<const GeodeticInverse*>(
               &_GeodeticInverse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GeodeticInverse* other);
  friend void swap(GeodeticInverse& a, GeodeticInverse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeodeticInverse* New() const final {
    return CreateMaybeMessage<GeodeticInverse>(nullptr);
  }

  GeodeticInverse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeodeticInverse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeodeticInverse& from);
  void MergeFrom(const GeodeticInverse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeodeticInverse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeodeticInverse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double az12 = 1;
  void clear_az12();
  static const int kAz12FieldNumber = 1;
  double az12() const;
  void set_az12(double value);

  // double az21 = 2;
  void clear_az21();
  static const int kAz21FieldNumber = 2;
  double az21() const;
  void set_az21(double value);

  // double distance = 3;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeodeticInverse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double az12_;
  double az21_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class GeometryResponse_RelateMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GeometryResponse_RelateMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GeometryResponse_RelateMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  GeometryResponse_RelateMapEntry_DoNotUse();
  GeometryResponse_RelateMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GeometryResponse_RelateMapEntry_DoNotUse& other);
  static const GeometryResponse_RelateMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GeometryResponse_RelateMapEntry_DoNotUse*>(&_GeometryResponse_RelateMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[20];
  }

  public:
};

// -------------------------------------------------------------------

class GeometryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.GeometryResponse) */ {
 public:
  GeometryResponse();
  virtual ~GeometryResponse();

  GeometryResponse(const GeometryResponse& from);
  GeometryResponse(GeometryResponse&& from) noexcept
    : GeometryResponse() {
    *this = ::std::move(from);
  }

  inline GeometryResponse& operator=(const GeometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryResponse& operator=(GeometryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryResponse* internal_default_instance() {
    return reinterpret_cast<const GeometryResponse*>(
               &_GeometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GeometryResponse* other);
  friend void swap(GeometryResponse& a, GeometryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryResponse* New() const final {
    return CreateMaybeMessage<GeometryResponse>(nullptr);
  }

  GeometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryResponse& from);
  void MergeFrom(const GeometryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.GeometryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int64, bool> relate_map = 4;
  int relate_map_size() const;
  void clear_relate_map();
  static const int kRelateMapFieldNumber = 4;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
      relate_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
      mutable_relate_map();

  // .epl.protobuf.GeometryData geometry = 1;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 1;
  const ::epl::protobuf::GeometryData& geometry() const;
  ::epl::protobuf::GeometryData* release_geometry();
  ::epl::protobuf::GeometryData* mutable_geometry();
  void set_allocated_geometry(::epl::protobuf::GeometryData* geometry);

  // .epl.protobuf.EnvelopeData envelope = 5;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 5;
  const ::epl::protobuf::EnvelopeData& envelope() const;
  ::epl::protobuf::EnvelopeData* release_envelope();
  ::epl::protobuf::EnvelopeData* mutable_envelope();
  void set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope);

  // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
  bool has_geodetic_inverse() const;
  void clear_geodetic_inverse();
  static const int kGeodeticInverseFieldNumber = 6;
  const ::epl::protobuf::GeodeticInverse& geodetic_inverse() const;
  ::epl::protobuf::GeodeticInverse* release_geodetic_inverse();
  ::epl::protobuf::GeodeticInverse* mutable_geodetic_inverse();
  void set_allocated_geodetic_inverse(::epl::protobuf::GeodeticInverse* geodetic_inverse);

  // double measure = 3;
  void clear_measure();
  static const int kMeasureFieldNumber = 3;
  double measure() const;
  void set_measure(double value);

  // bool spatial_relationship = 2;
  void clear_spatial_relationship();
  static const int kSpatialRelationshipFieldNumber = 2;
  bool spatial_relationship() const;
  void set_spatial_relationship(bool value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.GeometryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GeometryResponse_RelateMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > relate_map_;
  ::epl::protobuf::GeometryData* geometry_;
  ::epl::protobuf::EnvelopeData* envelope_;
  ::epl::protobuf::GeodeticInverse* geodetic_inverse_;
  double measure_;
  bool spatial_relationship_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class FileRequestChunk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:epl.protobuf.FileRequestChunk) */ {
 public:
  FileRequestChunk();
  virtual ~FileRequestChunk();

  FileRequestChunk(const FileRequestChunk& from);
  FileRequestChunk(FileRequestChunk&& from) noexcept
    : FileRequestChunk() {
    *this = ::std::move(from);
  }

  inline FileRequestChunk& operator=(const FileRequestChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequestChunk& operator=(FileRequestChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileRequestChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileRequestChunk* internal_default_instance() {
    return reinterpret_cast<const FileRequestChunk*>(
               &_FileRequestChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(FileRequestChunk* other);
  friend void swap(FileRequestChunk& a, FileRequestChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileRequestChunk* New() const final {
    return CreateMaybeMessage<FileRequestChunk>(nullptr);
  }

  FileRequestChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileRequestChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileRequestChunk& from);
  void MergeFrom(const FileRequestChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequestChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "epl.protobuf.FileRequestChunk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
    return ::descriptor_table_epl_2fprotobuf_2fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileRequestChunk_FileType FileType;
  static constexpr FileType SHAPEFILE =
    FileRequestChunk_FileType_SHAPEFILE;
  static inline bool FileType_IsValid(int value) {
    return FileRequestChunk_FileType_IsValid(value);
  }
  static constexpr FileType FileType_MIN =
    FileRequestChunk_FileType_FileType_MIN;
  static constexpr FileType FileType_MAX =
    FileRequestChunk_FileType_FileType_MAX;
  static constexpr int FileType_ARRAYSIZE =
    FileRequestChunk_FileType_FileType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileType_descriptor() {
    return FileRequestChunk_FileType_descriptor();
  }
  template<typename T>
  static inline const std::string& FileType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileType_Name.");
    return FileRequestChunk_FileType_Name(enum_t_value);
  }
  static inline bool FileType_Parse(const std::string& name,
      FileType* value) {
    return FileRequestChunk_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // string file_name = 9;
  void clear_file_name();
  static const int kFileNameFieldNumber = 9;
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // .epl.protobuf.GeometryRequest nested_request = 1;
  bool has_nested_request() const;
  void clear_nested_request();
  static const int kNestedRequestFieldNumber = 1;
  const ::epl::protobuf::GeometryRequest& nested_request() const;
  ::epl::protobuf::GeometryRequest* release_nested_request();
  ::epl::protobuf::GeometryRequest* mutable_nested_request();
  void set_allocated_nested_request(::epl::protobuf::GeometryRequest* nested_request);

  // .epl.protobuf.SpatialReferenceData input_sr = 3;
  bool has_input_sr() const;
  void clear_input_sr();
  static const int kInputSrFieldNumber = 3;
  const ::epl::protobuf::SpatialReferenceData& input_sr() const;
  ::epl::protobuf::SpatialReferenceData* release_input_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_input_sr();
  void set_allocated_input_sr(::epl::protobuf::SpatialReferenceData* input_sr);

  // .epl.protobuf.SpatialReferenceData result_sr = 5;
  bool has_result_sr() const;
  void clear_result_sr();
  static const int kResultSrFieldNumber = 5;
  const ::epl::protobuf::SpatialReferenceData& result_sr() const;
  ::epl::protobuf::SpatialReferenceData* release_result_sr();
  ::epl::protobuf::SpatialReferenceData* mutable_result_sr();
  void set_allocated_result_sr(::epl::protobuf::SpatialReferenceData* result_sr);

  // .epl.protobuf.Encoding result_encoding_type = 2;
  void clear_result_encoding_type();
  static const int kResultEncodingTypeFieldNumber = 2;
  ::epl::protobuf::Encoding result_encoding_type() const;
  void set_result_encoding_type(::epl::protobuf::Encoding value);

  // bool is_last_chunk = 10;
  void clear_is_last_chunk();
  static const int kIsLastChunkFieldNumber = 10;
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);

  // int64 size = 7;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 offset = 8;
  void clear_offset();
  static const int kOffsetFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:epl.protobuf.FileRequestChunk)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::epl::protobuf::GeometryRequest* nested_request_;
  ::epl::protobuf::SpatialReferenceData* input_sr_;
  ::epl::protobuf::SpatialReferenceData* result_sr_;
  int result_encoding_type_;
  bool is_last_chunk_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_epl_2fprotobuf_2fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeometryData

// uint64 geometry_id = 1;
inline void GeometryData::clear_geometry_id() {
  geometry_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GeometryData::geometry_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.geometry_id)
  return geometry_id_;
}
inline void GeometryData::set_geometry_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  geometry_id_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.geometry_id)
}

// string feature_id = 2;
inline void GeometryData::clear_feature_id() {
  feature_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryData::feature_id() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.feature_id)
  return feature_id_.GetNoArena();
}
inline void GeometryData::set_feature_id(const std::string& value) {
  
  feature_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.feature_id)
}
inline void GeometryData::set_feature_id(std::string&& value) {
  
  feature_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryData.feature_id)
}
inline void GeometryData::set_feature_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryData.feature_id)
}
inline void GeometryData::set_feature_id(const char* value, size_t size) {
  
  feature_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryData.feature_id)
}
inline std::string* GeometryData::mutable_feature_id() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.feature_id)
  return feature_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryData::release_feature_id() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.feature_id)
  
  return feature_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryData::set_allocated_feature_id(std::string* feature_id) {
  if (feature_id != nullptr) {
    
  } else {
    
  }
  feature_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_id);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.feature_id)
}

// string wkt = 3;
inline void GeometryData::clear_wkt() {
  wkt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryData::wkt() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.wkt)
  return wkt_.GetNoArena();
}
inline void GeometryData::set_wkt(const std::string& value) {
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.wkt)
}
inline void GeometryData::set_wkt(std::string&& value) {
  
  wkt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryData.wkt)
}
inline void GeometryData::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryData.wkt)
}
inline void GeometryData::set_wkt(const char* value, size_t size) {
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryData.wkt)
}
inline std::string* GeometryData::mutable_wkt() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.wkt)
  return wkt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryData::release_wkt() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.wkt)
  
  return wkt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryData::set_allocated_wkt(std::string* wkt) {
  if (wkt != nullptr) {
    
  } else {
    
  }
  wkt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wkt);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.wkt)
}

// string geojson = 4;
inline void GeometryData::clear_geojson() {
  geojson_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryData::geojson() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.geojson)
  return geojson_.GetNoArena();
}
inline void GeometryData::set_geojson(const std::string& value) {
  
  geojson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.geojson)
}
inline void GeometryData::set_geojson(std::string&& value) {
  
  geojson_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryData.geojson)
}
inline void GeometryData::set_geojson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geojson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryData.geojson)
}
inline void GeometryData::set_geojson(const char* value, size_t size) {
  
  geojson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryData.geojson)
}
inline std::string* GeometryData::mutable_geojson() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.geojson)
  return geojson_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryData::release_geojson() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.geojson)
  
  return geojson_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryData::set_allocated_geojson(std::string* geojson) {
  if (geojson != nullptr) {
    
  } else {
    
  }
  geojson_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geojson);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.geojson)
}

// bytes wkb = 5;
inline void GeometryData::clear_wkb() {
  wkb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryData::wkb() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.wkb)
  return wkb_.GetNoArena();
}
inline void GeometryData::set_wkb(const std::string& value) {
  
  wkb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.wkb)
}
inline void GeometryData::set_wkb(std::string&& value) {
  
  wkb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryData.wkb)
}
inline void GeometryData::set_wkb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wkb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryData.wkb)
}
inline void GeometryData::set_wkb(const void* value, size_t size) {
  
  wkb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryData.wkb)
}
inline std::string* GeometryData::mutable_wkb() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.wkb)
  return wkb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryData::release_wkb() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.wkb)
  
  return wkb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryData::set_allocated_wkb(std::string* wkb) {
  if (wkb != nullptr) {
    
  } else {
    
  }
  wkb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wkb);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.wkb)
}

// bytes esri_shape = 6;
inline void GeometryData::clear_esri_shape() {
  esri_shape_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryData::esri_shape() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.esri_shape)
  return esri_shape_.GetNoArena();
}
inline void GeometryData::set_esri_shape(const std::string& value) {
  
  esri_shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.esri_shape)
}
inline void GeometryData::set_esri_shape(std::string&& value) {
  
  esri_shape_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryData.esri_shape)
}
inline void GeometryData::set_esri_shape(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  esri_shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryData.esri_shape)
}
inline void GeometryData::set_esri_shape(const void* value, size_t size) {
  
  esri_shape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryData.esri_shape)
}
inline std::string* GeometryData::mutable_esri_shape() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.esri_shape)
  return esri_shape_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryData::release_esri_shape() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.esri_shape)
  
  return esri_shape_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryData::set_allocated_esri_shape(std::string* esri_shape) {
  if (esri_shape != nullptr) {
    
  } else {
    
  }
  esri_shape_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), esri_shape);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.esri_shape)
}

// .epl.protobuf.SpatialReferenceData sr = 7;
inline bool GeometryData::has_sr() const {
  return this != internal_default_instance() && sr_ != nullptr;
}
inline void GeometryData::clear_sr() {
  if (GetArenaNoVirtual() == nullptr && sr_ != nullptr) {
    delete sr_;
  }
  sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& GeometryData::sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* GeometryData::release_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = sr_;
  sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* GeometryData::mutable_sr() {
  
  if (sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.sr)
  return sr_;
}
inline void GeometryData::set_allocated_sr(::epl::protobuf::SpatialReferenceData* sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sr_;
  }
  if (sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr, submessage_arena);
    }
    
  } else {
    
  }
  sr_ = sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.sr)
}

// .epl.protobuf.EnvelopeData envelope = 13;
inline bool GeometryData::has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline void GeometryData::clear_envelope() {
  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::epl::protobuf::EnvelopeData& GeometryData::envelope() const {
  const ::epl::protobuf::EnvelopeData* p = envelope_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.envelope)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::EnvelopeData*>(
      &::epl::protobuf::_EnvelopeData_default_instance_);
}
inline ::epl::protobuf::EnvelopeData* GeometryData::release_envelope() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryData.envelope)
  
  ::epl::protobuf::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::epl::protobuf::EnvelopeData* GeometryData::mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::EnvelopeData>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryData.envelope)
  return envelope_;
}
inline void GeometryData::set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryData.envelope)
}

// .epl.protobuf.SimpleState simple = 14;
inline void GeometryData::clear_simple() {
  simple_ = 0;
}
inline ::epl::protobuf::SimpleState GeometryData::simple() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryData.simple)
  return static_cast< ::epl::protobuf::SimpleState >(simple_);
}
inline void GeometryData::set_simple(::epl::protobuf::SimpleState value) {
  
  simple_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryData.simple)
}

// -------------------------------------------------------------------

// SpatialReferenceData_Custom

// double lon_0 = 1;
inline void SpatialReferenceData_Custom::clear_lon_0() {
  lon_0_ = 0;
}
inline double SpatialReferenceData_Custom::lon_0() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.Custom.lon_0)
  return lon_0_;
}
inline void SpatialReferenceData_Custom::set_lon_0(double value) {
  
  lon_0_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.Custom.lon_0)
}

// double lat_0 = 2;
inline void SpatialReferenceData_Custom::clear_lat_0() {
  lat_0_ = 0;
}
inline double SpatialReferenceData_Custom::lat_0() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.Custom.lat_0)
  return lat_0_;
}
inline void SpatialReferenceData_Custom::set_lat_0(double value) {
  
  lat_0_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.Custom.lat_0)
}

// .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
inline void SpatialReferenceData_Custom::clear_cs_type() {
  cs_type_ = 0;
}
inline ::epl::protobuf::SpatialReferenceData_CSType SpatialReferenceData_Custom::cs_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.Custom.cs_type)
  return static_cast< ::epl::protobuf::SpatialReferenceData_CSType >(cs_type_);
}
inline void SpatialReferenceData_Custom::set_cs_type(::epl::protobuf::SpatialReferenceData_CSType value) {
  
  cs_type_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.Custom.cs_type)
}

// -------------------------------------------------------------------

// SpatialReferenceData

// int32 wkid = 1;
inline void SpatialReferenceData::clear_wkid() {
  wkid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpatialReferenceData::wkid() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.wkid)
  return wkid_;
}
inline void SpatialReferenceData::set_wkid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wkid_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.wkid)
}

// string proj4 = 2;
inline void SpatialReferenceData::clear_proj4() {
  proj4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpatialReferenceData::proj4() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.proj4)
  return proj4_.GetNoArena();
}
inline void SpatialReferenceData::set_proj4(const std::string& value) {
  
  proj4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.proj4)
}
inline void SpatialReferenceData::set_proj4(std::string&& value) {
  
  proj4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.SpatialReferenceData.proj4)
}
inline void SpatialReferenceData::set_proj4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proj4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.SpatialReferenceData.proj4)
}
inline void SpatialReferenceData::set_proj4(const char* value, size_t size) {
  
  proj4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.SpatialReferenceData.proj4)
}
inline std::string* SpatialReferenceData::mutable_proj4() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.SpatialReferenceData.proj4)
  return proj4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpatialReferenceData::release_proj4() {
  // @@protoc_insertion_point(field_release:epl.protobuf.SpatialReferenceData.proj4)
  
  return proj4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpatialReferenceData::set_allocated_proj4(std::string* proj4) {
  if (proj4 != nullptr) {
    
  } else {
    
  }
  proj4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proj4);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.SpatialReferenceData.proj4)
}

// .epl.protobuf.SpatialReferenceData.Custom custom = 3;
inline bool SpatialReferenceData::has_custom() const {
  return this != internal_default_instance() && custom_ != nullptr;
}
inline void SpatialReferenceData::clear_custom() {
  if (GetArenaNoVirtual() == nullptr && custom_ != nullptr) {
    delete custom_;
  }
  custom_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData_Custom& SpatialReferenceData::custom() const {
  const ::epl::protobuf::SpatialReferenceData_Custom* p = custom_;
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.custom)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData_Custom*>(
      &::epl::protobuf::_SpatialReferenceData_Custom_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData_Custom* SpatialReferenceData::release_custom() {
  // @@protoc_insertion_point(field_release:epl.protobuf.SpatialReferenceData.custom)
  
  ::epl::protobuf::SpatialReferenceData_Custom* temp = custom_;
  custom_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData_Custom* SpatialReferenceData::mutable_custom() {
  
  if (custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData_Custom>(GetArenaNoVirtual());
    custom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.SpatialReferenceData.custom)
  return custom_;
}
inline void SpatialReferenceData::set_allocated_custom(::epl::protobuf::SpatialReferenceData_Custom* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_;
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    
  } else {
    
  }
  custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.SpatialReferenceData.custom)
}

// string wkt = 4;
inline void SpatialReferenceData::clear_wkt() {
  wkt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpatialReferenceData::wkt() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.SpatialReferenceData.wkt)
  return wkt_.GetNoArena();
}
inline void SpatialReferenceData::set_wkt(const std::string& value) {
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.SpatialReferenceData.wkt)
}
inline void SpatialReferenceData::set_wkt(std::string&& value) {
  
  wkt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.SpatialReferenceData.wkt)
}
inline void SpatialReferenceData::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.SpatialReferenceData.wkt)
}
inline void SpatialReferenceData::set_wkt(const char* value, size_t size) {
  
  wkt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.SpatialReferenceData.wkt)
}
inline std::string* SpatialReferenceData::mutable_wkt() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.SpatialReferenceData.wkt)
  return wkt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpatialReferenceData::release_wkt() {
  // @@protoc_insertion_point(field_release:epl.protobuf.SpatialReferenceData.wkt)
  
  return wkt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpatialReferenceData::set_allocated_wkt(std::string* wkt) {
  if (wkt != nullptr) {
    
  } else {
    
  }
  wkt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wkt);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.SpatialReferenceData.wkt)
}

// -------------------------------------------------------------------

// EnvelopeData

// double xmin = 1;
inline void EnvelopeData::clear_xmin() {
  xmin_ = 0;
}
inline double EnvelopeData::xmin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.xmin)
  return xmin_;
}
inline void EnvelopeData::set_xmin(double value) {
  
  xmin_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.xmin)
}

// double ymin = 2;
inline void EnvelopeData::clear_ymin() {
  ymin_ = 0;
}
inline double EnvelopeData::ymin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.ymin)
  return ymin_;
}
inline void EnvelopeData::set_ymin(double value) {
  
  ymin_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.ymin)
}

// double xmax = 3;
inline void EnvelopeData::clear_xmax() {
  xmax_ = 0;
}
inline double EnvelopeData::xmax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.xmax)
  return xmax_;
}
inline void EnvelopeData::set_xmax(double value) {
  
  xmax_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.xmax)
}

// double ymax = 4;
inline void EnvelopeData::clear_ymax() {
  ymax_ = 0;
}
inline double EnvelopeData::ymax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.ymax)
  return ymax_;
}
inline void EnvelopeData::set_ymax(double value) {
  
  ymax_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.ymax)
}

// .epl.protobuf.SpatialReferenceData sr = 5;
inline bool EnvelopeData::has_sr() const {
  return this != internal_default_instance() && sr_ != nullptr;
}
inline void EnvelopeData::clear_sr() {
  if (GetArenaNoVirtual() == nullptr && sr_ != nullptr) {
    delete sr_;
  }
  sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& EnvelopeData::sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* EnvelopeData::release_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.EnvelopeData.sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = sr_;
  sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* EnvelopeData::mutable_sr() {
  
  if (sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.EnvelopeData.sr)
  return sr_;
}
inline void EnvelopeData::set_allocated_sr(::epl::protobuf::SpatialReferenceData* sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sr_;
  }
  if (sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr, submessage_arena);
    }
    
  } else {
    
  }
  sr_ = sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.EnvelopeData.sr)
}

// double zmin = 6;
inline void EnvelopeData::clear_zmin() {
  zmin_ = 0;
}
inline double EnvelopeData::zmin() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.zmin)
  return zmin_;
}
inline void EnvelopeData::set_zmin(double value) {
  
  zmin_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.zmin)
}

// double zmax = 7;
inline void EnvelopeData::clear_zmax() {
  zmax_ = 0;
}
inline double EnvelopeData::zmax() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.EnvelopeData.zmax)
  return zmax_;
}
inline void EnvelopeData::set_zmax(double value) {
  
  zmax_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.EnvelopeData.zmax)
}

// -------------------------------------------------------------------

// GeometryRequest_BufferParams

// double distance = 1;
inline void GeometryRequest_BufferParams::clear_distance() {
  distance_ = 0;
}
inline double GeometryRequest_BufferParams::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.BufferParams.distance)
  return distance_;
}
inline void GeometryRequest_BufferParams::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.BufferParams.distance)
}

// double max_deviation = 2;
inline void GeometryRequest_BufferParams::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double GeometryRequest_BufferParams::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.BufferParams.max_deviation)
  return max_deviation_;
}
inline void GeometryRequest_BufferParams::set_max_deviation(double value) {
  
  max_deviation_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.BufferParams.max_deviation)
}

// bool union_result = 3;
inline void GeometryRequest_BufferParams::clear_union_result() {
  union_result_ = false;
}
inline bool GeometryRequest_BufferParams::union_result() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.BufferParams.union_result)
  return union_result_;
}
inline void GeometryRequest_BufferParams::set_union_result(bool value) {
  
  union_result_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.BufferParams.union_result)
}

// int32 max_vertices_in_full_circle = 4;
inline void GeometryRequest_BufferParams::clear_max_vertices_in_full_circle() {
  max_vertices_in_full_circle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryRequest_BufferParams::max_vertices_in_full_circle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.BufferParams.max_vertices_in_full_circle)
  return max_vertices_in_full_circle_;
}
inline void GeometryRequest_BufferParams::set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_vertices_in_full_circle_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.BufferParams.max_vertices_in_full_circle)
}

// -------------------------------------------------------------------

// GeometryRequest_GeodeticBufferParams

// double distance = 1;
inline void GeometryRequest_GeodeticBufferParams::clear_distance() {
  distance_ = 0;
}
inline double GeometryRequest_GeodeticBufferParams::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeodeticBufferParams.distance)
  return distance_;
}
inline void GeometryRequest_GeodeticBufferParams::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeodeticBufferParams.distance)
}

// double max_deviation = 2;
inline void GeometryRequest_GeodeticBufferParams::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double GeometryRequest_GeodeticBufferParams::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeodeticBufferParams.max_deviation)
  return max_deviation_;
}
inline void GeometryRequest_GeodeticBufferParams::set_max_deviation(double value) {
  
  max_deviation_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeodeticBufferParams.max_deviation)
}

// bool union_result = 3;
inline void GeometryRequest_GeodeticBufferParams::clear_union_result() {
  union_result_ = false;
}
inline bool GeometryRequest_GeodeticBufferParams::union_result() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeodeticBufferParams.union_result)
  return union_result_;
}
inline void GeometryRequest_GeodeticBufferParams::set_union_result(bool value) {
  
  union_result_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeodeticBufferParams.union_result)
}

// int32 max_vertices_in_full_circle = 4;
inline void GeometryRequest_GeodeticBufferParams::clear_max_vertices_in_full_circle() {
  max_vertices_in_full_circle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryRequest_GeodeticBufferParams::max_vertices_in_full_circle() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeodeticBufferParams.max_vertices_in_full_circle)
  return max_vertices_in_full_circle_;
}
inline void GeometryRequest_GeodeticBufferParams::set_max_vertices_in_full_circle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_vertices_in_full_circle_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeodeticBufferParams.max_vertices_in_full_circle)
}

// -------------------------------------------------------------------

// GeometryRequest_ConvexParams

// bool merge = 1;
inline void GeometryRequest_ConvexParams::clear_merge() {
  merge_ = false;
}
inline bool GeometryRequest_ConvexParams::merge() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.ConvexParams.merge)
  return merge_;
}
inline void GeometryRequest_ConvexParams::set_merge(bool value) {
  
  merge_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.ConvexParams.merge)
}

// -------------------------------------------------------------------

// GeometryRequest_RelateParams

// string de_9im = 1;
inline void GeometryRequest_RelateParams::clear_de_9im() {
  de_9im_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryRequest_RelateParams::de_9im() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.RelateParams.de_9im)
  return de_9im_.GetNoArena();
}
inline void GeometryRequest_RelateParams::set_de_9im(const std::string& value) {
  
  de_9im_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.RelateParams.de_9im)
}
inline void GeometryRequest_RelateParams::set_de_9im(std::string&& value) {
  
  de_9im_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.GeometryRequest.RelateParams.de_9im)
}
inline void GeometryRequest_RelateParams::set_de_9im(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  de_9im_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.GeometryRequest.RelateParams.de_9im)
}
inline void GeometryRequest_RelateParams::set_de_9im(const char* value, size_t size) {
  
  de_9im_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.GeometryRequest.RelateParams.de_9im)
}
inline std::string* GeometryRequest_RelateParams::mutable_de_9im() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.RelateParams.de_9im)
  return de_9im_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryRequest_RelateParams::release_de_9im() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.RelateParams.de_9im)
  
  return de_9im_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryRequest_RelateParams::set_allocated_de_9im(std::string* de_9im) {
  if (de_9im != nullptr) {
    
  } else {
    
  }
  de_9im_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), de_9im);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.RelateParams.de_9im)
}

// -------------------------------------------------------------------

// GeometryRequest_RandomPointsParams

// double points_per_square_km = 1;
inline void GeometryRequest_RandomPointsParams::clear_points_per_square_km() {
  points_per_square_km_ = 0;
}
inline double GeometryRequest_RandomPointsParams::points_per_square_km() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.RandomPointsParams.points_per_square_km)
  return points_per_square_km_;
}
inline void GeometryRequest_RandomPointsParams::set_points_per_square_km(double value) {
  
  points_per_square_km_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.RandomPointsParams.points_per_square_km)
}

// int64 seed = 2;
inline void GeometryRequest_RandomPointsParams::clear_seed() {
  seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeometryRequest_RandomPointsParams::seed() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.RandomPointsParams.seed)
  return seed_;
}
inline void GeometryRequest_RandomPointsParams::set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.RandomPointsParams.seed)
}

// -------------------------------------------------------------------

// GeometryRequest_GeneralizeParams

// double max_deviation = 1;
inline void GeometryRequest_GeneralizeParams::clear_max_deviation() {
  max_deviation_ = 0;
}
inline double GeometryRequest_GeneralizeParams::max_deviation() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeneralizeParams.max_deviation)
  return max_deviation_;
}
inline void GeometryRequest_GeneralizeParams::set_max_deviation(double value) {
  
  max_deviation_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeneralizeParams.max_deviation)
}

// bool remove_degenerates = 2;
inline void GeometryRequest_GeneralizeParams::clear_remove_degenerates() {
  remove_degenerates_ = false;
}
inline bool GeometryRequest_GeneralizeParams::remove_degenerates() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeneralizeParams.remove_degenerates)
  return remove_degenerates_;
}
inline void GeometryRequest_GeneralizeParams::set_remove_degenerates(bool value) {
  
  remove_degenerates_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeneralizeParams.remove_degenerates)
}

// -------------------------------------------------------------------

// GeometryRequest_GeneralizeByAreaParams

// double percent_reduction = 1;
inline void GeometryRequest_GeneralizeByAreaParams::clear_percent_reduction() {
  percent_reduction_ = 0;
}
inline double GeometryRequest_GeneralizeByAreaParams::percent_reduction() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.percent_reduction)
  return percent_reduction_;
}
inline void GeometryRequest_GeneralizeByAreaParams::set_percent_reduction(double value) {
  
  percent_reduction_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.percent_reduction)
}

// bool remove_degenerates = 2;
inline void GeometryRequest_GeneralizeByAreaParams::clear_remove_degenerates() {
  remove_degenerates_ = false;
}
inline bool GeometryRequest_GeneralizeByAreaParams::remove_degenerates() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.remove_degenerates)
  return remove_degenerates_;
}
inline void GeometryRequest_GeneralizeByAreaParams::set_remove_degenerates(bool value) {
  
  remove_degenerates_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.remove_degenerates)
}

// int32 max_point_count = 3;
inline void GeometryRequest_GeneralizeByAreaParams::clear_max_point_count() {
  max_point_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryRequest_GeneralizeByAreaParams::max_point_count() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.max_point_count)
  return max_point_count_;
}
inline void GeometryRequest_GeneralizeByAreaParams::set_max_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_point_count_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.GeneralizeByAreaParams.max_point_count)
}

// -------------------------------------------------------------------

// GeometryRequest_IntersectionParams

// int32 dimension_mask = 1;
inline void GeometryRequest_IntersectionParams::clear_dimension_mask() {
  dimension_mask_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeometryRequest_IntersectionParams::dimension_mask() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.IntersectionParams.dimension_mask)
  return dimension_mask_;
}
inline void GeometryRequest_IntersectionParams::set_dimension_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimension_mask_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.IntersectionParams.dimension_mask)
}

// -------------------------------------------------------------------

// GeometryRequest_OffsetParams

// double distance = 1;
inline void GeometryRequest_OffsetParams::clear_distance() {
  distance_ = 0;
}
inline double GeometryRequest_OffsetParams::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.OffsetParams.distance)
  return distance_;
}
inline void GeometryRequest_OffsetParams::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.OffsetParams.distance)
}

// .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
inline void GeometryRequest_OffsetParams::clear_join_type() {
  join_type_ = 0;
}
inline ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::join_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.OffsetParams.join_type)
  return static_cast< ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType >(join_type_);
}
inline void GeometryRequest_OffsetParams::set_join_type(::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType value) {
  
  join_type_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.OffsetParams.join_type)
}

// double bevel_ratio = 3;
inline void GeometryRequest_OffsetParams::clear_bevel_ratio() {
  bevel_ratio_ = 0;
}
inline double GeometryRequest_OffsetParams::bevel_ratio() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.OffsetParams.bevel_ratio)
  return bevel_ratio_;
}
inline void GeometryRequest_OffsetParams::set_bevel_ratio(double value) {
  
  bevel_ratio_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.OffsetParams.bevel_ratio)
}

// double flatten_error = 4;
inline void GeometryRequest_OffsetParams::clear_flatten_error() {
  flatten_error_ = 0;
}
inline double GeometryRequest_OffsetParams::flatten_error() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.OffsetParams.flatten_error)
  return flatten_error_;
}
inline void GeometryRequest_OffsetParams::set_flatten_error(double value) {
  
  flatten_error_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.OffsetParams.flatten_error)
}

// -------------------------------------------------------------------

// GeometryRequest_CutParams

// bool consider_touch = 1;
inline void GeometryRequest_CutParams::clear_consider_touch() {
  consider_touch_ = false;
}
inline bool GeometryRequest_CutParams::consider_touch() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.CutParams.consider_touch)
  return consider_touch_;
}
inline void GeometryRequest_CutParams::set_consider_touch(bool value) {
  
  consider_touch_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.CutParams.consider_touch)
}

// -------------------------------------------------------------------

// GeometryRequest_ClipParams

// .epl.protobuf.EnvelopeData envelope = 1;
inline bool GeometryRequest_ClipParams::has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline void GeometryRequest_ClipParams::clear_envelope() {
  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::epl::protobuf::EnvelopeData& GeometryRequest_ClipParams::envelope() const {
  const ::epl::protobuf::EnvelopeData* p = envelope_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.ClipParams.envelope)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::EnvelopeData*>(
      &::epl::protobuf::_EnvelopeData_default_instance_);
}
inline ::epl::protobuf::EnvelopeData* GeometryRequest_ClipParams::release_envelope() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.ClipParams.envelope)
  
  ::epl::protobuf::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::epl::protobuf::EnvelopeData* GeometryRequest_ClipParams::mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::EnvelopeData>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.ClipParams.envelope)
  return envelope_;
}
inline void GeometryRequest_ClipParams::set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.ClipParams.envelope)
}

// -------------------------------------------------------------------

// GeometryRequest_DensifyParams

// double max_length = 1;
inline void GeometryRequest_DensifyParams::clear_max_length() {
  max_length_ = 0;
}
inline double GeometryRequest_DensifyParams::max_length() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.DensifyParams.max_length)
  return max_length_;
}
inline void GeometryRequest_DensifyParams::set_max_length(double value) {
  
  max_length_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.DensifyParams.max_length)
}

// -------------------------------------------------------------------

// GeometryRequest_SimplifyParams

// bool force = 1;
inline void GeometryRequest_SimplifyParams::clear_force() {
  force_ = false;
}
inline bool GeometryRequest_SimplifyParams::force() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.SimplifyParams.force)
  return force_;
}
inline void GeometryRequest_SimplifyParams::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.SimplifyParams.force)
}

// -------------------------------------------------------------------

// GeometryRequest_AffineTransformParams

// bool geodetic = 2;
inline void GeometryRequest_AffineTransformParams::clear_geodetic() {
  geodetic_ = false;
}
inline bool GeometryRequest_AffineTransformParams::geodetic() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.AffineTransformParams.geodetic)
  return geodetic_;
}
inline void GeometryRequest_AffineTransformParams::set_geodetic(bool value) {
  
  geodetic_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.AffineTransformParams.geodetic)
}

// double x_offset = 3;
inline void GeometryRequest_AffineTransformParams::clear_x_offset() {
  x_offset_ = 0;
}
inline double GeometryRequest_AffineTransformParams::x_offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.AffineTransformParams.x_offset)
  return x_offset_;
}
inline void GeometryRequest_AffineTransformParams::set_x_offset(double value) {
  
  x_offset_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.AffineTransformParams.x_offset)
}

// double y_offset = 4;
inline void GeometryRequest_AffineTransformParams::clear_y_offset() {
  y_offset_ = 0;
}
inline double GeometryRequest_AffineTransformParams::y_offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.AffineTransformParams.y_offset)
  return y_offset_;
}
inline void GeometryRequest_AffineTransformParams::set_y_offset(double value) {
  
  y_offset_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.AffineTransformParams.y_offset)
}

// -------------------------------------------------------------------

// GeometryRequest

// .epl.protobuf.GeometryData geometry = 1;
inline bool GeometryRequest::has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline void GeometryRequest::clear_geometry() {
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
inline const ::epl::protobuf::GeometryData& GeometryRequest::geometry() const {
  const ::epl::protobuf::GeometryData* p = geometry_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryData*>(
      &::epl::protobuf::_GeometryData_default_instance_);
}
inline ::epl::protobuf::GeometryData* GeometryRequest::release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.geometry)
  
  ::epl::protobuf::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryData* GeometryRequest::mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryData>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.geometry)
  return geometry_;
}
inline void GeometryRequest::set_allocated_geometry(::epl::protobuf::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geometry_;
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.geometry)
}

// .epl.protobuf.GeometryData left_geometry = 2;
inline bool GeometryRequest::has_left_geometry() const {
  return this != internal_default_instance() && left_geometry_ != nullptr;
}
inline void GeometryRequest::clear_left_geometry() {
  if (GetArenaNoVirtual() == nullptr && left_geometry_ != nullptr) {
    delete left_geometry_;
  }
  left_geometry_ = nullptr;
}
inline const ::epl::protobuf::GeometryData& GeometryRequest::left_geometry() const {
  const ::epl::protobuf::GeometryData* p = left_geometry_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.left_geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryData*>(
      &::epl::protobuf::_GeometryData_default_instance_);
}
inline ::epl::protobuf::GeometryData* GeometryRequest::release_left_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.left_geometry)
  
  ::epl::protobuf::GeometryData* temp = left_geometry_;
  left_geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryData* GeometryRequest::mutable_left_geometry() {
  
  if (left_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryData>(GetArenaNoVirtual());
    left_geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.left_geometry)
  return left_geometry_;
}
inline void GeometryRequest::set_allocated_left_geometry(::epl::protobuf::GeometryData* left_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_geometry_;
  }
  if (left_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_geometry, submessage_arena);
    }
    
  } else {
    
  }
  left_geometry_ = left_geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.left_geometry)
}

// .epl.protobuf.GeometryRequest geometry_request = 3;
inline bool GeometryRequest::has_geometry_request() const {
  return this != internal_default_instance() && geometry_request_ != nullptr;
}
inline void GeometryRequest::clear_geometry_request() {
  if (GetArenaNoVirtual() == nullptr && geometry_request_ != nullptr) {
    delete geometry_request_;
  }
  geometry_request_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest& GeometryRequest::geometry_request() const {
  const ::epl::protobuf::GeometryRequest* p = geometry_request_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.geometry_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest*>(
      &::epl::protobuf::_GeometryRequest_default_instance_);
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::release_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.geometry_request)
  
  ::epl::protobuf::GeometryRequest* temp = geometry_request_;
  geometry_request_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::mutable_geometry_request() {
  
  if (geometry_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest>(GetArenaNoVirtual());
    geometry_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.geometry_request)
  return geometry_request_;
}
inline void GeometryRequest::set_allocated_geometry_request(::epl::protobuf::GeometryRequest* geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geometry_request_;
  }
  if (geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_request, submessage_arena);
    }
    
  } else {
    
  }
  geometry_request_ = geometry_request;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.geometry_request)
}

// .epl.protobuf.GeometryRequest left_geometry_request = 4;
inline bool GeometryRequest::has_left_geometry_request() const {
  return this != internal_default_instance() && left_geometry_request_ != nullptr;
}
inline void GeometryRequest::clear_left_geometry_request() {
  if (GetArenaNoVirtual() == nullptr && left_geometry_request_ != nullptr) {
    delete left_geometry_request_;
  }
  left_geometry_request_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest& GeometryRequest::left_geometry_request() const {
  const ::epl::protobuf::GeometryRequest* p = left_geometry_request_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.left_geometry_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest*>(
      &::epl::protobuf::_GeometryRequest_default_instance_);
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::release_left_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.left_geometry_request)
  
  ::epl::protobuf::GeometryRequest* temp = left_geometry_request_;
  left_geometry_request_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::mutable_left_geometry_request() {
  
  if (left_geometry_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest>(GetArenaNoVirtual());
    left_geometry_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.left_geometry_request)
  return left_geometry_request_;
}
inline void GeometryRequest::set_allocated_left_geometry_request(::epl::protobuf::GeometryRequest* left_geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_geometry_request_;
  }
  if (left_geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_geometry_request, submessage_arena);
    }
    
  } else {
    
  }
  left_geometry_request_ = left_geometry_request;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.left_geometry_request)
}

// .epl.protobuf.GeometryData right_geometry = 5;
inline bool GeometryRequest::has_right_geometry() const {
  return this != internal_default_instance() && right_geometry_ != nullptr;
}
inline void GeometryRequest::clear_right_geometry() {
  if (GetArenaNoVirtual() == nullptr && right_geometry_ != nullptr) {
    delete right_geometry_;
  }
  right_geometry_ = nullptr;
}
inline const ::epl::protobuf::GeometryData& GeometryRequest::right_geometry() const {
  const ::epl::protobuf::GeometryData* p = right_geometry_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.right_geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryData*>(
      &::epl::protobuf::_GeometryData_default_instance_);
}
inline ::epl::protobuf::GeometryData* GeometryRequest::release_right_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.right_geometry)
  
  ::epl::protobuf::GeometryData* temp = right_geometry_;
  right_geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryData* GeometryRequest::mutable_right_geometry() {
  
  if (right_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryData>(GetArenaNoVirtual());
    right_geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.right_geometry)
  return right_geometry_;
}
inline void GeometryRequest::set_allocated_right_geometry(::epl::protobuf::GeometryData* right_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_geometry_;
  }
  if (right_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_geometry, submessage_arena);
    }
    
  } else {
    
  }
  right_geometry_ = right_geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.right_geometry)
}

// .epl.protobuf.GeometryRequest right_geometry_request = 6;
inline bool GeometryRequest::has_right_geometry_request() const {
  return this != internal_default_instance() && right_geometry_request_ != nullptr;
}
inline void GeometryRequest::clear_right_geometry_request() {
  if (GetArenaNoVirtual() == nullptr && right_geometry_request_ != nullptr) {
    delete right_geometry_request_;
  }
  right_geometry_request_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest& GeometryRequest::right_geometry_request() const {
  const ::epl::protobuf::GeometryRequest* p = right_geometry_request_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.right_geometry_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest*>(
      &::epl::protobuf::_GeometryRequest_default_instance_);
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::release_right_geometry_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.right_geometry_request)
  
  ::epl::protobuf::GeometryRequest* temp = right_geometry_request_;
  right_geometry_request_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest* GeometryRequest::mutable_right_geometry_request() {
  
  if (right_geometry_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest>(GetArenaNoVirtual());
    right_geometry_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.right_geometry_request)
  return right_geometry_request_;
}
inline void GeometryRequest::set_allocated_right_geometry_request(::epl::protobuf::GeometryRequest* right_geometry_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_geometry_request_;
  }
  if (right_geometry_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_geometry_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_geometry_request, submessage_arena);
    }
    
  } else {
    
  }
  right_geometry_request_ = right_geometry_request;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.right_geometry_request)
}

// .epl.protobuf.OperatorType operator = 7;
inline void GeometryRequest::clear_operator_() {
  operator__ = 0;
}
inline ::epl::protobuf::OperatorType GeometryRequest::operator_() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.operator)
  return static_cast< ::epl::protobuf::OperatorType >(operator__);
}
inline void GeometryRequest::set_operator_(::epl::protobuf::OperatorType value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.operator)
}

// .epl.protobuf.Encoding result_encoding = 8;
inline void GeometryRequest::clear_result_encoding() {
  result_encoding_ = 0;
}
inline ::epl::protobuf::Encoding GeometryRequest::result_encoding() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.result_encoding)
  return static_cast< ::epl::protobuf::Encoding >(result_encoding_);
}
inline void GeometryRequest::set_result_encoding(::epl::protobuf::Encoding value) {
  
  result_encoding_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryRequest.result_encoding)
}

// .epl.protobuf.SpatialReferenceData operation_sr = 9;
inline bool GeometryRequest::has_operation_sr() const {
  return this != internal_default_instance() && operation_sr_ != nullptr;
}
inline void GeometryRequest::clear_operation_sr() {
  if (GetArenaNoVirtual() == nullptr && operation_sr_ != nullptr) {
    delete operation_sr_;
  }
  operation_sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& GeometryRequest::operation_sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = operation_sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.operation_sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* GeometryRequest::release_operation_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.operation_sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = operation_sr_;
  operation_sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* GeometryRequest::mutable_operation_sr() {
  
  if (operation_sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    operation_sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.operation_sr)
  return operation_sr_;
}
inline void GeometryRequest::set_allocated_operation_sr(::epl::protobuf::SpatialReferenceData* operation_sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete operation_sr_;
  }
  if (operation_sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      operation_sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation_sr, submessage_arena);
    }
    
  } else {
    
  }
  operation_sr_ = operation_sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.operation_sr)
}

// .epl.protobuf.SpatialReferenceData result_sr = 10;
inline bool GeometryRequest::has_result_sr() const {
  return this != internal_default_instance() && result_sr_ != nullptr;
}
inline void GeometryRequest::clear_result_sr() {
  if (GetArenaNoVirtual() == nullptr && result_sr_ != nullptr) {
    delete result_sr_;
  }
  result_sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& GeometryRequest::result_sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = result_sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.result_sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* GeometryRequest::release_result_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.result_sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = result_sr_;
  result_sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* GeometryRequest::mutable_result_sr() {
  
  if (result_sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    result_sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.result_sr)
  return result_sr_;
}
inline void GeometryRequest::set_allocated_result_sr(::epl::protobuf::SpatialReferenceData* result_sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_sr_;
  }
  if (result_sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result_sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_sr, submessage_arena);
    }
    
  } else {
    
  }
  result_sr_ = result_sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.result_sr)
}

// .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
inline bool GeometryRequest::has_buffer_params() const {
  return this != internal_default_instance() && buffer_params_ != nullptr;
}
inline void GeometryRequest::clear_buffer_params() {
  if (GetArenaNoVirtual() == nullptr && buffer_params_ != nullptr) {
    delete buffer_params_;
  }
  buffer_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_BufferParams& GeometryRequest::buffer_params() const {
  const ::epl::protobuf::GeometryRequest_BufferParams* p = buffer_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.buffer_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_BufferParams*>(
      &::epl::protobuf::_GeometryRequest_BufferParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_BufferParams* GeometryRequest::release_buffer_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.buffer_params)
  
  ::epl::protobuf::GeometryRequest_BufferParams* temp = buffer_params_;
  buffer_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_BufferParams* GeometryRequest::mutable_buffer_params() {
  
  if (buffer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_BufferParams>(GetArenaNoVirtual());
    buffer_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.buffer_params)
  return buffer_params_;
}
inline void GeometryRequest::set_allocated_buffer_params(::epl::protobuf::GeometryRequest_BufferParams* buffer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buffer_params_;
  }
  if (buffer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_params, submessage_arena);
    }
    
  } else {
    
  }
  buffer_params_ = buffer_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.buffer_params)
}

// .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
inline bool GeometryRequest::has_convex_params() const {
  return this != internal_default_instance() && convex_params_ != nullptr;
}
inline void GeometryRequest::clear_convex_params() {
  if (GetArenaNoVirtual() == nullptr && convex_params_ != nullptr) {
    delete convex_params_;
  }
  convex_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_ConvexParams& GeometryRequest::convex_params() const {
  const ::epl::protobuf::GeometryRequest_ConvexParams* p = convex_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.convex_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_ConvexParams*>(
      &::epl::protobuf::_GeometryRequest_ConvexParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_ConvexParams* GeometryRequest::release_convex_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.convex_params)
  
  ::epl::protobuf::GeometryRequest_ConvexParams* temp = convex_params_;
  convex_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_ConvexParams* GeometryRequest::mutable_convex_params() {
  
  if (convex_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_ConvexParams>(GetArenaNoVirtual());
    convex_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.convex_params)
  return convex_params_;
}
inline void GeometryRequest::set_allocated_convex_params(::epl::protobuf::GeometryRequest_ConvexParams* convex_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete convex_params_;
  }
  if (convex_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      convex_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convex_params, submessage_arena);
    }
    
  } else {
    
  }
  convex_params_ = convex_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.convex_params)
}

// .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
inline bool GeometryRequest::has_relate_params() const {
  return this != internal_default_instance() && relate_params_ != nullptr;
}
inline void GeometryRequest::clear_relate_params() {
  if (GetArenaNoVirtual() == nullptr && relate_params_ != nullptr) {
    delete relate_params_;
  }
  relate_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_RelateParams& GeometryRequest::relate_params() const {
  const ::epl::protobuf::GeometryRequest_RelateParams* p = relate_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.relate_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_RelateParams*>(
      &::epl::protobuf::_GeometryRequest_RelateParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_RelateParams* GeometryRequest::release_relate_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.relate_params)
  
  ::epl::protobuf::GeometryRequest_RelateParams* temp = relate_params_;
  relate_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_RelateParams* GeometryRequest::mutable_relate_params() {
  
  if (relate_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_RelateParams>(GetArenaNoVirtual());
    relate_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.relate_params)
  return relate_params_;
}
inline void GeometryRequest::set_allocated_relate_params(::epl::protobuf::GeometryRequest_RelateParams* relate_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relate_params_;
  }
  if (relate_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relate_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relate_params, submessage_arena);
    }
    
  } else {
    
  }
  relate_params_ = relate_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.relate_params)
}

// .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
inline bool GeometryRequest::has_random_points_params() const {
  return this != internal_default_instance() && random_points_params_ != nullptr;
}
inline void GeometryRequest::clear_random_points_params() {
  if (GetArenaNoVirtual() == nullptr && random_points_params_ != nullptr) {
    delete random_points_params_;
  }
  random_points_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_RandomPointsParams& GeometryRequest::random_points_params() const {
  const ::epl::protobuf::GeometryRequest_RandomPointsParams* p = random_points_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.random_points_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_RandomPointsParams*>(
      &::epl::protobuf::_GeometryRequest_RandomPointsParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_RandomPointsParams* GeometryRequest::release_random_points_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.random_points_params)
  
  ::epl::protobuf::GeometryRequest_RandomPointsParams* temp = random_points_params_;
  random_points_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_RandomPointsParams* GeometryRequest::mutable_random_points_params() {
  
  if (random_points_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_RandomPointsParams>(GetArenaNoVirtual());
    random_points_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.random_points_params)
  return random_points_params_;
}
inline void GeometryRequest::set_allocated_random_points_params(::epl::protobuf::GeometryRequest_RandomPointsParams* random_points_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete random_points_params_;
  }
  if (random_points_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_points_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_points_params, submessage_arena);
    }
    
  } else {
    
  }
  random_points_params_ = random_points_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.random_points_params)
}

// .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
inline bool GeometryRequest::has_generalize_params() const {
  return this != internal_default_instance() && generalize_params_ != nullptr;
}
inline void GeometryRequest::clear_generalize_params() {
  if (GetArenaNoVirtual() == nullptr && generalize_params_ != nullptr) {
    delete generalize_params_;
  }
  generalize_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_GeneralizeParams& GeometryRequest::generalize_params() const {
  const ::epl::protobuf::GeometryRequest_GeneralizeParams* p = generalize_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.generalize_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_GeneralizeParams*>(
      &::epl::protobuf::_GeometryRequest_GeneralizeParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_GeneralizeParams* GeometryRequest::release_generalize_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.generalize_params)
  
  ::epl::protobuf::GeometryRequest_GeneralizeParams* temp = generalize_params_;
  generalize_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_GeneralizeParams* GeometryRequest::mutable_generalize_params() {
  
  if (generalize_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_GeneralizeParams>(GetArenaNoVirtual());
    generalize_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.generalize_params)
  return generalize_params_;
}
inline void GeometryRequest::set_allocated_generalize_params(::epl::protobuf::GeometryRequest_GeneralizeParams* generalize_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete generalize_params_;
  }
  if (generalize_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generalize_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalize_params, submessage_arena);
    }
    
  } else {
    
  }
  generalize_params_ = generalize_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.generalize_params)
}

// .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
inline bool GeometryRequest::has_intersection_params() const {
  return this != internal_default_instance() && intersection_params_ != nullptr;
}
inline void GeometryRequest::clear_intersection_params() {
  if (GetArenaNoVirtual() == nullptr && intersection_params_ != nullptr) {
    delete intersection_params_;
  }
  intersection_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_IntersectionParams& GeometryRequest::intersection_params() const {
  const ::epl::protobuf::GeometryRequest_IntersectionParams* p = intersection_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.intersection_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_IntersectionParams*>(
      &::epl::protobuf::_GeometryRequest_IntersectionParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_IntersectionParams* GeometryRequest::release_intersection_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.intersection_params)
  
  ::epl::protobuf::GeometryRequest_IntersectionParams* temp = intersection_params_;
  intersection_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_IntersectionParams* GeometryRequest::mutable_intersection_params() {
  
  if (intersection_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_IntersectionParams>(GetArenaNoVirtual());
    intersection_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.intersection_params)
  return intersection_params_;
}
inline void GeometryRequest::set_allocated_intersection_params(::epl::protobuf::GeometryRequest_IntersectionParams* intersection_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intersection_params_;
  }
  if (intersection_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection_params, submessage_arena);
    }
    
  } else {
    
  }
  intersection_params_ = intersection_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.intersection_params)
}

// .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
inline bool GeometryRequest::has_offset_params() const {
  return this != internal_default_instance() && offset_params_ != nullptr;
}
inline void GeometryRequest::clear_offset_params() {
  if (GetArenaNoVirtual() == nullptr && offset_params_ != nullptr) {
    delete offset_params_;
  }
  offset_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_OffsetParams& GeometryRequest::offset_params() const {
  const ::epl::protobuf::GeometryRequest_OffsetParams* p = offset_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.offset_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_OffsetParams*>(
      &::epl::protobuf::_GeometryRequest_OffsetParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_OffsetParams* GeometryRequest::release_offset_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.offset_params)
  
  ::epl::protobuf::GeometryRequest_OffsetParams* temp = offset_params_;
  offset_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_OffsetParams* GeometryRequest::mutable_offset_params() {
  
  if (offset_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_OffsetParams>(GetArenaNoVirtual());
    offset_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.offset_params)
  return offset_params_;
}
inline void GeometryRequest::set_allocated_offset_params(::epl::protobuf::GeometryRequest_OffsetParams* offset_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offset_params_;
  }
  if (offset_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset_params, submessage_arena);
    }
    
  } else {
    
  }
  offset_params_ = offset_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.offset_params)
}

// .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
inline bool GeometryRequest::has_cut_params() const {
  return this != internal_default_instance() && cut_params_ != nullptr;
}
inline void GeometryRequest::clear_cut_params() {
  if (GetArenaNoVirtual() == nullptr && cut_params_ != nullptr) {
    delete cut_params_;
  }
  cut_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_CutParams& GeometryRequest::cut_params() const {
  const ::epl::protobuf::GeometryRequest_CutParams* p = cut_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.cut_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_CutParams*>(
      &::epl::protobuf::_GeometryRequest_CutParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_CutParams* GeometryRequest::release_cut_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.cut_params)
  
  ::epl::protobuf::GeometryRequest_CutParams* temp = cut_params_;
  cut_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_CutParams* GeometryRequest::mutable_cut_params() {
  
  if (cut_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_CutParams>(GetArenaNoVirtual());
    cut_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.cut_params)
  return cut_params_;
}
inline void GeometryRequest::set_allocated_cut_params(::epl::protobuf::GeometryRequest_CutParams* cut_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cut_params_;
  }
  if (cut_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cut_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cut_params, submessage_arena);
    }
    
  } else {
    
  }
  cut_params_ = cut_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.cut_params)
}

// .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
inline bool GeometryRequest::has_clip_params() const {
  return this != internal_default_instance() && clip_params_ != nullptr;
}
inline void GeometryRequest::clear_clip_params() {
  if (GetArenaNoVirtual() == nullptr && clip_params_ != nullptr) {
    delete clip_params_;
  }
  clip_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_ClipParams& GeometryRequest::clip_params() const {
  const ::epl::protobuf::GeometryRequest_ClipParams* p = clip_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.clip_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_ClipParams*>(
      &::epl::protobuf::_GeometryRequest_ClipParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_ClipParams* GeometryRequest::release_clip_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.clip_params)
  
  ::epl::protobuf::GeometryRequest_ClipParams* temp = clip_params_;
  clip_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_ClipParams* GeometryRequest::mutable_clip_params() {
  
  if (clip_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_ClipParams>(GetArenaNoVirtual());
    clip_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.clip_params)
  return clip_params_;
}
inline void GeometryRequest::set_allocated_clip_params(::epl::protobuf::GeometryRequest_ClipParams* clip_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clip_params_;
  }
  if (clip_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clip_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip_params, submessage_arena);
    }
    
  } else {
    
  }
  clip_params_ = clip_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.clip_params)
}

// .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
inline bool GeometryRequest::has_densify_params() const {
  return this != internal_default_instance() && densify_params_ != nullptr;
}
inline void GeometryRequest::clear_densify_params() {
  if (GetArenaNoVirtual() == nullptr && densify_params_ != nullptr) {
    delete densify_params_;
  }
  densify_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_DensifyParams& GeometryRequest::densify_params() const {
  const ::epl::protobuf::GeometryRequest_DensifyParams* p = densify_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.densify_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_DensifyParams*>(
      &::epl::protobuf::_GeometryRequest_DensifyParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_DensifyParams* GeometryRequest::release_densify_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.densify_params)
  
  ::epl::protobuf::GeometryRequest_DensifyParams* temp = densify_params_;
  densify_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_DensifyParams* GeometryRequest::mutable_densify_params() {
  
  if (densify_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_DensifyParams>(GetArenaNoVirtual());
    densify_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.densify_params)
  return densify_params_;
}
inline void GeometryRequest::set_allocated_densify_params(::epl::protobuf::GeometryRequest_DensifyParams* densify_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete densify_params_;
  }
  if (densify_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      densify_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, densify_params, submessage_arena);
    }
    
  } else {
    
  }
  densify_params_ = densify_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.densify_params)
}

// .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
inline bool GeometryRequest::has_simplify_params() const {
  return this != internal_default_instance() && simplify_params_ != nullptr;
}
inline void GeometryRequest::clear_simplify_params() {
  if (GetArenaNoVirtual() == nullptr && simplify_params_ != nullptr) {
    delete simplify_params_;
  }
  simplify_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_SimplifyParams& GeometryRequest::simplify_params() const {
  const ::epl::protobuf::GeometryRequest_SimplifyParams* p = simplify_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.simplify_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_SimplifyParams*>(
      &::epl::protobuf::_GeometryRequest_SimplifyParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_SimplifyParams* GeometryRequest::release_simplify_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.simplify_params)
  
  ::epl::protobuf::GeometryRequest_SimplifyParams* temp = simplify_params_;
  simplify_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_SimplifyParams* GeometryRequest::mutable_simplify_params() {
  
  if (simplify_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_SimplifyParams>(GetArenaNoVirtual());
    simplify_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.simplify_params)
  return simplify_params_;
}
inline void GeometryRequest::set_allocated_simplify_params(::epl::protobuf::GeometryRequest_SimplifyParams* simplify_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simplify_params_;
  }
  if (simplify_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simplify_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simplify_params, submessage_arena);
    }
    
  } else {
    
  }
  simplify_params_ = simplify_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.simplify_params)
}

// .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
inline bool GeometryRequest::has_generalize_by_area_params() const {
  return this != internal_default_instance() && generalize_by_area_params_ != nullptr;
}
inline void GeometryRequest::clear_generalize_by_area_params() {
  if (GetArenaNoVirtual() == nullptr && generalize_by_area_params_ != nullptr) {
    delete generalize_by_area_params_;
  }
  generalize_by_area_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams& GeometryRequest::generalize_by_area_params() const {
  const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* p = generalize_by_area_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.generalize_by_area_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams*>(
      &::epl::protobuf::_GeometryRequest_GeneralizeByAreaParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* GeometryRequest::release_generalize_by_area_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.generalize_by_area_params)
  
  ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* temp = generalize_by_area_params_;
  generalize_by_area_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* GeometryRequest::mutable_generalize_by_area_params() {
  
  if (generalize_by_area_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_GeneralizeByAreaParams>(GetArenaNoVirtual());
    generalize_by_area_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.generalize_by_area_params)
  return generalize_by_area_params_;
}
inline void GeometryRequest::set_allocated_generalize_by_area_params(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* generalize_by_area_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete generalize_by_area_params_;
  }
  if (generalize_by_area_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generalize_by_area_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalize_by_area_params, submessage_arena);
    }
    
  } else {
    
  }
  generalize_by_area_params_ = generalize_by_area_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.generalize_by_area_params)
}

// .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
inline bool GeometryRequest::has_affine_transform_params() const {
  return this != internal_default_instance() && affine_transform_params_ != nullptr;
}
inline void GeometryRequest::clear_affine_transform_params() {
  if (GetArenaNoVirtual() == nullptr && affine_transform_params_ != nullptr) {
    delete affine_transform_params_;
  }
  affine_transform_params_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest_AffineTransformParams& GeometryRequest::affine_transform_params() const {
  const ::epl::protobuf::GeometryRequest_AffineTransformParams* p = affine_transform_params_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryRequest.affine_transform_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest_AffineTransformParams*>(
      &::epl::protobuf::_GeometryRequest_AffineTransformParams_default_instance_);
}
inline ::epl::protobuf::GeometryRequest_AffineTransformParams* GeometryRequest::release_affine_transform_params() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryRequest.affine_transform_params)
  
  ::epl::protobuf::GeometryRequest_AffineTransformParams* temp = affine_transform_params_;
  affine_transform_params_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest_AffineTransformParams* GeometryRequest::mutable_affine_transform_params() {
  
  if (affine_transform_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest_AffineTransformParams>(GetArenaNoVirtual());
    affine_transform_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryRequest.affine_transform_params)
  return affine_transform_params_;
}
inline void GeometryRequest::set_allocated_affine_transform_params(::epl::protobuf::GeometryRequest_AffineTransformParams* affine_transform_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete affine_transform_params_;
  }
  if (affine_transform_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      affine_transform_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine_transform_params, submessage_arena);
    }
    
  } else {
    
  }
  affine_transform_params_ = affine_transform_params;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryRequest.affine_transform_params)
}

// -------------------------------------------------------------------

// GeodeticInverse

// double az12 = 1;
inline void GeodeticInverse::clear_az12() {
  az12_ = 0;
}
inline double GeodeticInverse::az12() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeodeticInverse.az12)
  return az12_;
}
inline void GeodeticInverse::set_az12(double value) {
  
  az12_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeodeticInverse.az12)
}

// double az21 = 2;
inline void GeodeticInverse::clear_az21() {
  az21_ = 0;
}
inline double GeodeticInverse::az21() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeodeticInverse.az21)
  return az21_;
}
inline void GeodeticInverse::set_az21(double value) {
  
  az21_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeodeticInverse.az21)
}

// double distance = 3;
inline void GeodeticInverse::clear_distance() {
  distance_ = 0;
}
inline double GeodeticInverse::distance() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeodeticInverse.distance)
  return distance_;
}
inline void GeodeticInverse::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeodeticInverse.distance)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GeometryResponse

// .epl.protobuf.GeometryData geometry = 1;
inline bool GeometryResponse::has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline void GeometryResponse::clear_geometry() {
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
inline const ::epl::protobuf::GeometryData& GeometryResponse::geometry() const {
  const ::epl::protobuf::GeometryData* p = geometry_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryResponse.geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryData*>(
      &::epl::protobuf::_GeometryData_default_instance_);
}
inline ::epl::protobuf::GeometryData* GeometryResponse::release_geometry() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryResponse.geometry)
  
  ::epl::protobuf::GeometryData* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryData* GeometryResponse::mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryData>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryResponse.geometry)
  return geometry_;
}
inline void GeometryResponse::set_allocated_geometry(::epl::protobuf::GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geometry_;
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryResponse.geometry)
}

// bool spatial_relationship = 2;
inline void GeometryResponse::clear_spatial_relationship() {
  spatial_relationship_ = false;
}
inline bool GeometryResponse::spatial_relationship() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryResponse.spatial_relationship)
  return spatial_relationship_;
}
inline void GeometryResponse::set_spatial_relationship(bool value) {
  
  spatial_relationship_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryResponse.spatial_relationship)
}

// double measure = 3;
inline void GeometryResponse::clear_measure() {
  measure_ = 0;
}
inline double GeometryResponse::measure() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryResponse.measure)
  return measure_;
}
inline void GeometryResponse::set_measure(double value) {
  
  measure_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.GeometryResponse.measure)
}

// map<int64, bool> relate_map = 4;
inline int GeometryResponse::relate_map_size() const {
  return relate_map_.size();
}
inline void GeometryResponse::clear_relate_map() {
  relate_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >&
GeometryResponse::relate_map() const {
  // @@protoc_insertion_point(field_map:epl.protobuf.GeometryResponse.relate_map)
  return relate_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >*
GeometryResponse::mutable_relate_map() {
  // @@protoc_insertion_point(field_mutable_map:epl.protobuf.GeometryResponse.relate_map)
  return relate_map_.MutableMap();
}

// .epl.protobuf.EnvelopeData envelope = 5;
inline bool GeometryResponse::has_envelope() const {
  return this != internal_default_instance() && envelope_ != nullptr;
}
inline void GeometryResponse::clear_envelope() {
  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
}
inline const ::epl::protobuf::EnvelopeData& GeometryResponse::envelope() const {
  const ::epl::protobuf::EnvelopeData* p = envelope_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryResponse.envelope)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::EnvelopeData*>(
      &::epl::protobuf::_EnvelopeData_default_instance_);
}
inline ::epl::protobuf::EnvelopeData* GeometryResponse::release_envelope() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryResponse.envelope)
  
  ::epl::protobuf::EnvelopeData* temp = envelope_;
  envelope_ = nullptr;
  return temp;
}
inline ::epl::protobuf::EnvelopeData* GeometryResponse::mutable_envelope() {
  
  if (envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::EnvelopeData>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryResponse.envelope)
  return envelope_;
}
inline void GeometryResponse::set_allocated_envelope(::epl::protobuf::EnvelopeData* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryResponse.envelope)
}

// .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
inline bool GeometryResponse::has_geodetic_inverse() const {
  return this != internal_default_instance() && geodetic_inverse_ != nullptr;
}
inline void GeometryResponse::clear_geodetic_inverse() {
  if (GetArenaNoVirtual() == nullptr && geodetic_inverse_ != nullptr) {
    delete geodetic_inverse_;
  }
  geodetic_inverse_ = nullptr;
}
inline const ::epl::protobuf::GeodeticInverse& GeometryResponse::geodetic_inverse() const {
  const ::epl::protobuf::GeodeticInverse* p = geodetic_inverse_;
  // @@protoc_insertion_point(field_get:epl.protobuf.GeometryResponse.geodetic_inverse)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeodeticInverse*>(
      &::epl::protobuf::_GeodeticInverse_default_instance_);
}
inline ::epl::protobuf::GeodeticInverse* GeometryResponse::release_geodetic_inverse() {
  // @@protoc_insertion_point(field_release:epl.protobuf.GeometryResponse.geodetic_inverse)
  
  ::epl::protobuf::GeodeticInverse* temp = geodetic_inverse_;
  geodetic_inverse_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeodeticInverse* GeometryResponse::mutable_geodetic_inverse() {
  
  if (geodetic_inverse_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeodeticInverse>(GetArenaNoVirtual());
    geodetic_inverse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.GeometryResponse.geodetic_inverse)
  return geodetic_inverse_;
}
inline void GeometryResponse::set_allocated_geodetic_inverse(::epl::protobuf::GeodeticInverse* geodetic_inverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geodetic_inverse_;
  }
  if (geodetic_inverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geodetic_inverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic_inverse, submessage_arena);
    }
    
  } else {
    
  }
  geodetic_inverse_ = geodetic_inverse;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.GeometryResponse.geodetic_inverse)
}

// -------------------------------------------------------------------

// FileRequestChunk

// .epl.protobuf.GeometryRequest nested_request = 1;
inline bool FileRequestChunk::has_nested_request() const {
  return this != internal_default_instance() && nested_request_ != nullptr;
}
inline void FileRequestChunk::clear_nested_request() {
  if (GetArenaNoVirtual() == nullptr && nested_request_ != nullptr) {
    delete nested_request_;
  }
  nested_request_ = nullptr;
}
inline const ::epl::protobuf::GeometryRequest& FileRequestChunk::nested_request() const {
  const ::epl::protobuf::GeometryRequest* p = nested_request_;
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.nested_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::GeometryRequest*>(
      &::epl::protobuf::_GeometryRequest_default_instance_);
}
inline ::epl::protobuf::GeometryRequest* FileRequestChunk::release_nested_request() {
  // @@protoc_insertion_point(field_release:epl.protobuf.FileRequestChunk.nested_request)
  
  ::epl::protobuf::GeometryRequest* temp = nested_request_;
  nested_request_ = nullptr;
  return temp;
}
inline ::epl::protobuf::GeometryRequest* FileRequestChunk::mutable_nested_request() {
  
  if (nested_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::GeometryRequest>(GetArenaNoVirtual());
    nested_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.FileRequestChunk.nested_request)
  return nested_request_;
}
inline void FileRequestChunk::set_allocated_nested_request(::epl::protobuf::GeometryRequest* nested_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nested_request_;
  }
  if (nested_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nested_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_request, submessage_arena);
    }
    
  } else {
    
  }
  nested_request_ = nested_request;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.FileRequestChunk.nested_request)
}

// .epl.protobuf.Encoding result_encoding_type = 2;
inline void FileRequestChunk::clear_result_encoding_type() {
  result_encoding_type_ = 0;
}
inline ::epl::protobuf::Encoding FileRequestChunk::result_encoding_type() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.result_encoding_type)
  return static_cast< ::epl::protobuf::Encoding >(result_encoding_type_);
}
inline void FileRequestChunk::set_result_encoding_type(::epl::protobuf::Encoding value) {
  
  result_encoding_type_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.result_encoding_type)
}

// .epl.protobuf.SpatialReferenceData input_sr = 3;
inline bool FileRequestChunk::has_input_sr() const {
  return this != internal_default_instance() && input_sr_ != nullptr;
}
inline void FileRequestChunk::clear_input_sr() {
  if (GetArenaNoVirtual() == nullptr && input_sr_ != nullptr) {
    delete input_sr_;
  }
  input_sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& FileRequestChunk::input_sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = input_sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.input_sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* FileRequestChunk::release_input_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.FileRequestChunk.input_sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = input_sr_;
  input_sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* FileRequestChunk::mutable_input_sr() {
  
  if (input_sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    input_sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.FileRequestChunk.input_sr)
  return input_sr_;
}
inline void FileRequestChunk::set_allocated_input_sr(::epl::protobuf::SpatialReferenceData* input_sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_sr_;
  }
  if (input_sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_sr, submessage_arena);
    }
    
  } else {
    
  }
  input_sr_ = input_sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.FileRequestChunk.input_sr)
}

// .epl.protobuf.SpatialReferenceData result_sr = 5;
inline bool FileRequestChunk::has_result_sr() const {
  return this != internal_default_instance() && result_sr_ != nullptr;
}
inline void FileRequestChunk::clear_result_sr() {
  if (GetArenaNoVirtual() == nullptr && result_sr_ != nullptr) {
    delete result_sr_;
  }
  result_sr_ = nullptr;
}
inline const ::epl::protobuf::SpatialReferenceData& FileRequestChunk::result_sr() const {
  const ::epl::protobuf::SpatialReferenceData* p = result_sr_;
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.result_sr)
  return p != nullptr ? *p : *reinterpret_cast<const ::epl::protobuf::SpatialReferenceData*>(
      &::epl::protobuf::_SpatialReferenceData_default_instance_);
}
inline ::epl::protobuf::SpatialReferenceData* FileRequestChunk::release_result_sr() {
  // @@protoc_insertion_point(field_release:epl.protobuf.FileRequestChunk.result_sr)
  
  ::epl::protobuf::SpatialReferenceData* temp = result_sr_;
  result_sr_ = nullptr;
  return temp;
}
inline ::epl::protobuf::SpatialReferenceData* FileRequestChunk::mutable_result_sr() {
  
  if (result_sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::epl::protobuf::SpatialReferenceData>(GetArenaNoVirtual());
    result_sr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:epl.protobuf.FileRequestChunk.result_sr)
  return result_sr_;
}
inline void FileRequestChunk::set_allocated_result_sr(::epl::protobuf::SpatialReferenceData* result_sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_sr_;
  }
  if (result_sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result_sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_sr, submessage_arena);
    }
    
  } else {
    
  }
  result_sr_ = result_sr;
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.FileRequestChunk.result_sr)
}

// bytes data = 6;
inline void FileRequestChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileRequestChunk::data() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.data)
  return data_.GetNoArena();
}
inline void FileRequestChunk::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.data)
}
inline void FileRequestChunk::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.FileRequestChunk.data)
}
inline void FileRequestChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.FileRequestChunk.data)
}
inline void FileRequestChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.FileRequestChunk.data)
}
inline std::string* FileRequestChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.FileRequestChunk.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileRequestChunk::release_data() {
  // @@protoc_insertion_point(field_release:epl.protobuf.FileRequestChunk.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequestChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.FileRequestChunk.data)
}

// int64 size = 7;
inline void FileRequestChunk::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::size() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.size)
  return size_;
}
inline void FileRequestChunk::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.size)
}

// int64 offset = 8;
inline void FileRequestChunk::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileRequestChunk::offset() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.offset)
  return offset_;
}
inline void FileRequestChunk::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.offset)
}

// string file_name = 9;
inline void FileRequestChunk::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileRequestChunk::file_name() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.file_name)
  return file_name_.GetNoArena();
}
inline void FileRequestChunk::set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.file_name)
}
inline void FileRequestChunk::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:epl.protobuf.FileRequestChunk.file_name)
}
inline void FileRequestChunk::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:epl.protobuf.FileRequestChunk.file_name)
}
inline void FileRequestChunk::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:epl.protobuf.FileRequestChunk.file_name)
}
inline std::string* FileRequestChunk::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:epl.protobuf.FileRequestChunk.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileRequestChunk::release_file_name() {
  // @@protoc_insertion_point(field_release:epl.protobuf.FileRequestChunk.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequestChunk::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:epl.protobuf.FileRequestChunk.file_name)
}

// bool is_last_chunk = 10;
inline void FileRequestChunk::clear_is_last_chunk() {
  is_last_chunk_ = false;
}
inline bool FileRequestChunk::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:epl.protobuf.FileRequestChunk.is_last_chunk)
  return is_last_chunk_;
}
inline void FileRequestChunk::set_is_last_chunk(bool value) {
  
  is_last_chunk_ = value;
  // @@protoc_insertion_point(field_set:epl.protobuf.FileRequestChunk.is_last_chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace epl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::epl::protobuf::SpatialReferenceData_CSType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::SpatialReferenceData_CSType>() {
  return ::epl::protobuf::SpatialReferenceData_CSType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType>() {
  return ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::FileRequestChunk_FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::FileRequestChunk_FileType>() {
  return ::epl::protobuf::FileRequestChunk_FileType_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::SimpleState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::SimpleState>() {
  return ::epl::protobuf::SimpleState_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::Encoding>() {
  return ::epl::protobuf::Encoding_descriptor();
}
template <> struct is_proto_enum< ::epl::protobuf::OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::epl::protobuf::OperatorType>() {
  return ::epl::protobuf::OperatorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_epl_2fprotobuf_2fgeometry_2eproto
