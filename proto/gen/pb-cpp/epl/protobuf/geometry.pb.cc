// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epl/protobuf/geometry.proto

#include "epl/protobuf/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_epl_2fprotobuf_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto;
namespace epl {
namespace protobuf {
class GeometryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryData> _instance;
} _GeometryData_default_instance_;
class SpatialReferenceData_CustomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpatialReferenceData_Custom> _instance;
} _SpatialReferenceData_Custom_default_instance_;
class SpatialReferenceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpatialReferenceData> _instance;
} _SpatialReferenceData_default_instance_;
class EnvelopeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvelopeData> _instance;
} _EnvelopeData_default_instance_;
class GeometryRequest_BufferParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_BufferParams> _instance;
} _GeometryRequest_BufferParams_default_instance_;
class GeometryRequest_GeodeticBufferParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_GeodeticBufferParams> _instance;
} _GeometryRequest_GeodeticBufferParams_default_instance_;
class GeometryRequest_ConvexParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_ConvexParams> _instance;
} _GeometryRequest_ConvexParams_default_instance_;
class GeometryRequest_RelateParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_RelateParams> _instance;
} _GeometryRequest_RelateParams_default_instance_;
class GeometryRequest_RandomPointsParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_RandomPointsParams> _instance;
} _GeometryRequest_RandomPointsParams_default_instance_;
class GeometryRequest_GeneralizeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_GeneralizeParams> _instance;
} _GeometryRequest_GeneralizeParams_default_instance_;
class GeometryRequest_GeneralizeByAreaParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_GeneralizeByAreaParams> _instance;
} _GeometryRequest_GeneralizeByAreaParams_default_instance_;
class GeometryRequest_IntersectionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_IntersectionParams> _instance;
} _GeometryRequest_IntersectionParams_default_instance_;
class GeometryRequest_OffsetParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_OffsetParams> _instance;
} _GeometryRequest_OffsetParams_default_instance_;
class GeometryRequest_CutParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_CutParams> _instance;
} _GeometryRequest_CutParams_default_instance_;
class GeometryRequest_ClipParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_ClipParams> _instance;
} _GeometryRequest_ClipParams_default_instance_;
class GeometryRequest_DensifyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_DensifyParams> _instance;
} _GeometryRequest_DensifyParams_default_instance_;
class GeometryRequest_SimplifyParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_SimplifyParams> _instance;
} _GeometryRequest_SimplifyParams_default_instance_;
class GeometryRequest_AffineTransformParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest_AffineTransformParams> _instance;
} _GeometryRequest_AffineTransformParams_default_instance_;
class GeometryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryRequest> _instance;
} _GeometryRequest_default_instance_;
class GeodeticInverseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeodeticInverse> _instance;
} _GeodeticInverse_default_instance_;
class GeometryResponse_RelateMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryResponse_RelateMapEntry_DoNotUse> _instance;
} _GeometryResponse_RelateMapEntry_DoNotUse_default_instance_;
class GeometryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryResponse> _instance;
} _GeometryResponse_default_instance_;
class FileRequestChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileRequestChunk> _instance;
} _FileRequestChunk_default_instance_;
}  // namespace protobuf
}  // namespace epl
static void InitDefaultsscc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_EnvelopeData_default_instance_;
    new (ptr) ::epl::protobuf::EnvelopeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::EnvelopeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_FileRequestChunk_default_instance_;
    new (ptr) ::epl::protobuf::FileRequestChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::FileRequestChunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeodeticInverse_default_instance_;
    new (ptr) ::epl::protobuf::GeodeticInverse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeodeticInverse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryData_default_instance_;
    new (ptr) ::epl::protobuf::GeometryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsscc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_AffineTransformParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_AffineTransformParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_AffineTransformParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_BufferParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_BufferParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_BufferParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_ClipParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_ClipParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_ClipParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_ConvexParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_ConvexParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_ConvexParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_CutParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_CutParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_CutParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_DensifyParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_DensifyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_DensifyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_GeneralizeByAreaParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_GeneralizeParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_GeneralizeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_GeneralizeParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_GeodeticBufferParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_GeodeticBufferParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_GeodeticBufferParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_GeodeticBufferParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_GeodeticBufferParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_GeodeticBufferParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_IntersectionParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_IntersectionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_IntersectionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_OffsetParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_OffsetParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_OffsetParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_RandomPointsParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_RandomPointsParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_RandomPointsParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_RelateParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_RelateParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_RelateParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryRequest_SimplifyParams_default_instance_;
    new (ptr) ::epl::protobuf::GeometryRequest_SimplifyParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryRequest_SimplifyParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryResponse_default_instance_;
    new (ptr) ::epl::protobuf::GeometryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::GeometryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base,
      &scc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_GeometryResponse_RelateMapEntry_DoNotUse_default_instance_;
    new (ptr) ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse();
  }
  ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_SpatialReferenceData_default_instance_;
    new (ptr) ::epl::protobuf::SpatialReferenceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::SpatialReferenceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto}, {
      &scc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::epl::protobuf::_SpatialReferenceData_Custom_default_instance_;
    new (ptr) ::epl::protobuf::SpatialReferenceData_Custom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::epl::protobuf::SpatialReferenceData_Custom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_epl_2fprotobuf_2fgeometry_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_epl_2fprotobuf_2fgeometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_epl_2fprotobuf_2fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, geometry_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, feature_id_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, wkt_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, geojson_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, wkb_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, esri_shape_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, envelope_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryData, simple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData_Custom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData_Custom, lon_0_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData_Custom, lat_0_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData_Custom, cs_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData, wkid_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData, proj4_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData, custom_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::SpatialReferenceData, wkt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, xmin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, ymin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, xmax_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, ymax_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, zmin_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::EnvelopeData, zmax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_BufferParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_BufferParams, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_BufferParams, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_BufferParams, union_result_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_BufferParams, max_vertices_in_full_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeodeticBufferParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeodeticBufferParams, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeodeticBufferParams, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeodeticBufferParams, union_result_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeodeticBufferParams, max_vertices_in_full_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_ConvexParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_ConvexParams, merge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_RelateParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_RelateParams, de_9im_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_RandomPointsParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_RandomPointsParams, points_per_square_km_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_RandomPointsParams, seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeParams, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeParams, remove_degenerates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams, percent_reduction_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams, remove_degenerates_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams, max_point_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_IntersectionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_IntersectionParams, dimension_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_OffsetParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_OffsetParams, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_OffsetParams, join_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_OffsetParams, bevel_ratio_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_OffsetParams, flatten_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_CutParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_CutParams, consider_touch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_ClipParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_ClipParams, envelope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_DensifyParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_DensifyParams, max_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_SimplifyParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_SimplifyParams, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_AffineTransformParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_AffineTransformParams, geodetic_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_AffineTransformParams, x_offset_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest_AffineTransformParams, y_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, left_geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, geometry_request_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, left_geometry_request_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, right_geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, right_geometry_request_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, operator__),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, result_encoding_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, operation_sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, result_sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, buffer_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, convex_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, relate_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, random_points_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, generalize_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, intersection_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, offset_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, cut_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, clip_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, densify_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, simplify_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, generalize_by_area_params_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryRequest, affine_transform_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeodeticInverse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeodeticInverse, az12_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeodeticInverse, az21_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeodeticInverse, distance_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, geometry_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, spatial_relationship_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, measure_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, relate_map_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, envelope_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::GeometryResponse, geodetic_inverse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, nested_request_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, result_encoding_type_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, input_sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, result_sr_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, data_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, size_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, offset_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, file_name_),
  PROTOBUF_FIELD_OFFSET(::epl::protobuf::FileRequestChunk, is_last_chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::epl::protobuf::GeometryData)},
  { 14, -1, sizeof(::epl::protobuf::SpatialReferenceData_Custom)},
  { 22, -1, sizeof(::epl::protobuf::SpatialReferenceData)},
  { 31, -1, sizeof(::epl::protobuf::EnvelopeData)},
  { 43, -1, sizeof(::epl::protobuf::GeometryRequest_BufferParams)},
  { 52, -1, sizeof(::epl::protobuf::GeometryRequest_GeodeticBufferParams)},
  { 61, -1, sizeof(::epl::protobuf::GeometryRequest_ConvexParams)},
  { 67, -1, sizeof(::epl::protobuf::GeometryRequest_RelateParams)},
  { 73, -1, sizeof(::epl::protobuf::GeometryRequest_RandomPointsParams)},
  { 80, -1, sizeof(::epl::protobuf::GeometryRequest_GeneralizeParams)},
  { 87, -1, sizeof(::epl::protobuf::GeometryRequest_GeneralizeByAreaParams)},
  { 95, -1, sizeof(::epl::protobuf::GeometryRequest_IntersectionParams)},
  { 101, -1, sizeof(::epl::protobuf::GeometryRequest_OffsetParams)},
  { 110, -1, sizeof(::epl::protobuf::GeometryRequest_CutParams)},
  { 116, -1, sizeof(::epl::protobuf::GeometryRequest_ClipParams)},
  { 122, -1, sizeof(::epl::protobuf::GeometryRequest_DensifyParams)},
  { 128, -1, sizeof(::epl::protobuf::GeometryRequest_SimplifyParams)},
  { 134, -1, sizeof(::epl::protobuf::GeometryRequest_AffineTransformParams)},
  { 142, -1, sizeof(::epl::protobuf::GeometryRequest)},
  { 170, -1, sizeof(::epl::protobuf::GeodeticInverse)},
  { 178, 185, sizeof(::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse)},
  { 187, -1, sizeof(::epl::protobuf::GeometryResponse)},
  { 198, -1, sizeof(::epl::protobuf::FileRequestChunk)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_SpatialReferenceData_Custom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_SpatialReferenceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_EnvelopeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_BufferParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_GeodeticBufferParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_ConvexParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_RelateParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_RandomPointsParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_GeneralizeParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_GeneralizeByAreaParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_IntersectionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_OffsetParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_CutParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_ClipParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_DensifyParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_SimplifyParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_AffineTransformParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeodeticInverse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryResponse_RelateMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_GeometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::epl::protobuf::_FileRequestChunk_default_instance_),
};

const char descriptor_table_protodef_epl_2fprotobuf_2fgeometry_2eproto[] =
  "\n\033epl/protobuf/geometry.proto\022\014epl.proto"
  "buf\"\205\002\n\014GeometryData\022\023\n\013geometry_id\030\001 \001("
  "\004\022\022\n\nfeature_id\030\002 \001(\t\022\013\n\003wkt\030\003 \001(\t\022\017\n\007ge"
  "ojson\030\004 \001(\t\022\013\n\003wkb\030\005 \001(\014\022\022\n\nesri_shape\030\006"
  " \001(\014\022.\n\002sr\030\007 \001(\0132\".epl.protobuf.SpatialR"
  "eferenceData\022,\n\010envelope\030\r \001(\0132\032.epl.pro"
  "tobuf.EnvelopeData\022)\n\006simple\030\016 \001(\0162\031.epl"
  ".protobuf.SimpleStateJ\004\010\010\020\r\"\372\001\n\024SpatialR"
  "eferenceData\022\014\n\004wkid\030\001 \001(\005\022\r\n\005proj4\030\002 \001("
  "\t\0229\n\006custom\030\003 \001(\0132).epl.protobuf.Spatial"
  "ReferenceData.Custom\022\013\n\003wkt\030\004 \001(\t\032b\n\006Cus"
  "tom\022\r\n\005lon_0\030\001 \001(\001\022\r\n\005lat_0\030\002 \001(\001\022:\n\007cs_"
  "type\030\003 \001(\0162).epl.protobuf.SpatialReferen"
  "ceData.CSType\"\031\n\006CSType\022\017\n\013LAMBERT_AZI\020\000"
  "\"\222\001\n\014EnvelopeData\022\014\n\004xmin\030\001 \001(\001\022\014\n\004ymin\030"
  "\002 \001(\001\022\014\n\004xmax\030\003 \001(\001\022\014\n\004ymax\030\004 \001(\001\022.\n\002sr\030"
  "\005 \001(\0132\".epl.protobuf.SpatialReferenceDat"
  "a\022\014\n\004zmin\030\006 \001(\001\022\014\n\004zmax\030\007 \001(\001\"\201\024\n\017Geomet"
  "ryRequest\022,\n\010geometry\030\001 \001(\0132\032.epl.protob"
  "uf.GeometryData\0221\n\rleft_geometry\030\002 \001(\0132\032"
  ".epl.protobuf.GeometryData\0227\n\020geometry_r"
  "equest\030\003 \001(\0132\035.epl.protobuf.GeometryRequ"
  "est\022<\n\025left_geometry_request\030\004 \001(\0132\035.epl"
  ".protobuf.GeometryRequest\0222\n\016right_geome"
  "try\030\005 \001(\0132\032.epl.protobuf.GeometryData\022=\n"
  "\026right_geometry_request\030\006 \001(\0132\035.epl.prot"
  "obuf.GeometryRequest\022,\n\010operator\030\007 \001(\0162\032"
  ".epl.protobuf.OperatorType\022/\n\017result_enc"
  "oding\030\010 \001(\0162\026.epl.protobuf.Encoding\0228\n\014o"
  "peration_sr\030\t \001(\0132\".epl.protobuf.Spatial"
  "ReferenceData\0225\n\tresult_sr\030\n \001(\0132\".epl.p"
  "rotobuf.SpatialReferenceData\022A\n\rbuffer_p"
  "arams\030\013 \001(\0132*.epl.protobuf.GeometryReque"
  "st.BufferParams\022A\n\rconvex_params\030\014 \001(\0132*"
  ".epl.protobuf.GeometryRequest.ConvexPara"
  "ms\022A\n\rrelate_params\030\r \001(\0132*.epl.protobuf"
  ".GeometryRequest.RelateParams\022N\n\024random_"
  "points_params\030\016 \001(\01320.epl.protobuf.Geome"
  "tryRequest.RandomPointsParams\022I\n\021general"
  "ize_params\030\017 \001(\0132..epl.protobuf.Geometry"
  "Request.GeneralizeParams\022M\n\023intersection"
  "_params\030\020 \001(\01320.epl.protobuf.GeometryReq"
  "uest.IntersectionParams\022A\n\roffset_params"
  "\030\021 \001(\0132*.epl.protobuf.GeometryRequest.Of"
  "fsetParams\022;\n\ncut_params\030\022 \001(\0132\'.epl.pro"
  "tobuf.GeometryRequest.CutParams\022=\n\013clip_"
  "params\030\023 \001(\0132(.epl.protobuf.GeometryRequ"
  "est.ClipParams\022C\n\016densify_params\030\024 \001(\0132+"
  ".epl.protobuf.GeometryRequest.DensifyPar"
  "ams\022E\n\017simplify_params\030\025 \001(\0132,.epl.proto"
  "buf.GeometryRequest.SimplifyParams\022W\n\031ge"
  "neralize_by_area_params\030\026 \001(\01324.epl.prot"
  "obuf.GeometryRequest.GeneralizeByAreaPar"
  "ams\022T\n\027affine_transform_params\030\027 \001(\01323.e"
  "pl.protobuf.GeometryRequest.AffineTransf"
  "ormParams\032r\n\014BufferParams\022\020\n\010distance\030\001 "
  "\001(\001\022\025\n\rmax_deviation\030\002 \001(\001\022\024\n\014union_resu"
  "lt\030\003 \001(\010\022#\n\033max_vertices_in_full_circle\030"
  "\004 \001(\005\032z\n\024GeodeticBufferParams\022\020\n\010distanc"
  "e\030\001 \001(\001\022\025\n\rmax_deviation\030\002 \001(\001\022\024\n\014union_"
  "result\030\003 \001(\010\022#\n\033max_vertices_in_full_cir"
  "cle\030\004 \001(\005\032\035\n\014ConvexParams\022\r\n\005merge\030\001 \001(\010"
  "\032\036\n\014RelateParams\022\016\n\006de_9im\030\001 \001(\t\032@\n\022Rand"
  "omPointsParams\022\034\n\024points_per_square_km\030\001"
  " \001(\001\022\014\n\004seed\030\002 \001(\003\032E\n\020GeneralizeParams\022\025"
  "\n\rmax_deviation\030\001 \001(\001\022\032\n\022remove_degenera"
  "tes\030\002 \001(\010\032h\n\026GeneralizeByAreaParams\022\031\n\021p"
  "ercent_reduction\030\001 \001(\001\022\032\n\022remove_degener"
  "ates\030\002 \001(\010\022\027\n\017max_point_count\030\003 \001(\005\032,\n\022I"
  "ntersectionParams\022\026\n\016dimension_mask\030\001 \001("
  "\005\032\331\001\n\014OffsetParams\022\020\n\010distance\030\001 \001(\001\022L\n\t"
  "join_type\030\002 \001(\01629.epl.protobuf.GeometryR"
  "equest.OffsetParams.OffsetJoinType\022\023\n\013be"
  "vel_ratio\030\003 \001(\001\022\025\n\rflatten_error\030\004 \001(\001\"="
  "\n\016OffsetJoinType\022\t\n\005ROUND\020\000\022\t\n\005BEVEL\020\001\022\t"
  "\n\005MITER\020\002\022\n\n\006SQUARE\020\003\032#\n\tCutParams\022\026\n\016co"
  "nsider_touch\030\001 \001(\010\032:\n\nClipParams\022,\n\010enve"
  "lope\030\001 \001(\0132\032.epl.protobuf.EnvelopeData\032#"
  "\n\rDensifyParams\022\022\n\nmax_length\030\001 \001(\001\032\037\n\016S"
  "implifyParams\022\r\n\005force\030\001 \001(\010\032S\n\025AffineTr"
  "ansformParams\022\020\n\010geodetic\030\002 \001(\010\022\020\n\010x_off"
  "set\030\003 \001(\001\022\020\n\010y_offset\030\004 \001(\001J\004\010\001\020\002\"\?\n\017Geo"
  "deticInverse\022\014\n\004az12\030\001 \001(\001\022\014\n\004az21\030\002 \001(\001"
  "\022\020\n\010distance\030\003 \001(\001\"\313\002\n\020GeometryResponse\022"
  ",\n\010geometry\030\001 \001(\0132\032.epl.protobuf.Geometr"
  "yData\022\034\n\024spatial_relationship\030\002 \001(\010\022\017\n\007m"
  "easure\030\003 \001(\001\022A\n\nrelate_map\030\004 \003(\0132-.epl.p"
  "rotobuf.GeometryResponse.RelateMapEntry\022"
  ",\n\010envelope\030\005 \001(\0132\032.epl.protobuf.Envelop"
  "eData\0227\n\020geodetic_inverse\030\006 \001(\0132\035.epl.pr"
  "otobuf.GeodeticInverse\0320\n\016RelateMapEntry"
  "\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\010:\0028\001\"\335\002\n\020Fil"
  "eRequestChunk\0225\n\016nested_request\030\001 \001(\0132\035."
  "epl.protobuf.GeometryRequest\0224\n\024result_e"
  "ncoding_type\030\002 \001(\0162\026.epl.protobuf.Encodi"
  "ng\0224\n\010input_sr\030\003 \001(\0132\".epl.protobuf.Spat"
  "ialReferenceData\0225\n\tresult_sr\030\005 \001(\0132\".ep"
  "l.protobuf.SpatialReferenceData\022\014\n\004data\030"
  "\006 \001(\014\022\014\n\004size\030\007 \001(\003\022\016\n\006offset\030\010 \001(\003\022\021\n\tf"
  "ile_name\030\t \001(\t\022\025\n\ris_last_chunk\030\n \001(\010\"\031\n"
  "\010FileType\022\r\n\tSHAPEFILE\020\000*\306\001\n\013SimpleState"
  "\022\022\n\016SIMPLE_UNKNOWN\020\000\022\017\n\013WEAK_SIMPLE\020\001\022\021\n"
  "\rSTRONG_SIMPLE\020\002\022\016\n\nNON_SIMPLE\020\003\022\022\n\016STRU"
  "CTURE_FLAW\020\004\022\027\n\023DEGENERATE_SEGMENTS\020\005\022\016\n"
  "\nCLUSTERING\020\006\022\014\n\010CRACKING\020\007\022\016\n\nCROSS_OVE"
  "R\020\010\022\024\n\020RING_ORIENTATION\020\t*]\n\010Encoding\022\024\n"
  "\020UNKNOWN_ENCODING\020\000\022\007\n\003WKB\020\001\022\007\n\003WKT\020\002\022\013\n"
  "\007GEOJSON\020\003\022\016\n\nESRI_SHAPE\020\004\022\014\n\010ENVELOPE\020\005"
  "*\313\006\n\014OperatorType\022\024\n\020UNKNOWN_OPERATOR\020\000\022"
  "\013\n\007PROJECT\020\001\022\022\n\016EXPORT_TO_JSON\020\002\022\024\n\020IMPO"
  "RT_FROM_JSON\020\003\022\030\n\024EXPORT_TO_ESRI_SHAPE\020\004"
  "\022\032\n\026IMPORT_FROM_ESRI_SHAPE\020\005\022\t\n\005UNION\020\006\022"
  "\016\n\nDIFFERENCE\020\007\022\020\n\014PROXIMITY_2D\020\010\022\n\n\006REL"
  "ATE\020\t\022\n\n\006EQUALS\020\n\022\014\n\010DISJOINT\020\013\022\016\n\nINTER"
  "SECTS\020\014\022\n\n\006WITHIN\020\r\022\014\n\010CONTAINS\020\016\022\013\n\007CRO"
  "SSES\020\017\022\013\n\007TOUCHES\020\020\022\014\n\010OVERLAPS\020\021\022\n\n\006BUF"
  "FER\020\022\022\014\n\010DISTANCE\020\023\022\020\n\014INTERSECTION\020\024\022\010\n"
  "\004CLIP\020\025\022\007\n\003CUT\020\026\022\025\n\021DENSIFY_BY_LENGTH\020\027\022"
  "\023\n\017GEODESIC_BUFFER\020\032\022\036\n\032GEODETIC_DENSIFY"
  "_BY_LENGTH\020\033\022\021\n\rGEODETIC_AREA\020\036\022\014\n\010SIMPL"
  "IFY\020\037\022\020\n\014SIMPLIFY_OGC\020 \022\n\n\006OFFSET\020!\022\016\n\nG"
  "ENERALIZE\020\"\022\026\n\022GENERALIZE_BY_AREA\020#\022\021\n\rE"
  "XPORT_TO_WKB\020$\022\023\n\017IMPORT_FROM_WKB\020%\022\021\n\rE"
  "XPORT_TO_WKT\020&\022\023\n\017IMPORT_FROM_WKT\020\'\022\027\n\023I"
  "MPORT_FROM_GEOJSON\020(\022\025\n\021EXPORT_TO_GEOJSO"
  "N\020)\022\030\n\024SYMMETRIC_DIFFERENCE\020*\022\017\n\013CONVEX_"
  "HULL\020+\022\014\n\010BOUNDARY\020,\022\021\n\rRANDOM_POINTS\020-\022"
  "\024\n\020ENCLOSING_CIRCLE\020.\022\024\n\020AFFINE_TRANSFOR"
  "M\020/\022\023\n\017GEODETIC_LENGTH\0200\022\024\n\020GEODETIC_INV"
  "ERSE\0201BW\n\020com.epl.protobufB\rGeometryProt"
  "oP\001Z+github.com/geo-grpc/api/golang/epl/"
  "protobuf\242\002\004GMPBb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_sccs[23] = {
  &scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_GeodeticBufferParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_GeometryResponse_RelateMapEntry_DoNotUse_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base,
  &scc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_once;
static bool descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epl_2fprotobuf_2fgeometry_2eproto = {
  &descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_initialized, descriptor_table_protodef_epl_2fprotobuf_2fgeometry_2eproto, "epl/protobuf/geometry.proto", 5263,
  &descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_once, descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_sccs, descriptor_table_epl_2fprotobuf_2fgeometry_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_epl_2fprotobuf_2fgeometry_2eproto::offsets,
  file_level_metadata_epl_2fprotobuf_2fgeometry_2eproto, 23, file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto, file_level_service_descriptors_epl_2fprotobuf_2fgeometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_epl_2fprotobuf_2fgeometry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto), true);
namespace epl {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpatialReferenceData_CSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[0];
}
bool SpatialReferenceData_CSType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpatialReferenceData_CSType SpatialReferenceData::LAMBERT_AZI;
constexpr SpatialReferenceData_CSType SpatialReferenceData::CSType_MIN;
constexpr SpatialReferenceData_CSType SpatialReferenceData::CSType_MAX;
constexpr int SpatialReferenceData::CSType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeometryRequest_OffsetParams_OffsetJoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[1];
}
bool GeometryRequest_OffsetParams_OffsetJoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::ROUND;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::BEVEL;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::MITER;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::SQUARE;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::OffsetJoinType_MIN;
constexpr GeometryRequest_OffsetParams_OffsetJoinType GeometryRequest_OffsetParams::OffsetJoinType_MAX;
constexpr int GeometryRequest_OffsetParams::OffsetJoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileRequestChunk_FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[2];
}
bool FileRequestChunk_FileType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FileRequestChunk_FileType FileRequestChunk::SHAPEFILE;
constexpr FileRequestChunk_FileType FileRequestChunk::FileType_MIN;
constexpr FileRequestChunk_FileType FileRequestChunk::FileType_MAX;
constexpr int FileRequestChunk::FileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[3];
}
bool SimpleState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[4];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epl_2fprotobuf_2fgeometry_2eproto);
  return file_level_enum_descriptors_epl_2fprotobuf_2fgeometry_2eproto[5];
}
bool OperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 26:
    case 27:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GeometryData::InitAsDefaultInstance() {
  ::epl::protobuf::_GeometryData_default_instance_._instance.get_mutable()->sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
  ::epl::protobuf::_GeometryData_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::epl::protobuf::EnvelopeData*>(
      ::epl::protobuf::EnvelopeData::internal_default_instance());
}
class GeometryData::HasBitSetters {
 public:
  static const ::epl::protobuf::SpatialReferenceData& sr(const GeometryData* msg);
  static const ::epl::protobuf::EnvelopeData& envelope(const GeometryData* msg);
};

const ::epl::protobuf::SpatialReferenceData&
GeometryData::HasBitSetters::sr(const GeometryData* msg) {
  return *msg->sr_;
}
const ::epl::protobuf::EnvelopeData&
GeometryData::HasBitSetters::envelope(const GeometryData* msg) {
  return *msg->envelope_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryData::kGeometryIdFieldNumber;
const int GeometryData::kFeatureIdFieldNumber;
const int GeometryData::kWktFieldNumber;
const int GeometryData::kGeojsonFieldNumber;
const int GeometryData::kWkbFieldNumber;
const int GeometryData::kEsriShapeFieldNumber;
const int GeometryData::kSrFieldNumber;
const int GeometryData::kEnvelopeFieldNumber;
const int GeometryData::kSimpleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryData::GeometryData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryData)
}
GeometryData::GeometryData(const GeometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.feature_id().size() > 0) {
    feature_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.feature_id_);
  }
  wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.wkt().size() > 0) {
    wkt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkt_);
  }
  geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.geojson().size() > 0) {
    geojson_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geojson_);
  }
  wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.wkb().size() > 0) {
    wkb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkb_);
  }
  esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.esri_shape().size() > 0) {
    esri_shape_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.esri_shape_);
  }
  if (from.has_sr()) {
    sr_ = new ::epl::protobuf::SpatialReferenceData(*from.sr_);
  } else {
    sr_ = nullptr;
  }
  if (from.has_envelope()) {
    envelope_ = new ::epl::protobuf::EnvelopeData(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  ::memcpy(&geometry_id_, &from.geometry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&simple_) -
    reinterpret_cast<char*>(&geometry_id_)) + sizeof(simple_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryData)
}

void GeometryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto.base);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geojson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  esri_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simple_) -
      reinterpret_cast<char*>(&sr_)) + sizeof(simple_));
}

GeometryData::~GeometryData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryData)
  SharedDtor();
}

void GeometryData::SharedDtor() {
  feature_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geojson_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  esri_shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sr_;
  if (this != internal_default_instance()) delete envelope_;
}

void GeometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryData& GeometryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryData_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geojson_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  esri_shape_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sr_ != nullptr) {
    delete sr_;
  }
  sr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  ::memset(&geometry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simple_) -
      reinterpret_cast<char*>(&geometry_id_)) + sizeof(simple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 geometry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          geometry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string feature_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_feature_id(), ptr, ctx, "epl.protobuf.GeometryData.feature_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wkt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_wkt(), ptr, ctx, "epl.protobuf.GeometryData.wkt");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geojson = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_geojson(), ptr, ctx, "epl.protobuf.GeometryData.geojson");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes wkb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_wkb(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes esri_shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_esri_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData sr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.EnvelopeData envelope = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_envelope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SimpleState simple = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_simple(static_cast<::epl::protobuf::SimpleState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 geometry_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &geometry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feature_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->feature_id().data(), static_cast<int>(this->feature_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.GeometryData.feature_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wkt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_wkt()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->wkt().data(), static_cast<int>(this->wkt().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.GeometryData.wkt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geojson = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_geojson()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->geojson().data(), static_cast<int>(this->geojson().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.GeometryData.geojson"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes wkb = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wkb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes esri_shape = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_esri_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData sr = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.EnvelopeData envelope = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SimpleState simple = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_simple(static_cast< ::epl::protobuf::SimpleState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 geometry_id = 1;
  if (this->geometry_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->geometry_id(), output);
  }

  // string feature_id = 2;
  if (this->feature_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->feature_id().data(), static_cast<int>(this->feature_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.feature_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feature_id(), output);
  }

  // string wkt = 3;
  if (this->wkt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->wkt().data(), static_cast<int>(this->wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.wkt");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wkt(), output);
  }

  // string geojson = 4;
  if (this->geojson().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->geojson().data(), static_cast<int>(this->geojson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.geojson");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->geojson(), output);
  }

  // bytes wkb = 5;
  if (this->wkb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->wkb(), output);
  }

  // bytes esri_shape = 6;
  if (this->esri_shape().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->esri_shape(), output);
  }

  // .epl.protobuf.SpatialReferenceData sr = 7;
  if (this->has_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::sr(this), output);
  }

  // .epl.protobuf.EnvelopeData envelope = 13;
  if (this->has_envelope()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::envelope(this), output);
  }

  // .epl.protobuf.SimpleState simple = 14;
  if (this->simple() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->simple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryData)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 geometry_id = 1;
  if (this->geometry_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->geometry_id(), target);
  }

  // string feature_id = 2;
  if (this->feature_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->feature_id().data(), static_cast<int>(this->feature_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.feature_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->feature_id(), target);
  }

  // string wkt = 3;
  if (this->wkt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->wkt().data(), static_cast<int>(this->wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.wkt");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->wkt(), target);
  }

  // string geojson = 4;
  if (this->geojson().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->geojson().data(), static_cast<int>(this->geojson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryData.geojson");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->geojson(), target);
  }

  // bytes wkb = 5;
  if (this->wkb().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->wkb(), target);
  }

  // bytes esri_shape = 6;
  if (this->esri_shape().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->esri_shape(), target);
  }

  // .epl.protobuf.SpatialReferenceData sr = 7;
  if (this->has_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::sr(this), target);
  }

  // .epl.protobuf.EnvelopeData envelope = 13;
  if (this->has_envelope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::envelope(this), target);
  }

  // .epl.protobuf.SimpleState simple = 14;
  if (this->simple() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->simple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryData)
  return target;
}

size_t GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feature_id = 2;
  if (this->feature_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->feature_id());
  }

  // string wkt = 3;
  if (this->wkt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->wkt());
  }

  // string geojson = 4;
  if (this->geojson().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->geojson());
  }

  // bytes wkb = 5;
  if (this->wkb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->wkb());
  }

  // bytes esri_shape = 6;
  if (this->esri_shape().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->esri_shape());
  }

  // .epl.protobuf.SpatialReferenceData sr = 7;
  if (this->has_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_);
  }

  // .epl.protobuf.EnvelopeData envelope = 13;
  if (this->has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // uint64 geometry_id = 1;
  if (this->geometry_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->geometry_id());
  }

  // .epl.protobuf.SimpleState simple = 14;
  if (this->simple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->simple());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryData)
    MergeFrom(*source);
  }
}

void GeometryData::MergeFrom(const GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_id().size() > 0) {

    feature_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.feature_id_);
  }
  if (from.wkt().size() > 0) {

    wkt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkt_);
  }
  if (from.geojson().size() > 0) {

    geojson_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geojson_);
  }
  if (from.wkb().size() > 0) {

    wkb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkb_);
  }
  if (from.esri_shape().size() > 0) {

    esri_shape_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.esri_shape_);
  }
  if (from.has_sr()) {
    mutable_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.sr());
  }
  if (from.has_envelope()) {
    mutable_envelope()->::epl::protobuf::EnvelopeData::MergeFrom(from.envelope());
  }
  if (from.geometry_id() != 0) {
    set_geometry_id(from.geometry_id());
  }
  if (from.simple() != 0) {
    set_simple(from.simple());
  }
}

void GeometryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryData::CopyFrom(const GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryData::IsInitialized() const {
  return true;
}

void GeometryData::Swap(GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryData::InternalSwap(GeometryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_id_.Swap(&other->feature_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wkt_.Swap(&other->wkt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geojson_.Swap(&other->geojson_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wkb_.Swap(&other->wkb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  esri_shape_.Swap(&other->esri_shape_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sr_, other->sr_);
  swap(envelope_, other->envelope_);
  swap(geometry_id_, other->geometry_id_);
  swap(simple_, other->simple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpatialReferenceData_Custom::InitAsDefaultInstance() {
}
class SpatialReferenceData_Custom::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialReferenceData_Custom::kLon0FieldNumber;
const int SpatialReferenceData_Custom::kLat0FieldNumber;
const int SpatialReferenceData_Custom::kCsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialReferenceData_Custom::SpatialReferenceData_Custom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.SpatialReferenceData.Custom)
}
SpatialReferenceData_Custom::SpatialReferenceData_Custom(const SpatialReferenceData_Custom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lon_0_, &from.lon_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&cs_type_) -
    reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.SpatialReferenceData.Custom)
}

void SpatialReferenceData_Custom::SharedCtor() {
  ::memset(&lon_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cs_type_) -
      reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
}

SpatialReferenceData_Custom::~SpatialReferenceData_Custom() {
  // @@protoc_insertion_point(destructor:epl.protobuf.SpatialReferenceData.Custom)
  SharedDtor();
}

void SpatialReferenceData_Custom::SharedDtor() {
}

void SpatialReferenceData_Custom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpatialReferenceData_Custom& SpatialReferenceData_Custom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpatialReferenceData_Custom_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SpatialReferenceData_Custom::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.SpatialReferenceData.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cs_type_) -
      reinterpret_cast<char*>(&lon_0_)) + sizeof(cs_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpatialReferenceData_Custom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lon_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lon_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cs_type(static_cast<::epl::protobuf::SpatialReferenceData_CSType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpatialReferenceData_Custom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.SpatialReferenceData.Custom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lon_0 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat_0 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cs_type(static_cast< ::epl::protobuf::SpatialReferenceData_CSType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.SpatialReferenceData.Custom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.SpatialReferenceData.Custom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpatialReferenceData_Custom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.SpatialReferenceData.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lon_0 = 1;
  if (!(this->lon_0() <= 0 && this->lon_0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->lon_0(), output);
  }

  // double lat_0 = 2;
  if (!(this->lat_0() <= 0 && this->lat_0() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->lat_0(), output);
  }

  // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
  if (this->cs_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->cs_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.SpatialReferenceData.Custom)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpatialReferenceData_Custom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.SpatialReferenceData.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lon_0 = 1;
  if (!(this->lon_0() <= 0 && this->lon_0() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->lon_0(), target);
  }

  // double lat_0 = 2;
  if (!(this->lat_0() <= 0 && this->lat_0() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->lat_0(), target);
  }

  // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
  if (this->cs_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->cs_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.SpatialReferenceData.Custom)
  return target;
}

size_t SpatialReferenceData_Custom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.SpatialReferenceData.Custom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lon_0 = 1;
  if (!(this->lon_0() <= 0 && this->lon_0() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat_0 = 2;
  if (!(this->lat_0() <= 0 && this->lat_0() >= 0)) {
    total_size += 1 + 8;
  }

  // .epl.protobuf.SpatialReferenceData.CSType cs_type = 3;
  if (this->cs_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cs_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpatialReferenceData_Custom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.SpatialReferenceData.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialReferenceData_Custom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpatialReferenceData_Custom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.SpatialReferenceData.Custom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.SpatialReferenceData.Custom)
    MergeFrom(*source);
  }
}

void SpatialReferenceData_Custom::MergeFrom(const SpatialReferenceData_Custom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.SpatialReferenceData.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lon_0() <= 0 && from.lon_0() >= 0)) {
    set_lon_0(from.lon_0());
  }
  if (!(from.lat_0() <= 0 && from.lat_0() >= 0)) {
    set_lat_0(from.lat_0());
  }
  if (from.cs_type() != 0) {
    set_cs_type(from.cs_type());
  }
}

void SpatialReferenceData_Custom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.SpatialReferenceData.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialReferenceData_Custom::CopyFrom(const SpatialReferenceData_Custom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.SpatialReferenceData.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialReferenceData_Custom::IsInitialized() const {
  return true;
}

void SpatialReferenceData_Custom::Swap(SpatialReferenceData_Custom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialReferenceData_Custom::InternalSwap(SpatialReferenceData_Custom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lon_0_, other->lon_0_);
  swap(lat_0_, other->lat_0_);
  swap(cs_type_, other->cs_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialReferenceData_Custom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpatialReferenceData::InitAsDefaultInstance() {
  ::epl::protobuf::_SpatialReferenceData_default_instance_._instance.get_mutable()->custom_ = const_cast< ::epl::protobuf::SpatialReferenceData_Custom*>(
      ::epl::protobuf::SpatialReferenceData_Custom::internal_default_instance());
}
class SpatialReferenceData::HasBitSetters {
 public:
  static const ::epl::protobuf::SpatialReferenceData_Custom& custom(const SpatialReferenceData* msg);
};

const ::epl::protobuf::SpatialReferenceData_Custom&
SpatialReferenceData::HasBitSetters::custom(const SpatialReferenceData* msg) {
  return *msg->custom_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialReferenceData::kWkidFieldNumber;
const int SpatialReferenceData::kProj4FieldNumber;
const int SpatialReferenceData::kCustomFieldNumber;
const int SpatialReferenceData::kWktFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialReferenceData::SpatialReferenceData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.SpatialReferenceData)
}
SpatialReferenceData::SpatialReferenceData(const SpatialReferenceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.proj4().size() > 0) {
    proj4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj4_);
  }
  wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.wkt().size() > 0) {
    wkt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkt_);
  }
  if (from.has_custom()) {
    custom_ = new ::epl::protobuf::SpatialReferenceData_Custom(*from.custom_);
  } else {
    custom_ = nullptr;
  }
  wkid_ = from.wkid_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.SpatialReferenceData)
}

void SpatialReferenceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base);
  proj4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wkid_) -
      reinterpret_cast<char*>(&custom_)) + sizeof(wkid_));
}

SpatialReferenceData::~SpatialReferenceData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.SpatialReferenceData)
  SharedDtor();
}

void SpatialReferenceData::SharedDtor() {
  proj4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_;
}

void SpatialReferenceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpatialReferenceData& SpatialReferenceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpatialReferenceData_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SpatialReferenceData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.SpatialReferenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proj4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wkt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && custom_ != nullptr) {
    delete custom_;
  }
  custom_ = nullptr;
  wkid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpatialReferenceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wkid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proj4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_proj4(), ptr, ctx, "epl.protobuf.SpatialReferenceData.proj4");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wkt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_wkt(), ptr, ctx, "epl.protobuf.SpatialReferenceData.wkt");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpatialReferenceData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.SpatialReferenceData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wkid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proj4 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_proj4()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->proj4().data(), static_cast<int>(this->proj4().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.SpatialReferenceData.proj4"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wkt = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_wkt()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->wkt().data(), static_cast<int>(this->wkt().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.SpatialReferenceData.wkt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.SpatialReferenceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.SpatialReferenceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpatialReferenceData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.SpatialReferenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wkid = 1;
  if (this->wkid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->wkid(), output);
  }

  // string proj4 = 2;
  if (this->proj4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proj4().data(), static_cast<int>(this->proj4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.SpatialReferenceData.proj4");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proj4(), output);
  }

  // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
  if (this->has_custom()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::custom(this), output);
  }

  // string wkt = 4;
  if (this->wkt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->wkt().data(), static_cast<int>(this->wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.SpatialReferenceData.wkt");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wkt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.SpatialReferenceData)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpatialReferenceData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.SpatialReferenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wkid = 1;
  if (this->wkid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->wkid(), target);
  }

  // string proj4 = 2;
  if (this->proj4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proj4().data(), static_cast<int>(this->proj4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.SpatialReferenceData.proj4");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->proj4(), target);
  }

  // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
  if (this->has_custom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::custom(this), target);
  }

  // string wkt = 4;
  if (this->wkt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->wkt().data(), static_cast<int>(this->wkt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.SpatialReferenceData.wkt");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->wkt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.SpatialReferenceData)
  return target;
}

size_t SpatialReferenceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.SpatialReferenceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proj4 = 2;
  if (this->proj4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->proj4());
  }

  // string wkt = 4;
  if (this->wkt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->wkt());
  }

  // .epl.protobuf.SpatialReferenceData.Custom custom = 3;
  if (this->has_custom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_);
  }

  // int32 wkid = 1;
  if (this->wkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wkid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpatialReferenceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.SpatialReferenceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialReferenceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpatialReferenceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.SpatialReferenceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.SpatialReferenceData)
    MergeFrom(*source);
  }
}

void SpatialReferenceData::MergeFrom(const SpatialReferenceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.SpatialReferenceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proj4().size() > 0) {

    proj4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj4_);
  }
  if (from.wkt().size() > 0) {

    wkt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wkt_);
  }
  if (from.has_custom()) {
    mutable_custom()->::epl::protobuf::SpatialReferenceData_Custom::MergeFrom(from.custom());
  }
  if (from.wkid() != 0) {
    set_wkid(from.wkid());
  }
}

void SpatialReferenceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.SpatialReferenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialReferenceData::CopyFrom(const SpatialReferenceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.SpatialReferenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialReferenceData::IsInitialized() const {
  return true;
}

void SpatialReferenceData::Swap(SpatialReferenceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialReferenceData::InternalSwap(SpatialReferenceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proj4_.Swap(&other->proj4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wkt_.Swap(&other->wkt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_, other->custom_);
  swap(wkid_, other->wkid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialReferenceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvelopeData::InitAsDefaultInstance() {
  ::epl::protobuf::_EnvelopeData_default_instance_._instance.get_mutable()->sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
}
class EnvelopeData::HasBitSetters {
 public:
  static const ::epl::protobuf::SpatialReferenceData& sr(const EnvelopeData* msg);
};

const ::epl::protobuf::SpatialReferenceData&
EnvelopeData::HasBitSetters::sr(const EnvelopeData* msg) {
  return *msg->sr_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvelopeData::kXminFieldNumber;
const int EnvelopeData::kYminFieldNumber;
const int EnvelopeData::kXmaxFieldNumber;
const int EnvelopeData::kYmaxFieldNumber;
const int EnvelopeData::kSrFieldNumber;
const int EnvelopeData::kZminFieldNumber;
const int EnvelopeData::kZmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvelopeData::EnvelopeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.EnvelopeData)
}
EnvelopeData::EnvelopeData(const EnvelopeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sr()) {
    sr_ = new ::epl::protobuf::SpatialReferenceData(*from.sr_);
  } else {
    sr_ = nullptr;
  }
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&zmax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.EnvelopeData)
}

void EnvelopeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base);
  ::memset(&sr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmax_) -
      reinterpret_cast<char*>(&sr_)) + sizeof(zmax_));
}

EnvelopeData::~EnvelopeData() {
  // @@protoc_insertion_point(destructor:epl.protobuf.EnvelopeData)
  SharedDtor();
}

void EnvelopeData::SharedDtor() {
  if (this != internal_default_instance()) delete sr_;
}

void EnvelopeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvelopeData& EnvelopeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvelopeData_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void EnvelopeData::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.EnvelopeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sr_ != nullptr) {
    delete sr_;
  }
  sr_ = nullptr;
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvelopeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData sr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double zmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          zmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double zmax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          zmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvelopeData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.EnvelopeData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double xmin = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ymin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xmax = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ymax = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData sr = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zmin = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zmax = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.EnvelopeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.EnvelopeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvelopeData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.EnvelopeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->xmin(), output);
  }

  // double ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->ymin(), output);
  }

  // double xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->xmax(), output);
  }

  // double ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->ymax(), output);
  }

  // .epl.protobuf.SpatialReferenceData sr = 5;
  if (this->has_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sr(this), output);
  }

  // double zmin = 6;
  if (!(this->zmin() <= 0 && this->zmin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->zmin(), output);
  }

  // double zmax = 7;
  if (!(this->zmax() <= 0 && this->zmax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->zmax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.EnvelopeData)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvelopeData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.EnvelopeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->xmin(), target);
  }

  // double ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->ymin(), target);
  }

  // double xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->xmax(), target);
  }

  // double ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->ymax(), target);
  }

  // .epl.protobuf.SpatialReferenceData sr = 5;
  if (this->has_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sr(this), target);
  }

  // double zmin = 6;
  if (!(this->zmin() <= 0 && this->zmin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->zmin(), target);
  }

  // double zmax = 7;
  if (!(this->zmax() <= 0 && this->zmax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->zmax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.EnvelopeData)
  return target;
}

size_t EnvelopeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.EnvelopeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.SpatialReferenceData sr = 5;
  if (this->has_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_);
  }

  // double xmin = 1;
  if (!(this->xmin() <= 0 && this->xmin() >= 0)) {
    total_size += 1 + 8;
  }

  // double ymin = 2;
  if (!(this->ymin() <= 0 && this->ymin() >= 0)) {
    total_size += 1 + 8;
  }

  // double xmax = 3;
  if (!(this->xmax() <= 0 && this->xmax() >= 0)) {
    total_size += 1 + 8;
  }

  // double ymax = 4;
  if (!(this->ymax() <= 0 && this->ymax() >= 0)) {
    total_size += 1 + 8;
  }

  // double zmin = 6;
  if (!(this->zmin() <= 0 && this->zmin() >= 0)) {
    total_size += 1 + 8;
  }

  // double zmax = 7;
  if (!(this->zmax() <= 0 && this->zmax() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvelopeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.EnvelopeData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvelopeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvelopeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.EnvelopeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.EnvelopeData)
    MergeFrom(*source);
  }
}

void EnvelopeData::MergeFrom(const EnvelopeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.EnvelopeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sr()) {
    mutable_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.sr());
  }
  if (!(from.xmin() <= 0 && from.xmin() >= 0)) {
    set_xmin(from.xmin());
  }
  if (!(from.ymin() <= 0 && from.ymin() >= 0)) {
    set_ymin(from.ymin());
  }
  if (!(from.xmax() <= 0 && from.xmax() >= 0)) {
    set_xmax(from.xmax());
  }
  if (!(from.ymax() <= 0 && from.ymax() >= 0)) {
    set_ymax(from.ymax());
  }
  if (!(from.zmin() <= 0 && from.zmin() >= 0)) {
    set_zmin(from.zmin());
  }
  if (!(from.zmax() <= 0 && from.zmax() >= 0)) {
    set_zmax(from.zmax());
  }
}

void EnvelopeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.EnvelopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvelopeData::CopyFrom(const EnvelopeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.EnvelopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvelopeData::IsInitialized() const {
  return true;
}

void EnvelopeData::Swap(EnvelopeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvelopeData::InternalSwap(EnvelopeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sr_, other->sr_);
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
  swap(zmin_, other->zmin_);
  swap(zmax_, other->zmax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvelopeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_BufferParams::InitAsDefaultInstance() {
}
class GeometryRequest_BufferParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_BufferParams::kDistanceFieldNumber;
const int GeometryRequest_BufferParams::kMaxDeviationFieldNumber;
const int GeometryRequest_BufferParams::kUnionResultFieldNumber;
const int GeometryRequest_BufferParams::kMaxVerticesInFullCircleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_BufferParams::GeometryRequest_BufferParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.BufferParams)
}
GeometryRequest_BufferParams::GeometryRequest_BufferParams(const GeometryRequest_BufferParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.BufferParams)
}

void GeometryRequest_BufferParams::SharedCtor() {
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
}

GeometryRequest_BufferParams::~GeometryRequest_BufferParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.BufferParams)
  SharedDtor();
}

void GeometryRequest_BufferParams::SharedDtor() {
}

void GeometryRequest_BufferParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_BufferParams& GeometryRequest_BufferParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_BufferParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_BufferParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.BufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_BufferParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool union_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          union_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_vertices_in_full_circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_vertices_in_full_circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_BufferParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.BufferParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double distance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_deviation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool union_result = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &union_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertices_in_full_circle = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertices_in_full_circle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.BufferParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.BufferParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_BufferParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.BufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->max_deviation(), output);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->union_result(), output);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_vertices_in_full_circle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.BufferParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_BufferParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.BufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->max_deviation(), target);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->union_result(), target);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_vertices_in_full_circle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.BufferParams)
  return target;
}

size_t GeometryRequest_BufferParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.BufferParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_vertices_in_full_circle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_BufferParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.BufferParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_BufferParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_BufferParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.BufferParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.BufferParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_BufferParams::MergeFrom(const GeometryRequest_BufferParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.BufferParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    set_max_deviation(from.max_deviation());
  }
  if (from.union_result() != 0) {
    set_union_result(from.union_result());
  }
  if (from.max_vertices_in_full_circle() != 0) {
    set_max_vertices_in_full_circle(from.max_vertices_in_full_circle());
  }
}

void GeometryRequest_BufferParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.BufferParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_BufferParams::CopyFrom(const GeometryRequest_BufferParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.BufferParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_BufferParams::IsInitialized() const {
  return true;
}

void GeometryRequest_BufferParams::Swap(GeometryRequest_BufferParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_BufferParams::InternalSwap(GeometryRequest_BufferParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
  swap(max_deviation_, other->max_deviation_);
  swap(union_result_, other->union_result_);
  swap(max_vertices_in_full_circle_, other->max_vertices_in_full_circle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_BufferParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_GeodeticBufferParams::InitAsDefaultInstance() {
}
class GeometryRequest_GeodeticBufferParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_GeodeticBufferParams::kDistanceFieldNumber;
const int GeometryRequest_GeodeticBufferParams::kMaxDeviationFieldNumber;
const int GeometryRequest_GeodeticBufferParams::kUnionResultFieldNumber;
const int GeometryRequest_GeodeticBufferParams::kMaxVerticesInFullCircleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_GeodeticBufferParams::GeometryRequest_GeodeticBufferParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.GeodeticBufferParams)
}
GeometryRequest_GeodeticBufferParams::GeometryRequest_GeodeticBufferParams(const GeometryRequest_GeodeticBufferParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.GeodeticBufferParams)
}

void GeometryRequest_GeodeticBufferParams::SharedCtor() {
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
}

GeometryRequest_GeodeticBufferParams::~GeometryRequest_GeodeticBufferParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  SharedDtor();
}

void GeometryRequest_GeodeticBufferParams::SharedDtor() {
}

void GeometryRequest_GeodeticBufferParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_GeodeticBufferParams& GeometryRequest_GeodeticBufferParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_GeodeticBufferParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_GeodeticBufferParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_vertices_in_full_circle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(max_vertices_in_full_circle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_GeodeticBufferParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool union_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          union_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_vertices_in_full_circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_vertices_in_full_circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_GeodeticBufferParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double distance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_deviation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool union_result = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &union_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertices_in_full_circle = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertices_in_full_circle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_GeodeticBufferParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->max_deviation(), output);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->union_result(), output);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_vertices_in_full_circle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.GeodeticBufferParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_GeodeticBufferParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->max_deviation(), target);
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->union_result(), target);
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_vertices_in_full_circle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  return target;
}

size_t GeometryRequest_GeodeticBufferParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deviation = 2;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool union_result = 3;
  if (this->union_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_vertices_in_full_circle = 4;
  if (this->max_vertices_in_full_circle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_vertices_in_full_circle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_GeodeticBufferParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_GeodeticBufferParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_GeodeticBufferParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.GeodeticBufferParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.GeodeticBufferParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_GeodeticBufferParams::MergeFrom(const GeometryRequest_GeodeticBufferParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    set_max_deviation(from.max_deviation());
  }
  if (from.union_result() != 0) {
    set_union_result(from.union_result());
  }
  if (from.max_vertices_in_full_circle() != 0) {
    set_max_vertices_in_full_circle(from.max_vertices_in_full_circle());
  }
}

void GeometryRequest_GeodeticBufferParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_GeodeticBufferParams::CopyFrom(const GeometryRequest_GeodeticBufferParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.GeodeticBufferParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_GeodeticBufferParams::IsInitialized() const {
  return true;
}

void GeometryRequest_GeodeticBufferParams::Swap(GeometryRequest_GeodeticBufferParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_GeodeticBufferParams::InternalSwap(GeometryRequest_GeodeticBufferParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
  swap(max_deviation_, other->max_deviation_);
  swap(union_result_, other->union_result_);
  swap(max_vertices_in_full_circle_, other->max_vertices_in_full_circle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_GeodeticBufferParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_ConvexParams::InitAsDefaultInstance() {
}
class GeometryRequest_ConvexParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_ConvexParams::kMergeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_ConvexParams::GeometryRequest_ConvexParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.ConvexParams)
}
GeometryRequest_ConvexParams::GeometryRequest_ConvexParams(const GeometryRequest_ConvexParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merge_ = from.merge_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.ConvexParams)
}

void GeometryRequest_ConvexParams::SharedCtor() {
  merge_ = false;
}

GeometryRequest_ConvexParams::~GeometryRequest_ConvexParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.ConvexParams)
  SharedDtor();
}

void GeometryRequest_ConvexParams::SharedDtor() {
}

void GeometryRequest_ConvexParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_ConvexParams& GeometryRequest_ConvexParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_ConvexParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_ConvexParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.ConvexParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merge_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_ConvexParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool merge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_ConvexParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.ConvexParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool merge = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &merge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.ConvexParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.ConvexParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_ConvexParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.ConvexParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool merge = 1;
  if (this->merge() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->merge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.ConvexParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_ConvexParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.ConvexParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool merge = 1;
  if (this->merge() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->merge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.ConvexParams)
  return target;
}

size_t GeometryRequest_ConvexParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.ConvexParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool merge = 1;
  if (this->merge() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_ConvexParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.ConvexParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_ConvexParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_ConvexParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.ConvexParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.ConvexParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_ConvexParams::MergeFrom(const GeometryRequest_ConvexParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.ConvexParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.merge() != 0) {
    set_merge(from.merge());
  }
}

void GeometryRequest_ConvexParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.ConvexParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_ConvexParams::CopyFrom(const GeometryRequest_ConvexParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.ConvexParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_ConvexParams::IsInitialized() const {
  return true;
}

void GeometryRequest_ConvexParams::Swap(GeometryRequest_ConvexParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_ConvexParams::InternalSwap(GeometryRequest_ConvexParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(merge_, other->merge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_ConvexParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_RelateParams::InitAsDefaultInstance() {
}
class GeometryRequest_RelateParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_RelateParams::kDe9ImFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_RelateParams::GeometryRequest_RelateParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.RelateParams)
}
GeometryRequest_RelateParams::GeometryRequest_RelateParams(const GeometryRequest_RelateParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  de_9im_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.de_9im().size() > 0) {
    de_9im_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.de_9im_);
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.RelateParams)
}

void GeometryRequest_RelateParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  de_9im_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GeometryRequest_RelateParams::~GeometryRequest_RelateParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.RelateParams)
  SharedDtor();
}

void GeometryRequest_RelateParams::SharedDtor() {
  de_9im_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeometryRequest_RelateParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_RelateParams& GeometryRequest_RelateParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_RelateParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_RelateParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.RelateParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  de_9im_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_RelateParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string de_9im = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_de_9im(), ptr, ctx, "epl.protobuf.GeometryRequest.RelateParams.de_9im");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_RelateParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.RelateParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string de_9im = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_de_9im()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->de_9im().data(), static_cast<int>(this->de_9im().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.GeometryRequest.RelateParams.de_9im"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.RelateParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.RelateParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_RelateParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.RelateParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string de_9im = 1;
  if (this->de_9im().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->de_9im().data(), static_cast<int>(this->de_9im().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryRequest.RelateParams.de_9im");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->de_9im(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.RelateParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_RelateParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.RelateParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string de_9im = 1;
  if (this->de_9im().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->de_9im().data(), static_cast<int>(this->de_9im().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.GeometryRequest.RelateParams.de_9im");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->de_9im(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.RelateParams)
  return target;
}

size_t GeometryRequest_RelateParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.RelateParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string de_9im = 1;
  if (this->de_9im().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->de_9im());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_RelateParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.RelateParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_RelateParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_RelateParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.RelateParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.RelateParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_RelateParams::MergeFrom(const GeometryRequest_RelateParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.RelateParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.de_9im().size() > 0) {

    de_9im_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.de_9im_);
  }
}

void GeometryRequest_RelateParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.RelateParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_RelateParams::CopyFrom(const GeometryRequest_RelateParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.RelateParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_RelateParams::IsInitialized() const {
  return true;
}

void GeometryRequest_RelateParams::Swap(GeometryRequest_RelateParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_RelateParams::InternalSwap(GeometryRequest_RelateParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  de_9im_.Swap(&other->de_9im_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_RelateParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_RandomPointsParams::InitAsDefaultInstance() {
}
class GeometryRequest_RandomPointsParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_RandomPointsParams::kPointsPerSquareKmFieldNumber;
const int GeometryRequest_RandomPointsParams::kSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_RandomPointsParams::GeometryRequest_RandomPointsParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.RandomPointsParams)
}
GeometryRequest_RandomPointsParams::GeometryRequest_RandomPointsParams(const GeometryRequest_RandomPointsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&points_per_square_km_, &from.points_per_square_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.RandomPointsParams)
}

void GeometryRequest_RandomPointsParams::SharedCtor() {
  ::memset(&points_per_square_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
}

GeometryRequest_RandomPointsParams::~GeometryRequest_RandomPointsParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.RandomPointsParams)
  SharedDtor();
}

void GeometryRequest_RandomPointsParams::SharedDtor() {
}

void GeometryRequest_RandomPointsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_RandomPointsParams& GeometryRequest_RandomPointsParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_RandomPointsParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_RandomPointsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&points_per_square_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&points_per_square_km_)) + sizeof(seed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_RandomPointsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double points_per_square_km = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          points_per_square_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_RandomPointsParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double points_per_square_km = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &points_per_square_km_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.RandomPointsParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.RandomPointsParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_RandomPointsParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double points_per_square_km = 1;
  if (!(this->points_per_square_km() <= 0 && this->points_per_square_km() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->points_per_square_km(), output);
  }

  // int64 seed = 2;
  if (this->seed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->seed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.RandomPointsParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_RandomPointsParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double points_per_square_km = 1;
  if (!(this->points_per_square_km() <= 0 && this->points_per_square_km() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->points_per_square_km(), target);
  }

  // int64 seed = 2;
  if (this->seed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->seed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.RandomPointsParams)
  return target;
}

size_t GeometryRequest_RandomPointsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double points_per_square_km = 1;
  if (!(this->points_per_square_km() <= 0 && this->points_per_square_km() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 seed = 2;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->seed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_RandomPointsParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_RandomPointsParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_RandomPointsParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.RandomPointsParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.RandomPointsParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_RandomPointsParams::MergeFrom(const GeometryRequest_RandomPointsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.points_per_square_km() <= 0 && from.points_per_square_km() >= 0)) {
    set_points_per_square_km(from.points_per_square_km());
  }
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void GeometryRequest_RandomPointsParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_RandomPointsParams::CopyFrom(const GeometryRequest_RandomPointsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.RandomPointsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_RandomPointsParams::IsInitialized() const {
  return true;
}

void GeometryRequest_RandomPointsParams::Swap(GeometryRequest_RandomPointsParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_RandomPointsParams::InternalSwap(GeometryRequest_RandomPointsParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(points_per_square_km_, other->points_per_square_km_);
  swap(seed_, other->seed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_RandomPointsParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_GeneralizeParams::InitAsDefaultInstance() {
}
class GeometryRequest_GeneralizeParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_GeneralizeParams::kMaxDeviationFieldNumber;
const int GeometryRequest_GeneralizeParams::kRemoveDegeneratesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_GeneralizeParams::GeometryRequest_GeneralizeParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.GeneralizeParams)
}
GeometryRequest_GeneralizeParams::GeometryRequest_GeneralizeParams(const GeometryRequest_GeneralizeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_deviation_, &from.max_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&remove_degenerates_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.GeneralizeParams)
}

void GeometryRequest_GeneralizeParams::SharedCtor() {
  ::memset(&max_deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_degenerates_) -
      reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
}

GeometryRequest_GeneralizeParams::~GeometryRequest_GeneralizeParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.GeneralizeParams)
  SharedDtor();
}

void GeometryRequest_GeneralizeParams::SharedDtor() {
}

void GeometryRequest_GeneralizeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_GeneralizeParams& GeometryRequest_GeneralizeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_GeneralizeParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_GeneralizeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_degenerates_) -
      reinterpret_cast<char*>(&max_deviation_)) + sizeof(remove_degenerates_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_GeneralizeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_deviation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool remove_degenerates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remove_degenerates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_GeneralizeParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_deviation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_degenerates = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_degenerates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.GeneralizeParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.GeneralizeParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_GeneralizeParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_deviation = 1;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->max_deviation(), output);
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->remove_degenerates(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.GeneralizeParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_GeneralizeParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_deviation = 1;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->max_deviation(), target);
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->remove_degenerates(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.GeneralizeParams)
  return target;
}

size_t GeometryRequest_GeneralizeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_deviation = 1;
  if (!(this->max_deviation() <= 0 && this->max_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_GeneralizeParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_GeneralizeParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_GeneralizeParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.GeneralizeParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.GeneralizeParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_GeneralizeParams::MergeFrom(const GeometryRequest_GeneralizeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_deviation() <= 0 && from.max_deviation() >= 0)) {
    set_max_deviation(from.max_deviation());
  }
  if (from.remove_degenerates() != 0) {
    set_remove_degenerates(from.remove_degenerates());
  }
}

void GeometryRequest_GeneralizeParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_GeneralizeParams::CopyFrom(const GeometryRequest_GeneralizeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.GeneralizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_GeneralizeParams::IsInitialized() const {
  return true;
}

void GeometryRequest_GeneralizeParams::Swap(GeometryRequest_GeneralizeParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_GeneralizeParams::InternalSwap(GeometryRequest_GeneralizeParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_deviation_, other->max_deviation_);
  swap(remove_degenerates_, other->remove_degenerates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_GeneralizeParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_GeneralizeByAreaParams::InitAsDefaultInstance() {
}
class GeometryRequest_GeneralizeByAreaParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_GeneralizeByAreaParams::kPercentReductionFieldNumber;
const int GeometryRequest_GeneralizeByAreaParams::kRemoveDegeneratesFieldNumber;
const int GeometryRequest_GeneralizeByAreaParams::kMaxPointCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_GeneralizeByAreaParams::GeometryRequest_GeneralizeByAreaParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
}
GeometryRequest_GeneralizeByAreaParams::GeometryRequest_GeneralizeByAreaParams(const GeometryRequest_GeneralizeByAreaParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&percent_reduction_, &from.percent_reduction_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_point_count_) -
    reinterpret_cast<char*>(&percent_reduction_)) + sizeof(max_point_count_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
}

void GeometryRequest_GeneralizeByAreaParams::SharedCtor() {
  ::memset(&percent_reduction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_point_count_) -
      reinterpret_cast<char*>(&percent_reduction_)) + sizeof(max_point_count_));
}

GeometryRequest_GeneralizeByAreaParams::~GeometryRequest_GeneralizeByAreaParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  SharedDtor();
}

void GeometryRequest_GeneralizeByAreaParams::SharedDtor() {
}

void GeometryRequest_GeneralizeByAreaParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_GeneralizeByAreaParams& GeometryRequest_GeneralizeByAreaParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_GeneralizeByAreaParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_GeneralizeByAreaParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percent_reduction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_point_count_) -
      reinterpret_cast<char*>(&percent_reduction_)) + sizeof(max_point_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_GeneralizeByAreaParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double percent_reduction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          percent_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool remove_degenerates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remove_degenerates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_point_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_GeneralizeByAreaParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double percent_reduction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percent_reduction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_degenerates = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_degenerates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_point_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_point_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_GeneralizeByAreaParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double percent_reduction = 1;
  if (!(this->percent_reduction() <= 0 && this->percent_reduction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->percent_reduction(), output);
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->remove_degenerates(), output);
  }

  // int32 max_point_count = 3;
  if (this->max_point_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_point_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_GeneralizeByAreaParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double percent_reduction = 1;
  if (!(this->percent_reduction() <= 0 && this->percent_reduction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->percent_reduction(), target);
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->remove_degenerates(), target);
  }

  // int32 max_point_count = 3;
  if (this->max_point_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_point_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  return target;
}

size_t GeometryRequest_GeneralizeByAreaParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double percent_reduction = 1;
  if (!(this->percent_reduction() <= 0 && this->percent_reduction() >= 0)) {
    total_size += 1 + 8;
  }

  // bool remove_degenerates = 2;
  if (this->remove_degenerates() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_point_count = 3;
  if (this->max_point_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_point_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_GeneralizeByAreaParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_GeneralizeByAreaParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_GeneralizeByAreaParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_GeneralizeByAreaParams::MergeFrom(const GeometryRequest_GeneralizeByAreaParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.percent_reduction() <= 0 && from.percent_reduction() >= 0)) {
    set_percent_reduction(from.percent_reduction());
  }
  if (from.remove_degenerates() != 0) {
    set_remove_degenerates(from.remove_degenerates());
  }
  if (from.max_point_count() != 0) {
    set_max_point_count(from.max_point_count());
  }
}

void GeometryRequest_GeneralizeByAreaParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_GeneralizeByAreaParams::CopyFrom(const GeometryRequest_GeneralizeByAreaParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.GeneralizeByAreaParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_GeneralizeByAreaParams::IsInitialized() const {
  return true;
}

void GeometryRequest_GeneralizeByAreaParams::Swap(GeometryRequest_GeneralizeByAreaParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_GeneralizeByAreaParams::InternalSwap(GeometryRequest_GeneralizeByAreaParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(percent_reduction_, other->percent_reduction_);
  swap(remove_degenerates_, other->remove_degenerates_);
  swap(max_point_count_, other->max_point_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_GeneralizeByAreaParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_IntersectionParams::InitAsDefaultInstance() {
}
class GeometryRequest_IntersectionParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_IntersectionParams::kDimensionMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_IntersectionParams::GeometryRequest_IntersectionParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.IntersectionParams)
}
GeometryRequest_IntersectionParams::GeometryRequest_IntersectionParams(const GeometryRequest_IntersectionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimension_mask_ = from.dimension_mask_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.IntersectionParams)
}

void GeometryRequest_IntersectionParams::SharedCtor() {
  dimension_mask_ = 0;
}

GeometryRequest_IntersectionParams::~GeometryRequest_IntersectionParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.IntersectionParams)
  SharedDtor();
}

void GeometryRequest_IntersectionParams::SharedDtor() {
}

void GeometryRequest_IntersectionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_IntersectionParams& GeometryRequest_IntersectionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_IntersectionParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_IntersectionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.IntersectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_mask_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_IntersectionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dimension_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dimension_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_IntersectionParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.IntersectionParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dimension_mask = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.IntersectionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.IntersectionParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_IntersectionParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.IntersectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dimension_mask = 1;
  if (this->dimension_mask() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->dimension_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.IntersectionParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_IntersectionParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.IntersectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dimension_mask = 1;
  if (this->dimension_mask() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->dimension_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.IntersectionParams)
  return target;
}

size_t GeometryRequest_IntersectionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.IntersectionParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dimension_mask = 1;
  if (this->dimension_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dimension_mask());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_IntersectionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.IntersectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_IntersectionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_IntersectionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.IntersectionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.IntersectionParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_IntersectionParams::MergeFrom(const GeometryRequest_IntersectionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.IntersectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension_mask() != 0) {
    set_dimension_mask(from.dimension_mask());
  }
}

void GeometryRequest_IntersectionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.IntersectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_IntersectionParams::CopyFrom(const GeometryRequest_IntersectionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.IntersectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_IntersectionParams::IsInitialized() const {
  return true;
}

void GeometryRequest_IntersectionParams::Swap(GeometryRequest_IntersectionParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_IntersectionParams::InternalSwap(GeometryRequest_IntersectionParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dimension_mask_, other->dimension_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_IntersectionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_OffsetParams::InitAsDefaultInstance() {
}
class GeometryRequest_OffsetParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_OffsetParams::kDistanceFieldNumber;
const int GeometryRequest_OffsetParams::kJoinTypeFieldNumber;
const int GeometryRequest_OffsetParams::kBevelRatioFieldNumber;
const int GeometryRequest_OffsetParams::kFlattenErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_OffsetParams::GeometryRequest_OffsetParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.OffsetParams)
}
GeometryRequest_OffsetParams::GeometryRequest_OffsetParams(const GeometryRequest_OffsetParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.OffsetParams)
}

void GeometryRequest_OffsetParams::SharedCtor() {
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
}

GeometryRequest_OffsetParams::~GeometryRequest_OffsetParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.OffsetParams)
  SharedDtor();
}

void GeometryRequest_OffsetParams::SharedDtor() {
}

void GeometryRequest_OffsetParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_OffsetParams& GeometryRequest_OffsetParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_OffsetParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_OffsetParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.OffsetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_type_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(join_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_OffsetParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_join_type(static_cast<::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType>(val));
        } else goto handle_unusual;
        continue;
      // double bevel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bevel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double flatten_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          flatten_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_OffsetParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.OffsetParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double distance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join_type(static_cast< ::epl::protobuf::GeometryRequest_OffsetParams_OffsetJoinType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bevel_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bevel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flatten_error = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flatten_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.OffsetParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.OffsetParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_OffsetParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.OffsetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
  if (this->join_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->join_type(), output);
  }

  // double bevel_ratio = 3;
  if (!(this->bevel_ratio() <= 0 && this->bevel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->bevel_ratio(), output);
  }

  // double flatten_error = 4;
  if (!(this->flatten_error() <= 0 && this->flatten_error() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->flatten_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.OffsetParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_OffsetParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.OffsetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
  if (this->join_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->join_type(), target);
  }

  // double bevel_ratio = 3;
  if (!(this->bevel_ratio() <= 0 && this->bevel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->bevel_ratio(), target);
  }

  // double flatten_error = 4;
  if (!(this->flatten_error() <= 0 && this->flatten_error() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->flatten_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.OffsetParams)
  return target;
}

size_t GeometryRequest_OffsetParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.OffsetParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double bevel_ratio = 3;
  if (!(this->bevel_ratio() <= 0 && this->bevel_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double flatten_error = 4;
  if (!(this->flatten_error() <= 0 && this->flatten_error() >= 0)) {
    total_size += 1 + 8;
  }

  // .epl.protobuf.GeometryRequest.OffsetParams.OffsetJoinType join_type = 2;
  if (this->join_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->join_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_OffsetParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.OffsetParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_OffsetParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_OffsetParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.OffsetParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.OffsetParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_OffsetParams::MergeFrom(const GeometryRequest_OffsetParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.OffsetParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
  if (!(from.bevel_ratio() <= 0 && from.bevel_ratio() >= 0)) {
    set_bevel_ratio(from.bevel_ratio());
  }
  if (!(from.flatten_error() <= 0 && from.flatten_error() >= 0)) {
    set_flatten_error(from.flatten_error());
  }
  if (from.join_type() != 0) {
    set_join_type(from.join_type());
  }
}

void GeometryRequest_OffsetParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.OffsetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_OffsetParams::CopyFrom(const GeometryRequest_OffsetParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.OffsetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_OffsetParams::IsInitialized() const {
  return true;
}

void GeometryRequest_OffsetParams::Swap(GeometryRequest_OffsetParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_OffsetParams::InternalSwap(GeometryRequest_OffsetParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
  swap(bevel_ratio_, other->bevel_ratio_);
  swap(flatten_error_, other->flatten_error_);
  swap(join_type_, other->join_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_OffsetParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_CutParams::InitAsDefaultInstance() {
}
class GeometryRequest_CutParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_CutParams::kConsiderTouchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_CutParams::GeometryRequest_CutParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.CutParams)
}
GeometryRequest_CutParams::GeometryRequest_CutParams(const GeometryRequest_CutParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  consider_touch_ = from.consider_touch_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.CutParams)
}

void GeometryRequest_CutParams::SharedCtor() {
  consider_touch_ = false;
}

GeometryRequest_CutParams::~GeometryRequest_CutParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.CutParams)
  SharedDtor();
}

void GeometryRequest_CutParams::SharedDtor() {
}

void GeometryRequest_CutParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_CutParams& GeometryRequest_CutParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_CutParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_CutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.CutParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consider_touch_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_CutParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool consider_touch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          consider_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_CutParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.CutParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool consider_touch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consider_touch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.CutParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.CutParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_CutParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.CutParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool consider_touch = 1;
  if (this->consider_touch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->consider_touch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.CutParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_CutParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.CutParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool consider_touch = 1;
  if (this->consider_touch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->consider_touch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.CutParams)
  return target;
}

size_t GeometryRequest_CutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.CutParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool consider_touch = 1;
  if (this->consider_touch() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_CutParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.CutParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_CutParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_CutParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.CutParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.CutParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_CutParams::MergeFrom(const GeometryRequest_CutParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.CutParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consider_touch() != 0) {
    set_consider_touch(from.consider_touch());
  }
}

void GeometryRequest_CutParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.CutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_CutParams::CopyFrom(const GeometryRequest_CutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.CutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_CutParams::IsInitialized() const {
  return true;
}

void GeometryRequest_CutParams::Swap(GeometryRequest_CutParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_CutParams::InternalSwap(GeometryRequest_CutParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(consider_touch_, other->consider_touch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_CutParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_ClipParams::InitAsDefaultInstance() {
  ::epl::protobuf::_GeometryRequest_ClipParams_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::epl::protobuf::EnvelopeData*>(
      ::epl::protobuf::EnvelopeData::internal_default_instance());
}
class GeometryRequest_ClipParams::HasBitSetters {
 public:
  static const ::epl::protobuf::EnvelopeData& envelope(const GeometryRequest_ClipParams* msg);
};

const ::epl::protobuf::EnvelopeData&
GeometryRequest_ClipParams::HasBitSetters::envelope(const GeometryRequest_ClipParams* msg) {
  return *msg->envelope_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_ClipParams::kEnvelopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_ClipParams::GeometryRequest_ClipParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.ClipParams)
}
GeometryRequest_ClipParams::GeometryRequest_ClipParams(const GeometryRequest_ClipParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::epl::protobuf::EnvelopeData(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.ClipParams)
}

void GeometryRequest_ClipParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  envelope_ = nullptr;
}

GeometryRequest_ClipParams::~GeometryRequest_ClipParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.ClipParams)
  SharedDtor();
}

void GeometryRequest_ClipParams::SharedDtor() {
  if (this != internal_default_instance()) delete envelope_;
}

void GeometryRequest_ClipParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_ClipParams& GeometryRequest_ClipParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_ClipParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_ClipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.ClipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_ClipParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.EnvelopeData envelope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_envelope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_ClipParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.ClipParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .epl.protobuf.EnvelopeData envelope = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.ClipParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.ClipParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_ClipParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.ClipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.EnvelopeData envelope = 1;
  if (this->has_envelope()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::envelope(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.ClipParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_ClipParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.ClipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.EnvelopeData envelope = 1;
  if (this->has_envelope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::envelope(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.ClipParams)
  return target;
}

size_t GeometryRequest_ClipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.ClipParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.EnvelopeData envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_ClipParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.ClipParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_ClipParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_ClipParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.ClipParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.ClipParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_ClipParams::MergeFrom(const GeometryRequest_ClipParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.ClipParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::epl::protobuf::EnvelopeData::MergeFrom(from.envelope());
  }
}

void GeometryRequest_ClipParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.ClipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_ClipParams::CopyFrom(const GeometryRequest_ClipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.ClipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_ClipParams::IsInitialized() const {
  return true;
}

void GeometryRequest_ClipParams::Swap(GeometryRequest_ClipParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_ClipParams::InternalSwap(GeometryRequest_ClipParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(envelope_, other->envelope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_ClipParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_DensifyParams::InitAsDefaultInstance() {
}
class GeometryRequest_DensifyParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_DensifyParams::kMaxLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_DensifyParams::GeometryRequest_DensifyParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.DensifyParams)
}
GeometryRequest_DensifyParams::GeometryRequest_DensifyParams(const GeometryRequest_DensifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_length_ = from.max_length_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.DensifyParams)
}

void GeometryRequest_DensifyParams::SharedCtor() {
  max_length_ = 0;
}

GeometryRequest_DensifyParams::~GeometryRequest_DensifyParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.DensifyParams)
  SharedDtor();
}

void GeometryRequest_DensifyParams::SharedDtor() {
}

void GeometryRequest_DensifyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_DensifyParams& GeometryRequest_DensifyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_DensifyParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_DensifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.DensifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_length_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_DensifyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_DensifyParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.DensifyParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_length = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.DensifyParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.DensifyParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_DensifyParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.DensifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->max_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.DensifyParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_DensifyParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.DensifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->max_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.DensifyParams)
  return target;
}

size_t GeometryRequest_DensifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.DensifyParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_length = 1;
  if (!(this->max_length() <= 0 && this->max_length() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_DensifyParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.DensifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_DensifyParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_DensifyParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.DensifyParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.DensifyParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_DensifyParams::MergeFrom(const GeometryRequest_DensifyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.DensifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_length() <= 0 && from.max_length() >= 0)) {
    set_max_length(from.max_length());
  }
}

void GeometryRequest_DensifyParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.DensifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_DensifyParams::CopyFrom(const GeometryRequest_DensifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.DensifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_DensifyParams::IsInitialized() const {
  return true;
}

void GeometryRequest_DensifyParams::Swap(GeometryRequest_DensifyParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_DensifyParams::InternalSwap(GeometryRequest_DensifyParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_length_, other->max_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_DensifyParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_SimplifyParams::InitAsDefaultInstance() {
}
class GeometryRequest_SimplifyParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_SimplifyParams::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_SimplifyParams::GeometryRequest_SimplifyParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.SimplifyParams)
}
GeometryRequest_SimplifyParams::GeometryRequest_SimplifyParams(const GeometryRequest_SimplifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.SimplifyParams)
}

void GeometryRequest_SimplifyParams::SharedCtor() {
  force_ = false;
}

GeometryRequest_SimplifyParams::~GeometryRequest_SimplifyParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.SimplifyParams)
  SharedDtor();
}

void GeometryRequest_SimplifyParams::SharedDtor() {
}

void GeometryRequest_SimplifyParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_SimplifyParams& GeometryRequest_SimplifyParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_SimplifyParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_SimplifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.SimplifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_SimplifyParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_SimplifyParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.SimplifyParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool force = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.SimplifyParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.SimplifyParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_SimplifyParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.SimplifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->force() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.SimplifyParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_SimplifyParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.SimplifyParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->force() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.SimplifyParams)
  return target;
}

size_t GeometryRequest_SimplifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.SimplifyParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool force = 1;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_SimplifyParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.SimplifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_SimplifyParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_SimplifyParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.SimplifyParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.SimplifyParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_SimplifyParams::MergeFrom(const GeometryRequest_SimplifyParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.SimplifyParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.force() != 0) {
    set_force(from.force());
  }
}

void GeometryRequest_SimplifyParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.SimplifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_SimplifyParams::CopyFrom(const GeometryRequest_SimplifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.SimplifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_SimplifyParams::IsInitialized() const {
  return true;
}

void GeometryRequest_SimplifyParams::Swap(GeometryRequest_SimplifyParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_SimplifyParams::InternalSwap(GeometryRequest_SimplifyParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_SimplifyParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest_AffineTransformParams::InitAsDefaultInstance() {
}
class GeometryRequest_AffineTransformParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest_AffineTransformParams::kGeodeticFieldNumber;
const int GeometryRequest_AffineTransformParams::kXOffsetFieldNumber;
const int GeometryRequest_AffineTransformParams::kYOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest_AffineTransformParams::GeometryRequest_AffineTransformParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest.AffineTransformParams)
}
GeometryRequest_AffineTransformParams::GeometryRequest_AffineTransformParams(const GeometryRequest_AffineTransformParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_offset_, &from.x_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&geodetic_) -
    reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest.AffineTransformParams)
}

void GeometryRequest_AffineTransformParams::SharedCtor() {
  ::memset(&x_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geodetic_) -
      reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
}

GeometryRequest_AffineTransformParams::~GeometryRequest_AffineTransformParams() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest.AffineTransformParams)
  SharedDtor();
}

void GeometryRequest_AffineTransformParams::SharedDtor() {
}

void GeometryRequest_AffineTransformParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest_AffineTransformParams& GeometryRequest_AffineTransformParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_AffineTransformParams_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest_AffineTransformParams::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geodetic_) -
      reinterpret_cast<char*>(&x_offset_)) + sizeof(geodetic_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest_AffineTransformParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool geodetic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          geodetic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest_AffineTransformParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool geodetic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &geodetic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x_offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest.AffineTransformParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest.AffineTransformParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest_AffineTransformParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool geodetic = 2;
  if (this->geodetic() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->geodetic(), output);
  }

  // double x_offset = 3;
  if (!(this->x_offset() <= 0 && this->x_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->x_offset(), output);
  }

  // double y_offset = 4;
  if (!(this->y_offset() <= 0 && this->y_offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->y_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest.AffineTransformParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest_AffineTransformParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool geodetic = 2;
  if (this->geodetic() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->geodetic(), target);
  }

  // double x_offset = 3;
  if (!(this->x_offset() <= 0 && this->x_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->x_offset(), target);
  }

  // double y_offset = 4;
  if (!(this->y_offset() <= 0 && this->y_offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->y_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest.AffineTransformParams)
  return target;
}

size_t GeometryRequest_AffineTransformParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_offset = 3;
  if (!(this->x_offset() <= 0 && this->x_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_offset = 4;
  if (!(this->y_offset() <= 0 && this->y_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // bool geodetic = 2;
  if (this->geodetic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest_AffineTransformParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest_AffineTransformParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest_AffineTransformParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest.AffineTransformParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest.AffineTransformParams)
    MergeFrom(*source);
  }
}

void GeometryRequest_AffineTransformParams::MergeFrom(const GeometryRequest_AffineTransformParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_offset() <= 0 && from.x_offset() >= 0)) {
    set_x_offset(from.x_offset());
  }
  if (!(from.y_offset() <= 0 && from.y_offset() >= 0)) {
    set_y_offset(from.y_offset());
  }
  if (from.geodetic() != 0) {
    set_geodetic(from.geodetic());
  }
}

void GeometryRequest_AffineTransformParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest_AffineTransformParams::CopyFrom(const GeometryRequest_AffineTransformParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest.AffineTransformParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest_AffineTransformParams::IsInitialized() const {
  return true;
}

void GeometryRequest_AffineTransformParams::Swap(GeometryRequest_AffineTransformParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest_AffineTransformParams::InternalSwap(GeometryRequest_AffineTransformParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_offset_, other->x_offset_);
  swap(y_offset_, other->y_offset_);
  swap(geodetic_, other->geodetic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest_AffineTransformParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeometryRequest::InitAsDefaultInstance() {
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::epl::protobuf::GeometryData*>(
      ::epl::protobuf::GeometryData::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->left_geometry_ = const_cast< ::epl::protobuf::GeometryData*>(
      ::epl::protobuf::GeometryData::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->geometry_request_ = const_cast< ::epl::protobuf::GeometryRequest*>(
      ::epl::protobuf::GeometryRequest::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->left_geometry_request_ = const_cast< ::epl::protobuf::GeometryRequest*>(
      ::epl::protobuf::GeometryRequest::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->right_geometry_ = const_cast< ::epl::protobuf::GeometryData*>(
      ::epl::protobuf::GeometryData::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->right_geometry_request_ = const_cast< ::epl::protobuf::GeometryRequest*>(
      ::epl::protobuf::GeometryRequest::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->operation_sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->result_sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->buffer_params_ = const_cast< ::epl::protobuf::GeometryRequest_BufferParams*>(
      ::epl::protobuf::GeometryRequest_BufferParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->convex_params_ = const_cast< ::epl::protobuf::GeometryRequest_ConvexParams*>(
      ::epl::protobuf::GeometryRequest_ConvexParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->relate_params_ = const_cast< ::epl::protobuf::GeometryRequest_RelateParams*>(
      ::epl::protobuf::GeometryRequest_RelateParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->random_points_params_ = const_cast< ::epl::protobuf::GeometryRequest_RandomPointsParams*>(
      ::epl::protobuf::GeometryRequest_RandomPointsParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->generalize_params_ = const_cast< ::epl::protobuf::GeometryRequest_GeneralizeParams*>(
      ::epl::protobuf::GeometryRequest_GeneralizeParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->intersection_params_ = const_cast< ::epl::protobuf::GeometryRequest_IntersectionParams*>(
      ::epl::protobuf::GeometryRequest_IntersectionParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->offset_params_ = const_cast< ::epl::protobuf::GeometryRequest_OffsetParams*>(
      ::epl::protobuf::GeometryRequest_OffsetParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->cut_params_ = const_cast< ::epl::protobuf::GeometryRequest_CutParams*>(
      ::epl::protobuf::GeometryRequest_CutParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->clip_params_ = const_cast< ::epl::protobuf::GeometryRequest_ClipParams*>(
      ::epl::protobuf::GeometryRequest_ClipParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->densify_params_ = const_cast< ::epl::protobuf::GeometryRequest_DensifyParams*>(
      ::epl::protobuf::GeometryRequest_DensifyParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->simplify_params_ = const_cast< ::epl::protobuf::GeometryRequest_SimplifyParams*>(
      ::epl::protobuf::GeometryRequest_SimplifyParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->generalize_by_area_params_ = const_cast< ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams*>(
      ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams::internal_default_instance());
  ::epl::protobuf::_GeometryRequest_default_instance_._instance.get_mutable()->affine_transform_params_ = const_cast< ::epl::protobuf::GeometryRequest_AffineTransformParams*>(
      ::epl::protobuf::GeometryRequest_AffineTransformParams::internal_default_instance());
}
class GeometryRequest::HasBitSetters {
 public:
  static const ::epl::protobuf::GeometryData& geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryData& left_geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest& geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest& left_geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryData& right_geometry(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest& right_geometry_request(const GeometryRequest* msg);
  static const ::epl::protobuf::SpatialReferenceData& operation_sr(const GeometryRequest* msg);
  static const ::epl::protobuf::SpatialReferenceData& result_sr(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_BufferParams& buffer_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_ConvexParams& convex_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_RelateParams& relate_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_RandomPointsParams& random_points_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_GeneralizeParams& generalize_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_IntersectionParams& intersection_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_OffsetParams& offset_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_CutParams& cut_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_ClipParams& clip_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_DensifyParams& densify_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_SimplifyParams& simplify_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams& generalize_by_area_params(const GeometryRequest* msg);
  static const ::epl::protobuf::GeometryRequest_AffineTransformParams& affine_transform_params(const GeometryRequest* msg);
};

const ::epl::protobuf::GeometryData&
GeometryRequest::HasBitSetters::geometry(const GeometryRequest* msg) {
  return *msg->geometry_;
}
const ::epl::protobuf::GeometryData&
GeometryRequest::HasBitSetters::left_geometry(const GeometryRequest* msg) {
  return *msg->left_geometry_;
}
const ::epl::protobuf::GeometryRequest&
GeometryRequest::HasBitSetters::geometry_request(const GeometryRequest* msg) {
  return *msg->geometry_request_;
}
const ::epl::protobuf::GeometryRequest&
GeometryRequest::HasBitSetters::left_geometry_request(const GeometryRequest* msg) {
  return *msg->left_geometry_request_;
}
const ::epl::protobuf::GeometryData&
GeometryRequest::HasBitSetters::right_geometry(const GeometryRequest* msg) {
  return *msg->right_geometry_;
}
const ::epl::protobuf::GeometryRequest&
GeometryRequest::HasBitSetters::right_geometry_request(const GeometryRequest* msg) {
  return *msg->right_geometry_request_;
}
const ::epl::protobuf::SpatialReferenceData&
GeometryRequest::HasBitSetters::operation_sr(const GeometryRequest* msg) {
  return *msg->operation_sr_;
}
const ::epl::protobuf::SpatialReferenceData&
GeometryRequest::HasBitSetters::result_sr(const GeometryRequest* msg) {
  return *msg->result_sr_;
}
const ::epl::protobuf::GeometryRequest_BufferParams&
GeometryRequest::HasBitSetters::buffer_params(const GeometryRequest* msg) {
  return *msg->buffer_params_;
}
const ::epl::protobuf::GeometryRequest_ConvexParams&
GeometryRequest::HasBitSetters::convex_params(const GeometryRequest* msg) {
  return *msg->convex_params_;
}
const ::epl::protobuf::GeometryRequest_RelateParams&
GeometryRequest::HasBitSetters::relate_params(const GeometryRequest* msg) {
  return *msg->relate_params_;
}
const ::epl::protobuf::GeometryRequest_RandomPointsParams&
GeometryRequest::HasBitSetters::random_points_params(const GeometryRequest* msg) {
  return *msg->random_points_params_;
}
const ::epl::protobuf::GeometryRequest_GeneralizeParams&
GeometryRequest::HasBitSetters::generalize_params(const GeometryRequest* msg) {
  return *msg->generalize_params_;
}
const ::epl::protobuf::GeometryRequest_IntersectionParams&
GeometryRequest::HasBitSetters::intersection_params(const GeometryRequest* msg) {
  return *msg->intersection_params_;
}
const ::epl::protobuf::GeometryRequest_OffsetParams&
GeometryRequest::HasBitSetters::offset_params(const GeometryRequest* msg) {
  return *msg->offset_params_;
}
const ::epl::protobuf::GeometryRequest_CutParams&
GeometryRequest::HasBitSetters::cut_params(const GeometryRequest* msg) {
  return *msg->cut_params_;
}
const ::epl::protobuf::GeometryRequest_ClipParams&
GeometryRequest::HasBitSetters::clip_params(const GeometryRequest* msg) {
  return *msg->clip_params_;
}
const ::epl::protobuf::GeometryRequest_DensifyParams&
GeometryRequest::HasBitSetters::densify_params(const GeometryRequest* msg) {
  return *msg->densify_params_;
}
const ::epl::protobuf::GeometryRequest_SimplifyParams&
GeometryRequest::HasBitSetters::simplify_params(const GeometryRequest* msg) {
  return *msg->simplify_params_;
}
const ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams&
GeometryRequest::HasBitSetters::generalize_by_area_params(const GeometryRequest* msg) {
  return *msg->generalize_by_area_params_;
}
const ::epl::protobuf::GeometryRequest_AffineTransformParams&
GeometryRequest::HasBitSetters::affine_transform_params(const GeometryRequest* msg) {
  return *msg->affine_transform_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryRequest::kGeometryFieldNumber;
const int GeometryRequest::kLeftGeometryFieldNumber;
const int GeometryRequest::kGeometryRequestFieldNumber;
const int GeometryRequest::kLeftGeometryRequestFieldNumber;
const int GeometryRequest::kRightGeometryFieldNumber;
const int GeometryRequest::kRightGeometryRequestFieldNumber;
const int GeometryRequest::kOperatorFieldNumber;
const int GeometryRequest::kResultEncodingFieldNumber;
const int GeometryRequest::kOperationSrFieldNumber;
const int GeometryRequest::kResultSrFieldNumber;
const int GeometryRequest::kBufferParamsFieldNumber;
const int GeometryRequest::kConvexParamsFieldNumber;
const int GeometryRequest::kRelateParamsFieldNumber;
const int GeometryRequest::kRandomPointsParamsFieldNumber;
const int GeometryRequest::kGeneralizeParamsFieldNumber;
const int GeometryRequest::kIntersectionParamsFieldNumber;
const int GeometryRequest::kOffsetParamsFieldNumber;
const int GeometryRequest::kCutParamsFieldNumber;
const int GeometryRequest::kClipParamsFieldNumber;
const int GeometryRequest::kDensifyParamsFieldNumber;
const int GeometryRequest::kSimplifyParamsFieldNumber;
const int GeometryRequest::kGeneralizeByAreaParamsFieldNumber;
const int GeometryRequest::kAffineTransformParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryRequest::GeometryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryRequest)
}
GeometryRequest::GeometryRequest(const GeometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geometry()) {
    geometry_ = new ::epl::protobuf::GeometryData(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from.has_left_geometry()) {
    left_geometry_ = new ::epl::protobuf::GeometryData(*from.left_geometry_);
  } else {
    left_geometry_ = nullptr;
  }
  if (from.has_geometry_request()) {
    geometry_request_ = new ::epl::protobuf::GeometryRequest(*from.geometry_request_);
  } else {
    geometry_request_ = nullptr;
  }
  if (from.has_left_geometry_request()) {
    left_geometry_request_ = new ::epl::protobuf::GeometryRequest(*from.left_geometry_request_);
  } else {
    left_geometry_request_ = nullptr;
  }
  if (from.has_right_geometry()) {
    right_geometry_ = new ::epl::protobuf::GeometryData(*from.right_geometry_);
  } else {
    right_geometry_ = nullptr;
  }
  if (from.has_right_geometry_request()) {
    right_geometry_request_ = new ::epl::protobuf::GeometryRequest(*from.right_geometry_request_);
  } else {
    right_geometry_request_ = nullptr;
  }
  if (from.has_operation_sr()) {
    operation_sr_ = new ::epl::protobuf::SpatialReferenceData(*from.operation_sr_);
  } else {
    operation_sr_ = nullptr;
  }
  if (from.has_result_sr()) {
    result_sr_ = new ::epl::protobuf::SpatialReferenceData(*from.result_sr_);
  } else {
    result_sr_ = nullptr;
  }
  if (from.has_buffer_params()) {
    buffer_params_ = new ::epl::protobuf::GeometryRequest_BufferParams(*from.buffer_params_);
  } else {
    buffer_params_ = nullptr;
  }
  if (from.has_convex_params()) {
    convex_params_ = new ::epl::protobuf::GeometryRequest_ConvexParams(*from.convex_params_);
  } else {
    convex_params_ = nullptr;
  }
  if (from.has_relate_params()) {
    relate_params_ = new ::epl::protobuf::GeometryRequest_RelateParams(*from.relate_params_);
  } else {
    relate_params_ = nullptr;
  }
  if (from.has_random_points_params()) {
    random_points_params_ = new ::epl::protobuf::GeometryRequest_RandomPointsParams(*from.random_points_params_);
  } else {
    random_points_params_ = nullptr;
  }
  if (from.has_generalize_params()) {
    generalize_params_ = new ::epl::protobuf::GeometryRequest_GeneralizeParams(*from.generalize_params_);
  } else {
    generalize_params_ = nullptr;
  }
  if (from.has_intersection_params()) {
    intersection_params_ = new ::epl::protobuf::GeometryRequest_IntersectionParams(*from.intersection_params_);
  } else {
    intersection_params_ = nullptr;
  }
  if (from.has_offset_params()) {
    offset_params_ = new ::epl::protobuf::GeometryRequest_OffsetParams(*from.offset_params_);
  } else {
    offset_params_ = nullptr;
  }
  if (from.has_cut_params()) {
    cut_params_ = new ::epl::protobuf::GeometryRequest_CutParams(*from.cut_params_);
  } else {
    cut_params_ = nullptr;
  }
  if (from.has_clip_params()) {
    clip_params_ = new ::epl::protobuf::GeometryRequest_ClipParams(*from.clip_params_);
  } else {
    clip_params_ = nullptr;
  }
  if (from.has_densify_params()) {
    densify_params_ = new ::epl::protobuf::GeometryRequest_DensifyParams(*from.densify_params_);
  } else {
    densify_params_ = nullptr;
  }
  if (from.has_simplify_params()) {
    simplify_params_ = new ::epl::protobuf::GeometryRequest_SimplifyParams(*from.simplify_params_);
  } else {
    simplify_params_ = nullptr;
  }
  if (from.has_generalize_by_area_params()) {
    generalize_by_area_params_ = new ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams(*from.generalize_by_area_params_);
  } else {
    generalize_by_area_params_ = nullptr;
  }
  if (from.has_affine_transform_params()) {
    affine_transform_params_ = new ::epl::protobuf::GeometryRequest_AffineTransformParams(*from.affine_transform_params_);
  } else {
    affine_transform_params_ = nullptr;
  }
  ::memcpy(&operator__, &from.operator__,
    static_cast<size_t>(reinterpret_cast<char*>(&result_encoding_) -
    reinterpret_cast<char*>(&operator__)) + sizeof(result_encoding_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryRequest)
}

void GeometryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto.base);
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_encoding_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(result_encoding_));
}

GeometryRequest::~GeometryRequest() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryRequest)
  SharedDtor();
}

void GeometryRequest::SharedDtor() {
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete left_geometry_;
  if (this != internal_default_instance()) delete geometry_request_;
  if (this != internal_default_instance()) delete left_geometry_request_;
  if (this != internal_default_instance()) delete right_geometry_;
  if (this != internal_default_instance()) delete right_geometry_request_;
  if (this != internal_default_instance()) delete operation_sr_;
  if (this != internal_default_instance()) delete result_sr_;
  if (this != internal_default_instance()) delete buffer_params_;
  if (this != internal_default_instance()) delete convex_params_;
  if (this != internal_default_instance()) delete relate_params_;
  if (this != internal_default_instance()) delete random_points_params_;
  if (this != internal_default_instance()) delete generalize_params_;
  if (this != internal_default_instance()) delete intersection_params_;
  if (this != internal_default_instance()) delete offset_params_;
  if (this != internal_default_instance()) delete cut_params_;
  if (this != internal_default_instance()) delete clip_params_;
  if (this != internal_default_instance()) delete densify_params_;
  if (this != internal_default_instance()) delete simplify_params_;
  if (this != internal_default_instance()) delete generalize_by_area_params_;
  if (this != internal_default_instance()) delete affine_transform_params_;
}

void GeometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryRequest& GeometryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryRequest_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && left_geometry_ != nullptr) {
    delete left_geometry_;
  }
  left_geometry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geometry_request_ != nullptr) {
    delete geometry_request_;
  }
  geometry_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && left_geometry_request_ != nullptr) {
    delete left_geometry_request_;
  }
  left_geometry_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_geometry_ != nullptr) {
    delete right_geometry_;
  }
  right_geometry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_geometry_request_ != nullptr) {
    delete right_geometry_request_;
  }
  right_geometry_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && operation_sr_ != nullptr) {
    delete operation_sr_;
  }
  operation_sr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && result_sr_ != nullptr) {
    delete result_sr_;
  }
  result_sr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && buffer_params_ != nullptr) {
    delete buffer_params_;
  }
  buffer_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && convex_params_ != nullptr) {
    delete convex_params_;
  }
  convex_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relate_params_ != nullptr) {
    delete relate_params_;
  }
  relate_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && random_points_params_ != nullptr) {
    delete random_points_params_;
  }
  random_points_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && generalize_params_ != nullptr) {
    delete generalize_params_;
  }
  generalize_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && intersection_params_ != nullptr) {
    delete intersection_params_;
  }
  intersection_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offset_params_ != nullptr) {
    delete offset_params_;
  }
  offset_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cut_params_ != nullptr) {
    delete cut_params_;
  }
  cut_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clip_params_ != nullptr) {
    delete clip_params_;
  }
  clip_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && densify_params_ != nullptr) {
    delete densify_params_;
  }
  densify_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && simplify_params_ != nullptr) {
    delete simplify_params_;
  }
  simplify_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && generalize_by_area_params_ != nullptr) {
    delete generalize_by_area_params_;
  }
  generalize_by_area_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && affine_transform_params_ != nullptr) {
    delete affine_transform_params_;
  }
  affine_transform_params_ = nullptr;
  ::memset(&operator__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_encoding_) -
      reinterpret_cast<char*>(&operator__)) + sizeof(result_encoding_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.GeometryData geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryData left_geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_left_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest geometry_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest left_geometry_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_left_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryData right_geometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_right_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest right_geometry_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_right_geometry_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.OperatorType operator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_operator_(static_cast<::epl::protobuf::OperatorType>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.Encoding result_encoding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result_encoding(static_cast<::epl::protobuf::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData operation_sr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_operation_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData result_sr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_result_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_buffer_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_convex_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_relate_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_random_points_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_generalize_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_intersection_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_offset_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_cut_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_clip_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_densify_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_simplify_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_generalize_by_area_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_affine_transform_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .epl.protobuf.GeometryData geometry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryData left_geometry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest geometry_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest left_geometry_request = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_geometry_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryData right_geometry = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest right_geometry_request = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_geometry_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.OperatorType operator = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::epl::protobuf::OperatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.Encoding result_encoding = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_encoding(static_cast< ::epl::protobuf::Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData operation_sr = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_operation_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData result_sr = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buffer_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_convex_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relate_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_random_points_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generalize_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offset_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cut_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clip_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_densify_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_simplify_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generalize_by_area_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_affine_transform_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::geometry(this), output);
  }

  // .epl.protobuf.GeometryData left_geometry = 2;
  if (this->has_left_geometry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::left_geometry(this), output);
  }

  // .epl.protobuf.GeometryRequest geometry_request = 3;
  if (this->has_geometry_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::geometry_request(this), output);
  }

  // .epl.protobuf.GeometryRequest left_geometry_request = 4;
  if (this->has_left_geometry_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::left_geometry_request(this), output);
  }

  // .epl.protobuf.GeometryData right_geometry = 5;
  if (this->has_right_geometry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::right_geometry(this), output);
  }

  // .epl.protobuf.GeometryRequest right_geometry_request = 6;
  if (this->has_right_geometry_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::right_geometry_request(this), output);
  }

  // .epl.protobuf.OperatorType operator = 7;
  if (this->operator_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->operator_(), output);
  }

  // .epl.protobuf.Encoding result_encoding = 8;
  if (this->result_encoding() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->result_encoding(), output);
  }

  // .epl.protobuf.SpatialReferenceData operation_sr = 9;
  if (this->has_operation_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::operation_sr(this), output);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 10;
  if (this->has_result_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::result_sr(this), output);
  }

  // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
  if (this->has_buffer_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::buffer_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
  if (this->has_convex_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::convex_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
  if (this->has_relate_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::relate_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
  if (this->has_random_points_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::random_points_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
  if (this->has_generalize_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::generalize_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
  if (this->has_intersection_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::intersection_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
  if (this->has_offset_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::offset_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
  if (this->has_cut_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::cut_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
  if (this->has_clip_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::clip_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
  if (this->has_densify_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::densify_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
  if (this->has_simplify_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::simplify_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
  if (this->has_generalize_by_area_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::generalize_by_area_params(this), output);
  }

  // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
  if (this->has_affine_transform_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::affine_transform_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::geometry(this), target);
  }

  // .epl.protobuf.GeometryData left_geometry = 2;
  if (this->has_left_geometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::left_geometry(this), target);
  }

  // .epl.protobuf.GeometryRequest geometry_request = 3;
  if (this->has_geometry_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::geometry_request(this), target);
  }

  // .epl.protobuf.GeometryRequest left_geometry_request = 4;
  if (this->has_left_geometry_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::left_geometry_request(this), target);
  }

  // .epl.protobuf.GeometryData right_geometry = 5;
  if (this->has_right_geometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::right_geometry(this), target);
  }

  // .epl.protobuf.GeometryRequest right_geometry_request = 6;
  if (this->has_right_geometry_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::right_geometry_request(this), target);
  }

  // .epl.protobuf.OperatorType operator = 7;
  if (this->operator_() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->operator_(), target);
  }

  // .epl.protobuf.Encoding result_encoding = 8;
  if (this->result_encoding() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->result_encoding(), target);
  }

  // .epl.protobuf.SpatialReferenceData operation_sr = 9;
  if (this->has_operation_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::operation_sr(this), target);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 10;
  if (this->has_result_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::result_sr(this), target);
  }

  // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
  if (this->has_buffer_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::buffer_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
  if (this->has_convex_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::convex_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
  if (this->has_relate_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::relate_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
  if (this->has_random_points_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::random_points_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
  if (this->has_generalize_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::generalize_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
  if (this->has_intersection_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::intersection_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
  if (this->has_offset_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::offset_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
  if (this->has_cut_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::cut_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
  if (this->has_clip_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::clip_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
  if (this->has_densify_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::densify_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
  if (this->has_simplify_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::simplify_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
  if (this->has_generalize_by_area_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::generalize_by_area_params(this), target);
  }

  // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
  if (this->has_affine_transform_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::affine_transform_params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryRequest)
  return target;
}

size_t GeometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // .epl.protobuf.GeometryData left_geometry = 2;
  if (this->has_left_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_geometry_);
  }

  // .epl.protobuf.GeometryRequest geometry_request = 3;
  if (this->has_geometry_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_request_);
  }

  // .epl.protobuf.GeometryRequest left_geometry_request = 4;
  if (this->has_left_geometry_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_geometry_request_);
  }

  // .epl.protobuf.GeometryData right_geometry = 5;
  if (this->has_right_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_geometry_);
  }

  // .epl.protobuf.GeometryRequest right_geometry_request = 6;
  if (this->has_right_geometry_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_geometry_request_);
  }

  // .epl.protobuf.SpatialReferenceData operation_sr = 9;
  if (this->has_operation_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_sr_);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 10;
  if (this->has_result_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_sr_);
  }

  // .epl.protobuf.GeometryRequest.BufferParams buffer_params = 11;
  if (this->has_buffer_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_params_);
  }

  // .epl.protobuf.GeometryRequest.ConvexParams convex_params = 12;
  if (this->has_convex_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convex_params_);
  }

  // .epl.protobuf.GeometryRequest.RelateParams relate_params = 13;
  if (this->has_relate_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relate_params_);
  }

  // .epl.protobuf.GeometryRequest.RandomPointsParams random_points_params = 14;
  if (this->has_random_points_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *random_points_params_);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeParams generalize_params = 15;
  if (this->has_generalize_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generalize_params_);
  }

  // .epl.protobuf.GeometryRequest.IntersectionParams intersection_params = 16;
  if (this->has_intersection_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intersection_params_);
  }

  // .epl.protobuf.GeometryRequest.OffsetParams offset_params = 17;
  if (this->has_offset_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_params_);
  }

  // .epl.protobuf.GeometryRequest.CutParams cut_params = 18;
  if (this->has_cut_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cut_params_);
  }

  // .epl.protobuf.GeometryRequest.ClipParams clip_params = 19;
  if (this->has_clip_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clip_params_);
  }

  // .epl.protobuf.GeometryRequest.DensifyParams densify_params = 20;
  if (this->has_densify_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *densify_params_);
  }

  // .epl.protobuf.GeometryRequest.SimplifyParams simplify_params = 21;
  if (this->has_simplify_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simplify_params_);
  }

  // .epl.protobuf.GeometryRequest.GeneralizeByAreaParams generalize_by_area_params = 22;
  if (this->has_generalize_by_area_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generalize_by_area_params_);
  }

  // .epl.protobuf.GeometryRequest.AffineTransformParams affine_transform_params = 23;
  if (this->has_affine_transform_params()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affine_transform_params_);
  }

  // .epl.protobuf.OperatorType operator = 7;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operator_());
  }

  // .epl.protobuf.Encoding result_encoding = 8;
  if (this->result_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result_encoding());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryRequest)
    MergeFrom(*source);
  }
}

void GeometryRequest::MergeFrom(const GeometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geometry()) {
    mutable_geometry()->::epl::protobuf::GeometryData::MergeFrom(from.geometry());
  }
  if (from.has_left_geometry()) {
    mutable_left_geometry()->::epl::protobuf::GeometryData::MergeFrom(from.left_geometry());
  }
  if (from.has_geometry_request()) {
    mutable_geometry_request()->::epl::protobuf::GeometryRequest::MergeFrom(from.geometry_request());
  }
  if (from.has_left_geometry_request()) {
    mutable_left_geometry_request()->::epl::protobuf::GeometryRequest::MergeFrom(from.left_geometry_request());
  }
  if (from.has_right_geometry()) {
    mutable_right_geometry()->::epl::protobuf::GeometryData::MergeFrom(from.right_geometry());
  }
  if (from.has_right_geometry_request()) {
    mutable_right_geometry_request()->::epl::protobuf::GeometryRequest::MergeFrom(from.right_geometry_request());
  }
  if (from.has_operation_sr()) {
    mutable_operation_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.operation_sr());
  }
  if (from.has_result_sr()) {
    mutable_result_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.result_sr());
  }
  if (from.has_buffer_params()) {
    mutable_buffer_params()->::epl::protobuf::GeometryRequest_BufferParams::MergeFrom(from.buffer_params());
  }
  if (from.has_convex_params()) {
    mutable_convex_params()->::epl::protobuf::GeometryRequest_ConvexParams::MergeFrom(from.convex_params());
  }
  if (from.has_relate_params()) {
    mutable_relate_params()->::epl::protobuf::GeometryRequest_RelateParams::MergeFrom(from.relate_params());
  }
  if (from.has_random_points_params()) {
    mutable_random_points_params()->::epl::protobuf::GeometryRequest_RandomPointsParams::MergeFrom(from.random_points_params());
  }
  if (from.has_generalize_params()) {
    mutable_generalize_params()->::epl::protobuf::GeometryRequest_GeneralizeParams::MergeFrom(from.generalize_params());
  }
  if (from.has_intersection_params()) {
    mutable_intersection_params()->::epl::protobuf::GeometryRequest_IntersectionParams::MergeFrom(from.intersection_params());
  }
  if (from.has_offset_params()) {
    mutable_offset_params()->::epl::protobuf::GeometryRequest_OffsetParams::MergeFrom(from.offset_params());
  }
  if (from.has_cut_params()) {
    mutable_cut_params()->::epl::protobuf::GeometryRequest_CutParams::MergeFrom(from.cut_params());
  }
  if (from.has_clip_params()) {
    mutable_clip_params()->::epl::protobuf::GeometryRequest_ClipParams::MergeFrom(from.clip_params());
  }
  if (from.has_densify_params()) {
    mutable_densify_params()->::epl::protobuf::GeometryRequest_DensifyParams::MergeFrom(from.densify_params());
  }
  if (from.has_simplify_params()) {
    mutable_simplify_params()->::epl::protobuf::GeometryRequest_SimplifyParams::MergeFrom(from.simplify_params());
  }
  if (from.has_generalize_by_area_params()) {
    mutable_generalize_by_area_params()->::epl::protobuf::GeometryRequest_GeneralizeByAreaParams::MergeFrom(from.generalize_by_area_params());
  }
  if (from.has_affine_transform_params()) {
    mutable_affine_transform_params()->::epl::protobuf::GeometryRequest_AffineTransformParams::MergeFrom(from.affine_transform_params());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
  if (from.result_encoding() != 0) {
    set_result_encoding(from.result_encoding());
  }
}

void GeometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryRequest::CopyFrom(const GeometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryRequest::IsInitialized() const {
  return true;
}

void GeometryRequest::Swap(GeometryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryRequest::InternalSwap(GeometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(left_geometry_, other->left_geometry_);
  swap(geometry_request_, other->geometry_request_);
  swap(left_geometry_request_, other->left_geometry_request_);
  swap(right_geometry_, other->right_geometry_);
  swap(right_geometry_request_, other->right_geometry_request_);
  swap(operation_sr_, other->operation_sr_);
  swap(result_sr_, other->result_sr_);
  swap(buffer_params_, other->buffer_params_);
  swap(convex_params_, other->convex_params_);
  swap(relate_params_, other->relate_params_);
  swap(random_points_params_, other->random_points_params_);
  swap(generalize_params_, other->generalize_params_);
  swap(intersection_params_, other->intersection_params_);
  swap(offset_params_, other->offset_params_);
  swap(cut_params_, other->cut_params_);
  swap(clip_params_, other->clip_params_);
  swap(densify_params_, other->densify_params_);
  swap(simplify_params_, other->simplify_params_);
  swap(generalize_by_area_params_, other->generalize_by_area_params_);
  swap(affine_transform_params_, other->affine_transform_params_);
  swap(operator__, other->operator__);
  swap(result_encoding_, other->result_encoding_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeodeticInverse::InitAsDefaultInstance() {
}
class GeodeticInverse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeodeticInverse::kAz12FieldNumber;
const int GeodeticInverse::kAz21FieldNumber;
const int GeodeticInverse::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeodeticInverse::GeodeticInverse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeodeticInverse)
}
GeodeticInverse::GeodeticInverse(const GeodeticInverse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&az12_, &from.az12_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeodeticInverse)
}

void GeodeticInverse::SharedCtor() {
  ::memset(&az12_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
}

GeodeticInverse::~GeodeticInverse() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeodeticInverse)
  SharedDtor();
}

void GeodeticInverse::SharedDtor() {
}

void GeodeticInverse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeodeticInverse& GeodeticInverse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeodeticInverse_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeodeticInverse::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeodeticInverse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&az12_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&az12_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeodeticInverse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double az12 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          az12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double az21 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          az21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeodeticInverse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeodeticInverse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double az12 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &az12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double az21 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &az21_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeodeticInverse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeodeticInverse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeodeticInverse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeodeticInverse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double az12 = 1;
  if (!(this->az12() <= 0 && this->az12() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->az12(), output);
  }

  // double az21 = 2;
  if (!(this->az21() <= 0 && this->az21() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->az21(), output);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeodeticInverse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeodeticInverse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeodeticInverse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double az12 = 1;
  if (!(this->az12() <= 0 && this->az12() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->az12(), target);
  }

  // double az21 = 2;
  if (!(this->az21() <= 0 && this->az21() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->az21(), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeodeticInverse)
  return target;
}

size_t GeodeticInverse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeodeticInverse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double az12 = 1;
  if (!(this->az12() <= 0 && this->az12() >= 0)) {
    total_size += 1 + 8;
  }

  // double az21 = 2;
  if (!(this->az21() <= 0 && this->az21() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeodeticInverse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeodeticInverse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeodeticInverse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeodeticInverse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeodeticInverse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeodeticInverse)
    MergeFrom(*source);
  }
}

void GeodeticInverse::MergeFrom(const GeodeticInverse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeodeticInverse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.az12() <= 0 && from.az12() >= 0)) {
    set_az12(from.az12());
  }
  if (!(from.az21() <= 0 && from.az21() >= 0)) {
    set_az21(from.az21());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
}

void GeodeticInverse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeodeticInverse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeodeticInverse::CopyFrom(const GeodeticInverse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeodeticInverse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeodeticInverse::IsInitialized() const {
  return true;
}

void GeodeticInverse::Swap(GeodeticInverse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeodeticInverse::InternalSwap(GeodeticInverse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(az12_, other->az12_);
  swap(az21_, other->az21_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeodeticInverse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GeometryResponse_RelateMapEntry_DoNotUse::GeometryResponse_RelateMapEntry_DoNotUse() {}
GeometryResponse_RelateMapEntry_DoNotUse::GeometryResponse_RelateMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GeometryResponse_RelateMapEntry_DoNotUse::MergeFrom(const GeometryResponse_RelateMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GeometryResponse_RelateMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GeometryResponse_RelateMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GeometryResponse::InitAsDefaultInstance() {
  ::epl::protobuf::_GeometryResponse_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::epl::protobuf::GeometryData*>(
      ::epl::protobuf::GeometryData::internal_default_instance());
  ::epl::protobuf::_GeometryResponse_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::epl::protobuf::EnvelopeData*>(
      ::epl::protobuf::EnvelopeData::internal_default_instance());
  ::epl::protobuf::_GeometryResponse_default_instance_._instance.get_mutable()->geodetic_inverse_ = const_cast< ::epl::protobuf::GeodeticInverse*>(
      ::epl::protobuf::GeodeticInverse::internal_default_instance());
}
class GeometryResponse::HasBitSetters {
 public:
  static const ::epl::protobuf::GeometryData& geometry(const GeometryResponse* msg);
  static const ::epl::protobuf::EnvelopeData& envelope(const GeometryResponse* msg);
  static const ::epl::protobuf::GeodeticInverse& geodetic_inverse(const GeometryResponse* msg);
};

const ::epl::protobuf::GeometryData&
GeometryResponse::HasBitSetters::geometry(const GeometryResponse* msg) {
  return *msg->geometry_;
}
const ::epl::protobuf::EnvelopeData&
GeometryResponse::HasBitSetters::envelope(const GeometryResponse* msg) {
  return *msg->envelope_;
}
const ::epl::protobuf::GeodeticInverse&
GeometryResponse::HasBitSetters::geodetic_inverse(const GeometryResponse* msg) {
  return *msg->geodetic_inverse_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryResponse::kGeometryFieldNumber;
const int GeometryResponse::kSpatialRelationshipFieldNumber;
const int GeometryResponse::kMeasureFieldNumber;
const int GeometryResponse::kRelateMapFieldNumber;
const int GeometryResponse::kEnvelopeFieldNumber;
const int GeometryResponse::kGeodeticInverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryResponse::GeometryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.GeometryResponse)
}
GeometryResponse::GeometryResponse(const GeometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relate_map_.MergeFrom(from.relate_map_);
  if (from.has_geometry()) {
    geometry_ = new ::epl::protobuf::GeometryData(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from.has_envelope()) {
    envelope_ = new ::epl::protobuf::EnvelopeData(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  if (from.has_geodetic_inverse()) {
    geodetic_inverse_ = new ::epl::protobuf::GeodeticInverse(*from.geodetic_inverse_);
  } else {
    geodetic_inverse_ = nullptr;
  }
  ::memcpy(&measure_, &from.measure_,
    static_cast<size_t>(reinterpret_cast<char*>(&spatial_relationship_) -
    reinterpret_cast<char*>(&measure_)) + sizeof(spatial_relationship_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.GeometryResponse)
}

void GeometryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto.base);
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spatial_relationship_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(spatial_relationship_));
}

GeometryResponse::~GeometryResponse() {
  // @@protoc_insertion_point(destructor:epl.protobuf.GeometryResponse)
  SharedDtor();
}

void GeometryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete geodetic_inverse_;
}

void GeometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryResponse& GeometryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryResponse_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void GeometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.GeometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relate_map_.Clear();
  if (GetArenaNoVirtual() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geodetic_inverse_ != nullptr) {
    delete geodetic_inverse_;
  }
  geodetic_inverse_ = nullptr;
  ::memset(&measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spatial_relationship_) -
      reinterpret_cast<char*>(&measure_)) + sizeof(spatial_relationship_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.GeometryData geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spatial_relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          spatial_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double measure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          measure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<int64, bool> relate_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relate_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.EnvelopeData envelope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_envelope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_geodetic_inverse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeometryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.GeometryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .epl.protobuf.GeometryData geometry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool spatial_relationship = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spatial_relationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double measure = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, bool> relate_map = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          GeometryResponse_RelateMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GeometryResponse_RelateMapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, bool,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool > > parser(&relate_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.EnvelopeData envelope = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geodetic_inverse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.GeometryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.GeometryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeometryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.GeometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::geometry(this), output);
  }

  // bool spatial_relationship = 2;
  if (this->spatial_relationship() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->spatial_relationship(), output);
  }

  // double measure = 3;
  if (!(this->measure() <= 0 && this->measure() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->measure(), output);
  }

  // map<int64, bool> relate_map = 4;
  if (!this->relate_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->relate_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->relate_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->relate_map().begin();
          it != this->relate_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GeometryResponse_RelateMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->relate_map().begin();
          it != this->relate_map().end(); ++it) {
        GeometryResponse_RelateMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
      }
    }
  }

  // .epl.protobuf.EnvelopeData envelope = 5;
  if (this->has_envelope()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::envelope(this), output);
  }

  // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
  if (this->has_geodetic_inverse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::geodetic_inverse(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.GeometryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.GeometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::geometry(this), target);
  }

  // bool spatial_relationship = 2;
  if (this->spatial_relationship() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->spatial_relationship(), target);
  }

  // double measure = 3;
  if (!(this->measure() <= 0 && this->measure() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->measure(), target);
  }

  // map<int64, bool> relate_map = 4;
  if (!this->relate_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->relate_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->relate_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->relate_map().begin();
          it != this->relate_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GeometryResponse_RelateMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
          it = this->relate_map().begin();
          it != this->relate_map().end(); ++it) {
        GeometryResponse_RelateMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
      }
    }
  }

  // .epl.protobuf.EnvelopeData envelope = 5;
  if (this->has_envelope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::envelope(this), target);
  }

  // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
  if (this->has_geodetic_inverse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::geodetic_inverse(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.GeometryResponse)
  return target;
}

size_t GeometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.GeometryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, bool> relate_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->relate_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, bool >::const_iterator
      it = this->relate_map().begin();
      it != this->relate_map().end(); ++it) {
    GeometryResponse_RelateMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // .epl.protobuf.GeometryData geometry = 1;
  if (this->has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  // .epl.protobuf.EnvelopeData envelope = 5;
  if (this->has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .epl.protobuf.GeodeticInverse geodetic_inverse = 6;
  if (this->has_geodetic_inverse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geodetic_inverse_);
  }

  // double measure = 3;
  if (!(this->measure() <= 0 && this->measure() >= 0)) {
    total_size += 1 + 8;
  }

  // bool spatial_relationship = 2;
  if (this->spatial_relationship() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.GeometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.GeometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.GeometryResponse)
    MergeFrom(*source);
  }
}

void GeometryResponse::MergeFrom(const GeometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.GeometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relate_map_.MergeFrom(from.relate_map_);
  if (from.has_geometry()) {
    mutable_geometry()->::epl::protobuf::GeometryData::MergeFrom(from.geometry());
  }
  if (from.has_envelope()) {
    mutable_envelope()->::epl::protobuf::EnvelopeData::MergeFrom(from.envelope());
  }
  if (from.has_geodetic_inverse()) {
    mutable_geodetic_inverse()->::epl::protobuf::GeodeticInverse::MergeFrom(from.geodetic_inverse());
  }
  if (!(from.measure() <= 0 && from.measure() >= 0)) {
    set_measure(from.measure());
  }
  if (from.spatial_relationship() != 0) {
    set_spatial_relationship(from.spatial_relationship());
  }
}

void GeometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.GeometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryResponse::CopyFrom(const GeometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.GeometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryResponse::IsInitialized() const {
  return true;
}

void GeometryResponse::Swap(GeometryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryResponse::InternalSwap(GeometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  relate_map_.Swap(&other->relate_map_);
  swap(geometry_, other->geometry_);
  swap(envelope_, other->envelope_);
  swap(geodetic_inverse_, other->geodetic_inverse_);
  swap(measure_, other->measure_);
  swap(spatial_relationship_, other->spatial_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileRequestChunk::InitAsDefaultInstance() {
  ::epl::protobuf::_FileRequestChunk_default_instance_._instance.get_mutable()->nested_request_ = const_cast< ::epl::protobuf::GeometryRequest*>(
      ::epl::protobuf::GeometryRequest::internal_default_instance());
  ::epl::protobuf::_FileRequestChunk_default_instance_._instance.get_mutable()->input_sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
  ::epl::protobuf::_FileRequestChunk_default_instance_._instance.get_mutable()->result_sr_ = const_cast< ::epl::protobuf::SpatialReferenceData*>(
      ::epl::protobuf::SpatialReferenceData::internal_default_instance());
}
class FileRequestChunk::HasBitSetters {
 public:
  static const ::epl::protobuf::GeometryRequest& nested_request(const FileRequestChunk* msg);
  static const ::epl::protobuf::SpatialReferenceData& input_sr(const FileRequestChunk* msg);
  static const ::epl::protobuf::SpatialReferenceData& result_sr(const FileRequestChunk* msg);
};

const ::epl::protobuf::GeometryRequest&
FileRequestChunk::HasBitSetters::nested_request(const FileRequestChunk* msg) {
  return *msg->nested_request_;
}
const ::epl::protobuf::SpatialReferenceData&
FileRequestChunk::HasBitSetters::input_sr(const FileRequestChunk* msg) {
  return *msg->input_sr_;
}
const ::epl::protobuf::SpatialReferenceData&
FileRequestChunk::HasBitSetters::result_sr(const FileRequestChunk* msg) {
  return *msg->result_sr_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequestChunk::kNestedRequestFieldNumber;
const int FileRequestChunk::kResultEncodingTypeFieldNumber;
const int FileRequestChunk::kInputSrFieldNumber;
const int FileRequestChunk::kResultSrFieldNumber;
const int FileRequestChunk::kDataFieldNumber;
const int FileRequestChunk::kSizeFieldNumber;
const int FileRequestChunk::kOffsetFieldNumber;
const int FileRequestChunk::kFileNameFieldNumber;
const int FileRequestChunk::kIsLastChunkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequestChunk::FileRequestChunk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:epl.protobuf.FileRequestChunk)
}
FileRequestChunk::FileRequestChunk(const FileRequestChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.has_nested_request()) {
    nested_request_ = new ::epl::protobuf::GeometryRequest(*from.nested_request_);
  } else {
    nested_request_ = nullptr;
  }
  if (from.has_input_sr()) {
    input_sr_ = new ::epl::protobuf::SpatialReferenceData(*from.input_sr_);
  } else {
    input_sr_ = nullptr;
  }
  if (from.has_result_sr()) {
    result_sr_ = new ::epl::protobuf::SpatialReferenceData(*from.result_sr_);
  } else {
    result_sr_ = nullptr;
  }
  ::memcpy(&result_encoding_type_, &from.result_encoding_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&result_encoding_type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:epl.protobuf.FileRequestChunk)
}

void FileRequestChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&nested_request_)) + sizeof(offset_));
}

FileRequestChunk::~FileRequestChunk() {
  // @@protoc_insertion_point(destructor:epl.protobuf.FileRequestChunk)
  SharedDtor();
}

void FileRequestChunk::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_request_;
  if (this != internal_default_instance()) delete input_sr_;
  if (this != internal_default_instance()) delete result_sr_;
}

void FileRequestChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRequestChunk& FileRequestChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileRequestChunk_epl_2fprotobuf_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void FileRequestChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:epl.protobuf.FileRequestChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && nested_request_ != nullptr) {
    delete nested_request_;
  }
  nested_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_sr_ != nullptr) {
    delete input_sr_;
  }
  input_sr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && result_sr_ != nullptr) {
    delete result_sr_;
  }
  result_sr_ = nullptr;
  ::memset(&result_encoding_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&result_encoding_type_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileRequestChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .epl.protobuf.GeometryRequest nested_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_nested_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.Encoding result_encoding_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result_encoding_type(static_cast<::epl::protobuf::Encoding>(val));
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData input_sr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_input_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .epl.protobuf.SpatialReferenceData result_sr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_result_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_name(), ptr, ctx, "epl.protobuf.FileRequestChunk.file_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_last_chunk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_last_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileRequestChunk::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:epl.protobuf.FileRequestChunk)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .epl.protobuf.GeometryRequest nested_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nested_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.Encoding result_encoding_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_encoding_type(static_cast< ::epl::protobuf::Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData input_sr = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .epl.protobuf.SpatialReferenceData result_sr = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result_sr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "epl.protobuf.FileRequestChunk.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last_chunk = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:epl.protobuf.FileRequestChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:epl.protobuf.FileRequestChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileRequestChunk::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:epl.protobuf.FileRequestChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryRequest nested_request = 1;
  if (this->has_nested_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::nested_request(this), output);
  }

  // .epl.protobuf.Encoding result_encoding_type = 2;
  if (this->result_encoding_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result_encoding_type(), output);
  }

  // .epl.protobuf.SpatialReferenceData input_sr = 3;
  if (this->has_input_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::input_sr(this), output);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 5;
  if (this->has_result_sr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::result_sr(this), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // int64 size = 7;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->size(), output);
  }

  // int64 offset = 8;
  if (this->offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->offset(), output);
  }

  // string file_name = 9;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.FileRequestChunk.file_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->file_name(), output);
  }

  // bool is_last_chunk = 10;
  if (this->is_last_chunk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->is_last_chunk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:epl.protobuf.FileRequestChunk)
}

::PROTOBUF_NAMESPACE_ID::uint8* FileRequestChunk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:epl.protobuf.FileRequestChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .epl.protobuf.GeometryRequest nested_request = 1;
  if (this->has_nested_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::nested_request(this), target);
  }

  // .epl.protobuf.Encoding result_encoding_type = 2;
  if (this->result_encoding_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_encoding_type(), target);
  }

  // .epl.protobuf.SpatialReferenceData input_sr = 3;
  if (this->has_input_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::input_sr(this), target);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 5;
  if (this->has_result_sr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::result_sr(this), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // int64 size = 7;
  if (this->size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->size(), target);
  }

  // int64 offset = 8;
  if (this->offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->offset(), target);
  }

  // string file_name = 9;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "epl.protobuf.FileRequestChunk.file_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->file_name(), target);
  }

  // bool is_last_chunk = 10;
  if (this->is_last_chunk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->is_last_chunk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:epl.protobuf.FileRequestChunk)
  return target;
}

size_t FileRequestChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:epl.protobuf.FileRequestChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string file_name = 9;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // .epl.protobuf.GeometryRequest nested_request = 1;
  if (this->has_nested_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_request_);
  }

  // .epl.protobuf.SpatialReferenceData input_sr = 3;
  if (this->has_input_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_sr_);
  }

  // .epl.protobuf.SpatialReferenceData result_sr = 5;
  if (this->has_result_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_sr_);
  }

  // .epl.protobuf.Encoding result_encoding_type = 2;
  if (this->result_encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result_encoding_type());
  }

  // bool is_last_chunk = 10;
  if (this->is_last_chunk() != 0) {
    total_size += 1 + 1;
  }

  // int64 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // int64 offset = 8;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequestChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:epl.protobuf.FileRequestChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequestChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileRequestChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:epl.protobuf.FileRequestChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:epl.protobuf.FileRequestChunk)
    MergeFrom(*source);
  }
}

void FileRequestChunk::MergeFrom(const FileRequestChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:epl.protobuf.FileRequestChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.has_nested_request()) {
    mutable_nested_request()->::epl::protobuf::GeometryRequest::MergeFrom(from.nested_request());
  }
  if (from.has_input_sr()) {
    mutable_input_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.input_sr());
  }
  if (from.has_result_sr()) {
    mutable_result_sr()->::epl::protobuf::SpatialReferenceData::MergeFrom(from.result_sr());
  }
  if (from.result_encoding_type() != 0) {
    set_result_encoding_type(from.result_encoding_type());
  }
  if (from.is_last_chunk() != 0) {
    set_is_last_chunk(from.is_last_chunk());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void FileRequestChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:epl.protobuf.FileRequestChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequestChunk::CopyFrom(const FileRequestChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:epl.protobuf.FileRequestChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequestChunk::IsInitialized() const {
  return true;
}

void FileRequestChunk::Swap(FileRequestChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequestChunk::InternalSwap(FileRequestChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nested_request_, other->nested_request_);
  swap(input_sr_, other->input_sr_);
  swap(result_sr_, other->result_sr_);
  swap(result_encoding_type_, other->result_encoding_type_);
  swap(is_last_chunk_, other->is_last_chunk_);
  swap(size_, other->size_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequestChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace epl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryData* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryData >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::SpatialReferenceData_Custom* Arena::CreateMaybeMessage< ::epl::protobuf::SpatialReferenceData_Custom >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::SpatialReferenceData_Custom >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::SpatialReferenceData* Arena::CreateMaybeMessage< ::epl::protobuf::SpatialReferenceData >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::SpatialReferenceData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::EnvelopeData* Arena::CreateMaybeMessage< ::epl::protobuf::EnvelopeData >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::EnvelopeData >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_BufferParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_BufferParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_BufferParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_GeodeticBufferParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_GeodeticBufferParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_GeodeticBufferParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_ConvexParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_ConvexParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_ConvexParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_RelateParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_RelateParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_RelateParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_RandomPointsParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_RandomPointsParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_RandomPointsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_GeneralizeParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_GeneralizeParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_GeneralizeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_GeneralizeByAreaParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_IntersectionParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_IntersectionParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_IntersectionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_OffsetParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_OffsetParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_OffsetParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_CutParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_CutParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_CutParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_ClipParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_ClipParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_ClipParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_DensifyParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_DensifyParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_DensifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_SimplifyParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_SimplifyParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_SimplifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest_AffineTransformParams* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest_AffineTransformParams >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest_AffineTransformParams >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryRequest* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeodeticInverse* Arena::CreateMaybeMessage< ::epl::protobuf::GeodeticInverse >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeodeticInverse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryResponse_RelateMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::GeometryResponse* Arena::CreateMaybeMessage< ::epl::protobuf::GeometryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::GeometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::epl::protobuf::FileRequestChunk* Arena::CreateMaybeMessage< ::epl::protobuf::FileRequestChunk >(Arena* arena) {
  return Arena::CreateInternal< ::epl::protobuf::FileRequestChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
